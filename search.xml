<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Java 中的并发工具类]]></title>
      <url>/juc-utils.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><p><code>java.util.concurrent</code> 下提供了一些辅助类来帮助我们在并发编程的设计。</p><p>学习了 AQS 后再了解这些工具类，就非常简单了。</p><p><em>jdk 1.8</em></p><a id="more"></a><h3 id="等待多线程完成的CountDownLatch"><a href="#等待多线程完成的CountDownLatch" class="headerlink" title="等待多线程完成的CountDownLatch"></a>等待多线程完成的CountDownLatch</h3><p>在 <code>concurrent</code> 包下面提供了 <code>CountDownLatch</code> 类，它提供了计数器的功能，能够实现让一个线程等待其他线程执行完毕才能进入运行状态。</p><h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><ol><li><p>首先看下最关键的地方它的自定义同步器的实现，非常简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">4982264981922014374L</span>;</span><br><span class="line"><span class="comment">// 1. 初始化 state 资源变量</span></span><br><span class="line">      Sync(<span class="keyword">int</span> count) &#123;</span><br><span class="line">          setState(count);</span><br><span class="line">      &#125;</span><br><span class="line">   </span><br><span class="line">      <span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> getState();</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">// 尝试获取贡献模式下的资源，</span></span><br><span class="line">      <span class="comment">// 定义返回值小于 0 的时候获取资源失败</span></span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> (getState() == <span class="number">0</span>) ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   </span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryReleaseShared</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line">          <span class="comment">// Decrement count; signal when transition to zero</span></span><br><span class="line">          <span class="comment">// 自旋。</span></span><br><span class="line">          <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">              <span class="keyword">int</span> c = getState();</span><br><span class="line">              <span class="keyword">if</span> (c == <span class="number">0</span>)</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">              <span class="keyword">int</span> nextc = c - <span class="number">1</span>; <span class="comment">// 每次释放资源，硬编码减一个资源</span></span><br><span class="line">              <span class="keyword">if</span> (compareAndSetState(c, nextc))</span><br><span class="line">                  <span class="keyword">return</span> nextc == <span class="number">0</span>; <span class="comment">// 知道为 0 的时候才释放成功，也就是所有线程必须都执行释放操作说明才释放成功。</span></span><br><span class="line">           </span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>在这里查看构造器的源码得知，<code>CountDownLatch</code> 内部使用的是 内部类<code>Sync</code> 继承了 <code>AQS</code> ，将我们传入进来的 <code>count</code> 数值当作 AQS state。感觉这个是不是和可重入锁实现是一样的，只不过开始指定了线程获取的锁的次数。</p><p>在上面我也发现了几个特点，第一次看这个代码其实还是不好理解，因为它相对前面的 AQS 和 TwinsLock 就是一个反着设计的代码：</p><ol><li>首先获取资源的时候，线程全部都是先进入等待队列，而且在这一步骤中，不改变 state 资源的数量；</li><li>释放资源的时候，每次固定减少一个资源，直到资源为 0 的时候才表示释放资源成功，所以加入我们有 5 个资源，但是只有四个线程执行，如果只释放四次（总共执行 countDown 四次），就永远也释放不成功，await 一直在阻塞。</li><li>经过上面的分析，发现了 state 的资源数量每次进行 <code>countDown</code> 都去减少一个，没有方法去增加数量，所以它是不可逆的，它的计数器是不可以重复使用的。</li></ol></li><li><p>看下 await 的实现，发现它最终实现的是 <code>doAcquireSharedInterruptibly</code> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">// 仔细看这个代码，和前面的共享模式中的 doAcquireShared 方法基本一摸一样，只不过是当它遇到线程中断信号的时候，立刻抛出中断异常，仔细想想也是的，比如，自己在这里等别人吃饭，不想等了，也懒得管别人做什么了，剩下的吃饭的事情也没必要继续下去了。</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doAcquireSharedInterruptibly</span><span class="params">(<span class="keyword">int</span> arg)</span></span></span><br><span class="line"><span class="function">       <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">       <span class="keyword">final</span> Node node = addWaiter(Node.SHARED);</span><br><span class="line">       <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">               <span class="keyword">final</span> Node p = node.predecessor();</span><br><span class="line">               <span class="keyword">if</span> (p == head) &#123;</span><br><span class="line">                   <span class="keyword">int</span> r = tryAcquireShared(arg);</span><br><span class="line">                   <span class="keyword">if</span> (r &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                       setHeadAndPropagate(node, r);</span><br><span class="line">                       p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">                       failed = <span class="keyword">false</span>;</span><br><span class="line">                       <span class="keyword">return</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                   parkAndCheckInterrupt())</span><br><span class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (failed)</span><br><span class="line">               cancelAcquire(node);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">	<span class="comment">// 需要注意的是它重写了尝试获取资源的方法，当资源全部消耗完，才能够让你去获取资源，现在才豁然开朗，await 阻塞的线程就是这么被唤醒的。</span></span><br><span class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> (getState() == <span class="number">0</span>) ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>CountDownLatch允许一个或多个线程等待其他线程完成操作。</p><p>比如经典问题：</p><blockquote><p>有Thread1、Thread2、Thread3、Thread4四条线程分别统计C、D、E、F四个盘的大小，所有线程都统计完毕交给Thread5线程去做汇总，应当如何实现？</p></blockquote><p>这个问题关键就是要知道<strong>四条线程何时执行完。</strong></p><p>下面是我的解决思路：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如有Thread1、Thread2、Thread3、Thread4四条线程分别统计C、D、E、F四个盘的大小，</span></span><br><span class="line"><span class="comment"> * 所有线程都统计完毕交给Thread5线程去做汇总，应当如何实现？</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Created by KronChan on 2018/5/14 17:00.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化计数器，设置总量i，调用一次countDown(）方法后i的值会减1。</span></span><br><span class="line">        <span class="comment">// 在一个线程中如果调用了await()方法，这个线程就会进入到等待的状态，当参数i为0的时候这个线程才继续执行。</span></span><br><span class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">4</span>);</span><br><span class="line">        Runnable thread1 = () -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                System.out.println(<span class="string">"统计 C 盘大小"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 统计完成计数器 -1</span></span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">        &#125;;</span><br><span class="line">        Runnable thread2 = () -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                System.out.println(<span class="string">"统计 D 盘大小"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">        &#125;;</span><br><span class="line">        Runnable thread3 = () -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                System.out.println(<span class="string">"统计 E 盘大小"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">        &#125;;</span><br><span class="line">        Runnable thread4 = () -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">                System.out.println(<span class="string">"统计 F 盘大小"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        ExecutorService pool = Executors.newFixedThreadPool(<span class="number">4</span>);</span><br><span class="line">        pool.execute(thread1);</span><br><span class="line">        pool.execute(thread2);</span><br><span class="line">        pool.execute(thread3);</span><br><span class="line">        pool.execute(thread4);</span><br><span class="line">        <span class="comment">// 等待 i 值为 0 ，等待四条线程执行完毕。</span></span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        System.out.println(<span class="string">"统计完成"</span>);</span><br><span class="line">        pool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="同步屏障CyclicBarrier"><a href="#同步屏障CyclicBarrier" class="headerlink" title="同步屏障CyclicBarrier"></a>同步屏障CyclicBarrier</h3><p>CyclicBarrier的字面意思是可循环使用（Cyclic）的屏障（Barrier）。它要做的事情是，让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续运行。</p><h4 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h4><h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"><span class="comment">// 线程协作</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Condition trip = lock.newCondition();</span><br><span class="line"><span class="comment">// 必须同时到达barrier的线程个数。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> parties;</span><br><span class="line"><span class="comment">// parties个线程到达barrier时，会执行的动作，会让到达屏障中的任意一个线程去执行这个动作。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Runnable barrierCommand;</span><br><span class="line"><span class="comment">// 控制屏障的循环使用，它是可重复使用的，每次使用CyclicBarrier，本次所有线程同属于一代，即同一个Generation</span></span><br><span class="line"><span class="keyword">private</span> Generation generation = <span class="keyword">new</span> Generation();</span><br><span class="line"> <span class="comment">// 处在等待状态的线程个数。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count;</span><br></pre></td></tr></table></figure><h5 id="主要的方法"><a href="#主要的方法" class="headerlink" title="主要的方法"></a>主要的方法</h5><h6 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CyclicBarrier</span><span class="params">(<span class="keyword">int</span> parties)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(parties, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 构造函数主要实现了，设置一组线程的数量，到达屏障时候的临界点，可以设置到达屏障的时候需要处理的动作，后面屏障允许它们通过。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CyclicBarrier</span><span class="params">(<span class="keyword">int</span> parties, Runnable barrierAction)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (parties &lt;= <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">this</span>.parties = parties;</span><br><span class="line">    <span class="keyword">this</span>.count = parties;</span><br><span class="line">    <span class="keyword">this</span>.barrierCommand = barrierAction;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="await"><a href="#await" class="headerlink" title="await"></a>await</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, BrokenBarrierException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dowait(<span class="keyword">false</span>, <span class="number">0L</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (TimeoutException toe) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Error(toe); <span class="comment">// cannot happen;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">dowait</span><span class="params">(<span class="keyword">boolean</span> timed, <span class="keyword">long</span> nanos)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> InterruptedException, BrokenBarrierException,</span></span><br><span class="line"><span class="function">           TimeoutException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">    <span class="comment">// 独占锁</span></span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 保存当前的generation</span></span><br><span class="line">        <span class="keyword">final</span> Generation g = generation;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// generation broken，不允许使用，则抛出异常。</span></span><br><span class="line">        <span class="keyword">if</span> (g.broken)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BrokenBarrierException();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果当前线程被中断，则通过breakBarrier()终止CyclicBarrier，唤醒CyclicBarrier中所有等待线程。</span></span><br><span class="line">        <span class="keyword">if</span> (Thread.interrupted()) &#123;</span><br><span class="line">            breakBarrier();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 等待的计数器减一</span></span><br><span class="line">       <span class="keyword">int</span> index = --count;</span><br><span class="line">       <span class="comment">// 如果计数器的 count 正好为0， 说明已经有parties个线程到达barrier了。执行预定的Runnable任务后，更新换代，准备下一次使用。</span></span><br><span class="line">       <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;  <span class="comment">// tripped</span></span><br><span class="line">           <span class="keyword">boolean</span> ranAction = <span class="keyword">false</span>;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="comment">// 如果barrierCommand不为null，则执行该动作。</span></span><br><span class="line">               <span class="keyword">final</span> Runnable command = barrierCommand;</span><br><span class="line">               <span class="keyword">if</span> (command != <span class="keyword">null</span>)</span><br><span class="line">                   command.run();</span><br><span class="line">               ranAction = <span class="keyword">true</span>;</span><br><span class="line">               <span class="comment">// 唤醒所有等待线程，并更新generation，准备下一次使用</span></span><br><span class="line">               nextGeneration();</span><br><span class="line">               <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">           &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (!ranAction)</span><br><span class="line">                   breakBarrier();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当前线程一直阻塞，</span></span><br><span class="line">        <span class="comment">// 1. 有parties个线程到达barrier</span></span><br><span class="line">        <span class="comment">// 2. 当前线程被中断</span></span><br><span class="line">        <span class="comment">// 3. 超时</span></span><br><span class="line">        <span class="comment">// 直到上面三者之一发生，就唤醒所有线程继续执行下去</span></span><br><span class="line">        <span class="comment">// 自旋</span></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 如果不是超时等待，则调用awati()进行等待；否则，调用awaitNanos()进行等待。</span></span><br><span class="line">                <span class="keyword">if</span> (!timed)</span><br><span class="line">                    trip.await();</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (nanos &gt; <span class="number">0L</span>)</span><br><span class="line">                    nanos = trip.awaitNanos(nanos);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;</span><br><span class="line">                <span class="comment">// 如果等待过程中，线程被中断，通过breakBarrier()终止CyclicBarrier，唤醒CyclicBarrier中所有等待线</span></span><br><span class="line">                <span class="keyword">if</span> (g == generation &amp;&amp; ! g.broken) &#123;</span><br><span class="line">                    breakBarrier();</span><br><span class="line">                    <span class="keyword">throw</span> ie;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Thread.currentThread().interrupt();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// borken</span></span><br><span class="line">            <span class="keyword">if</span> (g.broken)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BrokenBarrierException();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果generation已经换代，则返回index。</span></span><br><span class="line">            <span class="keyword">if</span> (g != generation)</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 超时，则通过breakBarrier()终止CyclicBarrier，唤醒CyclicBarrier中所有等待线程。</span></span><br><span class="line">            <span class="keyword">if</span> (timed &amp;&amp; nanos &lt;= <span class="number">0L</span>) &#123;</span><br><span class="line">                breakBarrier();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> TimeoutException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock(); <span class="comment">// 释放独占锁</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// barrier被broken后，调用breakBarrier方法，将generation.broken设置为true，并使用signalAll通知所有等待的线程。</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">breakBarrier</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    generation.broken = <span class="keyword">true</span>;</span><br><span class="line">    count = parties;</span><br><span class="line">    trip.signalAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用场景-1"><a href="#使用场景-1" class="headerlink" title="使用场景"></a>使用场景</h4><p>CyclicBarrier可以用于多线程计算数据，最后合并计算结果的场景，然后四条线程又可以分别去干自己的事情了。</p><p>现在我将上面的统计磁盘的任务 <code>CountDownLatch</code> 中改下，统计完统计最终后，每个线程要发出退出信号。</p><p>下面是我的实现代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CyclicBarrierDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] drivers = &#123;<span class="string">"C"</span>, <span class="string">"D"</span>, <span class="string">"E"</span>, <span class="string">"F"</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> length = drivers.length;</span><br><span class="line">        ExecutorService pool = Executors.newFixedThreadPool(length);</span><br><span class="line">        <span class="comment">// 如果线程都到达barrier状态后，会从四个线程中选择一个线程去执行Runnable。</span></span><br><span class="line">        CyclicBarrier cyclicBarrier = <span class="keyword">new</span> CyclicBarrier(length, () -&gt; &#123;</span><br><span class="line">            System.out.printf(<span class="string">"%s 线程告诉你，统计完毕，待继续执行%n"</span>, Thread.currentThread().getName());</span><br><span class="line">        &#125;);</span><br><span class="line">        Stream.of(drivers).forEach((d) -&gt; &#123;</span><br><span class="line">            pool.execute(<span class="keyword">new</span> StatisticsDemo(d, cyclicBarrier));</span><br><span class="line">        &#125;);</span><br><span class="line">        pool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StatisticsDemo</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String driveName;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> CyclicBarrier cyclicBarrier;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">StatisticsDemo</span><span class="params">(String driveName, CyclicBarrier cyclicBarrier)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.driveName = driveName;</span><br><span class="line">            <span class="keyword">this</span>.cyclicBarrier = cyclicBarrier;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep((<span class="keyword">int</span>) (Math.random() * <span class="number">10</span>));</span><br><span class="line">                System.out.printf(<span class="string">"%s 线程统计 %s 盘大小%n"</span>, Thread.currentThread().getName(), driveName);</span><br><span class="line">                cyclicBarrier.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.printf(<span class="string">"%s 准备退出%n"</span>, driveName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span> 线程统计 C 盘大小</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span> 线程统计 D 盘大小</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">3</span> 线程统计 E 盘大小</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">4</span> 线程统计 F 盘大小</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">4</span> 线程告诉你，统计完毕，待继续执行</span><br><span class="line">F 准备退出</span><br><span class="line">E 准备退出</span><br><span class="line">D 准备退出</span><br><span class="line">C 准备退出</span><br></pre></td></tr></table></figure><h3 id="控制并发线程数的Semaphore"><a href="#控制并发线程数的Semaphore" class="headerlink" title="控制并发线程数的Semaphore"></a>控制并发线程数的Semaphore</h3><blockquote><p><code>Semaphore</code>（信号量）是用来控制同时访问特定资源的线程数量（许可证数），它通过协调各个线程，以保证合理的使用公共资源。</p></blockquote><h4 id="源码分析-2"><a href="#源码分析-2" class="headerlink" title="源码分析"></a>源码分析</h4><h5 id="构造函数-1"><a href="#构造函数-1" class="headerlink" title="构造函数"></a>构造函数</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Semaphore</span><span class="params">(<span class="keyword">int</span> permits)</span> </span>&#123;</span><br><span class="line">     sync = <span class="keyword">new</span> NonfairSync(permits);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Semaphore</span><span class="params">(<span class="keyword">int</span> permits, <span class="keyword">boolean</span> fair)</span> </span>&#123;</span><br><span class="line">    sync = fair ? <span class="keyword">new</span> FairSync(permits) : <span class="keyword">new</span> NonfairSync(permits);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具有公平锁的特性，<code>permits</code> 指定许可数量，就是资源数量 <code>state</code>。</p><h5 id="同步器的实现"><a href="#同步器的实现" class="headerlink" title="同步器的实现"></a>同步器的实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1192457210091910933L</span>;</span><br><span class="line"></span><br><span class="line">      Sync(<span class="keyword">int</span> permits) &#123;</span><br><span class="line">          setState(permits);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getPermits</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> getState();</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">// 非公平的方式获取共享锁</span></span><br><span class="line">      <span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">nonfairTryAcquireShared</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">              <span class="comment">// 获取资源数量</span></span><br><span class="line">              <span class="keyword">int</span> available = getState();</span><br><span class="line">              <span class="keyword">int</span> remaining = available - acquires; <span class="comment">// 本次请求获取锁需要的资源的数量</span></span><br><span class="line">              <span class="keyword">if</span> (remaining &lt; <span class="number">0</span> ||</span><br><span class="line">                  compareAndSetState(available, remaining)) <span class="comment">// 如果资源足够，尝试 CAS 获取锁</span></span><br><span class="line">                  <span class="keyword">return</span> remaining;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">// 释放锁</span></span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryReleaseShared</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">              <span class="keyword">int</span> current = getState();</span><br><span class="line">              <span class="keyword">int</span> next = current + releases; <span class="comment">// 释放锁的时候，返还资源</span></span><br><span class="line">              <span class="keyword">if</span> (next &lt; current) <span class="comment">// overflow</span></span><br><span class="line">                  <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum permit count exceeded"</span>);</span><br><span class="line">              <span class="keyword">if</span> (compareAndSetState(current, next)) <span class="comment">// CAS 操作，避免其他的线程也在释放资源</span></span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">// 减少资源数量</span></span><br><span class="line">      <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">reducePermits</span><span class="params">(<span class="keyword">int</span> reductions)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">              <span class="keyword">int</span> current = getState();</span><br><span class="line">              <span class="keyword">int</span> next = current - reductions;</span><br><span class="line">              <span class="keyword">if</span> (next &gt; current) <span class="comment">// underflow</span></span><br><span class="line">                  <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Permit count underflow"</span>);</span><br><span class="line">              <span class="keyword">if</span> (compareAndSetState(current, next))</span><br><span class="line">                  <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">// 清空资源，返回历史资源数量</span></span><br><span class="line">      <span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">drainPermits</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">              <span class="keyword">int</span> current = getState();</span><br><span class="line">              <span class="keyword">if</span> (current == <span class="number">0</span> || compareAndSetState(current, <span class="number">0</span>))</span><br><span class="line">                  <span class="keyword">return</span> current;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * NonFair version</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NonfairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">2694183684443567898L</span>;</span><br><span class="line"></span><br><span class="line">      NonfairSync(<span class="keyword">int</span> permits) &#123;</span><br><span class="line">          <span class="keyword">super</span>(permits);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> nonfairTryAcquireShared(acquires);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Fair version</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2014338818796000944L</span>;</span><br><span class="line"></span><br><span class="line">      FairSync(<span class="keyword">int</span> permits) &#123;</span><br><span class="line">          <span class="keyword">super</span>(permits);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">              <span class="comment">// 同样的公平锁情况下，判断该线程前面有没有线程等待获取锁</span></span><br><span class="line">              <span class="keyword">if</span> (hasQueuedPredecessors())</span><br><span class="line">                  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">              <span class="keyword">int</span> available = getState();</span><br><span class="line">              <span class="keyword">int</span> remaining = available - acquires;</span><br><span class="line">              <span class="keyword">if</span> (remaining &lt; <span class="number">0</span> ||</span><br><span class="line">                  compareAndSetState(available, remaining))</span><br><span class="line">                  <span class="keyword">return</span> remaining;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h5 id="提供其他的方法"><a href="#提供其他的方法" class="headerlink" title="提供其他的方法"></a>提供其他的方法</h5><ul><li><code>availablePermits</code>：获取此信号量中当前可用的许可证数（还能有多少个线程执行）；</li><li><code>drainPermits</code>：立刻使用完所有可用的许可证；</li><li><code>reducePermits</code>：减少相应数量的许可证，是一个 <code>protected</code> 方法；</li><li><code>isFair</code>：是否是公平状态；</li><li><code>hasQueuedThreads</code>：等待队列中是否有线程，等待获取许可证；</li><li><code>getQueueLength</code>：等待队列中等待获取许可证的线程数量；</li><li><code>getQueuedThreads</code>：<code>protected</code> 方法，获取等待队列中的线程。</li></ul><h4 id="使用场景-2"><a href="#使用场景-2" class="headerlink" title="使用场景"></a>使用场景</h4><p><strong><code>Semaphore</code>可以用于做流量控制，特别是公用资源有限的应用场景</strong>，比如我们有五台机器，有十名工人，每个工人需要一台机器才能工作，一名工人工作完了就可以休息了，机器让其他没工作过的工人使用。</p><p>下面是我的实现代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">        Semaphore machines = <span class="keyword">new</span> Semaphore(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Worker(i, machines)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Semaphore machines;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> worker;</span><br><span class="line"></span><br><span class="line">        Worker(<span class="keyword">int</span> worker, Semaphore semaphore) &#123;</span><br><span class="line">            <span class="keyword">this</span>.worker = worker;</span><br><span class="line">            <span class="keyword">this</span>.machines = semaphore;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                machines.acquire();</span><br><span class="line">                System.out.printf(<span class="string">"工人 %d 开始使用机器工作了 %n"</span>, worker);</span><br><span class="line">                TimeUnit.SECONDS.sleep((<span class="keyword">int</span>) (Math.random() * <span class="number">10</span>));</span><br><span class="line">                System.out.printf(<span class="string">"工人 %d 干完活了，让出机器了%n"</span>, worker);</span><br><span class="line">                machines.release();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行一下结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">工人 <span class="number">0</span> 开始使用机器工作了 </span><br><span class="line">工人 <span class="number">4</span> 开始使用机器工作了 </span><br><span class="line">工人 <span class="number">3</span> 开始使用机器工作了 </span><br><span class="line">工人 <span class="number">2</span> 开始使用机器工作了 </span><br><span class="line">工人 <span class="number">1</span> 开始使用机器工作了 </span><br><span class="line">工人 <span class="number">1</span> 干完活了，让出机器了</span><br><span class="line">工人 <span class="number">5</span> 开始使用机器工作了 </span><br><span class="line">工人 <span class="number">5</span> 干完活了，让出机器了</span><br><span class="line">工人 <span class="number">6</span> 开始使用机器工作了 </span><br><span class="line">工人 <span class="number">2</span> 干完活了，让出机器了</span><br><span class="line">工人 <span class="number">7</span> 开始使用机器工作了 </span><br><span class="line">工人 <span class="number">4</span> 干完活了，让出机器了</span><br><span class="line">工人 <span class="number">8</span> 开始使用机器工作了 </span><br><span class="line">工人 <span class="number">0</span> 干完活了，让出机器了</span><br><span class="line">工人 <span class="number">9</span> 开始使用机器工作了 </span><br><span class="line">工人 <span class="number">8</span> 干完活了，让出机器了</span><br><span class="line">工人 <span class="number">6</span> 干完活了，让出机器了</span><br><span class="line">工人 <span class="number">3</span> 干完活了，让出机器了</span><br><span class="line">工人 <span class="number">9</span> 干完活了，让出机器了</span><br><span class="line">工人 <span class="number">7</span> 干完活了，让出机器了</span><br></pre></td></tr></table></figure><p>虽然上面有 10 个工人（线程）一起并发，但是，它同时只有五个工人能够是执行的。</p><h3 id="线程间交换数据的Exchanger"><a href="#线程间交换数据的Exchanger" class="headerlink" title="线程间交换数据的Exchanger"></a>线程间交换数据的Exchanger</h3><p>Exchanger（交换者）是一个用于线程间协作的工具类。Exchanger 用于两个工作线程间的数据交换。</p><p>具体上来说，Exchanger类允许在两个线程之间定义同步点。当两个线程都到达同步点时，他们交换数据结构，因此第一个线程的数据进入到第二个线程中，第二个线程的数据进入到第一个线程中，这要就完成了一个“交易”的环节。</p><h4 id="源码分析-3"><a href="#源码分析-3" class="headerlink" title="源码分析"></a>源码分析</h4><p>源码很难看懂，主要还是</p><p><a href="https://www.jianshu.com/p/c523826b2c94" rel="external nofollow noopener noreferrer" target="_blank">【死磕Java并发】—–J.U.C之并发工具类：Exchanger</a></p><h4 id="使用场景-3"><a href="#使用场景-3" class="headerlink" title="使用场景"></a>使用场景</h4><p><strong>Exchanger 可以用于遗传算法</strong>。遗传算法里需要选出两个人作为交配对象，这时候会交换两人的数据。</p><p>下面做一个卖书买书的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExchangerDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Exchanger&lt;String&gt; EXCHANGER = <span class="keyword">new</span> Exchanger&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ExecutorService POOLS = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        POOLS.execute(() -&gt; &#123;</span><br><span class="line">            String bookName = <span class="string">"浮生六记"</span>;</span><br><span class="line">            System.out.printf(<span class="string">"饭饭要卖一本%s。%n"</span>, bookName);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                String pay = EXCHANGER.exchange(bookName);</span><br><span class="line">                System.out.printf(<span class="string">"饭饭卖出一本%s赚了%s￥。%n"</span>, bookName, pay);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">"》》》》》》》》饭饭先到了交易地点 睡了 5 s，七巧来了"</span>);</span><br><span class="line">        System.out.println(<span class="string">"》》》》》》》》准备交易"</span>);</span><br><span class="line"></span><br><span class="line">        POOLS.execute(() -&gt; &#123;</span><br><span class="line">            String pay = <span class="string">"23"</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                String bookName = EXCHANGER.exchange(pay);</span><br><span class="line">                System.out.printf(<span class="string">"七巧付了%s￥买了一本%s。%n"</span>, pay, bookName);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        POOLS.shutdown();</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            <span class="keyword">if</span> (POOLS.isTerminated()) &#123;</span><br><span class="line">                System.out.println(<span class="string">"交易结束！"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">饭饭要卖一本浮生六记。</span><br><span class="line">》》》》》》》》饭饭先到了交易地点 睡了 <span class="number">5</span> s，七巧来了</span><br><span class="line">》》》》》》》》准备交易</span><br><span class="line">七巧付了<span class="number">23</span>￥买了一本浮生六记。</span><br><span class="line">饭饭卖出一本浮生六记赚了<span class="number">23</span>￥。</span><br><span class="line">交易结束！</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><code>Exchanger</code>主要完成的是两个工作线程之间的数据交换，如果有一个线程没有执行 <code>exchange()</code>方法，则会一直等待。还可以设置最大等待时间<code>exchange（V v, TimeUnit unit）</code></p><h3 id="CyclicBarrier和CountDownLatch的区别"><a href="#CyclicBarrier和CountDownLatch的区别" class="headerlink" title="CyclicBarrier和CountDownLatch的区别"></a>CyclicBarrier和CountDownLatch的区别</h3><blockquote><p>CountDownLatch的计数器只能使用一次，而CyclicBarrier的计数器可以使用reset()方法重置。所以CyclicBarrier能处理更为复杂的业务场景。例如，如果计算发生错误，可以重置计数器，并让线程重新执行一次。</p><p>CyclicBarrier还提供其他有用的方法，比如<code>getNumberWaiting</code>方法可以获得 <code>CyclicBarrier</code>阻塞的线程数量。<code>isBroken()</code>方法用来了解阻塞的线程是否被中断。</p></blockquote><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li>《Java 并发编程的艺术》</li></ul><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 并发编程同步器 AQS]]></title>
      <url>/java-aqs.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="分析-AQS（队列同步器）"><a href="#分析-AQS（队列同步器）" class="headerlink" title="分析 AQS（队列同步器）"></a>分析 AQS（队列同步器）</h3><p><code>AbstractQueuedSynchronizer</code> （AQS），是用来构建所或者其他同步组件的基础框架，它使用一个 int 成员变量来表示同步状态，通过内置的 FIFO 队列来完成资源获取线程的队列工作。</p><p><em>源码版本 Jdk 1.8</em></p><a id="more"></a><h4 id="怎么实现队列同步器"><a href="#怎么实现队列同步器" class="headerlink" title="怎么实现队列同步器"></a>怎么实现队列同步器</h4><p>同步器主要的使用方式是继承，子类实现它的部分方法来管理同步状态变量就可以了。</p><p>简单的说，同步器，使用一个状态 <code>state:int</code> 表示它的状态变化，如果有其他的锁需要使用 AQS ，需要操作这个状态变量，AQS 直接提供了三个方法供修改状态变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">// 获取当前同步资源状态</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">long</span> <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> state;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 设置当前同步状态</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">long</span> newState)</span> </span>&#123;</span><br><span class="line">       state = newState;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// CAS 操作 设置当前状态，该方法保证状态设置的原子性。</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">compareAndSetState</span><span class="params">(<span class="keyword">long</span> expect, <span class="keyword">long</span> update)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// See below for intrinsics setup to support this</span></span><br><span class="line">       <span class="keyword">return</span> unsafe.compareAndSwapLong(<span class="keyword">this</span>, stateOffset, expect, update);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>同步器是一个 CLH 队列（FIFO），队列中的元素Node就是保存着线程引用和线程状态的容器，每个线程对同步器的访问，都可以看做是队列中的一个节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> waitStatus;</span><br><span class="line">    Node prev;</span><br><span class="line">    Node next;</span><br><span class="line">    Node nextWaiter;</span><br><span class="line">    Thread thread;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性名称</th><th>描述</th></tr></thead><tbody><tr><td>int waitStatus</td><td>表示节点的状态。其中包含的状态有：<br><code>CANCELLED</code>，值为1，表示当前的线程被取消；<br><code>SIGNAL</code>，值为-1，表示当前节点的后继节点包含的线程需要运行，也就是unpark；<br><code>CONDITION</code>，值为-2，表示当前节点在等待condition，也就是在condition队列中；<br><code>PROPAGATE</code>，值为-3，表示当前场景下后续的acquireShared能够得以执行；<br>值为0，表示当前节点在sync队列中，等待着获取锁。</td></tr><tr><td>Node prev</td><td><strong>前驱节点</strong>，比如当前节点被取消，那就需要前驱节点和后继节点来完成连接。</td></tr><tr><td>Node next</td><td><strong>后继节点</strong>。</td></tr><tr><td>Node nextWaiter</td><td>存储condition队列中的后继节点。</td></tr><tr><td>Thread thread</td><td>入队列时的当前线程。</td></tr></tbody></table><p><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/java-aqs/1.png" alt="image"></p><p>当前占有资源的节点就是头节点。</p><p>AQS 定义两种资源共享方式：</p><ul><li><code>Exclusive</code>：独占模式，又称排他模式，只能有一个线程占用资源，如 ReentrantLock；</li><li><code>Share</code>：共享模式，多个线程可以一起执行，同时占用资源。</li></ul><p>同步器对外部使用者提供五个方法，让锁使用资源的方法，主需要实现其中的部分方法，实现对共享资源的获取和释放就可以了。</p><ul><li><code>isHeldExclusively()</code>：该线程是否正在独占资源。只有用到condition才需要去实现它。</li><li><code>tryAcquire(int)</code>：独占方式。尝试获取资源，成功则返回true，失败则返回false。</li><li><code>tryRelease(int)</code>：独占方式。尝试释放资源，成功则返回true，失败则返回false。</li><li><code>tryAcquireShared(int)</code>：共享方式。尝试获取资源。负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。</li><li><code>tryReleaseShared(int)</code>：共享方式。尝试释放资源，如果释放后允许唤醒后续等待结点返回true，否则返回false。</li></ul><h4 id="独占模式"><a href="#独占模式" class="headerlink" title="独占模式"></a>独占模式</h4><h5 id="acquire"><a href="#acquire" class="headerlink" title="acquire"></a>acquire</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">// 独占式获取同步状态，实现该方法需要查询当前状态并判断同步状态是否符合预期，然后再进行 CAS 设置同步状态。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">long</span> arg)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">           acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">           <span class="comment">// 上面判断如果为 true 的话，表示该等待的线程被中断过，但是等待过程中不能响应中断消息，获取资源后再自我中断，并且释放</span></span><br><span class="line">           selfInterrupt();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试去获取资源状态，如果获取成功，返回 true，这里没有去实现方法，需要锁中自己去实现。</span></span><br><span class="line"><span class="comment">// 这里没有直接使用抽象方法，因为考虑到独占模式只实现 tryAcquire-tryRelease 这两个方法；而贡献模式只用实现tryAcquireShared-tryReleaseShared 这两个方法，避免都要去实现。</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">long</span> arg)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在上一步中获取线程资源失败后，我们后面要做的就是让该线程加入到等待队列中。</span></span><br><span class="line"><span class="comment">// 为当前线程创建一个节点，同步器的模式为参数 mode 模式进入等待队列的队尾，并返回构造好的节点。</span></span><br><span class="line"><span class="comment">// @param mode 指定模式：EXCLUSIVE（独占）和SHARED（共享）</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> Node <span class="title">addWaiter</span><span class="params">(Node mode)</span> </span>&#123;</span><br><span class="line">       Node node = <span class="keyword">new</span> Node(Thread.currentThread(), mode);</span><br><span class="line">       <span class="comment">// Try the fast path of enq; backup to full enq on failure</span></span><br><span class="line">       Node pred = tail;</span><br><span class="line">       <span class="keyword">if</span> (pred != <span class="keyword">null</span>) &#123;</span><br><span class="line">           node.prev = pred;</span><br><span class="line">           <span class="comment">// 设置尾节点的时候需要线程安全，需要基于 CAS 操作设置尾节点，只有设置成功后当前节点才能正式与之前的尾节点进行联系。</span></span><br><span class="line">           <span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class="line">               pred.next = node;</span><br><span class="line">               <span class="keyword">return</span> node;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 如果队尾为 null 的时候，不能快速的入队操作，将使用 enq</span></span><br><span class="line">       enq(node);</span><br><span class="line">       <span class="keyword">return</span> node;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将一个 node 节点 加入队尾，返回上一个尾节点。</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> Node <span class="title">enq</span><span class="params">(<span class="keyword">final</span> Node node)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// CAS自旋volatile变量</span></span><br><span class="line">       <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">           Node t = tail;</span><br><span class="line">           <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123; <span class="comment">// Must initialize</span></span><br><span class="line">               <span class="comment">// 队尾为 null 的话，证明该队列是空的，需要进行初始化；</span></span><br><span class="line">               <span class="comment">// 初始化一个队列，头节点为空的，尾节点指向头节点。</span></span><br><span class="line">               <span class="keyword">if</span> (compareAndSetHead(<span class="keyword">new</span> Node()))</span><br><span class="line">                   tail = head;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               node.prev = t;</span><br><span class="line">               <span class="comment">// 直到拿到锁，</span></span><br><span class="line">               <span class="keyword">if</span> (compareAndSetTail(t, node)) &#123;</span><br><span class="line">                   t.next = node;</span><br><span class="line">                   <span class="keyword">return</span> t;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 前面的步骤都是：当线程获取资源失败后，怎么样将线程放入到等待队列的队尾。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这一步就是当前线程放入到等待队列后，需要等待其他线程使用完资源释放，自己去获取资源。</span></span><br><span class="line"><span class="comment">// 如果获取到资源就返回</span></span><br><span class="line"><span class="comment">// 如果 node 节点的线程线程中断过，就返回 true</span></span><br><span class="line">   <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="keyword">long</span> arg)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">boolean</span> failed = <span class="keyword">true</span>; <span class="comment">// 最终是否成功获得资源</span></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>; <span class="comment">// 标记线程是否被中断</span></span><br><span class="line">           <span class="comment">// 自旋锁</span></span><br><span class="line">           <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">               <span class="keyword">final</span> Node p = node.predecessor(); <span class="comment">// 获得指定节点的前驱节点 prev</span></span><br><span class="line">               <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123; <span class="comment">// 如果该节点的前驱节点是 head 节点，则去尝试获取资源，</span></span><br><span class="line">                   <span class="comment">// 头节点拿到资源</span></span><br><span class="line">                   setHead(node); <span class="comment">// 拿到资源将该 Head 指向该节点，并且将线程的引用置 Null</span></span><br><span class="line">                   <span class="comment">// 由于只有一个线程能够获取到资源，因此设置头节点的时候，不需要 AQS 操作，直接设置即可。</span></span><br><span class="line">                   p.next = <span class="keyword">null</span>; <span class="comment">// help GC ，拿到资源后，将原头节点从队列中完全拿出来，让系统回收资源</span></span><br><span class="line">                   failed = <span class="keyword">false</span>; <span class="comment">// 标记已经成功拿到资源</span></span><br><span class="line">                   <span class="keyword">return</span> interrupted; </span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">// 没有拿到资源，进入等待状态，并且检查是否被中断过。</span></span><br><span class="line">               <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                   parkAndCheckInterrupt())</span><br><span class="line">                   interrupted = <span class="keyword">true</span>; <span class="comment">// 线程中断过</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (failed)</span><br><span class="line">               cancelAcquire(node); <span class="comment">// 出现异常，但没有成功获取获取到资源，取消该线程</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主要是去检查前面的线程是否是在等待准备运行，避免已经放弃了的线程节点，去寻找一个安全点（等待状态 waitStatus = 0）</span></span><br><span class="line"><span class="comment">// 前节点状态是SIGNAL时，当前线程需要阻塞，等待被它唤醒；</span></span><br><span class="line"><span class="comment">// 前节点状态是CANCELLED时，通过循环将当前节点之前所有取消状态的节点移出队列；</span></span><br><span class="line"><span class="comment">// 前节点状态是其他状态时，需要设置前节点为SIGNAL。</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">shouldParkAfterFailedAcquire</span><span class="params">(Node pred, Node node)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> ws = pred.waitStatus;<span class="comment">//拿到前驱的状态</span></span><br><span class="line">       <span class="keyword">if</span> (ws == Node.SIGNAL)</span><br><span class="line">           <span class="comment">//如果已经告诉前驱拿完号后通知自己一下，那就可以安心休息了</span></span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       <span class="keyword">if</span> (ws &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * 如果前驱放弃了，那就一直往前找，直到找到最近一个正常等待的状态，并排在它的后边。</span></span><br><span class="line"><span class="comment">            * 注意：那些放弃的结点，由于被自己“加塞”到它们前边，它们相当于形成一个无引用链，稍后就会被保安大叔赶走了(GC回收)！</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">           <span class="keyword">do</span> &#123;</span><br><span class="line">               node.prev = pred = pred.prev;</span><br><span class="line">           &#125; <span class="keyword">while</span> (pred.waitStatus &gt; <span class="number">0</span>);</span><br><span class="line">           pred.next = node;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果前驱正常，那就把前驱的状态设置成SIGNAL，告诉它拿完号后通知自己一下。有可能失败，人家说不定刚刚释放完呢！</span></span><br><span class="line">           compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//  上一步执行完毕 如果返回 true，表示自己要安心休息了，就开始执行这个步骤</span></span><br><span class="line"><span class="comment">// 返回 true ，表示当前线程中断过。</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">parkAndCheckInterrupt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       LockSupport.park(<span class="keyword">this</span>); <span class="comment">// LockSupport.park 底层实现，让该线程进入等待状态</span></span><br><span class="line">       <span class="keyword">return</span> Thread.interrupted(); <span class="comment">// 返回检查当前线程是否被中断过</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>总结 <code>acquire</code> 流程：</p><ol><li>使用 <code>tryAcquire()</code>尝试直接去获取资源，如果成功则直接返回；</li><li>如果上一步没有成功，<code>tryAcquire()</code>尝试直接去获取资源，如果成功则直接返回；</li><li><code>acquireQueued()</code> 让线程进入等待队列中自旋，当轮到自己去获取资源的时候，采取尝试获取资源，如果被中断过，则返回 <code>true</code>，如果返回 <code>false</code> 则直接返回；</li><li>如果上一步返回 true，表示线程被中断过，但是在等待过程中是不响应的，获取到资源的时候，才去将本线程进行中断。</li></ol><h5 id="release"><a href="#release" class="headerlink" title="release"></a>release</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">long</span> arg)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (tryRelease(arg)) &#123; <span class="comment">// 尝试去释放节点</span></span><br><span class="line">           Node h = head; <span class="comment">// 找到头节点</span></span><br><span class="line">           <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>) <span class="comment">// 判断该线程状态，主要是查看后面有没有节点需要它来唤醒的。</span></span><br><span class="line">               unparkSuccessor(h); <span class="comment">// 如果有线程需要它去唤醒，就去唤醒等待队列中的下一个线程</span></span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;    </span><br><span class="line"><span class="comment">// 注意在独占模式下，这个方法是线程安全的，直接 setState(0) 释放资源即可。</span></span><br><span class="line"><span class="comment">// 释放完所有的资源（state = 0 ） ，返回  true。</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">long</span> arg)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 唤醒等待队列中的最前面节点的状态未取消的线程。</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unparkSuccessor</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * If status is negative (i.e., possibly needing signal) try</span></span><br><span class="line"><span class="comment">        * to clear in anticipation of signalling.  It is OK if this</span></span><br><span class="line"><span class="comment">        * fails or if status is changed by waiting thread.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="keyword">int</span> ws = node.waitStatus;</span><br><span class="line">       <span class="comment">// 如果当前等待线程的标志没有取消，则将线程节点的状态置 0，</span></span><br><span class="line">       <span class="keyword">if</span> (ws &lt; <span class="number">0</span>)</span><br><span class="line">           compareAndSetWaitStatus(node, ws, <span class="number">0</span>); <span class="comment">// 升级为等待状态</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * Thread to unpark is held in successor, which is normally</span></span><br><span class="line"><span class="comment">        * just the next node.  But if cancelled or apparently null,</span></span><br><span class="line"><span class="comment">        * traverse backwards from tail to find the actual</span></span><br><span class="line"><span class="comment">        * non-cancelled successor.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="comment">// 开始去唤醒下一个节点</span></span><br><span class="line">       Node s = node.next;</span><br><span class="line">       <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.waitStatus &gt; <span class="number">0</span>) &#123; <span class="comment">// 判断下个线程为空或者已经取消</span></span><br><span class="line">           s = <span class="keyword">null</span>;</span><br><span class="line">           <span class="keyword">for</span> (Node t = tail; t != <span class="keyword">null</span> &amp;&amp; t != node; t = t.prev) <span class="comment">// 当下个节点是无效节点的时候，然后从尾节点开始遍历寻找有效节点，作为下个节点</span></span><br><span class="line">               <span class="comment">// 所以这里有个疑问，为什么要从尾节点开始遍历？</span></span><br><span class="line">               <span class="keyword">if</span> (t.waitStatus &lt;= <span class="number">0</span>)</span><br><span class="line">                   s = t;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (s != <span class="keyword">null</span>)</span><br><span class="line">           LockSupport.unpark(s.thread); <span class="comment">// 唤醒下个线程，也只是唤醒一个有效线程状态</span></span><br><span class="line">       <span class="comment">// 既然参与竞争，它是等待队列中排在最前面的等待队列，经过前面的 shouldParkAfterFailedAcquire 调整，一定是 Head 的后继节点，下次自旋的时候，拿到资源的条件成立。</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>这里为什么从开始尾节点遍历，<a href="https://my.oschina.net/xianggao/blog/532709" rel="external nofollow noopener noreferrer" target="_blank">参考文章</a></p><p>因为在CLH队列中的结点随时有可能被中断，<code>被中断的结点的waitStatus设置为CANCEL,而且它会被踢出CLH队列</code>，如何个踢出法，就是它的前趋结点的next并不会指向它，而是指向下一个非CANCEL的结点,而它自己的next指针指向它自己（将自己踢出，并让 GC 回收）。一旦这种情况发生，如何从头向尾方向寻找继任结点会出现问题，<code>因为一个CANCEL结点的next为自己，那么就找不到正确的继任接点</code>。</p><p><strong>总结下 release：</strong></p><p>需要独占模式中自定义的同步器子类去实现，用来释放资源，释放相应的资源，将 state 减少相应的数量即可，如果完全释放了资源，唤醒等待队列中有效的线程来获取资源。</p><ol><li>处理当前节点：非CANCELLED状态重置为0；</li><li>寻找下个节点：如果是CANCELLED状态，说明节点中途溜了，从队列尾开始寻找排在最前还在等着的节点</li><li>唤醒：利用LockSupport.unpark唤醒下个节点里的线程。</li></ol><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/java-aqs/2.jpg" alt="image"></p><ol><li>获取资源的时候，队列同步器中每个节点都是一个线程在进行自旋，如果该节点的前驱节点是头节点，它就可以去获取资源，退出自旋的时候，将本线程的节点设置成头节点；</li><li>释放资源的时候，将本线程的等待状态改成 0 （等待状态），然后让下一个小于 0 的有效节点的节点状态改成 0（等待状态），然后资源状态。</li><li>只有当前节点的前一个节点为 <code>SIGNAL</code> 时，才能当前节点才能被挂起。对线程的挂起及唤醒操作是通过使用 LockSupport 类的 <code>park/unpark</code> 实现的。</li></ol><h5 id="doAcquireNanos"><a href="#doAcquireNanos" class="headerlink" title="doAcquireNanos"></a>doAcquireNanos</h5><p>该方法提供了具备有超时功能的获取状态的调用，如果在指定的<code>nanosTimeout</code>内没有获取到状态，那么返回false，反之返回true。可以将该方法看做acquireInterruptibly的升级版，也就是在判断是否被中断的基础上增加了超时控制。<br>针对超时控制这部分的实现，主要需要计算出睡眠的delta，也就是间隔值。间隔可以表示为 nanosTimeout 等于原有<code>nanosTimeout – now（当前时间）+ lastTime（睡眠之前记录的时间）</code>。如果nanosTimeout大于0，那么还需要使当前线程睡眠，反之则返回false。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">// 独占式超时获取资源</span></span><br><span class="line"><span class="comment">// 在指定时间段内获取资源，成功返回 true </span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">doAcquireNanos</span><span class="params">(<span class="keyword">long</span> arg, <span class="keyword">long</span> nanosTimeout)</span></span></span><br><span class="line"><span class="function">           <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (nanosTimeout &lt;= <span class="number">0L</span>)</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       <span class="keyword">final</span> <span class="keyword">long</span> deadline = System.nanoTime() + nanosTimeout; <span class="comment">// 计算最终超时事件</span></span><br><span class="line">       <span class="keyword">final</span> Node node = addWaiter(Node.EXCLUSIVE); <span class="comment">// 独占模式加入到等待队列中</span></span><br><span class="line">       <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</span><br><span class="line">       <span class="comment">// 自旋</span></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">               <span class="keyword">final</span> Node p = node.predecessor();</span><br><span class="line">               <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">                   setHead(node);</span><br><span class="line">                   p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">                   failed = <span class="keyword">false</span>;</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">// 没有获取到资源开始工作……</span></span><br><span class="line">               nanosTimeout = deadline - System.nanoTime();</span><br><span class="line">               <span class="keyword">if</span> (nanosTimeout &lt;= <span class="number">0L</span>) <span class="comment">// 超时</span></span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">               <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                   nanosTimeout &gt; spinForTimeoutThreshold) <span class="comment">// &gt; 1000ns ，超时时间在 1000 ns 内 ，线程自旋中，否则线程进入阻塞状态。</span></span><br><span class="line">                   <span class="comment">// 设置线程还应该睡眠多长时间，避免等待时间过长期间的不断重试。</span></span><br><span class="line">                   LockSupport.parkNanos(<span class="keyword">this</span>, nanosTimeout);</span><br><span class="line">               <span class="comment">// 中断信号直接中断</span></span><br><span class="line">               <span class="keyword">if</span> (Thread.interrupted())</span><br><span class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (failed)</span><br><span class="line">               cancelAcquire(node);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/java-aqs/3.jpg" alt="image"></p><h4 id="共享模式"><a href="#共享模式" class="headerlink" title="共享模式"></a>共享模式</h4><h5 id="acquireShared"><a href="#acquireShared" class="headerlink" title="acquireShared"></a>acquireShared</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">// 共享模式获取资源，获取成功则返回，获取失败进入同步等待队列中，整个过程忽略线程中断。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquireShared</span><span class="params">(<span class="keyword">long</span> arg)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (tryAcquireShared(arg) &lt; <span class="number">0</span>)</span><br><span class="line">           doAcquireShared(arg);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 需要自定义同步器去实现，</span></span><br><span class="line"><span class="comment">// 负值代表获取失败；</span></span><br><span class="line"><span class="comment">// 0 代表获取成功，刚好获取剩下的一个资源，没有资源再分配后面的线程；。</span></span><br><span class="line"><span class="comment">// 正数表示获取成功，返回剩余的资源数量。</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">long</span> arg)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 获取资源失败后，进入等待队列，自旋，直到获取资源才返回。</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doAcquireShared</span><span class="params">(<span class="keyword">long</span> arg)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">final</span> Node node = addWaiter(Node.SHARED); <span class="comment">// 设置共享模式</span></span><br><span class="line">       <span class="keyword">boolean</span> failed = <span class="keyword">true</span>; <span class="comment">// 设置是否获取资源成功标志</span></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>; <span class="comment">// 等待过程中，中断标志</span></span><br><span class="line">           <span class="comment">// 自旋</span></span><br><span class="line">           <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">               <span class="keyword">final</span> Node p = node.predecessor(); <span class="comment">//获得前驱节点</span></span><br><span class="line">               <span class="comment">// 如果前驱节点是头节点，则取尝试获取资源</span></span><br><span class="line">               <span class="keyword">if</span> (p == head) &#123;</span><br><span class="line">                   <span class="keyword">long</span> r = tryAcquireShared(arg);</span><br><span class="line">                   <span class="keyword">if</span> (r &gt;= <span class="number">0</span>) &#123; <span class="comment">// 如果获取资源成功后，就设置头节点为自己（node）</span></span><br><span class="line">                       setHeadAndPropagate(node, r); </span><br><span class="line">                       p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">                       <span class="keyword">if</span> (interrupted) <span class="comment">// 如果等待过程中出现线程中断就自己中断线程</span></span><br><span class="line">                           selfInterrupt();</span><br><span class="line">                       failed = <span class="keyword">false</span>;</span><br><span class="line">                       <span class="keyword">return</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">// 判断状态，找到安全点，进入等待状态，等待被唤醒，如果被中断，则补上中断标志</span></span><br><span class="line">               <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                   parkAndCheckInterrupt())</span><br><span class="line">                   interrupted = <span class="keyword">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (failed) <span class="comment">// 出现异常，取消该线程</span></span><br><span class="line">               cancelAcquire(node);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 唤醒符合条件的其他线程</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setHeadAndPropagate</span><span class="params">(Node node, <span class="keyword">long</span> propagate)</span> </span>&#123;</span><br><span class="line">       Node h = head; <span class="comment">// Record old head for check below</span></span><br><span class="line">       setHead(node); <span class="comment">// 将头节点指向 node 节点</span></span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * Try to signal next queued node if:</span></span><br><span class="line"><span class="comment">        *   Propagation was indicated by caller,</span></span><br><span class="line"><span class="comment">        *     or was recorded (as h.waitStatus either before</span></span><br><span class="line"><span class="comment">        *     or after setHead) by a previous operation</span></span><br><span class="line"><span class="comment">        *     (note: this uses sign-check of waitStatus because</span></span><br><span class="line"><span class="comment">        *      PROPAGATE status may transition to SIGNAL.)</span></span><br><span class="line"><span class="comment">        * and</span></span><br><span class="line"><span class="comment">        *   The next node is waiting in shared mode,</span></span><br><span class="line"><span class="comment">        *     or we don't know, because it appears null</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * The conservatism in both of these checks may cause</span></span><br><span class="line"><span class="comment">        * unnecessary wake-ups, but only when there are multiple</span></span><br><span class="line"><span class="comment">        * racing acquires/releases, so most need signals now or soon</span></span><br><span class="line"><span class="comment">        * anyway.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="comment">// 还有资源剩下，则继续唤醒后继节点的线程</span></span><br><span class="line">       <span class="keyword">if</span> (propagate &gt; <span class="number">0</span> || h == <span class="keyword">null</span> || h.waitStatus &lt; <span class="number">0</span> ||</span><br><span class="line">           (h = head) == <span class="keyword">null</span> || h.waitStatus &lt; <span class="number">0</span>) &#123;</span><br><span class="line">           Node s = node.next;</span><br><span class="line">           <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.isShared())</span><br><span class="line">               doReleaseShared();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ol><li><code>tryAcquireShared()</code>尝试获取资源，成功则直接返回；</li><li>失败则通过<code>doAcquireShared()</code> 进入等待队列 <code>park()</code>，直到被 <code>unpark()</code> / <code>interrupt()</code>并成功获取到资源才返回。整个等待过程也是忽略中断的。</li></ol><h5 id="releaseShared"><a href="#releaseShared" class="headerlink" title="releaseShared"></a>releaseShared</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">releaseShared</span><span class="params">(<span class="keyword">long</span> arg)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (tryReleaseShared(arg)) &#123; <span class="comment">// 尝试释放资源</span></span><br><span class="line">           doReleaseShared(); <span class="comment">// 释放资源成功，唤醒后继节点取竞争资源</span></span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">// 根据作者写这个方法的注释，表达的意思是释放一个或者以上的资源就返回 true，</span></span><br><span class="line"><span class="comment">// 但是实际情况下，ReentrantReadWriteLock读锁的tryReleaseShared()只有在完全释放掉资源（state=0）才返回true，所以这个可以根据自己的实际情况进行更改的。</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryReleaseShared</span><span class="params">(<span class="keyword">long</span> arg)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 唤醒后继 </span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doReleaseShared</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 自旋</span></span><br><span class="line">       <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">           Node h = head;</span><br><span class="line">           <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h != tail) &#123;</span><br><span class="line">               <span class="keyword">int</span> ws = h.waitStatus;</span><br><span class="line">               <span class="keyword">if</span> (ws == Node.SIGNAL) &#123; <span class="comment">// 判断后继节点是否需要运行</span></span><br><span class="line">                   <span class="keyword">if</span> (!compareAndSetWaitStatus(h, Node.SIGNAL, <span class="number">0</span>)) <span class="comment">// 将头节点设置成等待状态</span></span><br><span class="line">                       <span class="keyword">continue</span>;            <span class="comment">// loop to recheck cases</span></span><br><span class="line">                   unparkSuccessor(h); <span class="comment">// 唤醒后继</span></span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">else</span> <span class="keyword">if</span> (ws == <span class="number">0</span> &amp;&amp;</span><br><span class="line">                        !compareAndSetWaitStatus(h, <span class="number">0</span>, Node.PROPAGATE)) <span class="comment">// 如果头节点为等待状态了，则设置节点状态需要往后面的节点传播</span></span><br><span class="line">                   <span class="keyword">continue</span>;                <span class="comment">// loop on failed CAS</span></span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span> (h == head)                   <span class="comment">// loop if head changed</span></span><br><span class="line">               <span class="keyword">break</span>; </span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="Mutex（独占锁）"><a href="#Mutex（独占锁）" class="headerlink" title="Mutex（独占锁）"></a>Mutex（独占锁）</h4><p>具体是参考《Java 并发编程艺术》一书第五章：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mutex</span> <span class="keyword">implements</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 自定义同步器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 判断是否是占有状态</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isHeldExclusively</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> getState() == <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 尝试获取资源，立即返回。成功则返回true</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">assert</span> acquires == <span class="number">1</span>; <span class="comment">// 这里限定只能为1个量</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>)) &#123;<span class="comment">//state为0才设置为1，不可重入！</span></span><br><span class="line">                setExclusiveOwnerThread(Thread.currentThread());<span class="comment">//设置为当前线程独占资源</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 尝试释放资源，立即返回。成功则为true，否则false。</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">assert</span> releases == <span class="number">1</span>; <span class="comment">// 限定为1个量</span></span><br><span class="line">            <span class="keyword">if</span> (getState() == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">            setExclusiveOwnerThread(<span class="keyword">null</span>);</span><br><span class="line">            setState(<span class="number">0</span>);<span class="comment">//释放资源，放弃占有状态</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ConditionObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 操作全部依赖于AQS自定义的同步器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Sync sync = <span class="keyword">new</span> Sync();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.acquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        sync.acquireInterruptibly(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尝试获取资源，要求立即返回。成功则为true，失败则为false。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.tryAcquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.tryAcquireNanos(<span class="number">1</span>, unit.toNanos(time));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.release(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.newCondition();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 锁是否占有状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.isHeldExclusively();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>定义一个静态内部类继承类同步器并实现了独占模式的操作方法；</li><li>获取资源 tryAcquire 中，CAS 获取资源，获取成功返回 true；</li><li>释放资源 tryRelealse，将资源设置为0；</li></ol><p>测试一下（每过一秒打印一个结果）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MutexTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Mutex mutex = <span class="keyword">new</span> Mutex();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> j = i;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    mutex.lock();</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                    System.out.println(j);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    mutex.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line"></span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            System.out.println(<span class="string">"------------"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line">------------</span><br><span class="line">------------</span><br><span class="line"><span class="number">1</span></span><br><span class="line">------------</span><br><span class="line"><span class="number">2</span></span><br><span class="line">------------</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">------------</span><br></pre></td></tr></table></figure><h4 id="TwinsLock（共享锁）"><a href="#TwinsLock（共享锁）" class="headerlink" title="TwinsLock（共享锁）"></a>TwinsLock（共享锁）</h4><p>具体是参考《Java 并发编程艺术》一书第五章：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwinsLock</span> <span class="keyword">implements</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义的同步器，能够有两个线程同时获取资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Sync sync = <span class="keyword">new</span> Sync(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line">        Sync(<span class="keyword">int</span> count) &#123;</span><br><span class="line">            <span class="keyword">if</span> (count &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"count must large than zero."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            setState(count);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> reduceCount)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">                <span class="keyword">int</span> current = getState();</span><br><span class="line">                <span class="keyword">int</span> newCount = current - reduceCount;</span><br><span class="line">                <span class="keyword">if</span> (newCount &lt; <span class="number">0</span> || compareAndSetState(current, newCount)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> newCount;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryReleaseShared</span><span class="params">(<span class="keyword">int</span> returnCount)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">                <span class="keyword">int</span> current = getState();</span><br><span class="line">                <span class="keyword">int</span> newCount = current + returnCount;</span><br><span class="line">                <span class="keyword">if</span> (compareAndSetState(current, newCount)) &#123; <span class="comment">// 将释放的资源返回</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">Condition <span class="title">newCondtion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ConditionObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.acquireShared(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        sync.acquireSharedInterruptibly(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.tryAcquireShared(<span class="number">1</span>) &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.tryAcquireSharedNanos(<span class="number">1</span>, unit.toNanos(time));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.releaseShared(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sync.newCondtion();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TwinsLock 包含了一个自定义的同步器 sync，该同步器以共享方式获取同步状态。当 消耗资源<code>tryAcquireShared(int reduceCount)</code> 大于 或者等于 0 的时候，表示当前线程获取锁成功。</p><p>验证上面锁的正确性，就是要验证是否同一时刻有两个线程同时进行打印任务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwinsLockTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> TwinsLock();</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    lock.lock();</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                    System.out.println(Thread.currentThread().getName());</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    lock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Worker().start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Thread-<span class="number">5</span></span><br><span class="line">Thread-<span class="number">2</span></span><br><span class="line"></span><br><span class="line">Thread-<span class="number">1</span></span><br><span class="line">Thread-<span class="number">6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Thread-<span class="number">0</span></span><br><span class="line">Thread-<span class="number">9</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Thread-<span class="number">4</span></span><br><span class="line">Thread-<span class="number">3</span></span><br><span class="line"></span><br><span class="line">Thread-<span class="number">7</span></span><br><span class="line">Thread-<span class="number">8</span></span><br></pre></td></tr></table></figure><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>在这个 AQS 同步器中我们时刻需要更改注意两个方面的问题：</p><ul><li><p>一是要去维护同步队列，更改同步器的资源状态变量，通过 <code>Unsafe</code> 提供原子操作 CAS；</p></li><li><p>二是底层还要去根据同步器状态变量去实现线程等待，线程唤醒的，它是通过 <code>LockSupport</code> 的 <code>park/unpark</code> 操作。<br>当然使用者不需要注意这些问题，代码已经把这些方法都已经封装好了，只要实现资源变量的变化的几个方法就可以了。</p></li><li><p>如果是要使用独占模式，只需要实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> arg)</span></span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> arg)</span></span></span><br></pre></td></tr></table></figure></li><li><p>如果只是要使用共享模式，需要实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> arg)</span></span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryReleaseShared</span><span class="params">(<span class="keyword">int</span> arg)</span></span></span><br></pre></td></tr></table></figure></li></ul><h4 id="补充：CLH-队列锁"><a href="#补充：CLH-队列锁" class="headerlink" title="补充：CLH 队列锁"></a>补充：CLH 队列锁</h4><p>就是源码分析中那个同步队列，节点单位就是内部类 Node，获取锁的时候跟队列的头有关，释放锁主要删除头节点和从尾节点唤醒。它虽然保留了自旋操作，但是真实情况下，是阻塞了线程（LockSupport）。</p><h4 id="补充：CAS"><a href="#补充：CAS" class="headerlink" title="补充：CAS"></a>补充：CAS</h4><p>这部分参考文章 <a href="https://www.jianshu.com/p/e2179c74a2e4?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=pc_all_hots&amp;utm_source=recommendation" rel="external nofollow noopener noreferrer" target="_blank">认识非阻塞的同步机制CAS</a></p><blockquote><p>CAS 操作包含三个操作数 —— 内存位置（V）、预期原值（A）和新值(B)。如果内存位置的值与预期原值相匹配，那么处理器会自动将该位置值更新为新值。否则，处理器不做任何操作。无论V值是否等于A值，都将返回V的原值。</p></blockquote><p>当多个线程尝试使用CAS同时更新一个变量，最终只有一个线程会成功，其他线程都会失败。但和使用锁不同，失败的线程不会被阻塞，而是被告之本次更新操作失败了，可以再试一次。此时，线程可以根据实际情况，继续重试或者跳过操作，大大减少因为阻塞而损失的性能。所以，CAS是一种乐观的操作，它希望每次都能成功地执行更新操作。</p><p><strong>AQS 中的 CAS 由 <code>Unsafe</code> 提供。</strong></p><h4 id="补充：自旋锁"><a href="#补充：自旋锁" class="headerlink" title="补充：自旋锁"></a>补充：自旋锁</h4><p>这部分参考文章 <a href="http://www.cnblogs.com/thomaschen750215/p/4122068.html" rel="external nofollow noopener noreferrer" target="_blank">CAS和自旋锁(spin lock)</a></p><blockquote><p>由于在多处理器系统环境中有些资源因为其有限性，有时需要互斥访问（mutual exclusion），这时会引入锁的机制，只有获取了锁的进程才能获取资源访问。即是每次只能有且只有一个进程能获取锁，才能进入自己的临界区，同一时间不能两个或两个以上进程进入临界区，当退出临界区时释放锁。设计互斥算法时总是会面临一种情况，即没有获得锁的进程怎么办？通常有2种处理方式。一种是没有获得锁的调用者就一直循环在那里看是否该自旋锁的保持者已经释放了锁，这就是自旋锁，他不用将线城阻塞起来（NON-BLOCKING)；另一种是没有获得锁的进程就阻塞(BLOCKING)自己，请求OS调度另一个线程上处理器，这就是互斥锁。</p></blockquote><p>跟互斥锁一样，一个执行单元要想访问被自旋锁保护的共享资源，必须先得到锁，在访问完共享资源后，必须释放锁。如果在获取自旋锁时，没有任何执行单元保持该锁，那么将立即得到锁；如果在获取自旋锁时锁已经有保持者，那么获取锁操作将自旋在那里，直到该自旋锁的保持者释放了锁。由此我们可以看出，自旋锁是一种比较低级的保护数据结构或代码片段的原始方式，这种锁可能存在两个问题：</p><ul><li><strong>递归死锁</strong>：试图递归地获得自旋锁必然会引起死锁：递归程序的持有实例在第二个实例循环，以试图获得相同自旋锁时，不会释放此自旋锁。在递归程序中使用自旋锁应遵守下列策略：递归程序决不能在持有自旋锁时调用它自己，也决不能在递归调用时试图获得相同的自旋锁。此外如果一个进程已经将资源锁定，那么，即使其它申请这个资源的进程不停地疯狂“自旋”,也无法获得资源，从而进入死循环。</li><li><strong>过多占用cpu资源</strong>。如果不加限制，由于申请者一直在循环等待，因此自旋锁在锁定的时候,如果不成功,不会睡眠,会持续的尝试,单cpu的时候自旋锁会让其它process动不了. 因此，一般自旋锁实现会有一个参数限定最多持续尝试次数. 超出后, 自旋锁放弃当前time slice. 等下一次机会</li></ul><p>​ 由此可见，自旋锁比较适用于锁使用者保持锁时间比较短的情况。正是由于自旋锁使用者一般保持锁时间非常短，因此选择自旋而不是睡眠是非常必要的，自旋锁的效率远高于互斥锁。</p><h4 id="补充：LockSupport"><a href="#补充：LockSupport" class="headerlink" title="补充：LockSupport"></a>补充：LockSupport</h4><p>具体内容请参考 <a href="https://www.jianshu.com/p/e3afe8ab8364" rel="external nofollow noopener noreferrer" target="_blank">LockSupport（park/unpark）源码分析</a></p><p><code>LockSupport.park()</code>和 <code>LockSupport.unpark(Thread thread)</code>调用的是 <code>Unsafe</code>中本地方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//park</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">park</span><span class="params">(<span class="keyword">boolean</span> isAbsolute, <span class="keyword">long</span> time)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//unpack</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">unpark</span><span class="params">(Object var1)</span></span>;</span><br></pre></td></tr></table></figure><p><code>park</code> 函数是将当前调用Thread阻塞，而 <code>unpark</code> 函数则是将指定线程唤醒。</p><h3 id="ReentrantLock-独占锁"><a href="#ReentrantLock-独占锁" class="headerlink" title="ReentrantLock(独占锁)"></a>ReentrantLock(独占锁)</h3><p><a href="https://www.jianshu.com/p/fe027772e156" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/fe027772e156</a></p><p>其实 ReentantLock 的实现和上面的例子 <code>Mutex</code> 的差不多，不过它另外实现了可重入和公平锁两个部分。</p><h4 id="公平锁"><a href="#公平锁" class="headerlink" title="公平锁"></a>公平锁</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">   <span class="keyword">int</span> c = getState();</span><br><span class="line">   <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">       <span class="keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;</span><br><span class="line">           compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">           setExclusiveOwnerThread(current);</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">       <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">       <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line">       setState(nextc);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相比非公平锁，它多了一个方法<code>hasQueuedPredecessors</code> 判断队列是否有排在前面的线程在等待锁，没有的话调用<code>compareAndSetState</code> 使用 CAS 的方式修改state，然后设置本线程为独占锁，并且它是可重入锁。</p><h3 id="ReentrantReadWriteLock（读写锁）"><a href="#ReentrantReadWriteLock（读写锁）" class="headerlink" title="ReentrantReadWriteLock（读写锁）"></a>ReentrantReadWriteLock（读写锁）</h3><p>首先来分析下读写锁的几个重要的特点：</p><ol><li>读写状态的设计；</li><li>写锁的获取与释放；</li><li>读锁的获取与释放；</li><li>锁降级的实现。</li></ol><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ReentrantReadWriteLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>(<span class="keyword">false</span>);</span><br><span class="line">   &#125;	</span><br><span class="line"><span class="comment">// 提供公平锁，默认是非公平锁    </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantReadWriteLock</span><span class="params">(<span class="keyword">boolean</span> fair)</span> </span>&#123;</span><br><span class="line">       sync = fair ? <span class="keyword">new</span> FairSync() : <span class="keyword">new</span> NonfairSync();</span><br><span class="line">       readerLock = <span class="keyword">new</span> ReadLock(<span class="keyword">this</span>);</span><br><span class="line">       writerLock = <span class="keyword">new</span> WriteLock(<span class="keyword">this</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="读写状态设计"><a href="#读写状态设计" class="headerlink" title="读写状态设计"></a>读写状态设计</h4><p>在读写锁中最重要的就是Sync类，它继承自AQS，还记得吗，AQS使用一个int型来保存状态，状态在这里就代表锁，它提供了获取和修改状态的方法。可是，这里要实现读锁和写锁，只有一个状态怎么办？Doug Lea是这么做的，它把状态的高16位用作读锁，低16位用作写锁，所以无论是读锁还是写锁最多只能被持有65535次。所以在判断读锁和写锁的时候，需要进行位运算：</p><p><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/java-aqs/4.jpg" alt="image"></p><ol><li>由于读写锁共享状态，所以状态不为0，只能说明是有锁，可能是读锁，也可能是写锁；</li><li>读锁是高16为表示的，所以读锁加1，就是状态的高16位加1，低16位不变，所以要加的不是1，而是2^16，减一同样是这样。</li><li>写锁用低16位表示，要获得写锁的次数，要用状态&amp;2^16-1，结果的高16位全为0，低16位就是写锁被持有的次数。</li></ol><p>那它是怎么确定读写的各自的状态的了，是通过位运算符，假设当前同步状态值为 S，写状态等于 <code>S &amp; 0x0000FFFF</code>（只有 低 16 位），读状态等于 <code>S &gt;&gt;&gt; 16</code> （无符号补位右移 16 位）；这个时候写状态增加 1 时，等于 <code>S + 1</code>，当读状态增加 1，等于 <code>S + (1 &lt;&lt; 16)</code>，也就是 <code>S + 0x00010000</code>。</p><p>根据状态的划分可以得出一个结论： S 不等于 0 时，就是写状态计算公式 <code>S &amp; 0x0000FFFF == 0</code>，则读状态 <code>S &gt;&gt;&gt; 16 &gt; 0</code> 这个时候，读锁获取到了。</p><h4 id="同步器的设计"><a href="#同步器的设计" class="headerlink" title="同步器的设计"></a>同步器的设计</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//ReentrantReadWriteLock的同步器</span></span><br><span class="line"><span class="comment">// 分别用子类来实现公平和非公平策略  </span></span><br><span class="line">  <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;  </span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">6317671515068378041L</span>;  </span><br><span class="line"> </span><br><span class="line">      <span class="comment">//高16位表示持有读锁的计数 </span></span><br><span class="line">      <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SHARED_SHIFT   = <span class="number">16</span>;  </span><br><span class="line">      <span class="comment">//由于读锁用高位部分，读锁个数加1，其实是状态值加 2^16  </span></span><br><span class="line">      <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SHARED_UNIT    = (<span class="number">1</span> &lt;&lt; SHARED_SHIFT); </span><br><span class="line">      <span class="comment">// 所以读锁或者写锁分别最多线程数为 2^16 = 65535</span></span><br><span class="line">      <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_COUNT      = (<span class="number">1</span> &lt;&lt; SHARED_SHIFT) - <span class="number">1</span>;  </span><br><span class="line">      <span class="comment">// 低16位表示写锁计数，</span></span><br><span class="line">      <span class="comment">// 写锁的掩码，用于状态的低16位有效值 </span></span><br><span class="line">      <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EXCLUSIVE_MASK = (<span class="number">1</span> &lt;&lt; SHARED_SHIFT) - <span class="number">1</span>;  </span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 获取读锁（共享锁）的数量</span></span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sharedCount</span><span class="params">(<span class="keyword">int</span> c)</span>    </span>&#123; <span class="keyword">return</span> c &gt;&gt;&gt; SHARED_SHIFT; &#125;  </span><br><span class="line">      <span class="comment">// 获取写锁（独占锁）的重入次数</span></span><br><span class="line">      <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">exclusiveCount</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123; <span class="keyword">return</span> c &amp; EXCLUSIVE_MASK; &#125;  </span><br><span class="line"> </span><br><span class="line">      <span class="comment">/** </span></span><br><span class="line"><span class="comment">       * 每个线程特定的 read 持有计数。存放在ThreadLocal，不需要是线程安全的。</span></span><br><span class="line"><span class="comment">       */</span>  </span><br><span class="line">      <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">HoldCounter</span> </span>&#123;  </span><br><span class="line">          <span class="keyword">int</span> count = <span class="number">0</span>;  </span><br><span class="line">          <span class="comment">//使用id而不是引用是为了避免保留垃圾。注意这是个常量。  </span></span><br><span class="line">          <span class="keyword">final</span> <span class="keyword">long</span> tid = Thread.currentThread().getId();  </span><br><span class="line">      &#125;  </span><br><span class="line"> </span><br><span class="line">      <span class="comment">/** </span></span><br><span class="line"><span class="comment">       * 采用继承是为了重写 initialValue 方法，这样就不用进行这样的处理： </span></span><br><span class="line"><span class="comment">       * 如果ThreadLocal没有当前线程的计数，则new一个，再放进ThreadLocal里。 </span></span><br><span class="line"><span class="comment">       * 可以直接调用 get。 </span></span><br><span class="line"><span class="comment">       * */</span>  </span><br><span class="line">      <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalHoldCounter</span>  </span></span><br><span class="line"><span class="class">          <span class="keyword">extends</span> <span class="title">ThreadLocal</span>&lt;<span class="title">HoldCounter</span>&gt; </span>&#123;  </span><br><span class="line">          <span class="function"><span class="keyword">public</span> HoldCounter <span class="title">initialValue</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">new</span> HoldCounter();  </span><br><span class="line">          &#125;  </span><br><span class="line">      &#125;  </span><br><span class="line">      <span class="comment">/** </span></span><br><span class="line"><span class="comment">       * 当前线程持有的可重入读锁的数量，仅在构造方法和readObject(反序列化) </span></span><br><span class="line"><span class="comment">       * 时被初始化，当持有锁的数量为0时，移除此对象。 </span></span><br><span class="line"><span class="comment">       * 它存储了当前线程的 HoldCounter ，而HoldCounter中的count变量就是用来记录线程获得的写锁的个数。</span></span><br><span class="line"><span class="comment">       */</span>  </span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">transient</span> ThreadLocalHoldCounter readHolds;  </span><br><span class="line"> </span><br><span class="line">      <span class="comment">/** </span></span><br><span class="line"><span class="comment">       * 最近一个成功获取读锁的线程的计数。这省却了ThreadLocal查找， </span></span><br><span class="line"><span class="comment">       * 通常情况下，下一个释放线程是最后一个获取线程。这不是 volatile 的， </span></span><br><span class="line"><span class="comment">       * 因为它仅用于试探的，线程进行缓存也是可以的 </span></span><br><span class="line"><span class="comment">       * （因为判断是否是当前线程是通过线程id来比较的）。 </span></span><br><span class="line"><span class="comment">       */</span>  </span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">transient</span> HoldCounter cachedHoldCounter;  </span><br><span class="line">     </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">      	* firstReader是第一个获得读锁的线程； </span></span><br><span class="line"><span class="comment">       * firstReaderHoldCount是firstReader的重入计数； </span></span><br><span class="line"><span class="comment">       * 更准确的说，firstReader是最后一个把共享计数从0改为1，并且还没有释放锁。 </span></span><br><span class="line"><span class="comment">       * 如果没有这样的线程，firstReader为null; </span></span><br><span class="line"><span class="comment">       * firstReader不会导致垃圾堆积，因为在tryReleaseShared中将它置空了，除非 </span></span><br><span class="line"><span class="comment">       * 线程异常终止，没有释放读锁。 </span></span><br><span class="line"><span class="comment">       *  </span></span><br><span class="line"><span class="comment">       * 跟踪无竞争的读锁计数时，代价很低 </span></span><br><span class="line"><span class="comment">       */</span>  </span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">transient</span> Thread firstReader = <span class="keyword">null</span>;  </span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> firstReaderHoldCount;  </span><br><span class="line"> </span><br><span class="line">      Sync() &#123;  </span><br><span class="line">          readHolds = <span class="keyword">new</span> ThreadLocalHoldCounter();  </span><br><span class="line">          setState(getState()); <span class="comment">// ensures visibility of readHolds  </span></span><br><span class="line">      &#125;  </span><br><span class="line">      <span class="comment">// 下面两个抽象方法用来实现读锁或者写锁是否需要阻塞。</span></span><br><span class="line">	<span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">writerShouldBlock</span><span class="params">()</span></span>;<span class="comment">//写锁是否需要阻塞</span></span><br><span class="line">	<span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">readerShouldBlock</span><span class="params">()</span></span>;<span class="comment">//读锁是否需要阻塞</span></span><br><span class="line">      </span><br><span class="line">   <span class="comment">// 下面是非公平锁的实现</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NonfairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">8159625535654395037L</span>;</span><br><span class="line">       <span class="comment">// 持有写锁可重入，不需要阻塞。</span></span><br><span class="line">       <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">writerShouldBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// writers can always barge</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 根据下一个节点是不是写锁（独占锁）确定它是否阻塞</span></span><br><span class="line">       <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">readerShouldBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="comment">/* As a heuristic to avoid indefinite writer starvation,</span></span><br><span class="line"><span class="comment">            * block if the thread that momentarily appears to be head</span></span><br><span class="line"><span class="comment">            * of queue, if one exists, is a waiting writer.  This is</span></span><br><span class="line"><span class="comment">            * only a probabilistic effect since a new reader will not</span></span><br><span class="line"><span class="comment">            * block if there is a waiting writer behind other enabled</span></span><br><span class="line"><span class="comment">            * readers that have not yet drained from the queue.</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">           <span class="keyword">return</span> apparentlyFirstQueuedIsExclusive();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//  AQS 提供的方法，判断下一个节点是独占锁</span></span><br><span class="line">   <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">apparentlyFirstQueuedIsExclusive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       Node h, s;</span><br><span class="line">       <span class="keyword">return</span> (h = head) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">           (s = h.next)  != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">           !s.isShared()         &amp;&amp;</span><br><span class="line">           s.thread != <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">// 公平锁的实现，只要当前线程前面还有线程需要获取锁，都要进行阻塞。    </span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">2274990926593161451L</span>;</span><br><span class="line">       <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">writerShouldBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> hasQueuedPredecessors();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">readerShouldBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> hasQueuedPredecessors();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// AQS 提供的方法，和 ReentrantLock 里面同步锁实现一样的，判断该线程前面有没有线程在等待获取锁   </span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasQueuedPredecessors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// The correctness of this depends on head being initialized</span></span><br><span class="line">       <span class="comment">// before tail and on head.next being accurate if the current</span></span><br><span class="line">       <span class="comment">// thread is first in queue.</span></span><br><span class="line">       Node t = tail; <span class="comment">// Read fields in reverse initialization order</span></span><br><span class="line">       Node h = head;</span><br><span class="line">       Node s;</span><br><span class="line">       <span class="keyword">return</span> h != t &amp;&amp;</span><br><span class="line">           ((s = h.next) == <span class="keyword">null</span> || s.thread != Thread.currentThread());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="写锁的获取和释放"><a href="#写锁的获取和释放" class="headerlink" title="写锁的获取和释放"></a>写锁的获取和释放</h4><p>首先，写锁是一个可重入的排他锁，如果当前线程获取到了写锁，则增加写状态，如果读锁或者写锁已经被获取了，它则进入等待状态（写锁要确保写锁的操作对读锁可见）。</p><p>写锁和对外提供的方法和 ReentrantLock 一样的，这里主要去分析下它是怎么获取和释放资源的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ReservedStackAccess</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isHeldExclusively()) <span class="comment">// 检查当前线程是不是独占模式</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">    <span class="keyword">int</span> nextc = getState() - releases; <span class="comment">// 计算释放后的资源数量</span></span><br><span class="line">    <span class="keyword">boolean</span> free = exclusiveCount(nextc) == <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">if</span> (free)</span><br><span class="line">        setExclusiveOwnerThread(<span class="keyword">null</span>); <span class="comment">// 如果写锁都执行完了，释放写锁。</span></span><br><span class="line">    setState(nextc); <span class="comment">// 写入释放完资源的数量</span></span><br><span class="line">    <span class="keyword">return</span> free;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ReservedStackAccess</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Walkthrough:</span></span><br><span class="line"><span class="comment">     * 1. If read count nonzero or write count nonzero</span></span><br><span class="line"><span class="comment">     *    and owner is a different thread, fail.</span></span><br><span class="line"><span class="comment">     * 2. If count would saturate, fail. (This can only</span></span><br><span class="line"><span class="comment">     *    happen if count is already nonzero.)</span></span><br><span class="line"><span class="comment">     * 3. Otherwise, this thread is eligible for lock if</span></span><br><span class="line"><span class="comment">     *    it is either a reentrant acquire or</span></span><br><span class="line"><span class="comment">     *    queue policy allows it. If so, update state</span></span><br><span class="line"><span class="comment">     *    and set owner.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Thread current = Thread.currentThread();</span><br><span class="line">    <span class="keyword">int</span> c = getState();</span><br><span class="line">    <span class="keyword">int</span> w = exclusiveCount(c); <span class="comment">// 获取写锁的数量</span></span><br><span class="line">    <span class="keyword">if</span> (c != <span class="number">0</span>) &#123; <span class="comment">// 如果 state 不为 0 表示锁已经分配出去了</span></span><br><span class="line">        <span class="comment">// (Note: if c != 0 and w == 0 then shared count != 0)</span></span><br><span class="line">        <span class="keyword">if</span> (w == <span class="number">0</span> || current != getExclusiveOwnerThread()) <span class="comment">//如果其他线程获取了写锁则获取失败</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (w + exclusiveCount(acquires) &gt; MAX_COUNT)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line">        <span class="comment">// Reentrant acquire</span></span><br><span class="line">        setState(c + acquires); <span class="comment">// 经过上面的检查后，表示写锁可以重入，并返回 true</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 对于要首次获取写锁，如果允许获取写锁， CAS 操作 获取独占锁</span></span><br><span class="line">    <span class="keyword">if</span> (writerShouldBlock() ||</span><br><span class="line">        !compareAndSetState(c, c + acquires))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    setExclusiveOwnerThread(current);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取锁：<br><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/java-aqs/5.png" alt="image"></p><p>获取锁的过程：</p><ol><li>首先获取写锁的数量；</li><li>判断写锁是否已经被获取了，如果已经获取了，就要做重入操作，将锁的资源数量加一，然后返回；如果是首次获取，就要进行 CAS 操作获取独占锁；</li></ol><p>释放锁的过程：</p><ol><li>计算如果释放完资源的数量；</li><li>如果剩下的资源数量为 0，则释放写锁；</li><li>如果剩下的资源数量不为 0，就将计算完的资源数量写入。</li></ol><h4 id="读锁的获取和释放"><a href="#读锁的获取和释放" class="headerlink" title="读锁的获取和释放"></a>读锁的获取和释放</h4><p>读锁是一个支持<strong>重入</strong>的<strong>共享锁</strong>，它能够被多个线程同时获取，当写锁的状态为 0 的时候，读锁总是获取成功的，并且增加读状态。这里比较复杂些。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ReservedStackAccess</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryReleaseShared</span><span class="params">(<span class="keyword">int</span> unused)</span> </span>&#123;</span><br><span class="line">    Thread current = Thread.currentThread();</span><br><span class="line">    <span class="comment">// 先处理本地本地计数器</span></span><br><span class="line">    <span class="comment">// 判断当前线程是否为第一个读线程firstReader</span></span><br><span class="line">    <span class="keyword">if</span> (firstReader == current) &#123;</span><br><span class="line">        <span class="comment">// assert firstReaderHoldCount &gt; 0;</span></span><br><span class="line">        <span class="comment">// 如果当前线程读锁重入次数为 1，再去释放这个线程，firstReader置空 ，否则减去重入次数</span></span><br><span class="line">        <span class="keyword">if</span> (firstReaderHoldCount == <span class="number">1</span>)</span><br><span class="line">            firstReader = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            firstReaderHoldCount--;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 若当前线程不是第一个读线程，那么首先会获取缓存计数器</span></span><br><span class="line">        <span class="comment">// 注：深层次去分析了源码发现 ：readHolds存储了每一个线程的HoldCounter，而HoldCounter中的count变量就是用来记录线程获得的写锁的个数。</span></span><br><span class="line">        HoldCounter rh = cachedHoldCounter;</span><br><span class="line">        <span class="keyword">if</span> (rh == <span class="keyword">null</span> ||</span><br><span class="line">            rh.tid != LockSupport.getThreadId(current)) <span class="comment">// 如果计数器为空或者 tid 不等于当前线程的 tid，则获取缓存计数器，</span></span><br><span class="line">            rh = readHolds.get();</span><br><span class="line">        <span class="keyword">int</span> count = rh.count;</span><br><span class="line">        <span class="comment">// 如果当前线程的计数器数量小于或者等于 1 的时候，移除当前线程的计数器，</span></span><br><span class="line">        <span class="keyword">if</span> (count &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            readHolds.remove();</span><br><span class="line">            <span class="keyword">if</span> (count &lt;= <span class="number">0</span>) <span class="comment">// 如果小于 1 的时候则抛出异常，</span></span><br><span class="line">                <span class="keyword">throw</span> unmatchedUnlockException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果正常获取到了当前线程计数器，则将计数数量减一</span></span><br><span class="line">        --rh.count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 当其他线程读锁也在释放读锁，AQS 可能失败所以自旋重试</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = getState();</span><br><span class="line">        <span class="keyword">int</span> nextc = c - SHARED_UNIT; <span class="comment">// 高 16 位 减一</span></span><br><span class="line">        <span class="keyword">if</span> (compareAndSetState(c, nextc)) <span class="comment">// AQS</span></span><br><span class="line">            <span class="comment">// Releasing the read lock has no effect on readers,</span></span><br><span class="line">            <span class="comment">// but it may allow waiting writers to proceed if</span></span><br><span class="line">            <span class="comment">// both read and write locks are now free.</span></span><br><span class="line">            <span class="keyword">return</span> nextc == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> IllegalMonitorStateException <span class="title">unmatchedUnlockException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> IllegalMonitorStateException(</span><br><span class="line">        <span class="string">"attempt to unlock read lock, not locked by current thread"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ReservedStackAccess</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> unused)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Walkthrough:</span></span><br><span class="line"><span class="comment">     * 1. If write lock held by another thread, fail.</span></span><br><span class="line"><span class="comment">     * 2. Otherwise, this thread is eligible for</span></span><br><span class="line"><span class="comment">     *    lock wrt state, so ask if it should block</span></span><br><span class="line"><span class="comment">     *    because of queue policy. If not, try</span></span><br><span class="line"><span class="comment">     *    to grant by CASing state and updating count.</span></span><br><span class="line"><span class="comment">     *    Note that step does not check for reentrant</span></span><br><span class="line"><span class="comment">     *    acquires, which is postponed to full version</span></span><br><span class="line"><span class="comment">     *    to avoid having to check hold count in</span></span><br><span class="line"><span class="comment">     *    the more typical non-reentrant case.</span></span><br><span class="line"><span class="comment">     * 3. If step 2 fails either because thread</span></span><br><span class="line"><span class="comment">     *    apparently not eligible or CAS fails or count</span></span><br><span class="line"><span class="comment">     *    saturated, chain to version with full retry loop.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Thread current = Thread.currentThread();</span><br><span class="line">    <span class="keyword">int</span> c = getState();</span><br><span class="line">    <span class="keyword">if</span> (exclusiveCount(c) != <span class="number">0</span> &amp;&amp;</span><br><span class="line">        getExclusiveOwnerThread() != current) <span class="comment">// 当没有线程持有写锁的时候就可以获取读锁</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// 获取读锁失败后，线程进入等待队列</span></span><br><span class="line">    <span class="keyword">int</span> r = sharedCount(c); <span class="comment">// 获取读锁的数量</span></span><br><span class="line">    <span class="keyword">if</span> (!readerShouldBlock() &amp;&amp; <span class="comment">// 通过公平的策略判断，如果读锁不用阻塞</span></span><br><span class="line">        r &lt; MAX_COUNT &amp;&amp;  <span class="comment">// 读锁数量没有超出上限</span></span><br><span class="line">        compareAndSetState(c, c + SHARED_UNIT)) &#123; <span class="comment">// 就去将读锁的资源数量加一，这个时候注意的是，由于读锁在高 16 位上。</span></span><br><span class="line">        <span class="comment">// 经过上一步，已经成功获取到读锁，后面进行相关设置</span></span><br><span class="line">        <span class="keyword">if</span> (r == <span class="number">0</span>) &#123;</span><br><span class="line">            firstReader = current; <span class="comment">// 如果它是第一个获取到读锁的线程，则将 firstReader 指向它，并且计数读锁firstReader重入次数为1</span></span><br><span class="line">            firstReaderHoldCount = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (firstReader == current) &#123;</span><br><span class="line">            firstReaderHoldCount++; <span class="comment">// 重入次数加一</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 对于 不是 firstReader 读锁计数更新，更新当前线程的缓存</span></span><br><span class="line">            HoldCounter rh = cachedHoldCounter;</span><br><span class="line">            <span class="keyword">if</span> (rh == <span class="keyword">null</span> ||</span><br><span class="line">                rh.tid != LockSupport.getThreadId(current))</span><br><span class="line">                cachedHoldCounter = rh = readHolds.get();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (rh.count == <span class="number">0</span>)</span><br><span class="line">                readHolds.set(rh);</span><br><span class="line">            rh.count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取读锁失败（阻塞或者数量上限或者 AQS 设置失败），重试，跟 tryAcquireShared 差不多的逻辑。</span></span><br><span class="line">    <span class="keyword">return</span> fullTryAcquireShared(current);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>阅读读锁的时候需要注意<code>firstReader</code>，和 <code>HoldCounter</code> 这两个变量的变化就可以了：</p><ol><li>如果读锁没有被持有，那么每一个线程的 <code>HoldCounter</code> 变量中的 count 变量一定是为 0；</li><li>如果当前线程是第一个获取到读锁的线程，设置 <code>firstReader</code> 为当前线程，并且设置 <code>firstReadHoldCount</code>数量；</li><li>那么如果当前线程不是第一个获取读锁的线程，那么获取当前线程的 <code>HoldCounter</code>，获取 <code>count</code> 的值，判断它等不等于 0 ，如果等于 0 的话，表示当前线程没有获取读锁，那么可以从 <code>readHolds</code> 的管理中将它移除，</li></ol><h4 id="锁降级"><a href="#锁降级" class="headerlink" title="锁降级"></a>锁降级</h4><p><strong>锁降级是指把持住（当前拥有的）写锁，再获取到读锁，随后释放（先前拥有的）写锁的过程。</strong></p><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>主要是分析 AQS 源码的实现，了解到所有的同步类都是实现自定义的同步器 <code>sync</code> ，实现独占方法或者共享方法中的获取资源和释放资源方法供自己使用，同步器只要关注资源变量 state 的变化，对使用者非常友好，层次分明，而不需要关注队列和线程的阻塞的情况。</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li>《Java 并发编程的艺术》</li><li><a href="http://luojinping.com/2015/06/19/AbstractQueuedSynchronizer%E8%AF%A6%E8%A7%A3/" rel="external nofollow noopener noreferrer" target="_blank">AbstractQueuedSynchronizer详解</a></li><li><a href="http://www.cnblogs.com/waterystone/p/4920797.html" rel="external nofollow noopener noreferrer" target="_blank">Java并发之AQS详解</a></li><li><a href="https://www.jianshu.com/p/e2179c74a2e4?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=pc_all_hots&amp;utm_source=recommendation" rel="external nofollow noopener noreferrer" target="_blank">认识非阻塞的同步机制CAS</a></li><li><a href="http://www.cnblogs.com/thomaschen750215/p/4122068.html" rel="external nofollow noopener noreferrer" target="_blank">CAS和自旋锁(spin lock)</a></li><li><a href="https://www.jianshu.com/p/e3afe8ab8364" rel="external nofollow noopener noreferrer" target="_blank">LockSupport（park/unpark）源码分析</a></li><li><a href="https://blog.csdn.net/yuhongye111/article/details/39055531" rel="external nofollow noopener noreferrer" target="_blank">Java并发-ReentrantReadWriteLock源码分析</a></li></ul><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 中 hashCode 的一些研究]]></title>
      <url>/java-hashcode.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h4 id="提出问题"><a href="#提出问题" class="headerlink" title="提出问题"></a>提出问题</h4><ol><li>hashcode 是干什么用的？</li><li>为什么要重写 hashcode 和 equals；</li><li>怎么去重写 hashcode；</li></ol><a id="more"></a><h4 id="hashcode-是什么"><a href="#hashcode-是什么" class="headerlink" title="hashcode 是什么"></a>hashcode 是什么</h4><h5 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h5><blockquote><p>Hash，一般翻译做“散列”，也有直接音译为“哈希”的，就是把任意长度的输入（又叫做预映射， pre-image），通过散列算法，变换成固定长度的输出，该输出就是散列值。</p></blockquote><h5 id="Java-中的-hashCode"><a href="#Java-中的-hashCode" class="headerlink" title="Java 中的 hashCode"></a>Java 中的 hashCode</h5><p><code>hashCode</code>是 jdk 根据对象的地址算出来的一个 <strong>int</strong> 数字，即对象的哈希码值，代表了该对象在内存中的存储位置。</p><p>顶级父类 <code>Object</code> 提供获取 hashcode 的方法，调用的是本地的方法；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>Java 中的 hash 值主要用来干什么的？</p><p>hash 值主要是用来在散列存储结构（HashMap、HashTable、HashSet 等等）中确定对象的存储地址的，提高对象的查询效率，</p><h4 id="为什么要重写-hashcode-和-equals"><a href="#为什么要重写-hashcode-和-equals" class="headerlink" title="为什么要重写 hashcode 和 equals"></a>为什么要重写 hashcode 和 equals</h4><p>首先了解默认情况下的 hashcode 和 equals 方法是什么样：</p><ul><li>hashcode 根据内存地址换算出来一个值；</li><li>equals 判断对象的内存地址是否一样；</li></ul><p>但是大多数情况下，我们是需要判断它们的值是否是相等的情况。</p><p><code>Object.hashCode</code>的通用约定（<em>摘自《Effective Java》第45页</em>）</p><ol><li>在一个应用程序执行期间，如果一个对象的equals方法做比较所用到的信息没有被修改的话，那么，对该对象调用hashCode方法多次，它必须始终如一地返回 同一个整数。在同一个应用程序的多次执行过程中，这个整数可以不同，即这个应用程序这次执行返回的整数与下一次执行返回的整数可以不一致。</li><li>如果两个对象根据equals(Object)方法是相等的，那么调用这两个对象中任一个对象的hashCode方法必须产生同样的整数结果。</li><li>如果两个对象根据equals(Object)方法是不相等的，那么调用这两个对象中任一个对象的hashCode方法，不要求必须产生不同的整数结果。然而，程序员应该意识到这样的事实，对于不相等的对象产生截然不同的整数结果，有可能提高散列表（hash table）的性能。</li></ol><p><strong>如果只重写了equals方法而没有重写hashCode方法的话，则会违反约定的第二条：相等的对象必须具有相等的散列码（hashCode）</strong>。</p><p>比如，我们经常用 String 类型作为 HashMap 的键，知道 HashMap 的键值存储的方式根据元素的 hashcode 求模来判断将元素放到哪个位置的。我们知道 hashMap 的特点是键值不能重复，这个重复就是先根据 hashcode 值判断在哪个位置，然后去链表中 用 equals 判断有没有相同。 如果不重写 hashcode 会造成一些意外的事件。</p><p>又引出例外一个问题了，比如我们用一个可变的对象作为 hashMap 的键值，并且重写了 hashcode 和 equals 方法，当我把一对键值（可变对象为键）装进 hashMap 后，又去改变了对象的某个属性（这个属性参与了 hashcode 的计算），然后就不能再用这个可变对象去操作已经插入到 hashMap 中的键值对了。</p><h4 id="怎么去重写-hashcode"><a href="#怎么去重写-hashcode" class="headerlink" title="怎么去重写 hashcode"></a>怎么去重写 hashcode</h4><p>从阅读 <code>String</code> 源码来分析比较简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h = hash;<span class="comment">// 主要是 String 对象是不可变的，可以使用一个变量存储起来，方便以后使用。</span></span><br><span class="line">        <span class="keyword">if</span> (h == <span class="number">0</span> &amp;&amp; value.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">char</span> val[] = value;</span><br><span class="line"><span class="comment">// 计算每个字符的 ascii 参与到 hashcode 计算中，将前面计算的结果乘以 31 。</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; value.length; i++) &#123;</span><br><span class="line">                h = <span class="number">31</span> * h + val[i];</span><br><span class="line">            &#125;</span><br><span class="line">            hash = h;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>提出问题，为什么要以 <em>31</em> 为权来计算 hashCode？</p><ol><li><p>因为 31 是素数，素数跟其他数相乘，更容易产生唯一性，所以 hash 冲突会小；</p></li><li><p>相乘的时候，数字太大，结果也是越大，很容易造成超出 int 值上限，导致数据丢失的情况，那为什么不是 17 了，参考StackOverflow上最高票的答案<a href="https://stackoverflow.com/questions/299304/why-does-javas-hashcode-in-string-use-31-as-a-multiplier" rel="external nofollow noopener noreferrer" target="_blank">参考答案</a></p><blockquote><p>The value 31 was chosen because it is an odd prime. If it were even and the multiplication overflowed, information would be lost, as multiplication by 2 is equivalent to shifting. The advantage of using a prime is less clear, but it is traditional. A nice property of 31 is that the multiplication can be replaced by a shift and a subtraction for better performance: <code>31 * i == (i &lt;&lt; 5) - i</code>. Modern VMs do this sort of optimization automatically.</p></blockquote><p>解释说，因为虚拟机已经对<strong>移位和减法</strong>进行了优化，并且代替了乘法，性能会更好，因此 hash 的计算表达式是 ：<code>31 * i == (i &lt;&lt; 5) - i</code>。</p></li></ol><p>另外非常有意思的是还可以查看 <code>Long.java</code> 的 <code>hashCode()</code> 方法，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">(<span class="keyword">long</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>)(value ^ (value &gt;&gt;&gt; <span class="number">32</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为 Long 类型有 64 位，比 hash 的长度多了一倍，利用前 32 位 和后 32 位异或，尽可能的让更多的位置参与计算 hash 来保证唯一性。</p><p>最后可以参考 <code>IDEA</code> 默认自动生成的 hashCode 和 equals 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String value1;</span><br><span class="line">    <span class="keyword">private</span> String value2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>; </span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        ObjectDemo that = (ObjectDemo) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (value1 != <span class="keyword">null</span> ? !value1.equals(that.value1) : that.value1 != <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">        <span class="keyword">return</span> value2 != <span class="keyword">null</span> ? value2.equals(that.value2) : that.value2 == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = value1 != <span class="keyword">null</span> ? value1.hashCode() : <span class="number">0</span>;</span><br><span class="line">        result = <span class="number">31</span> * result + (value2 != <span class="keyword">null</span> ? value2.hashCode() : <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><ul><li><p><a href="https://stackoverflow.com/questions/299304/why-does-javas-hashcode-in-string-use-31-as-a-multiplier" rel="external nofollow noopener noreferrer" target="_blank">Why does Java’s hashCode() in String use 31 as a multiplier?</a></p></li><li><p><a href="https://blog.csdn.net/zknxx/article/details/53862572" rel="external nofollow noopener noreferrer" target="_blank">java为什么要重写hashCode和equals方法</a></p></li></ul><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 8 中 LinkedList 源码阅读记录]]></title>
      <url>/java-linkedlist.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><ol><li>认识LinkedList 数据结构；</li><li>主要认识插入元素是怎么实现的；</li><li>遍历 LinkedList 的方法，以及具体实现；</li><li>与 ArrayList 对比。</li></ol><h4 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h4><ul><li>jdk1.8.0_161</li></ul><a id="more"></a><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure><ul><li>继承于<code>AbstractSequentialList</code>的双向链表。它也可以被当作堆栈、队列或双端队列进行操作。</li><li>实现 <code>List</code> 接口，能对它进行队列操作。</li><li>实现 <code>Deque</code> 接口，即能将LinkedList当作双端队列使用。</li><li>实现了<code>Cloneable</code>接口，即覆盖了函数<code>clone()</code>，能克隆。</li><li>实现<code>java.io.Serializable</code>接口，这意味着LinkedList支持序列化，能通过序列化去传输。</li><li>是非同步的，非线程安全。</li></ul><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 链表中有多少个节点，默认为 0    </span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 头节点</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; first;</span><br><span class="line"><span class="comment">// 尾节点</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; last;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        E item;</span><br><span class="line">        Node&lt;E&gt; next;</span><br><span class="line">        Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">        Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.item = element;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">            <span class="keyword">this</span>.prev = prev;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>LinkedList 是一个双向链表</strong>。内部类 <code>Node</code> 是 LinkedList 中的基本数据结构，包含当前节点值，上一个节点得引用，和下个节点的引用。</p><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>比较简单，默认无参构造，和一个 <code>Collection</code> 参数的构造（ <em>将里面元素按顺序前后连接，修改节点个数，并且操作次数 + 1</em> ）。</p><h4 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h4><h5 id="add-E-e"><a href="#add-E-e" class="headerlink" title="add(E e)"></a>add(E e)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 去为节点加</span></span><br><span class="line">    linkLast(e);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将指定的元素防止在链表的尾节点，以前的尾节点变成它前面的节点，如果上个尾节点为null，说明以前是的空链表。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">    last = newNode;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="add-int-index-E-element"><a href="#add-int-index-E-element" class="headerlink" title="add(int index, E element)"></a>add(int index, E element)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">      checkPositionIndex(index);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (index == size)</span><br><span class="line">          linkLast(element);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">          linkBefore(element, node(index));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns the (non-null) Node at the specified element index.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// assert isElementIndex(index);</span></span><br><span class="line"><span class="comment">// 双链表可以分别从 头节点 或者尾节点开始遍历，计算它是在前面一半，还是在后面的位置，决定遍历方式。</span></span><br><span class="line"><span class="comment">// 这也是LinkedList 为什么要使用双向链表，提升了使用游标操作链表的效率。</span></span><br><span class="line">      <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">          Node&lt;E&gt; x = first;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">              x = x.next;</span><br><span class="line">          <span class="keyword">return</span> x;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          Node&lt;E&gt; x = last;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">              x = x.prev;</span><br><span class="line">          <span class="keyword">return</span> x;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Inserts element e before non-null Node succ.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">linkBefore</span><span class="params">(E e, Node&lt;E&gt; succ)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// assert succ != null;</span></span><br><span class="line">      <span class="keyword">final</span> Node&lt;E&gt; pred = succ.prev;</span><br><span class="line">      <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(pred, e, succ);</span><br><span class="line">      succ.prev = newNode;</span><br><span class="line">      <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</span><br><span class="line">          first = newNode;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">          pred.next = newNode;</span><br><span class="line">      size++;</span><br><span class="line">      modCount++;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol><li>检查索引是否越界，虽然 ListedList 中没有索引概念；</li><li>如果 index 和 size 相同，则在尾节点上加上元素；</li><li>不相同的话，先去遍历链表查找到索引位置的节点，然后在它的前面插入节点。</li></ol><h4 id="Get"><a href="#Get" class="headerlink" title="Get"></a>Get</h4><h5 id="get-int-index"><a href="#get-int-index" class="headerlink" title="get(int index)"></a>get(int index)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;  </span><br><span class="line">    checkElementIndex(index);  </span><br><span class="line">    <span class="keyword">return</span> node(index).item;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>检查索引越界；</li><li>跟上面的一样，查找该索引位置的节点，然后获取它的元素。</li></ol><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><p>其他的例如 <code>getFirst()</code>、<code>getLast()</code>。</p><h4 id="Remove"><a href="#Remove" class="headerlink" title="Remove"></a>Remove</h4><h5 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> removeFirst();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 移除头节点</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> E <span class="title">removeFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">       <span class="keyword">if</span> (f == <span class="keyword">null</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">       <span class="keyword">return</span> unlinkFirst(f);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 参数 f 为头节点</span></span><br><span class="line"><span class="comment">// 将头节点指向 next 节点，如果 next节点 为 null 则链表 为 null ，链表大小减 1 ，修改次数记录加 1.</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> E <span class="title">unlinkFirst</span><span class="params">(Node&lt;E&gt; f)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// assert f == first &amp;&amp; f != null;</span></span><br><span class="line">       <span class="keyword">final</span> E element = f.item;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; next = f.next;</span><br><span class="line">       f.item = <span class="keyword">null</span>;</span><br><span class="line">       f.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">       first = next;</span><br><span class="line">       <span class="keyword">if</span> (next == <span class="keyword">null</span>)</span><br><span class="line">           last = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           next.prev = <span class="keyword">null</span>;</span><br><span class="line">       size--;</span><br><span class="line">       modCount++;</span><br><span class="line">       <span class="keyword">return</span> element;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h5 id="remove（int-index）"><a href="#remove（int-index）" class="headerlink" title="remove（int index）"></a>remove（int index）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;  </span><br><span class="line">    checkElementIndex(index);  </span><br><span class="line">    <span class="keyword">return</span> unlink(node(index));  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Unlinks non-null node x.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">E <span class="title">unlink</span><span class="params">(Node&lt;E&gt; x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// assert x != null;</span></span><br><span class="line">        <span class="keyword">final</span> E element = x.item;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; next = x.next;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;</span><br><span class="line">        <span class="comment">// 如果本节点为头节点，头节点指向next</span></span><br><span class="line">        <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">            first = next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 不是头节点，则将前节点和后节点连接起来，然后删掉本节点的引用 GC</span></span><br><span class="line">            prev.next = next;</span><br><span class="line">            x.prev = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果是尾节点，则将尾节点指向前节点</span></span><br><span class="line">        <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            last = prev;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 连接，双向链表，双方都有引用，删除自身的引用GC</span></span><br><span class="line">            next.prev = prev;</span><br><span class="line">            x.next = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 删除自身 GC</span></span><br><span class="line">        x.item = <span class="keyword">null</span>;</span><br><span class="line">        size--;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="remove-Object-o"><a href="#remove-Object-o" class="headerlink" title="remove(Object o)"></a>remove(Object o)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历 equals 找出 node，然后调用 unlink(Node&lt;E&gt; x)   </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (x.item == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    unlink(x);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (o.equals(x.item)) &#123;</span><br><span class="line">                    unlink(x);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    Node&lt;E&gt; x = node(index);</span><br><span class="line">    E oldVal = x.item;</span><br><span class="line">    x.item = element;</span><br><span class="line">    <span class="keyword">return</span> oldVal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>有索引，第一件事去检查索引是否越界；</li><li>根据索引找出 node；</li><li>替换 node 的元素，返回 该索引位置 Node 的旧元素的值。</li><li>注意，Set 方法不增加LinkedList 的修改次数</li></ol><h4 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">       <span class="comment">// Clearing all of the links between nodes is "unnecessary", but:  </span></span><br><span class="line">       <span class="comment">// - helps a generational GC if the discarded nodes inhabit  </span></span><br><span class="line">       <span class="comment">//   more than one generation  </span></span><br><span class="line">       <span class="comment">// - is sure to free memory even if there is a reachable Iterator  </span></span><br><span class="line">       <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; ) &#123;  </span><br><span class="line">           Node&lt;E&gt; next = x.next;  </span><br><span class="line">           x.item = <span class="keyword">null</span>;  </span><br><span class="line">           x.next = <span class="keyword">null</span>;  </span><br><span class="line">           x.prev = <span class="keyword">null</span>;  </span><br><span class="line">           x = next;  </span><br><span class="line">       &#125;  </span><br><span class="line">       first = last = <span class="keyword">null</span>;  </span><br><span class="line">       size = <span class="number">0</span>;  </span><br><span class="line">       modCount++;  </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ol><li>释放所有的元素，让他们直接无引用，垃圾回收器发现这些 node 元素是不可达的时候，释放内存。</li><li>数据恢复默认；修改次数记录加一。</li></ol><h4 id="实现-ListIterator"><a href="#实现-ListIterator" class="headerlink" title="实现 ListIterator"></a>实现 ListIterator</h4><p>非线程安全，并发下会快速失败。</p><p>继承 <code>Iterator</code>，<code>Iterator</code> 只能向后遍历和删除操作，<code>ListIterator</code> 额外添加了几个方法，主要实现以下几个功能：</p><ol><li>允许我们向前（previous）、向后（next）两个方向遍历 List;</li><li>使用迭代器遍历的时候，需要时刻知道游标索引的位置；</li><li>使用迭代器的时候，需要修改游标处的值，<code>remove</code>、<code>set</code>、<code>add</code> 这几个方法。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ListItr</span> <span class="keyword">implements</span> <span class="title">ListIterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; lastReturned;<span class="comment">// 记录当前游标的节点</span></span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; next;<span class="comment">// 记录下一个节点，向前遍历的时候，一直和 lastReturned 相同</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> nextIndex;<span class="comment">// 记录当前游标</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> expectedModCount = modCount;<span class="comment">//记录修改记录，用于快速失败</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ListItr</span> <span class="keyword">implements</span> <span class="title">ListIterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; lastReturned; </span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; next;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> nextIndex; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> expectedModCount = modCount;</span><br></pre></td></tr></table></figure><h4 id="Spliterator"><a href="#Spliterator" class="headerlink" title="Spliterator"></a>Spliterator</h4><p>jdk 1.8 中新增分割的迭代器，主要是 Jdk 1.8 中增加的并行处理的流运算，用到了可分割的迭代器。</p><p>LinkedList 主要只是实现默认的方法，进行分割，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LLSpliterator</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Spliterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BATCH_UNIT = <span class="number">1</span> &lt;&lt; <span class="number">10</span>;  <span class="comment">// batch array size increment</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_BATCH = <span class="number">1</span> &lt;&lt; <span class="number">25</span>;  <span class="comment">// max batch array size;</span></span><br><span class="line">    <span class="keyword">final</span> LinkedList&lt;E&gt; list; <span class="comment">// null OK unless traversed</span></span><br><span class="line">    Node&lt;E&gt; current;      <span class="comment">// current node; null until initialized</span></span><br><span class="line">    <span class="keyword">int</span> est;              <span class="comment">// size estimate; -1 until first needed</span></span><br><span class="line">    <span class="keyword">int</span> expectedModCount; <span class="comment">// initialized when est set</span></span><br><span class="line">    <span class="keyword">int</span> batch;            <span class="comment">// batch size for splits</span></span><br></pre></td></tr></table></figure><ol><li><p>使用<code>trySplit()</code> 对等分割，返回索引小的那部分 <code>Spliterator</code>;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Spliterator&lt;E&gt; <span class="title">trySplit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Node&lt;E&gt; p;</span><br><span class="line">    <span class="keyword">int</span> s = getEst();</span><br><span class="line">    <span class="comment">// 还能继续分割</span></span><br><span class="line">    <span class="keyword">if</span> (s &gt; <span class="number">1</span> &amp;&amp; (p = current) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 头节点不为 null</span></span><br><span class="line">        <span class="comment">// batch 默认为0 ，</span></span><br><span class="line">        <span class="comment">// BATCH_UNIT 默认为 1024</span></span><br><span class="line">        <span class="comment">// 所以每一个后面的批处理，都会比前面多</span></span><br><span class="line">        <span class="keyword">int</span> n = batch + BATCH_UNIT;</span><br><span class="line">        <span class="keyword">if</span> (n &gt; s)</span><br><span class="line">            n = s;</span><br><span class="line">        <span class="comment">// 太大了执行最大批量处理</span></span><br><span class="line">        <span class="keyword">if</span> (n &gt; MAX_BATCH)<span class="comment">// 33554432</span></span><br><span class="line">            n = MAX_BATCH;</span><br><span class="line">        Object[] a = <span class="keyword">new</span> Object[n];</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 将 list 的元素复制到数组中</span></span><br><span class="line">        <span class="keyword">do</span> &#123; a[j++] = p.item; &#125; <span class="keyword">while</span> ((p = p.next) != <span class="keyword">null</span> &amp;&amp; j &lt; n);</span><br><span class="line">        <span class="comment">// 如果初始的 list 大小大于 1024 ，将记录这些值，用于下次切割的时候使用</span></span><br><span class="line">        current = p;</span><br><span class="line">        batch = j;</span><br><span class="line">        est = s - j;</span><br><span class="line">        <span class="keyword">return</span> Spliterators.spliterator(a, <span class="number">0</span>, j, Spliterator.ORDERED);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 进来的时候 est = -1 ，表示没有分割</span></span><br><span class="line"><span class="comment">// 其实就是返回 list 的大小</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getEst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s; <span class="comment">// force initialization</span></span><br><span class="line">    <span class="keyword">final</span> LinkedList&lt;E&gt; lst;</span><br><span class="line">    <span class="keyword">if</span> ((s = est) &lt; <span class="number">0</span>) &#123; <span class="comment">// -1</span></span><br><span class="line">        <span class="keyword">if</span> ((lst = list) == <span class="keyword">null</span>)</span><br><span class="line">            s = est = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;<span class="comment">// list 不为 Null 我需要对自己的几个属性进行初始化值</span></span><br><span class="line">            expectedModCount = lst.modCount;</span><br><span class="line">            current = lst.first;</span><br><span class="line">            s = est = lst.size;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我初始化进来的时候，LLSpliterator 中的属性都是注释中的默认值，流程分析在上面中文注释中。</p><p><strong>所以当大小 小于 1024 的时候，分割没效果，还浪费了计算的性能。</strong></p><p><strong>还发现虽然它可以分割的，但是依然是非线程安全。</strong></p><ol start="2"><li><code>forEachRemaining(Consumer&lt;? super E&gt; action)</code> 批量消费，不能重复消费。</li><li><code>tryAdvance</code>，单个消费，从第一个开始消费，消费完移动节点，以后无法消费这个节点，成功消费返回 <code>true</code>。</li></ol></li></ol><h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><ol><li><p><code>indexof(Object)</code>,<code>lastindexof(Object)</code></p><p>（查找属性）找元素的索引，遍历查找，效率取决于离尾节点的位置；</p></li><li><p><code>peek</code>，（队列属性）查看头节点的元素；<code>element</code>方法也是一个意思，感觉有点重复的意思。</p></li><li><p><code>poll</code> ，（队列属性）删除头节点，并返回该节点的元素。</p></li><li><p><code>offer</code>，（队列属性），在尾节点添加，同 <code>offerFirst</code>；</p></li><li><p><code>removeFirstOccurrence(Object o)</code>，<code>removeLastOccurrence(Object o)</code> 删除第一次或者最后一次出现该元素的节点。</p></li></ol><h4 id="实现线程安全"><a href="#实现线程安全" class="headerlink" title="实现线程安全"></a>实现线程安全</h4><ol><li><code>Collections.synchronizedList(LinkedList);</code></li><li>锁</li></ol><h4 id="为什么-LinkedList-查找速度比-ArrayList-慢"><a href="#为什么-LinkedList-查找速度比-ArrayList-慢" class="headerlink" title="为什么 LinkedList 查找速度比 ArrayList 慢"></a>为什么 LinkedList 查找速度比 ArrayList 慢</h4><ol><li><code>ArrayList</code> 实现 了 <code>RandomAccess</code> 接口，并且它的数据结构是数组，空间连续的，可以使用索引下标直接访问元素；</li><li><code>LinkedList</code> 使用的是<code>get(int)</code> 方法，它需要从头节点或者尾节点开始遍历，如果要查找的元素的离头节点或者尾节点很远的时候，速度自然而然的慢下来了。</li></ol><h4 id="为什么-LinkedList-要使用迭代器而不使用-for-循环"><a href="#为什么-LinkedList-要使用迭代器而不使用-for-循环" class="headerlink" title="为什么 LinkedList 要使用迭代器而不使用 for 循环"></a>为什么 LinkedList 要使用迭代器而不使用 for 循环</h4><ol><li>迭代器的源码很好理解，就是一直使用游标获取下一个节点的值。</li><li>使用 for 循环的时候，我们肯定使用的是 <code>get(index)</code>这个方法，查看这个方法的源码发现，每次都是从头到尾遍历一遍，因为 LinkedLIst 是无序的，没有索引这个概念，只能够重新查找，当容量足够大后，这个性能损失得很明显。</li></ol><p>这样对比起来差距就很明显的。</p><p>最后还需要注意一点：<strong>使用迭代器循环 LinkedList 不比 for 循环的 ArrayList 的慢。</strong>这个可以下去做个测试，最好 10 万条。</p><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">enum</span> Target &#123;</span><br><span class="line">        ARRAYLIST,</span><br><span class="line">        LINKEDLIST;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size = <span class="number">100000</span>;</span><br><span class="line">        List&lt;Integer&gt; aList = <span class="keyword">new</span> ArrayList&lt;&gt;(size);</span><br><span class="line">        List&lt;Integer&gt; lList = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            aList.add(i);</span><br><span class="line">            lList.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        String msg;</span><br><span class="line">        Target target;</span><br><span class="line">        msg = <span class="string">"使用 for 循环 %s 十万次的时间 %s ms %n"</span>;</span><br><span class="line">        target = Target.ARRAYLIST;</span><br><span class="line">        <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; aList.size(); i++) &#123;</span><br><span class="line">            aList.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.printf(msg, target, end - begin);</span><br><span class="line"></span><br><span class="line">        target = Target.LINKEDLIST;</span><br><span class="line">        begin = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lList.size(); i++) &#123;</span><br><span class="line">            lList.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        System.out.printf(msg, target, end - begin);</span><br><span class="line"></span><br><span class="line">        msg = <span class="string">"使用 foreach 循环 %s 十万次的时间 %s ms%n"</span>;</span><br><span class="line">        target = Target.ARRAYLIST;</span><br><span class="line">        begin = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (Integer anAList : aList) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        System.out.printf(msg, target, end - begin);</span><br><span class="line"></span><br><span class="line">        target = Target.LINKEDLIST;</span><br><span class="line">        begin = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (Integer aLList : lList) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        System.out.printf(msg, target, end - begin);</span><br><span class="line"></span><br><span class="line">        msg = <span class="string">"使用 jdk stream api 循环 %s 十万次的时间 %s ms%n"</span>;</span><br><span class="line">        target = Target.ARRAYLIST;</span><br><span class="line">        begin = System.currentTimeMillis();</span><br><span class="line">        aList.stream().forEach(l -&gt; &#123;&#125;);</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        System.out.printf(msg, target, end - begin);</span><br><span class="line"></span><br><span class="line">        target = Target.LINKEDLIST;</span><br><span class="line">        begin = System.currentTimeMillis();</span><br><span class="line">        lList.stream().forEach(l -&gt; &#123;&#125;);</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        System.out.printf(msg, target, end - begin);</span><br><span class="line"></span><br><span class="line">        msg = <span class="string">"使用 jdk parallelStream api 循环 %s 十万次的时间 %s ms%n"</span>;</span><br><span class="line">        target = Target.ARRAYLIST;</span><br><span class="line">        begin = System.currentTimeMillis();</span><br><span class="line">        aList.parallelStream().forEach(l -&gt; &#123;&#125;);</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        System.out.printf(msg, target, end - begin);</span><br><span class="line"></span><br><span class="line">        target = Target.LINKEDLIST;</span><br><span class="line">        begin = System.currentTimeMillis();</span><br><span class="line">        lList.parallelStream().forEach(l -&gt; &#123;&#125;);</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        System.out.printf(msg, target, end - begin);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">使用 <span class="keyword">for</span> 循环 ARRAYLIST 十万次的时间 <span class="number">3</span> ms </span><br><span class="line">使用 <span class="keyword">for</span> 循环 LINKEDLIST 十万次的时间 <span class="number">5397</span> ms </span><br><span class="line">使用 foreach 循环 ARRAYLIST 十万次的时间 <span class="number">3</span> ms</span><br><span class="line">使用 foreach 循环 LINKEDLIST 十万次的时间 <span class="number">3</span> ms</span><br><span class="line">使用 jdk stream api 循环 ARRAYLIST 十万次的时间 <span class="number">41</span> ms</span><br><span class="line">使用 jdk stream api 循环 LINKEDLIST 十万次的时间 <span class="number">3</span> ms</span><br><span class="line">使用 jdk parallelStream api 循环 ARRAYLIST 十万次的时间 <span class="number">7</span> ms</span><br><span class="line">使用 jdk parallelStream api 循环 LINKEDLIST 十万次的时间 <span class="number">4</span> ms</span><br></pre></td></tr></table></figure><p>所以建议都是用 foreach （迭代器）进行没有性能损失，主要是有快速失败机制。jdk 1.8 的 stream 的表达式使用起来方便，稍微有些性能损失，按照使用环境考虑得失。</p><h4 id="LinkedList-插入速度一定比-ArrayList-快吗？"><a href="#LinkedList-插入速度一定比-ArrayList-快吗？" class="headerlink" title="LinkedList 插入速度一定比 ArrayList 快吗？"></a>LinkedList 插入速度一定比 ArrayList 快吗？</h4><p>不一定。</p><p><strong>首先我们需要说下 LinkedList 的插入步骤：</strong></p><ol><li>构建一个 Node 对象（需要浪费性能）；</li><li>寻址，找到对象要插入的位置（查找慢，如果插入的位置离头节点或者尾节点远，消耗的消费更多的性能）；</li><li>更改对象的引用地址，插入 node 对象。</li></ol><p><strong>再看下 ArrayList 的插入操作：</strong></p><ol><li>寻址，找到需要插入的位置；</li><li>如果需要扩容就扩容，如果不是插入到最后的位置，空出一个位置提供给插入的元素，需要批量往后移动数组的位置；</li><li>插入数据。</li></ol><p><strong>然后根据它们的特性：</strong></p><ol><li>LinkedList 插入的时候 为什么快，因为快在值需要改变前后 node 的引用地址就可以；</li><li>ArrayList 插入操作的时候为什么慢，因为慢在移动数组的位置上，移动的越多越慢。</li></ol><p><strong>问题就清楚了：</strong></p><ol><li>如果你确定了 ArrayList 不会扩容的情况下，又比较少移动元素（插入或者删除操作在比较后的位置），ArrayList 的插入或者删除操作效率其实比 LinkedList 还高。</li><li>如果 删除的元素在数据结构的非常靠前的位置，毫无疑问使用 LinkedList，</li><li>如果它们的操做位置都是<strong>在尾端进行插入操作</strong>，而且需要插入的<strong>元素的数量已知</strong>的情况下，用 ArrayList 效率会更高些，不需要构建 Node 对象，就少消耗了很多引用内存。</li><li>综合实际情况，还涉及到 ArrayList 扩容，插入元素是否在尾部等复杂因素。</li></ol><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Data JPA 中使用空间数据]]></title>
      <url>/jpa-spatial.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>JPA 中使用空间数据字段的时候，出现了很多问题，中间走了好多弯路，这里记录下。</p><p>环境：</p><ul><li>Postgresql 9.5 + PostGIS</li><li>JPA</li><li>Spring 4.2</li></ul><a id="more"></a><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>首先需要检查项目中的 hibernate 的版本依赖的问题，因为我们需要使用 <code>hibernate-spatial</code><sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top-right hint--error hint--large" aria-label="Hibernate Spatial是对处理空间数据的一个Hibernate扩展 ，要想使用 Hibernate Spatial  就要引入JTS，完成Java 对几何图形对象的算法，">[1]</span></a></sup>的依赖包，它依赖 <code>hibernate-core 5.0</code> 以上的。还需要注意的一点是，我中间成了一个问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NoSuchMethodError: org.hibernate.Session.getFlushMode()Lorg/hibernate/FlushMode;</span><br></pre></td></tr></table></figure><p>给出的解释是 :</p><blockquote><p><code>Hibernate 5.2</code> supports added in <code>Spring framework 4.3</code> , that its stable version will be available in next week. Spring 4.2 only supports Hibernate up to 5.1.</p></blockquote><p>项目中的 使用的是 <strong>Spring 4.2</strong> ，只好把 Hibernate 降级到 5.1。</p><ol><li><p>加入 <code>hibernate-spatial</code> 依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-spatial<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>hibernate已经可以支持空间数据类型的数据操作了，可以实现空间数据入库到空间数据对象影射到java对象中（插入和查询方法），例如 equals,contains,disjoint,within 等等。</p></li><li><p>更改数据库方言：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hibernate.dialect=org.hibernate.spatial.dialect.postgis.PostgisPG9Dialect</span><br></pre></td></tr></table></figure></li><li><p>空间数据库字段的映射：<br>这里只做了一个点的字段；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Column</span>(name = <span class="string">"geom"</span>, columnDefinition = <span class="string">"geometry(Point,4326)"</span>)</span><br><span class="line"><span class="keyword">private</span> Point geom;</span><br></pre></td></tr></table></figure></li><li><p>其余的 Repository 和 Service 跟普通无区别，</p><p>保存数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Geometry geom = <span class="keyword">new</span> WKTReader().read(<span class="string">"POINT (-122.2985 47.6448)"</span>);</span><br><span class="line">Point point = geom.getInteriorPoint();</span><br><span class="line">point.setSRID(<span class="number">4326</span>);</span><br><span class="line">reference.setGeom(point);</span><br><span class="line">repository.save(reference);</span><br></pre></td></tr></table></figure></li></ol><p>查询数据的时候，会出现一个问题，空间字段的json 中会出现：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"coordinates" : &#123;</span><br><span class="line">  "envelope" : &#123;</span><br><span class="line">    "envelope" : &#123;</span><br><span class="line">      "envelope" : &#123;</span><br><span class="line">          ……</span><br></pre></td></tr></table></figure><p>这并不是我们需要的结果，原因是 <em>Jackson</em> 无法管理 <code>Point</code> 数据类型的序列化，需要我们自己定义它的序列化。</p><p>下面针对空间字段 <code>Point</code> 做一个序列化转换器。</p><ol><li><p>创建一个序列化转换器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonGenerator;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JsonSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.SerializerProvider;</span><br><span class="line"><span class="keyword">import</span> com.vividsolutions.jts.geom.Point;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PointToJsonSerializer</span> <span class="keyword">extends</span> <span class="title">JsonSerializer</span>&lt;<span class="title">Point</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(Point value, JsonGenerator gen, SerializerProvider serializers)</span> <span class="keyword">throws</span> IOException, JsonProcessingException </span>&#123;</span><br><span class="line">        String jsonValue = <span class="string">"null"</span>;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(value != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">double</span> lat = value.getY();</span><br><span class="line">                <span class="keyword">double</span> lon = value.getX();</span><br><span class="line">                <span class="comment">// wkt 格式，经纬度格式按照自己的需求</span></span><br><span class="line">                jsonValue = String.format(<span class="string">"POINT (%s %s)"</span>, lon, lat);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">            <span class="comment">// 不处理</span></span><br><span class="line">        &#125;</span><br><span class="line">        gen.writeString(jsonValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>我们还需要从前端接收 geometry 字段的 wkt 形式的 json 字符串，这里需要反序列化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonParser;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.DeserializationContext;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JsonDeserializer;</span><br><span class="line"><span class="keyword">import</span> com.vividsolutions.jts.geom.Coordinate;</span><br><span class="line"><span class="keyword">import</span> com.vividsolutions.jts.geom.GeometryFactory;</span><br><span class="line"><span class="keyword">import</span> com.vividsolutions.jts.geom.Point;</span><br><span class="line"><span class="keyword">import</span> com.vividsolutions.jts.geom.PrecisionModel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonToPointDeserializer</span> <span class="keyword">extends</span> <span class="title">JsonDeserializer</span>&lt;<span class="title">Point</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> GeometryFactory GEOMETRY_FACTORY = <span class="keyword">new</span> GeometryFactory(<span class="keyword">new</span> PrecisionModel(), <span class="number">4326</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Point <span class="title">deserialize</span><span class="params">(JsonParser jp, DeserializationContext ctxt)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, JsonProcessingException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String text = jp.getText();</span><br><span class="line">            <span class="keyword">if</span> (text == <span class="keyword">null</span> || text.length() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            String[] coordinates = text.replaceFirst(<span class="string">"POINT ?\\("</span>, <span class="string">""</span>).replaceFirst(<span class="string">"\\)"</span>, <span class="string">""</span>).split(<span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">double</span> lat = Double.parseDouble(coordinates[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">double</span> lon = Double.parseDouble(coordinates[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">return</span> GEOMETRY_FACTORY.createPoint(<span class="keyword">new</span> Coordinate(lat, lon));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在空间字段上配置自定义的序列化，最终结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Column</span>(name = <span class="string">"geom"</span>, columnDefinition = <span class="string">"geometry(Point,4326)"</span>)</span><br><span class="line"><span class="meta">@JsonSerialize</span>(using = PointToJsonSerializer.class)</span><br><span class="line"><span class="meta">@JsonDeserialize</span>(using = JsonToPointDeserializer.class)</span><br><span class="line"><span class="keyword">private</span> Point geom;</span><br></pre></td></tr></table></figure></li><li><p>测试向服务端传输数据和获取到的空间数据。</p><ul><li>返回的数据 <code>&quot;geom&quot;:&quot;POINT (-122.2985 47.6448)&quot;</code></li><li><p>传输数据 POST 提交：</p><p><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/junit-test/2.png" alt="image"></p></li></ul></li></ol><p>这样做的一个问题就是其余的例如线和多边形，要重新新建序列化代码。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这样就完成了自动的后端 <code>Geometry</code> 字段和 <code>wkt</code> 字符串数据的转换，同理其他形式的 ，例如<code>geojson</code> 格式一样可以进行自动转换。</p><p>补充一点，hibernate的postgis支持不是很好，国内资料比较少，很多需求或者问题都不是很好解决，而且它支持的 postgis 的函数库也比较少，所以可以使用原生 SQL 进行查询装载对象也是比较好的解决办法，例如使用 Mybatis。</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="http://wiselyman.iteye.com/blog/2381465" rel="external nofollow noopener noreferrer" target="_blank">利用hibernate-spatial让Spring Data JPA支持空间数据</a></li><li><a href="https://stackoverflow.com/questions/27624940/map-a-postgis-geometry-point-field-with-hibernate-on-spring-boot" rel="external nofollow noopener noreferrer" target="_blank">Map a PostGIS geometry point field with Hibernate on Spring Boot</a><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none;padding-left:0;margin-left:40px"><li id="fn:1"><span style="display:inline-block;vertical-align:top;padding-right:10px;margin-left:-40px">1.</span><span style="display:inline-block;vertical-align:top;margin-left:10px">Hibernate Spatial是对处理空间数据的一个Hibernate扩展 ，要想使用 Hibernate Spatial 就要引入JTS，完成Java 对几何图形对象的算法，<a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div></li></ul><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jpa </tag>
            
            <tag> Spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习 Spring Boot：（二十九）Spring Boot Junit 单元测试]]></title>
      <url>/springboot-test.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>JUnit 是一个<strong>回归测试框架</strong>，被开发者用于实施对应用程序的单元测试，加快程序编制速度，同时提高编码的质量。</p><p>JUnit 测试框架具有以下重要特性：</p><ul><li>测试工具</li><li>测试套件</li><li>测试运行器</li><li>测试分类</li></ul><a id="more"></a><h3 id="了解-Junit-基础方法"><a href="#了解-Junit-基础方法" class="headerlink" title="了解 Junit 基础方法"></a>了解 Junit 基础方法</h3><h4 id="加入依赖"><a href="#加入依赖" class="headerlink" title="加入依赖"></a>加入依赖</h4><p>在 <code>pom.xml</code> 中加入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="创建测试类和测试方法"><a href="#创建测试类和测试方法" class="headerlink" title="创建测试类和测试方法"></a>创建测试类和测试方法</h4><ol><li>测试类的的命名规则一般是 <code>xxxTest.java</code> ；</li><li>测试类中测试的方法可以有前缀，这个看统一标准，所以有时候会发现别人的测试方法上有<code>test</code>前缀；</li><li>并且测试方法上加上注解 <code>@Test</code>。</li></ol><p>使用 IDEA 中，<strong>选中当前类名</strong>，使用快捷键 <code>ALT + ENTER</code>（WIN），向下选则 <code>Create Test</code> 回车，即可进入生成测试类的选项中，再次回车，就快速的生成测试类。</p><p><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/junit-test/1.png" alt="img"></p><p><code>OK</code> 完你会发现，生成的测试类在 <code>src/test</code> 目录下，测试类和源代码的<strong>包名</strong> 是一致的。生成后结果（注意下生成的方法名是不加 test）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImplTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JUnit中的注解"><a href="#JUnit中的注解" class="headerlink" title="JUnit中的注解"></a>JUnit中的注解</h4><ul><li><code>@BeforeClass</code>：针对所有测试，只执行一次，且必须为<code>static void</code></li><li><code>@Before</code>：初始化方法，执行当前测试类的每个测试方法前执行。</li><li><code>@Test</code>：测试方法，在这里可以测试期望异常和超时时间</li><li><code>@After</code>：释放资源，执行当前测试类的每个测试方法后执行</li><li><code>@AfterClass</code>：针对所有测试，只执行一次，且必须为<code>static void</code></li><li><code>@Ignore</code>：忽略的测试方法（只在测试类的时候生效，单独执行该测试方法无效）</li><li><code>@RunWith</code>:可以更改测试运行器 ，缺省值 <code>org.junit.runner.Runner</code></li></ul><p>一个单元测试类执行顺序为：</p><p><code>@BeforeClass</code> –&gt; <code>@Before</code> –&gt; <code>@Test</code> –&gt; <code>@After</code> –&gt; <code>@AfterClass</code></p><p>每一个测试方法的调用顺序为：</p><p><code>@Before</code> –&gt; <code>@Test</code> –&gt; <code>@After</code></p><h4 id="超时测试"><a href="#超时测试" class="headerlink" title="超时测试"></a>超时测试</h4><p>如果一个测试用例比起指定的毫秒数花费了更多的时间，那么 Junit 将自动将它标记为失败。<code>timeout</code> 参数和 <code>@Test</code>注释一起使用。现在让我们看看活动中的 <code>@test(timeout)</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span>(timeout = <span class="number">1000</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTimeout</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">    System.out.println(<span class="string">"Complete"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面测试会失败，在一秒后会抛出异常 <code>org.junit.runners.model.TestTimedOutException: test timed out after 1000 milliseconds</code></p><h4 id="异常测试"><a href="#异常测试" class="headerlink" title="异常测试"></a>异常测试</h4><p>你可以测试代码是否它抛出了想要得到的异常。expected 参数和 @Test 注释一起使用。现在让我们看看活动中的 <code>@Test(expected)</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span>(expected = NullPointerException.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNullException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码会测试成功。</p><h4 id="套件测试"><a href="#套件测试" class="headerlink" title="套件测试"></a>套件测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskOneTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Task one do."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskTwoTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Task two do."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskThreeTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Task Three."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(Suite.class) <span class="comment">// 1. 更改测试运行方式为 Suite</span></span><br><span class="line"><span class="comment">// 2. 将测试类传入进来</span></span><br><span class="line"><span class="meta">@Suite</span>.SuiteClasses(&#123;TaskOneTest.class, TaskTwoTest.class, TaskThreeTest.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuitTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试套件的入口类只是组织测试类一起进行测试，无任何测试方法，</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="参数化测试"><a href="#参数化测试" class="headerlink" title="参数化测试"></a>参数化测试</h4><p>Junit 4 引入了一个新的功能<strong>参数化测试</strong>。参数化测试允许开发人员使用不同的值反复运行同一个测试。你将遵循 5 个步骤来创建<strong>参数化测试</strong>。</p><ul><li>用 <code>@RunWith(Parameterized.class)</code>来注释 test 类。</li><li>创建一个由 <code>@Parameters</code> 注释的<strong>公共的静态方法</strong>，它返回<strong>一个对象的集合(数组)</strong>来作为测试数据集合。</li><li>创建一个公共的构造函数，它接受和一行测试数据相等同的东西。</li><li>为每一列测试数据创建一个实例变量。</li><li>用实例变量作为测试数据的来源来创建你的测试用例。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.更改默认的测试运行器为RunWith(Parameterized.class)</span></span><br><span class="line"><span class="meta">@RunWith</span>(Parameterized.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParameterTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 2.声明变量存放预期值和测试数据</span></span><br><span class="line">    <span class="keyword">private</span> String firstName;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.声明一个返回值 为Collection的公共静态方法，并使用@Parameters进行修饰</span></span><br><span class="line">    <span class="meta">@Parameterized</span>.Parameters <span class="comment">//</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Object[]&gt; param() &#123;</span><br><span class="line">        <span class="comment">// 这里我给出两个测试用例</span></span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> Object[][]&#123;&#123;<span class="string">"Mike"</span>, <span class="string">"Black"</span>&#125;, &#123;<span class="string">"Cilcln"</span>, <span class="string">"Smith"</span>&#125;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.为测试类声明一个带有参数的公共构造函数，并在其中为之声明变量赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ParameterTest</span><span class="params">(String firstName, String lastName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 5. 进行测试，发现它会将所有的测试用例测试一遍</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String name = firstName + <span class="string">" "</span> + lastName;</span><br><span class="line">        assertThat(<span class="string">"Mike Black"</span>, is(name));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Hamcrest"><a href="#Hamcrest" class="headerlink" title="Hamcrest"></a>Hamcrest</h4><p>JUnit 4.4 结合 Hamcrest 提供了一个全新的断言语法——assertThat。</p><p>语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assertThat( [actual], [matcher expected] );</span><br></pre></td></tr></table></figure><p>assertThat 使用了 Hamcrest 的 Matcher 匹配符，用户可以使用匹配符规定的匹配准则精确的指定一些想设定满足的条件，具有很强的易读性，而且使用起来更加灵活。</p><p>具体使用的一些匹配规则可以查看源码。</p><h3 id="Spring-Boot-中使用-JUnit"><a href="#Spring-Boot-中使用-JUnit" class="headerlink" title="Spring Boot 中使用 JUnit"></a>Spring Boot 中使用 JUnit</h3><p>Spring 框架提供了一个专门的测试模块（spring-test），用于应用程序的集成测试。 在 Spring Boot 中，你可以通过spring-boot-starter-test启动器快速开启和使用它。</p><h4 id="加入依赖-1"><a href="#加入依赖-1" class="headerlink" title="加入依赖"></a>加入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Spring-Boot-测试"><a href="#Spring-Boot-测试" class="headerlink" title="Spring Boot 测试"></a>Spring Boot 测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取启动类，加载配置，确定装载 Spring 程序的装载方法，它回去寻找 主配置启动类（被 @SpringBootApplication 注解的）</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="comment">// 让 JUnit 运行 Spring 的测试环境， 获得 Spring 环境的上下文的支持</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeServiceImplTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">// do </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Spring-MVC-测试"><a href="#Spring-MVC-测试" class="headerlink" title="Spring MVC 测试"></a>Spring MVC 测试</h4><p>当你想对 <code>Spring MVC</code> 控制器编写单元测试代码时，可以使用<code>@WebMvcTest</code>注解。它提供了自配置的 <code>MockMvc</code>，可以不需要完整启动 <code>HTTP</code> 服务器就可以快速测试 <code>MVC 控制器</code>。</p><ol><li><p>需要测试的 Controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/emp"</span>, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> EmployeeService employeeService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EmployeeController</span><span class="params">(EmployeeService employeeService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.employeeService = employeeService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;List&lt;EmployeeResult&gt;&gt; listAll() &#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(employeeService.findEmployee());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写 <code>MockMvc</code> 的测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@WebMvcTest</span>(EmployeeController.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeController2Test</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MockMvc mvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MockBean</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeService employeeService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 数据打桩，设置该方法返回的 body一直 是空的</span></span><br><span class="line">        Mockito.when(employeeService.findEmployee()).thenReturn(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listAll</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mvc.perform(MockMvcRequestBuilders.get(<span class="string">"/emp"</span>))</span><br><span class="line">                .andExpect(status().isOk()) <span class="comment">// 期待返回状态吗码200</span></span><br><span class="line">                <span class="comment">// JsonPath expression  https://github.com/jayway/JsonPath</span></span><br><span class="line">                <span class="comment">//.andExpect(jsonPath("$[1].name").exists()) // 这里是期待返回值是数组，并且第二个值的 name 存在，所以这里测试是失败的</span></span><br><span class="line">                .andDo(print()); <span class="comment">// 打印返回的 http response 信息</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>@WebMvcTest</code>注解时，只有一部分的 Bean 能够被扫描得到，它们分别是：</p><ul><li><code>@Controller</code></li><li><code>@ControllerAdvice</code></li><li><code>@JsonComponent</code></li><li><code>Filter</code></li><li><code>WebMvcConfigurer</code></li><li><code>HandlerMethodArgumentResolver</code><br>其他常规的<code>@Component</code>（包括<code>@Service</code>、<code>@Repository</code>等）Bean 则不会被加载到 Spring 测试环境上下文中。<br>所以我在上面使用了数据打桩，<code>Mockito</code> 在这篇文章最后一节。</li></ul></li><li><p>我们也可以注入Spring 上下文的环境到 MockMvc 中，如下编写 <code>MockMvc</code> 的测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeControllerTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Interface to provide configuration for a web application.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WebApplicationContext ctx;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化 MVC 的环境</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mockMvc = MockMvcBuilders.webAppContextSetup(ctx).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listAll</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mockMvc</span><br><span class="line">                .perform(get(<span class="string">"/emp"</span>) <span class="comment">// 测试的相对地址</span></span><br><span class="line">                .accept(MediaType.APPLICATION_JSON_UTF8) <span class="comment">// accept response content type</span></span><br><span class="line">                )</span><br><span class="line">                .andExpect(status().isOk()) <span class="comment">// 期待返回状态吗码200</span></span><br><span class="line">                <span class="comment">// JsonPath expression  https://github.com/jayway/JsonPath</span></span><br><span class="line">                .andExpect(jsonPath(<span class="string">"$[1].name"</span>).exists()) <span class="comment">// 这里是期待返回值是数组，并且第二个值的 name 存在</span></span><br><span class="line">                .andDo(print()); <span class="comment">// 打印返回的 http response 信息</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>值得注意的是需要首先使用 <code>WebApplicationContext</code> 构建 <code>MockMvc</code>。</p></li></ol><h4 id="Spring-Boot-Web-测试"><a href="#Spring-Boot-Web-测试" class="headerlink" title="Spring Boot Web 测试"></a>Spring Boot Web 测试</h4><p>当你想启动一个完整的 HTTP 服务器对 Spring Boot 的 Web 应用编写测试代码时，可以使用<code>@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)</code>注解开启一个随机的可用端口。Spring Boot 针对 REST 调用的测试提供了一个 <code>TestRestTemplate</code> 模板，它可以解析链接服务器的相对地址。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span>(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeController1Test</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestRestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ResponseEntity&lt;List&gt; result = restTemplate.getForEntity(<span class="string">"/emp"</span>, List.class);</span><br><span class="line">        Assert.assertThat(result.getBody(), Matchers.notNullValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实之前上面的测试返回结果不是很正确，只能接收个List，给测试代码添加了不少麻烦，还好最终找到了解决办法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 由于我返回的是 List 类型的，一直想不到办法解决，网上给出了解决办法，使用 exchange 函数代替</span></span><br><span class="line">    <span class="comment">//public &lt;T&gt; ResponseEntity&lt;T&gt; exchange(String url, HttpMethod method,</span></span><br><span class="line">    <span class="comment">//			HttpEntity&lt;?&gt; requestEntity, ParameterizedTypeReference&lt;T&gt; responseType,</span></span><br><span class="line">    <span class="comment">//			Object... urlVariables) throws RestClientException &#123;</span></span><br><span class="line">    ParameterizedTypeReference&lt;List&lt;EmployeeResult&gt;&gt; type = <span class="keyword">new</span> ParameterizedTypeReference&lt;List&lt;EmployeeResult&gt;&gt;() &#123;&#125;;</span><br><span class="line">    ResponseEntity&lt;List&lt;EmployeeResult&gt;&gt; result = restTemplate.exchange(<span class="string">"/emp"</span>, HttpMethod.GET, <span class="keyword">null</span>, type);</span><br><span class="line">    Assert.assertThat(result.getBody().get(<span class="number">0</span>).getName(), Matchers.notNullValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Spring-Data-JPA-测试"><a href="#Spring-Data-JPA-测试" class="headerlink" title="Spring Data JPA 测试"></a>Spring Data JPA 测试</h4><p>我们可以使用 <code>@DataJpaTest</code>注解表示只对 JPA 测试；<code>@DataJpaTest</code>注解它只扫描<code>@Entity</code>Bean 和装配 Spring Data JPA 存储库，其他常规的<code>@Component</code>（包括<code>@Service</code>、<code>@Repository</code>等）Bean 则不会被加载到 Spring 测试环境上下文。</p><p><code>@DataJpaTest</code> 还提供两种测试方式：</p><ol><li>使用内存数据库 <code>h2database</code>，Spring Data Jpa 测试默认采取的是这种方式；</li><li>使用真实环境的数据库。</li></ol><h5 id="使用内存数据库测试"><a href="#使用内存数据库测试" class="headerlink" title="使用内存数据库测试"></a>使用内存数据库测试</h5><ol><li><p>默认情况下，<code>@DataJpaTest</code>使用的是内存数据库进行测试，你无需配置和启用真实的数据库。只需要在 <code>pom.xml</code> 配置文件中声明如下依赖即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>gradle file:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">testCompile(<span class="string">'com.h2database:h2'</span>)</span><br></pre></td></tr></table></figure></li><li><p>编写测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@DataJpaTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeDaoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeDao employeeDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Employee employee = <span class="keyword">new</span> Employee();</span><br><span class="line">        EmployeeDetail detail = <span class="keyword">new</span> EmployeeDetail();</span><br><span class="line">        detail.setName(<span class="string">"kronchan"</span>);</span><br><span class="line">        detail.setAge(<span class="number">24</span>);</span><br><span class="line">        employee.setDetail(detail);</span><br><span class="line">        assertThat(detail.getName(), Matchers.is(employeeDao.save(employee).getDetail().getName()));;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="使用真实数据库测试"><a href="#使用真实数据库测试" class="headerlink" title="使用真实数据库测试"></a>使用真实数据库测试</h5><p>如要需要使用真实环境中的数据库进行测试，需要替换掉默认规则，使用<code>@AutoConfigureTestDatabase(replace = Replace.NONE)</code>注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@DataJpaTest</span></span><br><span class="line"><span class="comment">// 加入 AutoConfigureTestDatabase 注解</span></span><br><span class="line"><span class="meta">@AutoConfigureTestDatabase</span>(replace = AutoConfigureTestDatabase.Replace.NONE)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeDaoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeDao employeeDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Employee employee = <span class="keyword">new</span> Employee();</span><br><span class="line">        EmployeeDetail detail = <span class="keyword">new</span> EmployeeDetail();</span><br><span class="line">        detail.setName(<span class="string">"kronchan"</span>);</span><br><span class="line">        detail.setAge(<span class="number">24</span>);</span><br><span class="line">        employee.setDetail(detail);</span><br><span class="line">        assertThat(detail.getName(), Matchers.is(employeeDao.save(employee).getDetail().getName()));;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="事务控制"><a href="#事务控制" class="headerlink" title="事务控制"></a>事务控制</h4><p>执行上面的新增数据的测试，发现测试通过，但是数据库却并没有新增数据。<strong>默认情况下，在每个 JPA 测试结束时，事务会发生回滚。这在一定程度上可以防止测试数据污染数据库。</strong></p><p>如果你不希望事务发生回滚，你可以使用<code>@Rollback(false)</code>注解，该注解可以标注在类级别做全局的控制，也可以标注在某个特定不需要执行事务回滚的方法级别上。</p><p>也可以显式的使用注解 <code>@Transactional</code> 设置事务和事务的控制级别，放大事务的范围。</p><h3 id="Mockito"><a href="#Mockito" class="headerlink" title="Mockito"></a>Mockito</h3><p>这部分参考 <a href="http://sunxiang0918.cn/2016/03/28/%E4%BD%BF%E7%94%A8Mockito%E5%92%8CSpringTest%E8%BF%9B%E8%A1%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/" rel="external nofollow noopener noreferrer" target="_blank">使用Mockito和SpringTest进行单元测试</a></p><p><code>JUnit</code>和<code>SpringTest</code>,基本上可以满足绝大多数的单元测试了，但是，由于现在的系统越来越复杂，相互之间的依赖越来越多。特别是微服务化以后的系统，往往一个模块的代码需要依赖几个其他模块的东西。因此，在做单元测试的时候，往往很难构造出需要的依赖。一个单元测试，我们只关心一个小的功能，但是为了这个小的功能能跑起来，可能需要依赖一堆其他的东西，这就导致了单元测试无法进行。所以，我们就需要再测试过程中引入<code>Mock</code>测试。</p><p>所谓的<code>Mock</code>测试就是在测试过程中，对于一些不容易构造的、或者和这次单元测试无关但是上下文又有依赖的对象，用一个虚拟的对象（Mock对象）来模拟，以便单元测试能够进行。</p><p>比如有一段代码的依赖为：<br><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/mock/1.jpg" alt="img"><br>当我们要进行单元测试的时候，就需要给<code>A</code>注入<code>B</code>和<code>C</code>,但是<code>C</code>又依赖了<code>D</code>，<code>D</code>又依赖了<code>E</code>。这就导致了，A的单元测试很难得进行。<br>但是，当我们使用了Mock来进行模拟对象后，我们就可以把这种依赖解耦，只关心A本身的测试，它所依赖的B和C，全部使用<strong>Mock出来</strong>的对象，并且给<code>MockB</code>和<code>MockC</code>指定一个明确的行为。就像这样：<br><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/mock/2.jpg" alt="img"></p><p>因此，当我们使用Mock后，对于那些难以构建的对象，就变成了个模拟对象，只需要提前的做<code>Stubbing</code>（桩）即可，所谓做桩数据，也就是告诉Mock对象，当与之交互时执行何种行为过程。比如当调用B对象的b()方法时，我们期望返回一个<code>true</code>，这就是一个设置桩数据的预期。</p><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><p><a href="http://www.importnew.com/21540.html" rel="external nofollow noopener noreferrer" target="_blank">Mockito 简明教程</a></p><h4 id="Spring-Boot-中使用"><a href="#Spring-Boot-中使用" class="headerlink" title="Spring Boot 中使用"></a>Spring Boot 中使用</h4><p>上面的 <code>Spring MVC 测试</code> 中也使用到了 <code>Mockito</code>，</p><p><code>spring-boot-starter-test</code> 自带了 <code>mockito-core</code>。</p><h5 id="基础业务"><a href="#基础业务" class="headerlink" title="基础业务"></a>基础业务</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(unique = <span class="keyword">true</span>, nullable = <span class="keyword">false</span>, length = <span class="number">50</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CreationTimestamp</span></span><br><span class="line">    <span class="keyword">private</span> Date createDate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Long id, String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span>(onConstructor = @__(<span class="meta">@Autowired</span>))</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IUserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findOne</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.getOne(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateUsername</span><span class="params">(Long id, String username)</span> </span>&#123;</span><br><span class="line">        User user = findOne(id);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        user.setUsername(username);</span><br><span class="line">        <span class="keyword">return</span> userRepository.updateUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IUserServiceTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Mock</span></span><br><span class="line">    <span class="keyword">private</span> IUserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 对所有注解了@Mock的对象进行模拟</span></span><br><span class="line">        <span class="comment">// MockitoAnnotations.initMocks(this);</span></span><br><span class="line">        <span class="comment">// 不使用注解，可以对单个对象进行 mock</span></span><br><span class="line">        userRepository = Mockito.mock(IUserRepository.class);</span><br><span class="line">        <span class="comment">// 构造被测试对象</span></span><br><span class="line">        userService = <span class="keyword">new</span> UserServiceImpl(userRepository);</span><br><span class="line">        <span class="comment">// 打桩，构建当 userRepository的 getOne 函数执行参数为 1的时候，设置返回的结果 User</span></span><br><span class="line">        Mockito.when(userRepository.getOne(<span class="number">1L</span>)).thenReturn(<span class="keyword">new</span> User(<span class="number">1L</span>, <span class="string">"kronchan"</span>));</span><br><span class="line">        <span class="comment">// 打桩，构建当 userRepository的 getOne 函数执行参数为 2的时候，设置返回的结果 null</span></span><br><span class="line">        Mockito.when(userRepository.getOne(<span class="number">2L</span>)).thenReturn(<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 打桩，构建当 userRepository的 getOne 函数执行参数为 3的时候，设置结果抛出异常</span></span><br><span class="line">        Mockito.when(userRepository.getOne(<span class="number">3L</span>)).thenThrow(<span class="keyword">new</span> IllegalArgumentException(<span class="string">"The id is not support"</span>));</span><br><span class="line">        <span class="comment">// 打桩，当 userRepository.updateUser 执行任何User类型的参数，返回的结果都是true</span></span><br><span class="line">        Mockito.when(userRepository.updateUser(Mockito.any(User.class))).thenReturn(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateUsernameSuccess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> userId = <span class="number">1L</span>;</span><br><span class="line">        String newUsername = <span class="string">"new kronchan"</span>;</span><br><span class="line">        <span class="comment">// 测试某个 service 的方法</span></span><br><span class="line">        <span class="keyword">boolean</span> updated = userService.updateUsername(userId, newUsername);</span><br><span class="line">        <span class="comment">// 检查结果</span></span><br><span class="line">        Assert.assertThat(updated, Matchers.is(<span class="keyword">true</span>));</span><br><span class="line">        <span class="comment">// Verifies certain behavior &lt;b&gt;happened once&lt;/b&gt;.</span></span><br><span class="line">        <span class="comment">// mock对象一旦创建，就会自动记录自己的交互行为。通过verify(mock).someMethod()方法，来验证方法是否被调用。</span></span><br><span class="line">        <span class="comment">// 验证调用上面的service 方法后是否 userRepository.getOne(1L) 调用过，</span></span><br><span class="line">        Mockito.verify(userRepository).getOne(userId);</span><br><span class="line">        <span class="comment">// 有条件可以测试下没有被调用过的方法：</span></span><br><span class="line">        <span class="comment">//   Mockito.verify(userRepository).deleteById(userId);</span></span><br><span class="line">        <span class="comment">//   则会测试失败：</span></span><br><span class="line">        <span class="comment">//    Wanted but not invoked:</span></span><br><span class="line">        <span class="comment">//      userRepository.deleteById(1L);</span></span><br><span class="line">        <span class="comment">//    However, there were exactly 2 interactions with this mock:</span></span><br><span class="line">        <span class="comment">//      userRepository.getOne(1L);</span></span><br><span class="line">        <span class="comment">//      userRepository.updateUser(</span></span><br><span class="line">        <span class="comment">//         User(id=1, username=new kronchan, password=null, createDate=null)</span></span><br><span class="line">        <span class="comment">//      );</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//  updateUsername 函数中我们调用了已经打桩了的其他的函数，现在我们来验证进入其他函数中的参数</span></span><br><span class="line">        <span class="comment">//构造参数捕获器，用于捕获方法参数进行验证</span></span><br><span class="line">        ArgumentCaptor&lt;User&gt; userCaptor = ArgumentCaptor.forClass(User.class);</span><br><span class="line">        <span class="comment">// 验证updateUser方法是否被调用过，并且捕获入参</span></span><br><span class="line">        Mockito.verify(userRepository).updateUser(userCaptor.capture());</span><br><span class="line">        <span class="comment">// 获取参数 updatedUser</span></span><br><span class="line">        User updatedUser = userCaptor.getValue();</span><br><span class="line">        <span class="comment">// 验证入参是否是预期的</span></span><br><span class="line">        Assert.assertThat(updatedUser.getUsername(), Matchers.is(newUsername));</span><br><span class="line">        <span class="comment">//保证这个测试用例中所有被Mock的对象的相关方法都已经被Verify过了</span></span><br><span class="line">        Mockito.verifyNoMoreInteractions(userRepository);</span><br><span class="line">        <span class="comment">// 如果有一个交互，但是我们没有verify ，则会报错，</span></span><br><span class="line">        <span class="comment">//      org.mockito.exceptions.verification.NoInteractionsWanted:</span></span><br><span class="line">        <span class="comment">//      No interactions wanted here:</span></span><br><span class="line">        <span class="comment">//      -&gt; at com.wuwii.service.IUserServiceTest.testUpdateUsernameSuccess(IUserServiceTest.java:74)</span></span><br><span class="line">        <span class="comment">//      But found this interaction on mock 'iUserRepository':</span></span><br><span class="line">        <span class="comment">//      -&gt; at com.wuwii.service.impl.UserServiceImpl.findOne(UserServiceImpl.java:21)</span></span><br><span class="line">        <span class="comment">//      ***</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateUsernameFailed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> userId = <span class="number">2L</span>;</span><br><span class="line">        String newUsername = <span class="string">"new kronchan"</span>;</span><br><span class="line">        <span class="comment">// 没有经过 mock 的 updateUser 方法，它返回的是 false</span></span><br><span class="line">        <span class="keyword">boolean</span> updated = userService.updateUsername(userId, newUsername);</span><br><span class="line">        Assert.assertThat(updated, Matchers.not(<span class="keyword">true</span>));</span><br><span class="line">        <span class="comment">//验证userRepository的getOne(2L)这个方法是否被调用过，（这个是被测试过的，此步骤通过）</span></span><br><span class="line">        Mockito.verify(userRepository).getOne(<span class="number">2L</span>);</span><br><span class="line">        <span class="comment">// 验证 userRepository 的 updateUser(null)这个方法是否被调用过，（这个没有被测试过，此步骤不通过）</span></span><br><span class="line">        <span class="comment">//Mockito.verify(userRepository).updateUser(null);</span></span><br><span class="line">        Mockito.verifyNoMoreInteractions(userRepository);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><h6 id="创建MOCK的对象"><a href="#创建MOCK的对象" class="headerlink" title="创建MOCK的对象"></a>创建MOCK的对象</h6><p>我需要对 <code>userService</code> 进行测定，就需要模拟 <code>userRepository</code> 对象。</p><p>我在 <code>setUp()</code> 方法中，模拟对象并打桩。</p><p>模拟对象有两种方式：</p><ol><li>对注解了@Mock的对象进行模拟 <code>MockitoAnnotations.initMocks(this);</code></li><li>对单个对象手动 mock ：<code>userRepository = Mockito.mock(IUserRepository.class);</code></li></ol><p>数据打桩，除了上面我代码上用的几个方法，还有非常多的方法，具体可以在使用的时候看到，主要分下面几种：</p><ol><li><p>最基本的用法就是调用 <code>when</code>以及<code>thenReturn</code>方法了。他们的作用就是指定当我们调用被代理的对象的某一个方法以及参数的时候，返回什么值。</p></li><li><p>提供参数匹配器，灵活匹配参数。<code>any()</code>、<code>any(Class&lt;T&gt; type)</code>、<code>anyBoolean()</code>、<code>anyByte()</code>、<code>anyChar()</code>、<code>anyInt()</code>、<code>anyLong()</code>等等，它支持复杂的过滤，可以使用正则 <code>Mockito.matches(&quot;.*User$&quot;))</code>，开头结尾验证<code>endsWith(String suffix)</code>，<code>startsWith(String prefix)</code>、判空验证<code>isNotNull()</code> <code>isNull()</code><br>也还可以使用 argThat(ArgumentMatcher<t>matcher)，如：<code>ArgumentMatcher</code>只有一个方法<code>boolean matches(T argument);</code>传入入参，返回一个boolean表示是否匹配。</t></p><p><code>Mockito.argThat(argument -&gt; argument.getUsername.length() &gt; 6;</code></p></li><li><p><em>Mockito</em>还提供了两个表示行为的方法：<code>thenAnswer(Answer&lt;?&gt; answer);</code>、<code>thenCallRealMethod();</code>,分别表示自定义处理调用后的行为，以及调用真实的方法。这两个方法在有些测试用例中还是很有用的。</p></li><li><p>对于同一个方法，<em>Mockito</em>可以是顺序与次数关心的。也就是说可以实现同一个方法，第一次调用返回一个值，第二次调用返回一个值，甚至第三次调用抛出异常等等。只需要连续的调用<code>thenXXXX</code>即可。</p></li><li><p>如果为一个返回为<em>Void</em>的方法设置桩数据。上面的方法都是表示的是有返回值的方法，而由于一个方法没有返回值，因此我们不能调用<code>when</code>方法(编译器不允许)。因此，对于无返回值的方法，<em>Mockito</em>提供了一些列的<code>doXXXXX</code>方法，比如：<code>doAnswer(Answer answer)</code>、<code>doNothing()</code>、<code>doReturn(Object toBeReturned)</code>、<code>doThrow(Class&lt;? extends Throwable&gt; toBeThrown)</code>、<code>doCallRealMethod()</code>。他们的使用方法其实和上面的<code>thenXXXX</code>是一样的，但是<code>when</code>方法传入的是<em>Mock的对象</em>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*对void的方法设置模拟*/</span></span><br><span class="line">Mockito.doAnswer(invocationOnMock -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">"进入了Mock"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;).when(fileRecordDao).insert(Mockito.any());</span><br></pre></td></tr></table></figure><p>当 Mockito 监视一个真实的对象的时候，我们也可以模拟这个对象的方法返回我们设置的期望值，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List spy = spy(<span class="keyword">new</span> LinkedList());  </span><br><span class="line">List spy = spy(<span class="keyword">new</span> LinkedList());  </span><br><span class="line"><span class="comment">// IndexOutOfBoundsException (the list is yet empty)  </span></span><br><span class="line">when(spy.get(<span class="number">0</span>)).thenReturn(<span class="string">"foo"</span>);  </span><br><span class="line"><span class="comment">// You have to use doReturn() for stubbing  </span></span><br><span class="line">doReturn(<span class="string">"foo"</span>).when(spy).get(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>when方法参数中<code>spy.get(0)</code>，调用的是真实list对象的get(0)，这会产生 <code>IndexOutOfBoundsException</code>异常，所以这时需要用到 <code>doReturn</code> 方法来设置返回值。</p></li></ol><h6 id="验证测试方法的结果"><a href="#验证测试方法的结果" class="headerlink" title="验证测试方法的结果"></a>验证测试方法的结果</h6><p>使用断言语句检查结果。</p><h6 id="验证MOCK对象的调用"><a href="#验证MOCK对象的调用" class="headerlink" title="验证MOCK对象的调用"></a>验证MOCK对象的调用</h6><p>其实，在这里我们如果只是验证方法结果的正确的话，就非常简单，但是，在复杂的方法调用堆栈中，往往可能出现结果正确，但是过程不正确的情况。比如，<code>updateUserName</code>方法返回false是有两种可能的，一种可能是用户没有找到，还有一种可能就是<code>userRepository.updateUser(userPO)</code>返回false。因此，如果我们只是使用<code>Assert.assertFalse(updated);</code>来验证结果，可能就会忽略某些错误。</p><ol><li><p>因此我在上面的测试中还需要验证指定的方法 <code>userRepository).getOne(userId);</code>是否运行过，而且我还使用了参数捕获器，抓取中间的方法参数，用来验证。</p></li><li><p>提供了<code>verify(T mock, VerificationMode mode)</code>方法。<code>VerificationMode</code> 有很多作用，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 验证指定方法 get(3) 没有被调用  </span></span><br><span class="line">  verify(mock, never()).get(<span class="number">3</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>verifyZeroInteractions</code>和<code>verifyNoMoreInteractions</code> 验证所有 mock 的方法是否都调用过了。</p></li></ol><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习Spring Boot：（二十八）Spring Security 权限认证]]></title>
      <url>/springboot-security.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>主要实现 <code>Spring Security</code> 的安全认证，结合 <code>RESTful API</code> 的风格，使用无状态的环境。</p><p>主要实现是通过请求的 URL ，通过过滤器来做不同的授权策略操作，为该请求提供某个认证的方法，然后进行认证，授权成功返回授权实例信息，供服务调用。</p><a id="more"></a><p>基于Token的身份验证的过程如下:</p><ol><li>用户通过用户名和密码发送请求。</li><li>程序验证。</li><li>程序返回一个签名的token 给客户端。</li><li>客户端储存token,并且每次用于每次发送请求。</li><li>服务端验证token并返回数据。</li></ol><p>每一次请求都需要token，所以每次请求都会去验证用户身份，所以这里必须要使用缓存，</p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><h4 id="加入相关依赖"><a href="#加入相关依赖" class="headerlink" title="加入相关依赖"></a>加入相关依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="了解基础配置"><a href="#了解基础配置" class="headerlink" title="了解基础配置"></a>了解基础配置</h4><h5 id="认证的基本信息"><a href="#认证的基本信息" class="headerlink" title="认证的基本信息"></a>认证的基本信息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDetails</span> <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回分配给用户的角色列表</span></span><br><span class="line">    Collection&lt;? extends GrantedAuthority&gt; getAuthorities();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回密码</span></span><br><span class="line">    <span class="function">String <span class="title">getPassword</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回帐号</span></span><br><span class="line">    <span class="function">String <span class="title">getUsername</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 账户是否未过期</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 账户是否未锁定</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 密码是否未过期</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 账户是否激活</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="获取基本信息"><a href="#获取基本信息" class="headerlink" title="获取基本信息"></a>获取基本信息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据用户名查找用户的信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line">    <span class="function">UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们只要实现这个扩展，就能够自定义方式获取认证的基本信息</p><h5 id="WebSecurityConfigurerAdapter"><a href="#WebSecurityConfigurerAdapter" class="headerlink" title="WebSecurityConfigurerAdapter"></a>WebSecurityConfigurerAdapter</h5><p><code>WebSecurityConfigurerAdapter</code> 提供了一种便利的方式去创建 <code>WebSecurityConfigurer</code>的实例，只需要重写 <code>WebSecurityConfigurerAdapter</code> 的方法，即可配置拦截什么URL、设置什么权限等安全控制。</p><p>下面是主要会是要到的几个配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 主要是对身份认证的设置</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> auth</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span>  </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.disableLocalConfigureAuthenticationBldr = <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 复写这个方法来配置 &#123;<span class="doctag">@link</span> HttpSecurity&#125;. </span></span><br><span class="line"><span class="comment">    * 通常，子类不能通过调用 super 来调用此方法，因为它可能会覆盖其配置。 默认配置为：</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       logger.debug(<span class="string">"Using default configure(HttpSecurity). If subclassed this will potentially override subclass configure(HttpSecurity)."</span>);</span><br><span class="line"></span><br><span class="line">       http</span><br><span class="line">           .authorizeRequests()</span><br><span class="line">               .anyRequest().authenticated()</span><br><span class="line">               .and()</span><br><span class="line">           .formLogin().and()</span><br><span class="line">           .httpBasic();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Override this method to configure &#123;<span class="doctag">@link</span> WebSecurity&#125;. For example, if you wish to</span></span><br><span class="line"><span class="comment"> * ignore certain requests.</span></span><br><span class="line"><span class="comment"> * 主要是对某些 web 静态资源的设置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="认证流程"><a href="#认证流程" class="headerlink" title="认证流程"></a>认证流程</h3><p>阅读源码了解。</p><p><img src="https://upload-images.jianshu.io/upload_images/3424642-7418a70abdfc7287.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Spring Security.jpg"></p><h4 id="AbstractAuthenticationProcessingFilter-doFilter"><a href="#AbstractAuthenticationProcessingFilter-doFilter" class="headerlink" title="AbstractAuthenticationProcessingFilter.doFilter"></a>AbstractAuthenticationProcessingFilter.doFilter</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span></span></span><br><span class="line"><span class="function">          <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">      HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line">      HttpServletResponse response = (HttpServletResponse) res;</span><br><span class="line"><span class="comment">// 判断是否是需要验证方法（是否是登陆的请求），不是的话直接放过</span></span><br><span class="line">      <span class="keyword">if</span> (!requiresAuthentication(request, response)) &#123;</span><br><span class="line">          chain.doFilter(request, response);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 登陆的请求开始进行验证</span></span><br><span class="line">      Authentication authResult;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 开始认证，attemptAuthentication在 UsernamePasswordAuthenticationFilter 中实现</span></span><br><span class="line">          authResult = attemptAuthentication(request, response);</span><br><span class="line">          <span class="comment">// return null 认证失败</span></span><br><span class="line">          <span class="keyword">if</span> (authResult == <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line"><span class="comment">// 篇幅问题，中间很多代码删了</span></span><br><span class="line">      successfulAuthentication(request, response, chain, authResult);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="UsernamePasswordAuthenticationFilter-attemptAuthentication"><a href="#UsernamePasswordAuthenticationFilter-attemptAuthentication" class="headerlink" title="UsernamePasswordAuthenticationFilter.attemptAuthentication"></a>UsernamePasswordAuthenticationFilter.attemptAuthentication</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接收并解析用户登陆信息，为已验证的用户返回一个已填充的身份验证令牌，表示成功的身份验证，</span></span><br><span class="line"><span class="comment">// 如果身份验证过程失败，就抛出一个AuthenticationException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Authentication <span class="title">attemptAuthentication</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">			HttpServletResponse response)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (postOnly &amp;&amp; !request.getMethod().equals(<span class="string">"POST"</span>)) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationServiceException(</span><br><span class="line">					<span class="string">"Authentication method not supported: "</span> + request.getMethod());</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="comment">// 方法将 request 中的 username 和 password 生成 UsernamePasswordAuthenticationToken 对象，用于 AuthenticationManager 的验证</span></span><br><span class="line">		String username = obtainUsername(request);</span><br><span class="line">		String password = obtainPassword(request);</span><br><span class="line">		<span class="keyword">if</span> (username == <span class="keyword">null</span>) &#123;</span><br><span class="line">			username = <span class="string">""</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (password == <span class="keyword">null</span>) &#123;</span><br><span class="line">			password = <span class="string">""</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		username = username.trim();</span><br><span class="line">		UsernamePasswordAuthenticationToken authRequest = <span class="keyword">new</span> UsernamePasswordAuthenticationToken(username, password);</span><br><span class="line">		<span class="comment">// Allow subclasses to set the "details" property</span></span><br><span class="line">		setDetails(request, authRequest);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.getAuthenticationManager().authenticate(authRequest);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure><h4 id="ProviderManager-authenticate"><a href="#ProviderManager-authenticate" class="headerlink" title="ProviderManager.authenticate"></a>ProviderManager.authenticate</h4><p>验证 Authentication 对象（里面包含着验证对象）</p><ol><li>如果有多个 AuthenticationProvider 支持验证传递过来的Authentication 对象，那么由第一个来确定结果，覆盖早期支持AuthenticationProviders 所引发的任何可能的AuthenticationException。 成功验证后，将不会尝试后续的AuthenticationProvider。</li><li>如果最后所有的 AuthenticationProviders 都没有成功验证 Authentication 对象，将抛出 AuthenticationException。</li></ol><p>最后它调用的是 <code>Authentication result = provider.authenticate(authentication);</code></p><p>只要我们自定义 <code>AuthenticationProvider</code> 就能完成自定义认证。</p><h3 id="动手实现安全框架"><a href="#动手实现安全框架" class="headerlink" title="动手实现安全框架"></a>动手实现安全框架</h3><h4 id="使用的依赖"><a href="#使用的依赖" class="headerlink" title="使用的依赖"></a>使用的依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.ehcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="数据表关系"><a href="#数据表关系" class="headerlink" title="数据表关系"></a>数据表关系</h4><p><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/springboot-security/1.png" alt="img"></p><h5 id="User"><a href="#User" class="headerlink" title="User"></a>User</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(unique = <span class="keyword">true</span>, nullable = <span class="keyword">false</span>, length = <span class="number">50</span>)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date createDate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToMany</span>(targetEntity = UserRole.class, mappedBy = <span class="string">"userId"</span>, fetch = FetchType.EAGER) <span class="comment">// mappedBy 只有在双向关联的时候设置，表示关系维护的一端，否则会生成中间表A_B</span></span><br><span class="line">    <span class="meta">@org</span>.hibernate.annotations.ForeignKey(name = <span class="string">"none"</span>) <span class="comment">// 注意这里不能使用 @JoinColumn 不然会生成外键</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;UserRole&gt; userRoles;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Role"><a href="#Role" class="headerlink" title="Role"></a>Role</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>, unique = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="UserRole"><a href="#UserRole" class="headerlink" title="UserRole"></a>UserRole</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRole</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(length = <span class="number">50</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToOne</span>(targetEntity = Role.class)</span><br><span class="line">    <span class="meta">@JoinColumn</span>(name = <span class="string">"roleId"</span>, nullable = <span class="keyword">false</span>, foreignKey = <span class="meta">@ForeignKey</span>(name = <span class="string">"none"</span>, value = ConstraintMode.NO_CONSTRAINT))</span><br><span class="line">    <span class="keyword">private</span> Role role;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="流程实现"><a href="#流程实现" class="headerlink" title="流程实现"></a>流程实现</h4><p>认证流程：<br><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/springboot-security/3.png" alt="img"></p><h5 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h5><p>我使用的是服务端无状态的token 交换的形式，所以引用的是 jwt，首先实现 jwt：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"># jwt 配置</span><br><span class="line">jwt:</span><br><span class="line">  # 加密密钥</span><br><span class="line">  secret: 61D73234C4F93E03074D74D74D1E39D9 #blog.wuwii.com</span><br><span class="line">  # token有效时长</span><br><span class="line">  expire: 7 # 7天，单位天</span><br><span class="line">  # token 存在 header 中的参数</span><br><span class="line">  header: token</span><br><span class="line">  </span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"jwt"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String secret;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有效期限</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> expire;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存储 token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String header;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成jwt token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generateToken</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        Date nowDate = <span class="keyword">new</span> Date();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .setHeaderParam(<span class="string">"typ"</span>, <span class="string">"JWT"</span>)</span><br><span class="line">                <span class="comment">// 后续获取 subject 是 username</span></span><br><span class="line">                .setSubject(username)</span><br><span class="line">                .setIssuedAt(nowDate)</span><br><span class="line">                .setExpiration(DateUtils.addDays(nowDate, expire))</span><br><span class="line">                <span class="comment">// 这里我采用的是 HS512 算法</span></span><br><span class="line">                .signWith(SignatureAlgorithm.HS512, secret)</span><br><span class="line">                .compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析 token，</span></span><br><span class="line"><span class="comment">     * 利用 jjwt 提供的parser传入秘钥，</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数据声明 Map&lt;String, Object&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Claims <span class="title">getClaimByToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Jwts.parser()</span><br><span class="line">                    .setSigningKey(secret)</span><br><span class="line">                    .parseClaimsJws(token)</span><br><span class="line">                    .getBody();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * token是否过期</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true：过期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTokenExpired</span><span class="params">(Date expiration)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> expiration.before(<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsernameFromToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(token)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> KCException(<span class="string">"无效 token"</span>, HttpStatus.UNAUTHORIZED.value());</span><br><span class="line">        &#125;</span><br><span class="line">        Claims claims = getClaimByToken(token);</span><br><span class="line">        <span class="keyword">if</span> (claims == <span class="keyword">null</span> || isTokenExpired(claims.getExpiration())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> KCException(header + <span class="string">"失效，请重新登录"</span>, HttpStatus.UNAUTHORIZED.value());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> claims.getSubject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="实现-UserDetails-和-UserDetailsService"><a href="#实现-UserDetails-和-UserDetailsService" class="headerlink" title="实现 UserDetails 和 UserDetailsService"></a>实现 UserDetails 和 UserDetailsService</h5><p><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/springboot-security/2.png" alt="img"></p><h6 id="实现-UserDetails"><a href="#实现-UserDetails" class="headerlink" title="实现 UserDetails"></a>实现 UserDetails</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailsImpl</span> <span class="keyword">implements</span> <span class="title">UserDetails</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDetailsImpl</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user = user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取权限信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        Set&lt;UserRole&gt; userRoles = user.getUserRoles();</span><br><span class="line">        List&lt;GrantedAuthority&gt; auths = <span class="keyword">new</span> ArrayList&lt;&gt;(userRoles.size());</span><br><span class="line">        userRoles.parallelStream().forEach(userRole -&gt; &#123;</span><br><span class="line">            <span class="comment">// 默认ROLE_  为前缀，可以更改</span></span><br><span class="line">            auths.add(<span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">"ROLE_"</span> + userRole.getRole().getName()));</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> auths;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user.getPassword();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user.getUsername();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 账户是否未过期</span></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 账户是否未锁定</span></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 密码是否未过期</span></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 账户是否激活</span></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="实现-UserDetailsService"><a href="#实现-UserDetailsService" class="headerlink" title="实现 UserDetailsService"></a>实现 UserDetailsService</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@CacheConfig</span>(cacheNames = <span class="string">"users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Cacheable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        User user = userDao.findByUsername(username);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"Username is not valid."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        log.debug(<span class="string">"The User is &#123;&#125;"</span>, user);</span><br><span class="line">        <span class="keyword">return</span> SecurityModelFactory.create(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="SecurityModelFactory"><a href="#SecurityModelFactory" class="headerlink" title="SecurityModelFactory"></a>SecurityModelFactory</h6><p>转换 UserDetails 的工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityModelFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserDetails <span class="title">create</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserDetailsImpl(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="授权认证"><a href="#授权认证" class="headerlink" title="授权认证"></a>授权认证</h5><h6 id="登陆过滤器"><a href="#登陆过滤器" class="headerlink" title="登陆过滤器"></a>登陆过滤器</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFilter</span> <span class="keyword">extends</span> <span class="title">UsernamePasswordAuthenticationFilter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtUtil jwtUtil;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤，我目前使用的是默认的，可以自己看源码按需求更改</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">// todo 在这里可以按需求进行过滤，根据源码来修改扩展非常方便</span></span><br><span class="line">        <span class="keyword">super</span>.doFilter(request, response, chain);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果需要进行登陆认证，会在这里进行预处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">attemptAuthentication</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                HttpServletResponse response)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">// todo 在登陆认证的时候，可以做些其他的验证操作，比如验证码</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.attemptAuthentication(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登陆成功调用，返回 token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">successfulAuthentication</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            FilterChain chain, Authentication authResult)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String token = jwtUtil.generateToken(authResult.getName());</span><br><span class="line">        response.setStatus(HttpStatus.OK.value());</span><br><span class="line">        response.getWriter().print(token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>首先会进入 <code>doFilter</code> 方法中，这里可以自定义定义过滤；</li><li>然后如果是<code>登陆</code>的请求，会进入 <code>attemptAuthentication</code> 组装登陆信息，并且进行登陆认证；</li><li>如果登陆成功，会调用 <code>successfulAuthentication</code>方法。</li></ol><h6 id="登陆验证"><a href="#登陆验证" class="headerlink" title="登陆验证"></a>登陆验证</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomAuthenticationProvider</span> <span class="keyword">implements</span> <span class="title">AuthenticationProvider</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证登录信息,若登陆成功,设置 Authentication</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        String username = authentication.getName();</span><br><span class="line">        String password = (String) authentication.getCredentials();</span><br><span class="line">        UserDetails user = userDetailsService.loadUserByUsername(username);</span><br><span class="line">        <span class="keyword">if</span> (passwordEncoder.matches(password, user.getPassword())) &#123;</span><br><span class="line">            Collection&lt;? extends GrantedAuthority&gt; authorities = user.getAuthorities();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> UsernamePasswordAuthenticationToken(username, password, authorities);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(<span class="string">"The password is not correct."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前 Provider 是否支持对该类型的凭证提供认证服务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; authentication)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> UsernamePasswordAuthenticationToken.class.equals(authentication);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们自己定义的 <code>AuthenticationProvider</code> 主要是实现前面经过过滤器封装的认证对象 <code>UsernamePasswordAuthenticationToken</code> 进行解析认证，</p><p>如果认证成功 就给改 <code>UsernamePasswordAuthenticationToken</code> 设置对应的权限,然后返回 <code>Authentication</code></p><ol><li>获得认证的信息；</li><li>去数据库查询信息，获取密码解密验证认证信息；</li><li>认证成功，设置权限信息，返回 <code>Authentication</code>，失败抛出异常。</li></ol><h5 id="JWT-拦截器"><a href="#JWT-拦截器" class="headerlink" title="JWT 拦截器"></a>JWT 拦截器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * token 校验</span></span><br><span class="line"><span class="comment"> * BasicAuthenticationFilter 滤器负责处理任何具有HTTP请求头的请求的请求，</span></span><br><span class="line"><span class="comment"> * 以及一个基本的身份验证方案和一个base64编码的用户名:密码令牌。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtAuthenticationFilter</span> <span class="keyword">extends</span> <span class="title">BasicAuthenticationFilter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtUtil jwtUtil;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JwtAuthenticationFilter</span><span class="params">(AuthenticationManager authenticationManager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(authenticationManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在此方法中检验客户端请求头中的token,</span></span><br><span class="line"><span class="comment">     * 如果存在并合法,就把token中的信息封装到 Authentication 类型的对象中,</span></span><br><span class="line"><span class="comment">     * 最后使用  SecurityContextHolder.getContext().setAuthentication(authentication); 改变或删除当前已经验证的 pricipal</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chain</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ServletException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String token = request.getHeader(jwtUtil.getHeader());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断是否有token</span></span><br><span class="line">        <span class="keyword">if</span> (token == <span class="keyword">null</span>) &#123;</span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 通过token 获取账户信息，并且存入到将身份信息存放在安全系统的上下文。</span></span><br><span class="line">        UsernamePasswordAuthenticationToken authenticationToken = getAuthentication(token);</span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(authenticationToken);</span><br><span class="line">        <span class="comment">//放行</span></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析token中的信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> UsernamePasswordAuthenticationToken <span class="title">getAuthentication</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        String username = jwtUtil.getUsernameFromToken(token);</span><br><span class="line">        UserDetails userDetails = userDetailsService.loadUserByUsername(username);</span><br><span class="line">        <span class="keyword">if</span> (username != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> UsernamePasswordAuthenticationToken(username, <span class="keyword">null</span>, userDetails.getAuthorities());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>请求进入 <code>doFilterInternal</code> 方法中，对请求是否带<code>token</code>进行判断，</li><li>如果没有token，则直接放行请求；</li><li>如果有 token，则解析它的 post；</li></ol><h5 id="配置权限和相关设置"><a href="#配置权限和相关设置" class="headerlink" title="配置权限和相关设置"></a>配置权限和相关设置</h5><p>自定义配置 Spring Security 配置类 <code>WebSecurityConfig</code>，进项相关配置，并且将所需要的类注入到系统中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span> <span class="comment">// 开启 Security</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(prePostEnabled = <span class="keyword">true</span>, securedEnabled = <span class="keyword">true</span>, jsr250Enabled = <span class="keyword">true</span>)</span><br><span class="line"><span class="comment">//jsr250Enabled有三种注解，分别是@RolesAllowed,@PermitAll,@DenyAll,功能跟名字一样，</span></span><br><span class="line"><span class="comment">// securedEnabled 开启注解</span></span><br><span class="line"><span class="comment">// prePostEnabled  类似用的最多的是 @PreAuthorize</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JwtUtil <span class="title">jwtUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JwtUtil();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入 LoginFilter 时候需要，注入 authenticationManager</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LoginFilter <span class="title">loginFilter</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        LoginFilter loginFilter = <span class="keyword">new</span> LoginFilter();</span><br><span class="line">        loginFilter.setAuthenticationManager(authenticationManager());</span><br><span class="line">        <span class="keyword">return</span> loginFilter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JwtAuthenticationFilter <span class="title">jwtAuthenticationFilter</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JwtAuthenticationFilter(authenticationManager());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetailsService <span class="title">customService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserDetailServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 认证 AuthenticationProvider</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationProvider <span class="title">authenticationProvider</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomAuthenticationProvider();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * BCrypt算法免除存储salt</span></span><br><span class="line"><span class="comment">     * BCrypt算法将salt随机并混入最终加密后的密码，验证时也无需单独提供之前的salt，从而无需单独处理salt问题。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主要是对身份验证的设置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        auth</span><br><span class="line">                <span class="comment">// 注入身份的 Bean</span></span><br><span class="line">                .authenticationProvider(authenticationProvider())</span><br><span class="line">                .userDetailsService(userDetailsService())</span><br><span class="line">                <span class="comment">// 默认登陆的加密，自定义登陆的时候无效</span></span><br><span class="line">                .passwordEncoder(passwordEncoder());</span><br><span class="line">        <span class="comment">// 在内存中设置固定的账户密码以及身份信息</span></span><br><span class="line">        <span class="comment">/*auth</span></span><br><span class="line"><span class="comment">                .inMemoryAuthentication().withUser("user").password("password").roles("USER").and()</span></span><br><span class="line"><span class="comment">                .withUser("admin").password("password").roles("USER", "ADMIN");*/</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> http</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">                <span class="comment">// 关闭 csrf</span></span><br><span class="line">                .csrf().disable()</span><br><span class="line">                <span class="comment">// 设置 session 状态 STATELESS 无状态</span></span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                <span class="comment">// 需要权限验证</span></span><br><span class="line">                .mvcMatchers(<span class="string">"/user/**"</span>).authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                <span class="comment">// 登陆页面</span></span><br><span class="line">                .formLogin()</span><br><span class="line">                <span class="comment">//.loginPage("/login.html")</span></span><br><span class="line">                <span class="comment">// 登陆成功跳转页面</span></span><br><span class="line">                .defaultSuccessUrl(<span class="string">"/"</span>)</span><br><span class="line">                <span class="comment">//.failureForwardUrl("/login.html")</span></span><br><span class="line">                .permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                <span class="comment">// 登出</span></span><br><span class="line">                <span class="comment">//.logout()</span></span><br><span class="line">                <span class="comment">// 注销的时候删除会话</span></span><br><span class="line">                <span class="comment">//.deleteCookies("JSESSIONID")</span></span><br><span class="line">                <span class="comment">// 默认登出请求为 /logout，可以用下面自定义</span></span><br><span class="line">                <span class="comment">//.logoutRequestMatcher(new AntPathRequestMatcher("/logout"))</span></span><br><span class="line">                <span class="comment">// 自定义登出成功的页面，默认为登陆页</span></span><br><span class="line">                <span class="comment">//.logoutSuccessUrl("/logout.html")</span></span><br><span class="line">                <span class="comment">//.permitAll()</span></span><br><span class="line">                <span class="comment">//.and()</span></span><br><span class="line">                <span class="comment">// 开启 cookie 保存用户信息</span></span><br><span class="line">                <span class="comment">//.rememberMe()</span></span><br><span class="line">                <span class="comment">// cookie 有效时间</span></span><br><span class="line">                <span class="comment">//.tokenValiditySeconds(60 * 60 * 24 * 7)</span></span><br><span class="line">                <span class="comment">// 设置cookie 的私钥，默认为随机生成的key</span></span><br><span class="line">                <span class="comment">//.key("remember")</span></span><br><span class="line">                <span class="comment">//.and()</span></span><br><span class="line">                <span class="comment">//验证登陆的 filter</span></span><br><span class="line">                .addFilter(loginFilter())</span><br><span class="line">                <span class="comment">//验证token的 filter</span></span><br><span class="line">                .addFilter(jwtAuthenticationFilter());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Web层面的配置，一般用来配置无需安全检查的路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> web</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        web</span><br><span class="line">                .ignoring()</span><br><span class="line">                .antMatchers(</span><br><span class="line">                        <span class="string">"**.js"</span>,</span><br><span class="line">                        <span class="string">"**.css"</span>,</span><br><span class="line">                        <span class="string">"/images/**"</span>,</span><br><span class="line">                        <span class="string">"/webjars/**"</span>,</span><br><span class="line">                        <span class="string">"/**/favicon.ico"</span></span><br><span class="line">                );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/user"</span>, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)</span><br><span class="line"><span class="meta">@PreAuthorize</span>(<span class="string">"hasRole('USER')"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="meta">@PreAuthorize</span>(<span class="string">"hasRole('admin')"</span>)</span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;List&lt;UserVO&gt;&gt; getAllUser() &#123;</span><br><span class="line">        List&lt;User&gt; users = userService.findAll();</span><br><span class="line">        List&lt;UserVO&gt; userViews = userService.castUserVO(users);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(userViews);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求上面的<code>getAllUser</code> 方法，需要当前用户同时拥有 <code>ROLE_USER</code>和 <code>ROLE_admin</code> 两个权限，才能通过权限验证。</p><p>在 @PreAuthorize 中我们可以利用内建的 SPEL 表达式：比如 ‘hasRole()’ 来决定哪些用户有权访问。需注意的一点是 hasRole 表达式认为每个角色名字前都有一个前缀 ‘ROLE_’。</p><h3 id="迭代上个版本"><a href="#迭代上个版本" class="headerlink" title="迭代上个版本"></a>迭代上个版本</h3><p>后来，我发现进行用户认证的时候，会将所有的 provider 都尝试一遍，那么外面将登陆的 <code>UsernameAndPasswordToken</code> 和 <code>JwtTToken</code> 都可以分别进行验证进行了啊，所有我预先定义 <code>UsernamePasswordAuthenticationToken</code> 包装登陆的信息，然后进入登陆的 <code>AuthenticationProvider</code> 进行认证，<code>token</code> 验证形式，使用 <code>PreAuthenticatedAuthenticationToken</code> 的包装，然后进入例外一个 <code></code>AuthenticationProvider<code></code> 中认证。</p><p>现在我们的流程就更加清晰了。</p><p><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/springboot-security/4.png" alt="img"></p><p>所以现在我对以前的权限配置以及认证进行了一些更改：</p><h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><p>在这里，我根据不同请求的类型，进行不同的适配，然后进行加工分装成不同的认证凭证，然后根据凭证的不同，进行不同的认证。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthenticationFilter</span> <span class="keyword">extends</span> <span class="title">UsernamePasswordAuthenticationFilter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtUtil jwtUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletRequest httpRequest = (HttpServletRequest) request;</span><br><span class="line">        HttpServletResponse httpResponse = (HttpServletResponse) response;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (isLoginRequest(httpRequest, httpResponse)) &#123;</span><br><span class="line">                Authentication authResult = processLogin(httpRequest, httpResponse);</span><br><span class="line">                successfulAuthentication(httpRequest, httpResponse, chain, authResult);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            String token = obtainToken(httpRequest);</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(token)) &#123;</span><br><span class="line">                processTokenAuthentication(token);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">            unsuccessfulAuthentication(httpRequest, httpResponse, e);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登陆成功调用，返回 token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">successfulAuthentication</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                                            FilterChain chain, Authentication authResult)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String token = jwtUtil.generateToken(authResult.getName());</span><br><span class="line">        response.setStatus(HttpStatus.OK.value());</span><br><span class="line">        response.getWriter().print(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isLoginRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> requiresAuthentication(request, response) &amp;&amp; <span class="string">"POST"</span>.equalsIgnoreCase(request.getMethod());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">obtainToken</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request.getHeader(jwtUtil.getHeader());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Authentication <span class="title">processLogin</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        String username = obtainUsername(request);</span><br><span class="line">        String password = obtainPassword(request);</span><br><span class="line">        <span class="keyword">return</span> tryAuthenticationWithUsernameAndPassword(username, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processTokenAuthentication</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        Authentication resultOfAuthentication = tryToAuthenticateWithToken(token);</span><br><span class="line">        <span class="comment">// 设置上下文用户信息以及权限</span></span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(resultOfAuthentication);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Authentication <span class="title">tryAuthenticationWithUsernameAndPassword</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        Authentication authentication = <span class="keyword">new</span> UsernamePasswordAuthenticationToken(username, password);</span><br><span class="line">        <span class="keyword">return</span> tryToAuthenticate(authentication);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Authentication <span class="title">tryToAuthenticateWithToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        PreAuthenticatedAuthenticationToken requestAuthentication = <span class="keyword">new</span> PreAuthenticatedAuthenticationToken(token, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> tryToAuthenticate(requestAuthentication);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Authentication <span class="title">tryToAuthenticate</span><span class="params">(Authentication requestAuth)</span> </span>&#123;</span><br><span class="line">        Authentication responseAuth = getAuthenticationManager().authenticate(requestAuth);</span><br><span class="line">        <span class="keyword">if</span> (responseAuth == <span class="keyword">null</span> || !responseAuth.isAuthenticated()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalAuthenticationServiceException(<span class="string">"Unable to authenticate User for provided credentials"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        log.debug(<span class="string">"User successfully authenticated"</span>);</span><br><span class="line">        <span class="keyword">return</span> responseAuth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="授权认证-1"><a href="#授权认证-1" class="headerlink" title="授权认证"></a>授权认证</h4><p>根据提供的凭证的类型，进行相关的验证操作</p><h5 id="LoginAuthenticationProvider"><a href="#LoginAuthenticationProvider" class="headerlink" title="LoginAuthenticationProvider"></a>LoginAuthenticationProvider</h5><p>跟上个版本的 登陆验证中的 <code>CustomAuthenticationProvider</code> 代码一样实现一样。</p><h5 id="TokenAuthenticateProvider"><a href="#TokenAuthenticateProvider" class="headerlink" title="TokenAuthenticateProvider"></a>TokenAuthenticateProvider</h5><p>根据 token 查找它的 权限 信息，并装在到认证的凭证中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenAuthenticateProvider</span> <span class="keyword">implements</span> <span class="title">AuthenticationProvider</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtUtil jwtUtil;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        String token = authentication.getName();</span><br><span class="line">        String username = jwtUtil.getUsernameFromToken(token);</span><br><span class="line">        UserDetails userDetails = userDetailsService.loadUserByUsername(username);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PreAuthenticatedAuthenticationToken(username, <span class="keyword">null</span>, userDetails.getAuthorities());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; authentication)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PreAuthenticatedAuthenticationToken.class.equals(authentication);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置权限和相关设置-1"><a href="#配置权限和相关设置-1" class="headerlink" title="配置权限和相关设置"></a>配置权限和相关设置</h4><p>和上个版本没什么变化，只是将类换了一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span> <span class="comment">// 开启 Security</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity</span>(prePostEnabled = <span class="keyword">true</span>, securedEnabled = <span class="keyword">true</span>, jsr250Enabled = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JwtUtil <span class="title">jwtUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JwtUtil();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetailsService <span class="title">customService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserDetailServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"loginAuthenticationProvider"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationProvider <span class="title">loginAuthenticationProvider</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LoginAuthenticationProvider();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"tokenAuthenticationProvider"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationProvider <span class="title">tokenAuthenticationProvider</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TokenAuthenticateProvider();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthenticationFilter <span class="title">authenticationFilter</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        AuthenticationFilter authenticationFilter = <span class="keyword">new</span> AuthenticationFilter();</span><br><span class="line">        authenticationFilter.setAuthenticationManager(authenticationManager());</span><br><span class="line">        <span class="keyword">return</span> authenticationFilter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetailsService <span class="title">userDetailsService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserDetailServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主要是对身份验证的设置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        auth</span><br><span class="line">                .authenticationProvider(loginAuthenticationProvider())</span><br><span class="line">                .authenticationProvider(tokenAuthenticationProvider())</span><br><span class="line">                .userDetailsService(userDetailsService());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http</span><br><span class="line">                <span class="comment">// 关闭 csrf</span></span><br><span class="line">                .csrf().disable()</span><br><span class="line">                <span class="comment">// 设置 session 状态 STATELESS 无状态</span></span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                <span class="comment">// 需要权限验证</span></span><br><span class="line">                .mvcMatchers(<span class="string">"/user/**"</span>).authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                <span class="comment">// 登陆页面</span></span><br><span class="line">                .formLogin()</span><br><span class="line">                <span class="comment">//.loginPage("/login.html")</span></span><br><span class="line">                <span class="comment">// 登陆成功跳转页面</span></span><br><span class="line">                .defaultSuccessUrl(<span class="string">"/"</span>)</span><br><span class="line">                .failureForwardUrl(<span class="string">"/login.html"</span>)</span><br><span class="line">                .permitAll()</span><br><span class="line">                .and()</span><br><span class="line">                .addFilter(authenticationFilter())</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后续完善"><a href="#后续完善" class="headerlink" title="后续完善"></a>后续完善</h3><ol><li>修改密码，登出操作 token 的失效机制；</li><li>OAuth2 授权服务器的搭建；</li><li>修改权限后，下次请求刷新权限；</li><li>……</li></ol><h3 id="附录一：HttpSecurity常用方法"><a href="#附录一：HttpSecurity常用方法" class="headerlink" title="附录一：HttpSecurity常用方法"></a>附录一：HttpSecurity常用方法</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>openidLogin()</code></td><td>用于基于 OpenId 的验证</td></tr><tr><td><code>headers()</code></td><td>将安全标头添加到响应</td></tr><tr><td><code>cors()</code></td><td>配置跨域资源共享（ CORS ）</td></tr><tr><td><code>sessionManagement()</code></td><td>允许配置会话管理</td></tr><tr><td><code>portMapper()</code></td><td>允许配置一个<code>PortMapper</code>(<code>HttpSecurity#(getSharedObject(class))</code>)，其他提供<code>SecurityConfigurer</code>的对象使用 <code>PortMapper</code> 从 HTTP 重定向到 HTTPS 或者从 HTTPS 重定向到 HTTP。默认情况下，Spring Security使用一个<code>PortMapperImpl</code>映射 HTTP 端口8080到 HTTPS 端口8443，HTTP 端口80到 HTTPS 端口443</td></tr><tr><td><code>jee()</code></td><td>配置基于容器的预认证。 在这种情况下，认证由Servlet容器管理</td></tr><tr><td><code>x509()</code></td><td>配置基于x509的认证</td></tr><tr><td><code>rememberMe</code></td><td>允许配置“记住我”的验证</td></tr><tr><td><code>authorizeRequests()</code></td><td>允许基于使用<code>HttpServletRequest</code>限制访问</td></tr><tr><td><code>requestCache()</code></td><td>允许配置请求缓存</td></tr><tr><td><code>exceptionHandling()</code></td><td>允许配置错误处理</td></tr><tr><td><code>securityContext()</code></td><td>在<code>HttpServletRequests</code>之间的<code>SecurityContextHolder</code>上设置<code>SecurityContext</code>的管理。 当使用<code>WebSecurityConfigurerAdapter</code>时，这将自动应用</td></tr><tr><td><code>servletApi()</code></td><td>将<code>HttpServletRequest</code>方法与在其上找到的值集成到<code>SecurityContext</code>中。 当使用<code>WebSecurityConfigurerAdapter</code>时，这将自动应用</td></tr><tr><td><code>csrf()</code></td><td>添加 CSRF 支持，使用<code>WebSecurityConfigurerAdapter</code>时，默认启用</td></tr><tr><td><code>logout()</code></td><td>添加退出登录支持。当使用<code>WebSecurityConfigurerAdapter</code>时，这将自动应用。默认情况是，访问URL”/ logout”，使HTTP Session无效来清除用户，清除已配置的任何<code>#rememberMe()</code>身份验证，清除<code>SecurityContextHolder</code>，然后重定向到”/login?success”</td></tr><tr><td><code>anonymous()</code></td><td>允许配置匿名用户的表示方法。 当与<code>WebSecurityConfigurerAdapter</code>结合使用时，这将自动应用。 默认情况下，匿名用户将使用<code>org.springframework.security.authentication.AnonymousAuthenticationToken</code>表示，并包含角色 “ROLE_ANONYMOUS”</td></tr><tr><td><code>formLogin()</code></td><td>指定支持基于表单的身份验证。如果未指定<code>FormLoginConfigurer#loginPage(String)</code>，则将生成默认登录页面</td></tr><tr><td><code>oauth2Login()</code></td><td>根据外部OAuth 2.0或OpenID Connect 1.0提供程序配置身份验证</td></tr><tr><td><code>requiresChannel()</code></td><td>配置通道安全。为了使该配置有用，必须提供至少一个到所需信道的映射</td></tr><tr><td><code>httpBasic()</code></td><td>配置 Http Basic 验证</td></tr><tr><td><code>addFilterAt()</code></td><td>在指定的Filter类的位置添加过滤器</td></tr></tbody></table><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习 Docker 笔记]]></title>
      <url>/docker-note.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><p>学习总结来自 Gitbook <a href="https://yeasy.gitbooks.io/docker_practice/content/basic_concept/image.html" rel="external nofollow noopener noreferrer" target="_blank">Docker 从入门到实践的总结</a>；<br>现在容器的工具太多，国内阿里，华为等都有自己的容器产品，说到容器大多数想到或者用到的是 Docker，所以就这样来学习吧。主要学习方向参考上面的书。</p><p>这篇书讲得很全，作为开发人员可以刚开始不用全部都学习完，只是把基础的内容学习一遍，加上尝试实践，和中间学习过程中感觉到理解困难的学习点记录了下，最主要还是注重基础，有 <em>shell</em> 脚本基础学习起来时要轻松很多，重点是理解原理，有条件加以实战，才知道原来是这样啊，也能发现发现很多问题。</p><a id="more"></a><h2 id="为什么要使用-Docker"><a href="#为什么要使用-Docker" class="headerlink" title="为什么要使用 Docker"></a>为什么要使用 Docker</h2><h3 id="什么是-Docker"><a href="#什么是-Docker" class="headerlink" title="什么是 Docker"></a>什么是 Docker</h3><p>Docker 在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker 技术比虚拟机技术更为轻便、快捷。</p><p>传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。</p><h3 id="为什么要用-Docker"><a href="#为什么要用-Docker" class="headerlink" title="为什么要用 Docker"></a>为什么要用 Docker</h3><ol><li>更高效的利用系统资源</li><li>更高效的利用系统资源：直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。</li><li>一致的运行环境</li><li>持续交付和部署，一次创建或配置，可以在任意地方正常运行。</li><li>更轻松的迁移，可以多平台运行。</li><li>更轻松的维护和扩展，可以自定义镜像。</li></ol><h2 id="了解-Docker-的基本概念"><a href="#了解-Docker-的基本概念" class="headerlink" title="了解 Docker 的基本概念"></a>了解 Docker 的基本概念</h2><h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><p>Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p><h3 id="分层存储"><a href="#分层存储" class="headerlink" title="分层存储"></a>分层存储</h3><p>Docker 设计时，充分利用 Union FS 的技术，将其设计为分层存储的架构。镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。</p><p>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。</p><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>容器是镜像运行时的实体，只是是以镜像为基础层，在其上创建一个当前<strong>容器的存储层</strong>。容器可以被创建、启动、停止、删除、暂停等。</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>参考 <a href="https://blog.wuwii.com/docker-install.html">安装 Docker</a></p><h3 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a>镜像加速</h3><p>国内使用加速：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [</span><br><span class="line">    <span class="string">"https://registry.docker-cn.com"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="镜像-1"><a href="#镜像-1" class="headerlink" title="镜像"></a>镜像</h3><h4 id="查找镜像语法"><a href="#查找镜像语法" class="headerlink" title="查找镜像语法"></a>查找镜像语法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker search [OPTIONS] TERM</span><br></pre></td></tr></table></figure><p>OPTIONS说明：</p><ul><li><p><strong>–automated :</strong>只列出 automated build类型的镜像；</p></li><li><p><strong>–no-trunc :</strong>显示完整的镜像描述；</p></li><li><p><strong>-s :</strong>列出收藏数不小于指定值的镜像。</p></li></ul><p>我们首先想使用某个镜像，就可以去 DockerHub 下载，首先去查找镜像，例如我想使用 <code>nginx</code> 镜像并且收藏数大于100：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ docker search nginx -s 100</span><br><span class="line">Flag --stars has been deprecated, use --filter=stars=3 instead</span><br><span class="line">NAME                                     DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">nginx                                    Official build of Nginx.                        8309                [OK]                </span><br><span class="line">jwilder/nginx-proxy                      Automated Nginx reverse proxy <span class="keyword">for</span> docker con…   1312                                    [OK]</span><br><span class="line">richarvey/nginx-php-fpm                  Container running Nginx + PHP-FPM capable of…   544                                     [OK]</span><br><span class="line">jrcs/letsencrypt-nginx-proxy-companion   LetsEncrypt container to use with nginx as p…   341                                     [OK]</span><br><span class="line">kong                                     Open-source Microservice &amp; API Management la…   173                 [OK]</span><br></pre></td></tr></table></figure><h4 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h4><p>从 Docker 的镜像仓库中拖取镜像 <code>docker pull</code>：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]</span><br></pre></td></tr></table></figure><p></p><p>获取 nginx 镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull nginx:latest</span><br></pre></td></tr></table></figure><h4 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像"></a>列出镜像</h4><p>要想列出已经下载下来的镜像，可以使用 <code>docker image ls</code> 命令，或者 <code>docker images</code>，它会列出所有的镜像。<br>列表包含了 仓库名、标签、镜像 ID（唯一标识）、创建时间 以及 所占用的空间。</p><p>当然命令后面可以接条件，找出符合条件的镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker images [OPTIONS] [REPOSITORY[:TAG]]</span><br></pre></td></tr></table></figure><p>OPTIONS说明：</p><ul><li><strong>-a :</strong>列出本地所有的镜像（含中间映像层，默认情况下，过滤掉中间映像层）；</li><li><strong>–digests :</strong>显示镜像的摘要信息；</li><li><strong>-f :</strong>显示满足条件的镜像；</li><li><strong>–format :</strong>指定返回值的模板文件；</li><li><strong>–no-trunc :</strong>显示完整的镜像信息；</li><li><strong>-q :</strong>只显示镜像ID。</li></ul><p>合理的格式获取镜像的参数，可以方便在脚本中的使用。</p><p>查看 nginx 镜像的 ID：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls nginx:latest -q</span><br><span class="line">c5c4e8fa2cf7</span><br></pre></td></tr></table></figure><h4 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h4><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker image rm [选项] &lt;镜像1&gt; [&lt;镜像2&gt; ...]</span><br></pre></td></tr></table></figure><ol><li><p>使用 ID 删除镜像：上面我们查看到 nginx 的 id 很长，但是实际上只要使用前三位以后能够确定到哪个镜像就行了 :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker image rm c5c</span><br></pre></td></tr></table></figure></li><li><p>使用镜像名删除镜像：也就是 <code>&lt;仓库名&gt;:&lt;标签&gt;</code>，来删除镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker image rm nginx:latest</span><br></pre></td></tr></table></figure></li><li><p>使用镜像摘要删除镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ docker image ls nginx --digests</span><br><span class="line">REPOSITORY          TAG                 DIGEST                                                                    IMAGE ID            CREATED             SIZE</span><br><span class="line">nginx               latest              sha256:e36d7f5dabf1429d84135bb8a8086908e1150f1a178c75719a9e0e53ebb90353   c5c4e8fa2cf7        6 days ago          109MB</span><br><span class="line"></span><br><span class="line">$ docker image rm nginx@sha256:e36d7f5dabf1429d84135bb8a8086908e1150f1a178c75719a9e0e53ebb90353</span><br><span class="line">Untagged: nginx@sha256:e36d7f5dabf1429d84135bb8a8086908e1150f1a178c75719a9e0e53ebb90353</span><br></pre></td></tr></table></figure></li></ol><p>现在我们就可以使用查询命令来配合使用删除：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker image rm $(docker image ls nginx -q)</span><br><span class="line">Untagged: nginx:latest</span><br><span class="line">Untagged: nginx@sha256:e36d7f5dabf1429d84135bb8a8086908e1150f1a178c75719a9e0e53ebb90353</span><br><span class="line">Deleted: sha256:c5c4e8fa2cf7d87545ed017b60a4b71e047e26c4ebc71eb1709d9e5289f9176f</span><br><span class="line">Deleted: sha256:df08705f06272d44ac0364419532e581af1340fc54ef33423d3735abba422834</span><br><span class="line">Deleted: sha256:220ece772fae32240b2b8491a072c7b30cc0c5c6b67ad73fba6c2968e4ecacd7</span><br></pre></td></tr></table></figure><hr><h4 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h4><p>给一个镜像打上指定的标签（它们拥有一样的 IMAGE ID，可以试一试）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker tag nginx:latest kronchan/nginx:v1.0 </span><br><span class="line">$ docker image ls kronchan/nginx:v1.0        </span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">kronchan/nginx      v1.0                c5c4e8fa2cf7        6 days ago          109MB</span><br></pre></td></tr></table></figure><p><strong>但是多个镜像有相同 ID 不能使用 ID 一次性删除：</strong><code>Error response from daemon: conflict: unable to delete c5c4e8fa2cf7 (must be forced) - image is referenced in multiple repositories</code></p><h4 id="使用-Dockerfile-定制镜像"><a href="#使用-Dockerfile-定制镜像" class="headerlink" title="使用 Dockerfile 定制镜像"></a>使用 Dockerfile 定制镜像</h4><p><code>Dockerfile</code>是由一系列命令和参数构成的脚本，一个<code>Dockerfile</code>里面包含了构建整个<code>image</code>的完整命令。Docker通过<code>docker build</code>执行<code>Dockerfile</code>中的一系列命令自动构建<code>image</code>。</p><h5 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h5><p>所谓定制镜像，那一定是以一个镜像为基础，比如我们需要构建一个 java 项目，就必须要在 java 环境的基础上进行构建，其中基础镜像是必须指定的，<code>FROM</code> 就是指定<strong>基础镜像</strong>，因此一个 <code>Dockerfile</code> 中 <code>FROM</code> 是必备的指令，并且必须是第一条指令。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> &lt;image&gt;[:tag]</span><br></pre></td></tr></table></figure><h5 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h5><p><code>RUN</code> 指令是用来执行命令行命令的。由于命令行的强大能力，<code>RUN</code> 指令在定制镜像时是最常用的指令之一。其格式有两种：</p><ol><li><em>shell</em> 格式：<code>RUN &lt;命令&gt;</code>，直接追加 shell 命令行；</li><li><em>exec</em> 格式：<code>RUN [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;]</code>，这更像是函数调用中的格式。</li></ol><p>比如给 nginx 制定欢迎页的 <code>Dockerfile</code>：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'&lt;h1&gt;Hello, Docker!&lt;/h1&gt;'</span> &gt; /usr/share/nginx/html/index.html</span></span><br></pre></td></tr></table></figure><p>在文件所在目录执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t nginx:v1.0 .</span><br></pre></td></tr></table></figure><p>注意后面的点不能少，点 <code>.</code> 表示使用当前目录作为上下文环境将文件进行打包，上传到 Docker 引擎服务器，进行构建镜像。</p><h5 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h5><p>格式：</p><ul><li><code>COPY &lt;源路径&gt;... &lt;目标路径&gt;</code></li><li><code>COPY [&quot;&lt;源路径1&gt;&quot;,... &quot;&lt;目标路径&gt;&quot;]</code></li></ul><p>和 <code>RUN</code> 指令一样，也有两种格式，一种类似于命令行，一种类似于函数调用。</p><p><code>COPY</code> 指令将从构建上下文目录中 <code>&lt;源路径&gt;</code> 的文件/目录复制到新的一层的镜像内的 <code>&lt;目标路径&gt;</code> 位置。比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COPY package.json /usr/src/app/</span><br></pre></td></tr></table></figure><p><code>&lt;源路径&gt;</code> 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 <a href="https://golang.org/pkg/path/filepath/#Match" rel="external nofollow noopener noreferrer" target="_blank"><code>filepath.Match</code></a> 规则，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">COPY hom* /mydir/</span><br><span class="line">COPY hom?.txt /mydir/</span><br></pre></td></tr></table></figure><p><code>&lt;目标路径&gt;</code> 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 <code>WORKDIR</code> 指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。</p><p>此外，还需要注意一点，使用 <code>COPY</code> 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。这个特性对于镜像定制很有用。特别是构建相关文件都在使用 Git 进行管理的时候。</p><h5 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h5><p>一般认为拥有和 <code>COPY</code> 一样的功能，但是多了一个自动解压缩的功能。</p><h5 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h5><p>容器启动命令，其格式有两种：</p><ol><li><em>shell</em> 格式：<code>RUN &lt;命令&gt;</code>，直接追加 shell 命令行；</li><li><em>exec</em> 格式：<code>RUN [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;]</code>，这更像是函数调用中的格式。</li></ol><p>在启动容器的时候，可以使用下面命令覆盖<code>CMD</code> 缺省值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run [OPTIONS] IMAGE[:TAG] [COMMAND] [ARG...]</span><br></pre></td></tr></table></figure><h5 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h5><p>它指定了当container执行时，需要启动哪些进程。</p><p>两种形式：</p><ul><li>ENTRYPOINT [“executable”, “param1”, “param2”] （<em>exec</em> 形式, 首选）</li><li>ENTRYPOINT command param1 param2 (<em>shell</em> 形式)</li></ul><p><em>shell</em> 形式防止使用任何<code>CMD</code>或运行命令行参数，但是缺点是您的<code>ENTRYPOINT</code>将作<code>/bin/sh -c</code>的子命令启动，它不传递信号。这意味着可执行文件将不是容器的<code>PID 1</code>，并且不会接收Unix信号，因此您的可执行文件将不会从<code>docker stop &lt;container&gt;</code>接收到<code>SIGTERM</code>。</p><p>只有<code>Dockerfile</code>中最后一个<code>ENTRYPOINT</code>指令会有效果。</p><p><code>docker run &lt;image&gt;</code>的命令行参数将附跟在 <em>exec</em> 形式的<code>ENTRYPOINT</code>中的所有元素之后，并将覆盖使用<code>CMD</code>指定的所有元素。这允许将参数传递到入口点，即<code>docker run &lt;image&gt; -d</code>将把<code>-d</code>参数传递给入口点。</p><p>入口点，和 <code>CMD</code> 一起使用比较好，</p><p>例子：</p><p>编写一个 <code>Dockerfile</code>:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu</span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"top"</span>, <span class="string">"-b"</span>]</span></span><br><span class="line"><span class="bash">CMD [<span class="string">"-c"</span>]</span></span><br></pre></td></tr></table></figure><p>构建镜像，分别运行两个容器：</p><ol><li><code>$ docker run -d --name test1 test/ubuntu:v1.0</code></li><li><code>$ docker run -d --name test2 test/ubuntu:v1.0 -H</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker container ls</span><br><span class="line">CONTAINER ID        IMAGE                         COMMAND                  CREATED             STATUS                  PORTS                    NAMES</span><br><span class="line">de2ac31d1219        <span class="built_in">test</span>/ubuntu:v1.0              <span class="string">"top -b -H"</span>              2 minutes ago       Up 2 minutes                                     test2</span><br><span class="line">852e5d5119d0        <span class="built_in">test</span>/ubuntu:v1.0              <span class="string">"top -b -c"</span>              3 minutes ago       Up 3 minutes                                     test1</span><br></pre></td></tr></table></figure><p>可以检查容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it test2 ps aux </span><br><span class="line">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span><br><span class="line">root         1  0.0  0.1  36520  1584 ?        Ss   04:04   0:00 top -b -H</span><br><span class="line">root         5  0.0  0.1  34412  1436 pts/0    Rs+  04:15   0:00 ps aux</span><br></pre></td></tr></table></figure><p>启动容器的时候可以使用 <code>--entrypoint=&quot;&quot;: Overwrite the default entrypoint set by the image</code>，覆盖缺省的值。</p><p>TODO ，这方面还需要再了解下。</p><h5 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h5><p>格式有两种：</p><ul><li><code>ENV &lt;key&gt; &lt;value&gt;</code></li><li><code>ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;...</code></li></ul><p>设置环境变量，后面可以直接调用：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> VERSION=<span class="number">1.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$VERSION</span></span></span><br></pre></td></tr></table></figure><p><code>-e</code>参数：在启动容器 的时候使用 <code>-e VERSION=2.0</code> 可以覆盖值。</p><p>在容器启动的时候，会缺省创建下面的变量：</p><table><thead><tr><th><strong>Variable</strong></th><th><strong>Value</strong></th></tr></thead><tbody><tr><td><code>HOME</code></td><td>Set based on the value of <code>USER</code></td></tr><tr><td><code>HOSTNAME</code></td><td>The hostname associated with the container</td></tr><tr><td><code>PATH</code></td><td>Includes popular directories, such as :<code>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</code></td></tr><tr><td><code>TERM</code></td><td><code>xterm</code> if the container is allocated a psuedo-TTY</td></tr></tbody></table><h5 id="ARG"><a href="#ARG" class="headerlink" title="ARG"></a>ARG</h5><p>构建参数，格式：<code>ARG &lt;参数名&gt;[=&lt;默认值&gt;]</code></p><p><code>Dockerfile</code> 中的 <code>ARG</code> 指令是定义参数名称，以及定义其默认值。该默认值可以在构建命令 <code>docker build</code> 中用 <code>--build-arg &lt;参数名&gt;=&lt;值&gt;</code> 来覆盖。</p><h5 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h5><p>格式为：</p><ul><li><code>VOLUME [&quot;&lt;路径1&gt;&quot;, &quot;&lt;路径2&gt;&quot;...]</code></li><li><code>VOLUME &lt;路径&gt;</code></li></ul><p>一般上，容器是不保存任何文件的，因为容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。</p><p>我们将这些动态数据挂载到主机中，就可以使用挂载卷保存数据。也可以在运行的时候覆盖挂载卷的参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -dit -v mydata:/data image</span><br></pre></td></tr></table></figure><p><code>mydata</code> 为 宿主中的挂载卷，将会挂载到 docker 容器中的 data 这个文件夹中，而且会覆盖 Dockerfile 中设置的匿名挂载卷。</p><h5 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h5><p>格式为 <code>EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</code>。</p><p>这只是一个<strong>声明</strong>，在运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 <code>docker run -P</code>时，会自动随机映射 <code>EXPOSE</code> 的端口。</p><p>运行时使用命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run d -p 8001:8000 IMAGE</span><br></pre></td></tr></table></figure><p>其中 docker 容器的 8000 端口映射到宿主 8000 端口。</p><p>使用 <code>-P</code> 将内部容器所有开放的端口随机分发，你可以使用docker port来查找这个随机绑定端口。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">--expose=[]: Expose a port or a range of ports from the container</span><br><span class="line">            without publishing it to your host</span><br><span class="line">-P=<span class="literal">false</span>   : Publish all exposed ports to the host interfaces</span><br><span class="line">-p=[]      : Publish a container᾿s port to the host (format:</span><br><span class="line">             ip:hostPort:containerPort | ip::containerPort |</span><br><span class="line">             hostPort:containerPort | containerPort)</span><br><span class="line">             (use <span class="string">'docker port'</span> to see the actual mapping)</span><br><span class="line">--link=<span class="string">""</span>  : Add link to another container (name:<span class="built_in">alias</span>)</span><br></pre></td></tr></table></figure><h5 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h5><p>区别于 <em>shell</em> 中的 <code>cd</code>的切换命令：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> /app</span></span><br><span class="line"><span class="bash">RUN <span class="built_in">echo</span> <span class="string">"hello"</span> &gt; world.txt</span></span><br></pre></td></tr></table></figure><p>由于 Dockerfile 中每个 RUN 都是开启一个容器，所以第二行的命令重启一个容器又是一个新的环境，把那个不知道你切换了文件目录，它还是在原来的位置。如果需要改变以后各层的工作目录的位置，那么应该使用 <code>WORKDIR</code> 指令。</p><p>启动容器的时候可以使用 <code>-w</code>覆盖默认缺省值。</p><h5 id="USER"><a href="#USER" class="headerlink" title="USER"></a>USER</h5><p>格式：<code>USER &lt;用户名 or UID&gt;</code></p><p><code>USER</code> 改变后面构建层使用命令的<strong>身份</strong>，这个用户必须是事先建立好的，否则无法切换。</p><p>启动容器的时候可以使用<code>-u</code>覆盖缺省值。</p><h5 id="MAINTAINER"><a href="#MAINTAINER" class="headerlink" title="MAINTAINER"></a>MAINTAINER</h5><p>格式：<code>MAINTAINER [name]</code></p><p><code>MAINTAINER</code>指令允许您设置生成的images的作者字段。</p><h5 id="ONBUILD"><a href="#ONBUILD" class="headerlink" title="ONBUILD"></a>ONBUILD</h5><p>// todo</p><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p><code>docker build</code>命令从<code>Dockerfile</code>和<code>context</code>构建image。<code>context</code>是<code>PATH</code>或<code>URL</code>处的文件。<code>PATH</code>本地文件目录。 <code>URL</code>是Git repository的位置。</p><p><code>context</code>以递归方式处理。因此，<code>PATH</code>包括任何子目录，<code>URL</code>包括repository及submodules。一个使用当前目录作为<code>context</code>的简单构建命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker build .</span><br><span class="line">Sending build context to Docker daemon  6.51 MB</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>构建由Docker守护程序运行，而不是由CLI运行。构建过程所做的第一件事是将整个context（递归地）发送给守护进程。大多数情况下，最好是将<code>Dockerfile</code>和所需文件复制到一个空的目录，再到这个目录进行构建。</p><blockquote><p><code>警告</code>：不要使用根目录<code>/</code>作为PATH，因为它会导致构建将硬盘驱动器的所有内容传输到Docker守护程序。</p></blockquote><p>可以使用<code>.dockerignore</code>文件添加到<code>context</code>目录中来排除文件和目录。</p><p>一般的，<code>Dockerfile</code>位于<code>context</code>的根中。但使用<code>-f</code>标志可指定Dockerfile的位置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -f /path/to/a/Dockerfile .</span><br></pre></td></tr></table></figure><p>如果build成功，您可以指定要保存新image的repository和tag：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t shykes/myapp .</span><br></pre></td></tr></table></figure><p>要在构建后将image标记为多个repositories，请在运行构建命令时添加多个<code>-t</code>参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t shykes/myapp:1.0.2 -t shykes/myapp:latest .</span><br></pre></td></tr></table></figure><p>Docker守护程序一个接一个地运行<code>Dockerfile</code>中的指令，如果需要，将每个指令的结果提交到一个新image，最后输出新映像的ID。Docker守护进程将自动清理您发送的context。</p><p>请注意，每个指令独立运行，并导致创建一个新image - 因此<code>RUN cd /tmp</code>对下一个指令不会有任何影响。</p><p>只要有可能，Docker将重新使用中间images（缓存），就是以前构建镜像使用过的指令再次重复使用，加速<code>docker build</code>过程。</p><h5 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h5><p>写一个简单的 Dockerfile：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># my demo</span></span><br><span class="line"><span class="keyword">FROM</span> busybox</span><br><span class="line"><span class="keyword">MAINTAINER</span> kronchan1@gmail.com</span><br><span class="line"><span class="keyword">ENV</span> MKDIR=new-file \</span><br><span class="line">    FILE=tmpfile</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /kronchan</span></span><br><span class="line"><span class="bash">RUN mkdir <span class="variable">$&#123;MKDIR&#125;</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; touch <span class="variable">$&#123;MKDIR&#125;</span>/<span class="variable">$&#123;FILE&#125;</span></span></span><br><span class="line"><span class="bash">COPY file1.tar.gz .</span></span><br><span class="line"><span class="bash">ADD file2.tar .</span></span><br></pre></td></tr></table></figure><p>开始构建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line">Dockerfile  file1.tar.gz  file2.tar</span><br><span class="line"><span class="comment"># 开始构建镜像</span></span><br><span class="line">$ docker build -t <span class="built_in">test</span>-image .</span><br><span class="line">Sending build context to Docker daemon  3.072kB</span><br><span class="line">Step 1/7 : FROM busybox</span><br><span class="line"> ---&gt; 8ac48589692a</span><br><span class="line">Step 2/7 : MAINTAINER kronchan1@gmail.com</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; ca58745123bb</span><br><span class="line">Step 3/7 : ENV MKDIR=new-file     FILE=tmpfile</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; f6383692900a</span><br><span class="line">Step 4/7 : WORKDIR /kronchan</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; f1f4e917cdcf</span><br><span class="line">Step 5/7 : RUN mkdir <span class="variable">$&#123;MKDIR&#125;</span>     &amp;&amp; touch <span class="variable">$&#123;MKDIR&#125;</span>/<span class="variable">$&#123;FILE&#125;</span></span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 28963ac16c41</span><br><span class="line">Step 6/7 : COPY file1.tar.gz .</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; d4f4affd5b88</span><br><span class="line">Step 7/7 : ADD file2.tar .</span><br><span class="line">^[[A ---&gt; f1ba7424ec6e</span><br><span class="line">Successfully built f1ba7424ec6e</span><br><span class="line">Successfully tagged <span class="built_in">test</span>-image:latest</span><br><span class="line"><span class="comment"># 运行容器</span></span><br><span class="line">$ docker run -it <span class="built_in">test</span>-image</span><br><span class="line"><span class="comment"># 进入容器后，自动进入创建的工作目录</span></span><br><span class="line">/kronchan <span class="comment"># ls</span></span><br><span class="line">file1.tar.gz  file2.tar     new-file</span><br><span class="line"><span class="comment"># 检查环境变量</span></span><br><span class="line">/kronchan <span class="comment"># echo $FILE</span></span><br><span class="line">tmpfile</span><br></pre></td></tr></table></figure><p><strong>突然发现，<code>ADD</code> 指令好像也不能像前面或者网络上前辈们介绍的说自动解压文件，暂时记录，能力有限，也不能说明白，记录下以后不要踩坑，复制文件还是使用 <code>COPY</code> 语义更标准。</strong></p><h3 id="容器-1"><a href="#容器-1" class="headerlink" title="容器"></a>容器</h3><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>语法： <code>docker run</code></p><p>启动 nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -dit nginx</span><br></pre></td></tr></table></figure><p><code>-t</code> 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上，</p><p><code>-i</code> 则让容器的标准输入保持打开。</p><p><code>-d</code> 守护状态运行。</p><p>当利用 <code>docker run</code> 来创建容器时，Docker 在后台运行的标准操作包括：</p><ul><li>检查本地是否存在指定的镜像，不存在就从公有仓库下载</li><li>利用镜像创建并启动一个容器</li><li>分配一个文件系统，并在只读的镜像层外面挂载一层可读写层</li><li>从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去</li><li>从地址池配置一个 ip 地址给容器</li><li>执行用户指定的应用程序</li><li>执行完毕后容器被终止</li></ul><p>可以利用 <code>docker container start [container ID or NAMES]</code> 命令，直接将一个已经终止的容器启动运行。</p><p>查看<strong>守护状态运行</strong>的容器的输出信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ docker logs --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">Usage:  docker logs [OPTIONS] CONTAINER</span><br><span class="line"></span><br><span class="line">Fetch the logs of a container</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --details        Show extra details provided to logs</span><br><span class="line">  -f, --follow         Follow <span class="built_in">log</span> output</span><br><span class="line">      --since string   Show logs since timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m <span class="keyword">for</span> 42 minutes)</span><br><span class="line">      --tail string    Number of lines to show from the end of the logs (default <span class="string">"all"</span>)</span><br><span class="line">  -t, --timestamps     Show timestamps</span><br><span class="line">      --until string   Show logs before a timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m <span class="keyword">for</span> 42 minutes)</span><br></pre></td></tr></table></figure><h4 id="终止容器"><a href="#终止容器" class="headerlink" title="终止容器"></a>终止容器</h4><p>可以使用 <code>docker container stop [container ID or NAMES]</code> 来终止一个运行中的容器。</p><h4 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h4><p><code>exec</code> 命令</p><p>一般使用 <code>-i</code>，<code>-t</code>参数后就可以有终端和提示符。</p><h4 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h4><ol><li>可以使用 <code>docker container rm [container ID or NAMES]</code> 来删除一个处于终止状态的容器。</li><li>如果需要删除运行状态中的容器，加上参数 <code>-f</code> 强制删除；</li><li><code>$ docker container prune</code> 清理所有处于终止状态的容器。</li></ol><h4 id="导出和导入"><a href="#导出和导入" class="headerlink" title="导出和导入"></a>导出和导入</h4><ol><li><p>导出容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">export</span> 180f &gt; /root/springboot-docker.tar</span><br></pre></td></tr></table></figure></li><li><p>导入容器快照：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker import - kronchan/springboot-docker:v1.0</span><br></pre></td></tr></table></figure><p>还可以导入 url 中的文件作为镜像。</p></li></ol><h3 id="Docker-Hub"><a href="#Docker-Hub" class="headerlink" title="Docker Hub"></a>Docker Hub</h3><h4 id="推送镜像"><a href="#推送镜像" class="headerlink" title="推送镜像"></a>推送镜像</h4><p>目前 Docker 官方维护了一个公共仓库 <a href="https://hub.docker.com/" rel="external nofollow noopener noreferrer" target="_blank">Docker Hub</a>，但是国内推送的速度在没有翻墙的情况下比较尴尬，所以可以使用 <a href="https://cr.console.aliyun.com/?spm=a2c4e.11153959.blogcont29941.9.520269d65b5sBo&amp;accounttraceid=7944ca1b-ff8f-4239-91ba-79d103b8e92e#/imageList" rel="external nofollow noopener noreferrer" target="_blank">阿里云镜像服务</a>。</p><ol><li><p>登陆 ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker login registry.cn-hangzhou.aliyuncs.com</span><br></pre></td></tr></table></figure><p>然后输入账号密码。</p></li><li><p>标记 TAG（可选）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker tag [ImageId] com.wuwii/&lt;image&gt;[:镜像版本号]</span><br></pre></td></tr></table></figure></li><li><p>推送：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker push [image]</span><br></pre></td></tr></table></figure></li></ol><h4 id="提交构建文件到仓库"><a href="#提交构建文件到仓库" class="headerlink" title="提交构建文件到仓库"></a>提交构建文件到仓库</h4><p>只需要将构建镜像的 <code>Dockerfile</code> 和其余相关的文件一同 <code>push</code> 到代码托管仓库，再次 <code>push</code> 下来就能重新构建镜像。</p><h3 id="数据管理"><a href="#数据管理" class="headerlink" title="数据管理"></a>数据管理</h3><h4 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h4><p><code>数据卷</code> 是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：</p><ul><li><code>数据卷</code> 可以在容器之间共享和重用</li><li>对 <code>数据卷</code> 的修改会立马生效</li><li>对 <code>数据卷</code> 的更新，不会影响镜像</li><li><code>数据卷</code> 默认会一直存在，即使容器被删除</li></ul><p><strong>Command：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Usage:  docker volume COMMAND</span><br><span class="line"></span><br><span class="line">Manage volumes</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  create      Create a volume </span><br><span class="line">  inspect     Display detailed information on one or more volumes</span><br><span class="line">  ls          List volume</span><br><span class="line">  prune       Remove all unused volumes </span><br><span class="line">  rm          Remove one or more volumes</span><br></pre></td></tr></table></figure><h4 id="容器挂载数据卷"><a href="#容器挂载数据卷" class="headerlink" title="容器挂载数据卷"></a>容器挂载数据卷</h4><p>例如我启动一个 <code>jenkins</code> 容器，命名为 <code>my_jenkins</code>，将容器的 <code>var/jenkins_home/</code>目录挂载到数据卷 <code>my_jenkins</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker volume create my_jenkins_volume</span><br><span class="line"></span><br><span class="line">$ docker run -p 7322:8080 -p 50000:50000 -v my_jenkins_volume:/var/jenkins_home/  --name my_jenkins -d jenkins</span><br></pre></td></tr></table></figure><blockquote><p><code>-v my_jenkins_volume:/var/jenkins_home/</code> 可以理解是 <code>--mount source=my_jenkins_volume,target=/var/jenkins_home/</code>，后面一种更好理解，也是推荐使用的。</p></blockquote><p>查询容器信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ docker inspect my_jenkins</span><br><span class="line"></span><br><span class="line">…………</span><br><span class="line"> <span class="string">"Mounts"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"Type"</span>: <span class="string">"volume"</span>,</span><br><span class="line">                <span class="string">"Name"</span>: <span class="string">"my_jenkins_volume"</span>,</span><br><span class="line">                <span class="string">"Source"</span>: <span class="string">"/var/lib/docker/volumes/my_jenkins_volume/_data"</span>,</span><br><span class="line">                <span class="string">"Destination"</span>: <span class="string">"/var/jenkins_home"</span>,</span><br><span class="line">                <span class="string">"Driver"</span>: <span class="string">"local"</span>,</span><br><span class="line">                <span class="string">"Mode"</span>: <span class="string">"z"</span>,</span><br><span class="line">                <span class="string">"RW"</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">"Propagation"</span>: <span class="string">""</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">…………</span><br></pre></td></tr></table></figure><h4 id="挂载主机文件作为数据卷"><a href="#挂载主机文件作为数据卷" class="headerlink" title="挂载主机文件作为数据卷"></a>挂载主机文件作为数据卷</h4><p>不光可以将数据卷挂载到容器中，我们还可以直接将宿主的文件直接作为数据卷使用，完成一样的效果。</p><p>上面的，我将宿主的文件夹 <code>/var/my_jenkins</code>，作为数据卷挂载到 <code>/var/my_jenkins</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -p 7322:8080 -p 50000:50000 -v /var/jenkins_home/:/var/jenkins_home/  --name my_jenkins -d jenkins</span><br></pre></td></tr></table></figure><blockquote><p>也可以用 <code>--mount type=bind,source=/var/jenkins_home/,target=/var/jenkins_home/</code></p></blockquote><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><p>当 Docker 启动时，会自动在主机上创建一个 <code>docker0</code> 虚拟网桥，实际上是 Linux 的一个 bridge，可以理解为一个软件交换机。它会在挂载到它的网口之间进行转发。</p><p><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/docker/network.png" alt="image"></p><h4 id="外部访问容器"><a href="#外部访问容器" class="headerlink" title="外部访问容器"></a>外部访问容器</h4><p>使用<code>-p</code>和<code>-P</code> 设置主机和容器的映射端口。</p><h4 id="容器互联"><a href="#容器互联" class="headerlink" title="容器互联"></a>容器互联</h4><p><strong>使用自定义网络 （network）进行互联。</strong></p><p>运行一个容器并连接到新建的 <code>my-net</code> 网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it --rm --name busybox1 --network my-net busybox sh</span><br></pre></td></tr></table></figure><p>打开新的终端，再运行一个容器并加入到 <code>my-net</code> 网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it --rm --name busybox2 --network my-net busybox sh</span><br></pre></td></tr></table></figure><p>再打开一个新的终端查看容器信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker container ls</span><br><span class="line"></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">b47060aca56b        busybox             <span class="string">"sh"</span>                11 minutes ago      Up 11 minutes                           busybox2</span><br><span class="line">8720575823ec        busybox             <span class="string">"sh"</span>                16 minutes ago      Up 16 minutes                           busybox1</span><br></pre></td></tr></table></figure><p>下面通过 <code>ping</code> 来证明 <code>busybox1</code> 容器和 <code>busybox2</code> 容器建立了互联关系。</p><p>在 <code>busybox1</code> 容器输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/ <span class="comment"># ping busybox2</span></span><br><span class="line">PING busybox2 (172.19.0.3): 56 data bytes</span><br><span class="line">64 bytes from 172.19.0.3: seq=0 ttl=64 time=0.072 ms</span><br><span class="line">64 bytes from 172.19.0.3: seq=1 ttl=64 time=0.118 ms</span><br></pre></td></tr></table></figure><p>用 ping 来测试连接 <code>busybox2</code> 容器，它会解析成 <code>172.19.0.3</code>。</p><p>同理在 <code>busybox2</code> 容器执行 <code>ping busybox1</code>，也会成功连接到。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/ # ping busybox1</span><br><span class="line">PING busybox1 (172.19.0.2): 56 data bytes</span><br><span class="line">64 bytes from 172.19.0.2: seq=0 ttl=64 time=0.064 ms</span><br><span class="line">64 bytes from 172.19.0.2: seq=1 ttl=64 time=0.143 ms</span><br></pre></td></tr></table></figure><p>这样，<code>busybox1</code> 容器和 <code>busybox2</code> 容器建立了互联关系。</p><h4 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h4><p>在自定义配置文件中加入：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"dns"</span> : [</span><br><span class="line">    <span class="string">"114.114.114.114"</span>,</span><br><span class="line">    <span class="string">"8.8.8.8"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以后每次启动容器都会自动配置上面的 <code>DNS</code>。</p><p>如果用户想要手动指定容器的配置，可以在使用 <code>docker run</code> 命令启动容器时加入如下参数：</p><p><code>-h HOSTNAME</code> 或者 <code>--hostname=HOSTNAME</code> 设定容器的主机名，它会被写到容器内的 <code>/etc/hostname</code> 和 <code>/etc/hosts</code>。但它在容器外部看不到，既不会在 <code>docker container ls</code> 中显示，也不会在其他的容器的 <code>/etc/hosts</code> 看到。</p><p><code>--dns=IP_ADDRESS</code> 添加 DNS 服务器到容器的 <code>/etc/resolv.conf</code> 中，让容器用这个服务器来解析所有不在 <code>/etc/hosts</code> 中的主机名。</p><p><code>--dns-search=DOMAIN</code> 设定容器的搜索域，当设定搜索域为 <code>.example.com</code> 时，在搜索一个名为 host 的主机时，DNS 不仅搜索 host，还会搜索 <code>host.example.com</code>。</p><blockquote><p>注意：如果在容器启动时没有指定最后两个参数，Docker 会默认用主机上的 <code>/etc/resolv.conf</code> 来配置容器。</p></blockquote><h4 id="容器访问外网"><a href="#容器访问外网" class="headerlink" title="容器访问外网"></a>容器访问外网</h4><p>容器要想访问外部网络，需要本地系统的转发支持。在Linux 系统中，检查转发是否打开。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$sysctl net.ipv4.ip_forward</span><br><span class="line">net.ipv4.ip_forward = 1</span><br></pre></td></tr></table></figure><p>如果为 0，说明没有开启转发，则需要手动打开。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sysctl -w net.ipv4.ip_forward=1</span><br></pre></td></tr></table></figure><p>如果在启动 Docker 服务的时候设定 <code>--ip-forward=true</code>, Docker 就会自动设定系统的 <code>ip_forward</code> 参数为 1。</p><h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h2><p>Docker镜像在创建之后，往往需要自己手动pull来获取镜像，然后执行run命令来运行。当服务需要用到多种容器，容器之间又产生了各种依赖和连接的时候，部署一个服务的手动操作是令人感到十分厌烦的。</p><p>Dcoker-Compose技术，就是通过一个<code>.yml</code>配置文件，将所有的容器的部署方法、文件映射、容器连接等等一系列的配置写在一个配置文件里，最后只需要执行<code>docker-compose up</code>命令就会像执行脚本一样的去一个个安装容器并自动部署他们，极大的便利了复杂服务的部署。</p><h3 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h3><p><code>Compose</code> 项目是 Docker 官方的开源项目，负责实现对 Docker 容器集群的快速编排。</p><p>首先介绍几个术语。</p><ul><li>服务 (<code>service</code>)：一个应用容器，实际上可以运行多个相同镜像的实例。</li><li>项目 (<code>project</code>)：由一组关联的应用容器组成的一个完整业务单元。</li></ul><p>可见，一个项目可以由多个服务（容器）关联而成，<code>Compose</code> 面向项目进行管理。</p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>Linux 上默认是没有安装 <code>docker-compose</code>，查看版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose --version    </span><br><span class="line">-bash: /usr/bin/docker-compose: No such file or directory</span><br></pre></td></tr></table></figure><p>没有安装。</p><p>从 <a href="https://github.com/docker/compose/releases" rel="external nofollow noopener noreferrer" target="_blank">官方 GitHub Release</a> 处直接下载编译好的二进制文件，</p><p>使用二进制包安装，比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo curl -L https://github.com/docker/compose/releases/download/1.17.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">$ sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><h3 id="模板指令"><a href="#模板指令" class="headerlink" title="模板指令"></a>模板指令</h3><p>使用的 <code>version: 3</code></p><h4 id="build"><a href="#build" class="headerlink" title="build"></a>build</h4><p>指定 <code>Dockerfile</code> 所在文件夹的路径（可以是绝对路径，或者相对 docker-compose.yml 文件的路径）。 <code>Compose</code> 将会利用它自动构建这个镜像，然后使用这个镜像。</p><blockquote><p><code>注意</code>：YAML布尔值（true，false，yes，no，on，off）必须用引号引起来，以便解析器将其解释为字符串。</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  webapp:</span></span><br><span class="line"><span class="attr">    build:</span></span><br><span class="line"><span class="attr">      context:</span> <span class="string">./dir</span> <span class="comment"># Dockerfile所在目录， 或者远程仓库的地址</span></span><br><span class="line"><span class="attr">      dockerfile:</span> <span class="string">Dockerfile-alternate</span> <span class="comment"># 指定 Dockerfile</span></span><br><span class="line"><span class="attr">      args:</span></span><br><span class="line"><span class="attr">        buildno:</span> <span class="number">1</span> <span class="comment"># 只有在构建时候能使用的变量</span></span><br><span class="line"><span class="attr">      cache_from:</span> <span class="comment"># 设置镜像构建名</span></span><br><span class="line">    	<span class="bullet">-</span> <span class="attr">alpine:latest</span> </span><br><span class="line">    	<span class="bullet">-</span> <span class="string">corp/web_app:3.14</span></span><br></pre></td></tr></table></figure><p>build 不能和 image 一起去使用</p><h4 id="cap-add-cap-drop"><a href="#cap-add-cap-drop" class="headerlink" title="cap_add, cap_drop"></a>cap_add, cap_drop</h4><p>指定容器的内核能力（capacity）分配。</p><ol><li><p>让容器拥有所有能力：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cap_add:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">ALL</span></span><br></pre></td></tr></table></figure></li><li><p>让容器移除某些能力：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cap_drop:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">NET_ADMIN</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">SYS_ADMIN</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="command"><a href="#command" class="headerlink" title="command"></a>command</h4><p>覆盖容器启动后默认执行的命令。</p><h4 id="cgroup-parent"><a href="#cgroup-parent" class="headerlink" title="cgroup_parent"></a>cgroup_parent</h4><p>为容器指定可选的父cgroup。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cgroup_parent:</span> <span class="string">m-executor-abcd</span></span><br></pre></td></tr></table></figure><h4 id="container-name"><a href="#container-name" class="headerlink" title="container_name"></a>container_name</h4><p>指定自定义容器名称，而不是生成的默认名称。</p><blockquote><p>由于Docker容器名称必须是唯一的，因此如果您指定了自定义名称，则无法将服务扩展到1个容器之外。 尝试这样做会导致错误。</p></blockquote><h4 id="devices"><a href="#devices" class="headerlink" title="devices"></a>devices</h4><p>指定设备映射关系。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devices:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">"/dev/ttyUSB1:/dev/ttyUSB0"</span></span><br></pre></td></tr></table></figure><h4 id="depends-on"><a href="#depends-on" class="headerlink" title="depends_on"></a>depends_on</h4><p>Express之间的依赖关系，有两个效果：</p><ul><li><p><code>docker-compose up</code> 将按照依赖顺序启动服务。 在下面的示例中，db和redis将在web之前启动。</p></li><li><p><code>docker-compose up SERVICE</code> 将自动包含SERVICE的依赖关系。 在以下示例中，docker-compose up web也将创建并启动db和redis。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  web:</span></span><br><span class="line"><span class="attr">    build:</span> <span class="string">.</span></span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">db</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">  db:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">postgres</span></span><br></pre></td></tr></table></figure><blockquote><p><code>注意</code>：在启动web之前，depends_on不会等待db和redis“就绪”，直到它们被启动。 如果您需要等待服务准备就绪，请参阅控制<a href="https://docs.docker.com/compose/startup-order/" rel="external nofollow noopener noreferrer" target="_blank">启动顺序</a>了解有关此问题的更多信息以及解决问题的策略。</p></blockquote></li></ul><h4 id="dns"><a href="#dns" class="headerlink" title="dns"></a>dns</h4><p>自定义DNS服务器。可以是单个值或列表。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dns:</span> <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br><span class="line"><span class="attr">dns:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br><span class="line"><span class="bullet">  -</span> <span class="number">114.114</span><span class="number">.114</span><span class="number">.114</span></span><br></pre></td></tr></table></figure><h4 id="dns-search"><a href="#dns-search" class="headerlink" title="dns_search"></a>dns_search</h4><p>配置 <code>DNS</code> 搜索域。可以是一个值，也可以是一个列表。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dns_search:</span> <span class="string">example.com</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dns_search:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">domain1.example.com</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">domain2.example.com</span></span><br></pre></td></tr></table></figure><h4 id="tmpfs"><a href="#tmpfs" class="headerlink" title="tmpfs"></a>tmpfs</h4><p>挂载一个或者多个 tmpfs 文件系统到容器。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tmpfs:</span> <span class="string">/run</span></span><br><span class="line"><span class="attr">tmpfs:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">/run</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">/tmp</span></span><br></pre></td></tr></table></figure><h4 id="env-file"><a href="#env-file" class="headerlink" title="env_file"></a>env_file</h4><p>从文件添加环境变量。可以是单个值或列表。</p><p>如果已使用<code>docker-compose -f FILE</code>指定了一个Compose文件，则<code>env_file</code>中的路径相对于该文件所在的目录。</p><p>在环境中指定的环境变量会覆盖这些值。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">env_file:</span> <span class="string">.env</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env_file:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">./common.env</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">./apps/web.env</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">/opt/secrets.env</span></span><br></pre></td></tr></table></figure><p>Compose期望env文件中的每一行都处于<code>VAR = VAL</code>格式。 以＃开头的行（即注释）将被忽略，空行也是如此。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Set Rails/Rack environment</span></span><br><span class="line"><span class="string">RACK_ENV=development</span></span><br></pre></td></tr></table></figure><blockquote><p><code>注意</code>：如果您的service指定了build选项，则在build过程中将不会自动显示环境文件中定义的变量。 使用build的args子选项来定义构建时环境变量。</p></blockquote><h4 id="environment"><a href="#environment" class="headerlink" title="environment"></a>environment</h4><p>设置环境变量。你可以使用数组或字典两种格式。</p><p>只给定名称的变量会自动获取运行 Compose 主机上对应变量的值，可以用来防止泄露不必要的数据。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line"><span class="attr">  RACK_ENV:</span> <span class="string">development</span></span><br><span class="line"><span class="attr">  SESSION_SECRET:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">RACK_ENV=development</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">SESSION_SECRET</span></span><br></pre></td></tr></table></figure><h4 id="expose"><a href="#expose" class="headerlink" title="expose"></a>expose</h4><p>暴露端口，但不映射到宿主机，只被连接的服务访问。</p><p>仅可以指定内部端口为参数，</p><p>这个标签与Dockerfile中的EXPOSE指令一样，用于指定暴露的端口，但是只是作为一种参考，实际上docker-compose.yml的端口映射还得ports这样的标签。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">expose:</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">"3000"</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">"8000"</span></span><br></pre></td></tr></table></figure><h4 id="extra-hosts"><a href="#extra-hosts" class="headerlink" title="extra_hosts"></a>extra_hosts</h4><p>添加主机名的标签，就是往 <code>/etc/hosts</code>文件中添加一些记录，与 <code>Docker client</code> 的 <code>--add-host</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">extra_hosts:</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">"googledns:8.8.8.8"</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">"dockerhub:52.1.157.61"</span></span><br></pre></td></tr></table></figure><p>会在启动后的服务容器中 <code>/etc/hosts</code> 文件中添加相应 host。</p><h4 id="healthcheck"><a href="#healthcheck" class="headerlink" title="healthcheck"></a>healthcheck</h4><p>通过命令检查容器是否健康运行。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">healthcheck:</span></span><br><span class="line"><span class="attr">  test:</span> <span class="string">["CMD",</span> <span class="string">"curl"</span><span class="string">,</span> <span class="string">"-f"</span><span class="string">,</span> <span class="string">"http://localhost"</span><span class="string">]</span></span><br><span class="line"><span class="attr">  interval:</span> <span class="number">1</span><span class="string">m30s</span></span><br><span class="line"><span class="attr">  timeout:</span> <span class="number">10</span><span class="string">s</span></span><br><span class="line"><span class="attr">  retries:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="image"><a href="#image" class="headerlink" title="image"></a>image</h4><p>指定为镜像名称或镜像 ID。如果镜像在本地不存在，<code>Compose</code> 将会尝试拉取这个镜像。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="attr">ubuntu:latest</span></span><br></pre></td></tr></table></figure><h4 id="labels"><a href="#labels" class="headerlink" title="labels"></a>labels</h4><p>为容器添加 Docker 元数据（metadata）信息。例如可以为容器添加辅助说明信息。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">labels:</span></span><br><span class="line">  <span class="string">com.startupteam.description:</span> <span class="string">"webapp for a startup team"</span></span><br><span class="line">  <span class="string">com.startupteam.department:</span> <span class="string">"devops department"</span></span><br><span class="line">  <span class="string">com.startupteam.release:</span> <span class="string">"rc3 for v1.0"</span></span><br></pre></td></tr></table></figure><h4 id="links"><a href="#links" class="headerlink" title="links"></a>links</h4><p>这个标签解决的是容器连接问题，与<code>Docker client</code>的 <code>--link</code>一样效果，会连接到其它服务中的容器。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">links:</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">db</span></span><br><span class="line"><span class="attr"> - db:</span><span class="string">database</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">redis</span></span><br></pre></td></tr></table></figure><p>使用的别名将会自动在服务容器中的/etc/hosts里创建。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">172.12.2.186  db</span><br><span class="line">172.12.2.186  database</span><br><span class="line">172.12.2.187  redis</span><br></pre></td></tr></table></figure><p>相应的环境变量也将被创建。</p><h4 id="logging"><a href="#logging" class="headerlink" title="logging"></a>logging</h4><p>配置日志选项。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  driver:</span> <span class="string">syslog</span></span><br><span class="line"><span class="attr">  options:</span></span><br><span class="line"><span class="attr">    syslog-address:</span> <span class="string">"tcp://192.168.0.42:123"</span></span><br></pre></td></tr></table></figure><p>目前支持三种日志驱动类型。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver:</span> <span class="string">"json-file"</span></span><br><span class="line"><span class="attr">driver:</span> <span class="string">"syslog"</span></span><br><span class="line"><span class="attr">driver:</span> <span class="string">"none"</span></span><br></pre></td></tr></table></figure><p><code>options</code> 配置日志驱动的相关参数。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">options:</span></span><br><span class="line"><span class="attr">  max-size:</span> <span class="string">"200k"</span></span><br><span class="line"><span class="attr">  max-file:</span> <span class="string">"10"</span></span><br></pre></td></tr></table></figure><h4 id="network-mode"><a href="#network-mode" class="headerlink" title="network_mode"></a>network_mode</h4><p>设置网络模式。使用和 <code>docker run</code> 的 <code>--network</code> 参数一样的值。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">network_mode:</span> <span class="string">"bridge"</span> <span class="comment"># 桥接模式，这种模式下， docker 会默认创建一个 docker0 的网桥，从它中分配 ip 提供给容器使用</span></span><br><span class="line"><span class="attr">network_mode:</span> <span class="string">"host"</span> <span class="comment"># 使用主机网络</span></span><br><span class="line"><span class="attr">network_mode:</span> <span class="string">"none"</span> <span class="comment"># 只能访问本地网络，不能使用外网</span></span><br><span class="line"><span class="attr">network_mode:</span> <span class="string">"service:[service name]"</span> <span class="comment"># 与其他某个 service 共享一个网络</span></span><br><span class="line"><span class="attr">network_mode:</span> <span class="string">"container:[container name/id]"</span> <span class="comment"># 与其他某个容器共享一个网络</span></span><br></pre></td></tr></table></figure><h4 id="networks"><a href="#networks" class="headerlink" title="networks"></a>networks</h4><p>配置容器连接的网络。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  some-service:</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">some-network</span></span><br><span class="line"><span class="bullet">     -</span> <span class="string">other-network</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">  some-network:</span></span><br><span class="line"><span class="attr">  other-network:</span></span><br></pre></td></tr></table></figure><h4 id="pid"><a href="#pid" class="headerlink" title="pid"></a>pid</h4><p>跟主机系统共享进程命名空间。打开该选项的容器之间，以及容器和宿主机系统之间可以通过进程 ID 来相互访问和操作。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pid:</span> <span class="string">"host"</span></span><br></pre></td></tr></table></figure><h4 id="ports"><a href="#ports" class="headerlink" title="ports"></a>ports</h4><p>暴露端口信息。</p><p>使用宿主端口：容器端口 <code>(HOST:CONTAINER)</code> 格式，或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ports:</span><br><span class="line"> - &quot;3000&quot;</span><br><span class="line"> - &quot;8000:8000&quot;</span><br><span class="line"> - &quot;49100:22&quot;</span><br><span class="line"> - &quot;127.0.0.1:8001:8001&quot;</span><br></pre></td></tr></table></figure><p><em>注意：当使用 HOST:CONTAINER 格式来映射端口时，如果你使用的容器端口小于 60 并且没放到引号里，可能会得到错误结果，因为 YAML 会自动解析 xx:yy 这种数字格式为 60 进制。为避免出现这种问题，建议数字串都采用引号包括起来的字符串格式。</em></p><h4 id="secrets"><a href="#secrets" class="headerlink" title="secrets"></a>secrets</h4><p>Docker命令行工具提供了<code>docker secret</code>命令来管理敏感信息，</p><p>从 Docker Compose V3.1开始，支持在容器编排文件中使用 secret，这可以方便地在不同容器中分享所需的敏感信息。</p><p><strong><code>docker secret</code> 只能从<code>Docker Swarm</code>模式的<code>manager</code>节点调用，如果你在本机进行试验，请先执行 <code>docker swarm init</code>命令</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ docker secret --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">Usage:    docker secret COMMAND</span><br><span class="line"></span><br><span class="line">Manage Docker secrets</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --<span class="built_in">help</span>   Print usage</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  create      Create a secret from a file or STDIN as content</span><br><span class="line">  inspect     Display detailed information on one or more secrets</span><br><span class="line">  ls          List secrets</span><br><span class="line">  rm          Remove one or more secrets</span><br></pre></td></tr></table></figure><p>创建一个数据库密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"kronchan"</span> |  docker secret create db_password -</span><br><span class="line">yxadqo4xguucuyhd9oxc5t4q2</span><br><span class="line">$ docker secret ls</span><br><span class="line">ID                          NAME                DRIVER              CREATED             UPDATED</span><br><span class="line">yxadqo4xguucuyhd9oxc5t4q2   db_password                             3 seconds ago       3 seconds ago</span><br></pre></td></tr></table></figure><p>在服务编排中：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mysql:</span></span><br><span class="line"><span class="attr">  image:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">  environment:</span></span><br><span class="line"><span class="attr">    MYSQL_ROOT_PASSWORD_FILE:</span> <span class="string">/run/secrets/db_password</span> <span class="comment"># 缺省值</span></span><br><span class="line"><span class="attr">  secrets:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">db_password</span></span><br></pre></td></tr></table></figure><p>在 Swarm 集群中 ，例如，我用这个密码启动一个 MYSQL 服务，在 manage 节点中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker service create \</span><br><span class="line">        --name mysql \</span><br><span class="line">        --secret <span class="built_in">source</span>=db_password,target=mysql_root_password \</span><br><span class="line">        -e MYSQL_ROOT_PASSWORD_FILE=<span class="string">"/run/secrets/mysql_root_password"</span> \</span><br><span class="line">        mysql:latest</span><br></pre></td></tr></table></figure><p>这个过程分为两个步骤：</p><ol><li><code>source</code> 指定容器使用 secret 后，secret 会被解密并存放到<strong>容器的文件系统</strong>中，默认位置为 <code>/run/secrets/&lt;secret_name&gt;</code>，可以使用 <code>target</code> 重新定位。</li><li>设置环境变量 <code>MYSQL_ROOT_PASSWORD_FILE</code> 指定从 <code>/run/secrets/mysql_root_password</code> 中读取并设置 MySQL 的管理员密码。</li></ol><h4 id="security-opt"><a href="#security-opt" class="headerlink" title="security_opt"></a>security_opt</h4><p>指定容器模板标签（label）机制的默认属性（用户、角色、类型、级别等）。例如配置标签的用户名和角色名。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">security_opt:</span></span><br><span class="line"><span class="attr">    - label:</span><span class="attr">user:USER</span></span><br><span class="line"><span class="attr">    - label:</span><span class="attr">role:ROLE</span></span><br></pre></td></tr></table></figure><h4 id="stop-signal"><a href="#stop-signal" class="headerlink" title="stop_signal"></a>stop_signal</h4><p>设置另一个信号来停止容器。在默认情况下使用的是 <code>SIGTERM</code> 停止容器。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stop_signal:</span> <span class="string">SIGUSR1</span> <span class="comment"># 缺省值</span></span><br></pre></td></tr></table></figure><h4 id="sysctls"><a href="#sysctls" class="headerlink" title="sysctls"></a>sysctls</h4><p>配置容器内核参数。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sysctls:</span></span><br><span class="line">  <span class="string">net.core.somaxconn:</span> <span class="number">1024</span></span><br><span class="line">  <span class="string">net.ipv4.tcp_syncookies:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># other grammar</span></span><br><span class="line"><span class="attr">sysctls:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">net.core.somaxconn=1024</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">net.ipv4.tcp_syncookies=0</span></span><br></pre></td></tr></table></figure><h4 id="ulimit"><a href="#ulimit" class="headerlink" title="ulimit"></a>ulimit</h4><p>指定容器的 <code>ulimits</code> 限制值。</p><p>例如，指定最大进程数为 65535，指定文件句柄数为 20000（软限制，应用可以随时修改，不能超过硬限制） 和 40000（系统硬限制，只能 root 用户提高）。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ulimits:</span></span><br><span class="line"><span class="attr">  nproc:</span> <span class="number">65535</span></span><br><span class="line"><span class="attr">  nofile:</span></span><br><span class="line"><span class="attr">    soft:</span> <span class="number">20000</span></span><br><span class="line"><span class="attr">    hard:</span> <span class="number">40000</span></span><br></pre></td></tr></table></figure><h4 id="volumes"><a href="#volumes" class="headerlink" title="volumes"></a>volumes</h4><p>数据卷所挂载路径设置。可以设置宿主机路径 （<code>HOST:CONTAINER</code>） 或加上访问模式 （<code>HOST:CONTAINER:ro</code>）。</p><p>该指令中路径支持相对路径。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line"> <span class="comment"># 只是指定一个路径，Docker 会自动在创建一个数据卷（这个路径是容器内部的）。</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">/var/lib/mysql</span></span><br><span class="line"> <span class="comment"># 使用绝对路径挂载数据卷</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">/opt/data:/var/lib/mysql</span></span><br><span class="line"> <span class="comment"># 以 Compose 配置文件为中心的相对路径作为数据卷挂载到容器。</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">cache/:/tmp/cache</span></span><br><span class="line"> <span class="comment"># 使用用户的相对路径（~/ 表示的目录是 /home/&lt;用户目录&gt;/ 或者 /root/）。</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">~/configs:/etc/configs/:ro</span></span><br><span class="line"> <span class="comment"># 已经存在的命名的数据卷。</span></span><br><span class="line"><span class="attr"> - datavolume:</span><span class="string">/var/lib/mysql</span></span><br></pre></td></tr></table></figure><p>例如编排一个 pqsql:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span> </span><br><span class="line"><span class="attr">  pq:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">postgres:9.5</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">      POSTGRES_PASSWORD:</span> <span class="string">postgres</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"5432:5432"</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="attr">      - db_data:</span><span class="string">/var/lib/postgresql</span></span><br><span class="line"><span class="attr">      - db_log:</span><span class="string">/var/log/postgresql</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">  db_data:</span></span><br><span class="line"><span class="attr">  db_log:</span></span><br></pre></td></tr></table></figure><p>举个例子，自动创建一个数据卷 <code>pq_db_data</code>，目录在 <code>/var/lib/docker/volumes/</code> 下。</p><p>将 容器 <code>pq</code> 的目录 <code>/var/lib/postgresql</code> 挂载到数据卷 <code>pq_db_data</code>。</p><h4 id="volumes-from"><a href="#volumes-from" class="headerlink" title="volumes_from"></a>volumes_from</h4><p>从其它容器或者服务挂载数据卷，可选的参数是 :ro或者 :rw，前者表示容器只读，后者表示容器对数据卷是可读可写的。默认情况下是可读可写的。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">volumes_from:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">service_name</span></span><br><span class="line"><span class="attr">  - service_name:</span><span class="string">ro</span></span><br><span class="line"><span class="attr">  - container:</span><span class="string">container_name</span></span><br><span class="line"><span class="attr">  - container:</span><span class="attr">container_name:rw</span></span><br></pre></td></tr></table></figure><h4 id="entrypoint"><a href="#entrypoint" class="headerlink" title="entrypoint"></a>entrypoint</h4><p>指定服务容器启动后执行的入口文件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">entrypoint:</span> <span class="string">/code/entrypoint.sh</span></span><br></pre></td></tr></table></figure><h4 id="privileged"><a href="#privileged" class="headerlink" title="privileged"></a>privileged</h4><p>允许容器中运行一些特权命令。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">privileged:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="restart"><a href="#restart" class="headerlink" title="restart"></a>restart</h4><p>指定容器退出后的重启策略为始终重启。该命令对保持服务始终运行十分有效，在生产环境中推荐配置为 <code>always</code> 或者 <code>unless-stopped</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">restart:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><blockquote><p>在 Swarm 中失效，Swarm Stacks use the <code>restart_policy:</code> under the <code>deploy:</code></p></blockquote><h4 id="working-dir"><a href="#working-dir" class="headerlink" title="working_dir"></a>working_dir</h4><p>指定容器中工作目录。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">working_dir</span></span><br></pre></td></tr></table></figure><h4 id="user"><a href="#user" class="headerlink" title="user"></a>user</h4><p>指定容器中运行应用的用户名。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user:</span> <span class="string">nginx</span></span><br></pre></td></tr></table></figure><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><h4 id="基本的使用格式"><a href="#基本的使用格式" class="headerlink" title="基本的使用格式"></a>基本的使用格式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose [options] [COMMAND] [ARGS...]</span><br></pre></td></tr></table></figure><p><code>options</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-f, --file FILE           指定启动模版文件(一个非docker-compose.yml命名的yaml文件,默认为docker-compose.yml)</span><br><span class="line">-p, --project-name NAME   指定一个替代项目名称 (默认是directory名)</span><br><span class="line">-d 以daemon的方式启动容器</span><br><span class="line">--x-networking            (EXPERIMENTAL) 使用新的网络功能</span><br><span class="line">--x-network-driver DRIVER (EXPERIMENTAL) 指定网络驱动程序，桥 (default: <span class="string">"bridge"</span>).</span><br><span class="line">--verbose：输出详细信息</span><br><span class="line">--version 打印版本并退出。</span><br></pre></td></tr></table></figure><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><h5 id="build-1"><a href="#build-1" class="headerlink" title="build"></a>build</h5><p>格式为 <code>docker-compose build [options] [SERVICE...]</code>。</p><p>构建（重新构建）项目中的服务容器。</p><p>服务容器一旦构建后，将会带上一个标记名，例如对于 web 项目中的一个 db 容器，可能是 web_db。</p><p>可以随时在项目目录下运行 <code>docker-compose build</code> 来重新构建服务。</p><p>选项包括：</p><ul><li><code>--force-rm</code> 删除构建过程中的临时容器。</li><li><code>--no-cache</code> 构建镜像过程中不使用 cache（这将加长构建过程）。</li><li><code>--pull</code> 始终尝试通过 pull 来获取更新版本的镜像。</li></ul><h5 id="config"><a href="#config" class="headerlink" title="config"></a>config</h5><p>验证 Compose 文件格式是否正确，若正确则显示配置，若格式错误显示错误原因。</p><h5 id="down"><a href="#down" class="headerlink" title="down"></a>down</h5><p>此命令将会停止 <code>up</code> 命令所启动的容器，并移除网络。</p><h5 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h5><p>进入指定的容器。</p><h5 id="help"><a href="#help" class="headerlink" title="help"></a>help</h5><p>获取命令的帮助信息。</p><h5 id="images"><a href="#images" class="headerlink" title="images"></a>images</h5><p>列出这个 Compose 项目中包含的镜像。</p><h5 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h5><p>格式为 <code>docker-compose kill [options] [SERVICE...]</code>。</p><p>通过发送 <code>SIGKILL</code> 信号来强制停止服务容器。</p><p>支持通过 <code>-s</code> 参数来指定发送的信号，例如通过如下指令发送 <code>SIGINT</code> 信号。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose <span class="built_in">kill</span> -s SIGINT</span><br></pre></td></tr></table></figure><h5 id="logs"><a href="#logs" class="headerlink" title="logs"></a>logs</h5><p>格式为 <code>docker-compose logs [options] [SERVICE...]</code>。</p><p>查看服务容器的输出。默认情况下，docker-compose 将对不同的服务输出使用不同的颜色来区分。可以通过 <code>--no-color</code> 来关闭颜色。</p><p>该命令在调试问题的时候十分有用。</p><h5 id="pause"><a href="#pause" class="headerlink" title="pause"></a>pause</h5><p>暂停一个或多个容器。</p><h5 id="port"><a href="#port" class="headerlink" title="port"></a>port</h5><p>格式为 <code>docker-compose port [options] SERVICE PRIVATE_PORT</code>。</p><p>打印某个容器端口所映射的公共端口。</p><p>选项：</p><ul><li><code>--protocol=proto</code> 指定端口协议，tcp（默认值）或者 udp。</li><li><code>--index=index</code> 如果同一服务存在多个容器，指定命令对象容器的序号（默认为 1）。</li></ul><h5 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h5><p>格式为 <code>docker-compose ps [options] [SERVICE...]</code>。</p><p>列出项目中目前的所有容器。</p><p>选项：</p><ul><li><code>-q</code> 只打印容器的 ID 信息。</li></ul><h5 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h5><p>格式为 <code>docker-compose pull [options] [SERVICE...]</code>。</p><p>拉取服务依赖的镜像。</p><p>选项：</p><ul><li><code>--ignore-pull-failures</code> 忽略拉取镜像过程中的错误。</li></ul><h5 id="push"><a href="#push" class="headerlink" title="push"></a>push</h5><p>推送服务依赖的镜像到 Docker 镜像仓库。</p><h5 id="restart-1"><a href="#restart-1" class="headerlink" title="restart"></a>restart</h5><p>格式为 <code>docker-compose restart [options] [SERVICE...]</code>。</p><p>重启项目中的服务。</p><p>选项：</p><ul><li><code>-t, --timeout TIMEOUT</code> 指定重启前停止容器的超时（默认为 10 秒）。</li></ul><h5 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h5><p>格式为 <code>docker-compose rm [options] [SERVICE...]</code>。</p><p>删除所有（停止状态的）服务容器。推荐先执行 <code>docker-compose stop</code> 命令来停止容器。</p><p>选项：</p><ul><li><code>-f, --force</code> 强制直接删除，包括非停止状态的容器。一般尽量不要使用该选项。</li><li><code>-v</code> 删除容器所挂载的数据卷。</li></ul><h5 id="run"><a href="#run" class="headerlink" title="run"></a>run</h5><p>格式为 <code>docker-compose run [options] [-p PORT...] [-e KEY=VAL...] SERVICE [COMMAND] [ARGS...]</code>。</p><p>在指定服务上执行一个命令。</p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose run ubuntu ping docker.com</span><br></pre></td></tr></table></figure><p>将会启动一个 ubuntu 服务容器，并执行 <code>ping docker.com</code> 命令。</p><p>默认情况下，如果存在关联，则所有关联的服务将会自动被启动，除非这些服务已经在运行中。</p><p>该命令类似启动容器后运行指定的命令，相关卷、链接等等都将会按照配置自动创建。</p><p>两个不同点：</p><ul><li>给定命令将会覆盖原有的自动运行命令；</li><li>不会自动创建端口，以避免冲突。</li></ul><p>如果不希望自动启动关联的容器，可以使用 <code>--no-deps</code> 选项，例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose run --no-deps web python manage.py shell</span><br></pre></td></tr></table></figure><p>将不会启动 web 容器所关联的其它容器。</p><p>选项：</p><ul><li><code>-d</code> 后台运行容器。</li><li><code>--name NAME</code> 为容器指定一个名字。</li><li><code>--entrypoint CMD</code> 覆盖默认的容器启动指令。</li><li><code>-e KEY=VAL</code> 设置环境变量值，可多次使用选项来设置多个环境变量。</li><li><code>-u, --user=&quot;&quot;</code> 指定运行容器的用户名或者 uid。</li><li><code>--no-deps</code> 不自动启动关联的服务容器。</li><li><code>--rm</code> 运行命令后自动删除容器，<code>d</code> 模式下将忽略。</li><li><code>-p, --publish=[]</code> 映射容器端口到本地主机。</li><li><code>--service-ports</code> 配置服务端口并映射到本地主机。</li><li><code>-T</code> 不分配伪 tty，意味着依赖 tty 的指令将无法运行。</li></ul><h5 id="scale"><a href="#scale" class="headerlink" title="scale"></a>scale</h5><p>格式为 <code>docker-compose scale [options] [SERVICE=NUM...]</code>。</p><p>设置指定服务运行的容器个数。</p><p>通过 <code>service=num</code> 的参数来设置数量。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose scale web=3 db=2</span><br></pre></td></tr></table></figure><p>将启动 3 个容器运行 web 服务，2 个容器运行 db 服务。</p><p>一般的，当指定数目多于该服务当前实际运行容器，将新创建并启动容器；反之，将停止容器。</p><p>选项：</p><ul><li><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时（默认为 10 秒）。</li></ul><h5 id="start"><a href="#start" class="headerlink" title="start"></a>start</h5><p>格式为 <code>docker-compose start [SERVICE...]</code>。</p><p>启动已经存在的服务容器。</p><h5 id="stop"><a href="#stop" class="headerlink" title="stop"></a>stop</h5><p>格式为 <code>docker-compose stop [options] [SERVICE...]</code>。</p><p>停止已经处于运行状态的容器，但不删除它。通过 <code>docker-compose start</code> 可以再次启动这些容器。</p><p>选项：</p><ul><li><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时（默认为 10 秒）。</li></ul><h5 id="top"><a href="#top" class="headerlink" title="top"></a>top</h5><p>查看各个服务容器内运行的进程。</p><h5 id="unpause"><a href="#unpause" class="headerlink" title="unpause"></a>unpause</h5><p>格式为 <code>docker-compose unpause [SERVICE...]</code>。</p><p>恢复处于暂停状态中的服务。</p><h5 id="up"><a href="#up" class="headerlink" title="up"></a>up</h5><p>格式为 <code>docker-compose up [options] [SERVICE...]</code>。</p><p>该命令十分强大，它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作。</p><p>链接的服务都将会被自动启动，除非已经处于运行状态。</p><p>可以说，大部分时候都可以直接通过该命令来启动一个项目。</p><p>默认情况，<code>docker-compose up</code> 启动的容器都在前台，控制台将会同时打印所有容器的输出信息，可以很方便进行调试。</p><p>当通过 <code>Ctrl-C</code> 停止命令时，所有容器将会停止。</p><p>如果使用 <code>docker-compose up -d</code>，将会在后台启动并运行所有的容器。一般推荐生产环境下使用该选项。</p><p>默认情况，如果服务容器已经存在，<code>docker-compose up</code> 将会尝试停止容器，然后重新创建（保持使用 <code>volumes-from</code> 挂载的卷），以保证新启动的服务匹配 <code>docker-compose.yml</code> 文件的最新内容。如果用户不希望容器被停止并重新创建，可以使用 <code>docker-compose up --no-recreate</code>。这样将只会启动处于停止状态的容器，而忽略已经运行的服务。如果用户只想重新部署某个服务，可以使用 <code>docker-compose up --no-deps -d &lt;SERVICE_NAME&gt;</code> 来重新创建服务并后台停止旧服务，启动新服务，并不会影响到其所依赖的服务。</p><p>选项：</p><ul><li><code>-d</code> 在后台运行服务容器。</li><li><code>--no-color</code> 不使用颜色来区分不同的服务的控制台输出。</li><li><code>--no-deps</code> 不启动服务所链接的容器。</li><li><code>--force-recreate</code> 强制重新创建容器，不能与 <code>--no-recreate</code> 同时使用。</li><li><code>--no-recreate</code> 如果容器已经存在了，则不重新创建，不能与 <code>--force-recreate</code> 同时使用。</li><li><code>--no-build</code> 不自动构建缺失的服务镜像。</li><li><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时（默认为 10 秒）。</li></ul><h5 id="version"><a href="#version" class="headerlink" title="version"></a>version</h5><p>格式为 <code>docker-compose version</code>。</p><p>打印版本信息。</p><h3 id="实践-1"><a href="#实践-1" class="headerlink" title="实践"></a>实践</h3><p>实战 <code>WordPress</code> 项目：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">   db:</span></span><br><span class="line"><span class="attr">     image:</span> <span class="attr">mysql:5.7</span></span><br><span class="line"><span class="attr">     volumes:</span></span><br><span class="line"><span class="attr">       - db_data:</span><span class="string">/var/lib/mysql</span></span><br><span class="line"><span class="attr">     restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">     environment:</span></span><br><span class="line"><span class="attr">       MYSQL_ROOT_PASSWORD:</span> <span class="string">somewordpress</span></span><br><span class="line"><span class="attr">       MYSQL_DATABASE:</span> <span class="string">wordpress</span></span><br><span class="line"><span class="attr">       MYSQL_USER:</span> <span class="string">wordpress</span></span><br><span class="line"><span class="attr">       MYSQL_PASSWORD:</span> <span class="string">wordpress</span></span><br><span class="line"></span><br><span class="line"><span class="attr">   wordpress:</span></span><br><span class="line"><span class="attr">     depends_on:</span></span><br><span class="line"><span class="bullet">       -</span> <span class="string">db</span></span><br><span class="line"><span class="attr">     image:</span> <span class="attr">wordpress:latest</span></span><br><span class="line"><span class="attr">     ports:</span></span><br><span class="line"><span class="bullet">       -</span> <span class="string">"8000:80"</span></span><br><span class="line"><span class="attr">     restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">     environment:</span></span><br><span class="line"><span class="attr">       WORDPRESS_DB_HOST:</span> <span class="attr">db:3306</span></span><br><span class="line"><span class="attr">       WORDPRESS_DB_USER:</span> <span class="string">wordpress</span></span><br><span class="line"><span class="attr">       WORDPRESS_DB_PASSWORD:</span> <span class="string">wordpress</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">    db_data:</span></span><br></pre></td></tr></table></figure><h2 id="Docker-Machine"><a href="#Docker-Machine" class="headerlink" title="Docker Machine"></a>Docker Machine</h2><p>docker技术是基于Linux内核的<code>cgroup</code>技术实现的，那么问题来了，在非Linux平台上是否就不能使用docker技术了呢？答案是可以的，不过显然需要借助虚拟机去模拟出Linux环境来。</p><p>Docker Machine 就是docker公司官方提出的，用于在各种平台上快速创建具有docker服务的虚拟机的技术，甚至可以通过指定driver来定制虚拟机的实现原理（一般是virtualbox）。</p><p>Docker Machine 是 Docker 官方编排（Orchestration）项目之一，负责在多种平台上快速安装 Docker 环境。</p><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><p>查询版本信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-machine -v</span><br></pre></td></tr></table></figure><p>在 Linux 64 位系统上直接下载对应的二进制包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo curl -L https://github.com/docker/machine/releases/download/v0.13.0/docker-machine-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-machine</span><br><span class="line">$ sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-machine</span><br></pre></td></tr></table></figure><p>完成后，查看版本信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker-machine -v</span><br><span class="line">docker-machine version 0.13.0, build 9ba6da9</span><br></pre></td></tr></table></figure><h3 id="创建本地主机驱动"><a href="#创建本地主机驱动" class="headerlink" title="创建本地主机驱动"></a>创建本地主机驱动</h3><ol><li><p>创建一个 <code>virtualbox</code> 类型的驱动，名为 <code>test1</code>，可以加上参数配置分配的硬件的信息:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker-machine create -d virtualbox test1</span><br><span class="line">Running pre-create checks...</span><br><span class="line">Error with pre-create check: <span class="string">"VBoxManage not found. Make sure VirtualBox is installed and VBoxManage is in the path"</span></span><br></pre></td></tr></table></figure><p>出现了错误，需要安装VirtualBox环境</p><ul><li><p>配置VirtualBox源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$  vim /etc/yum.repos.d/virtualbox.repo    </span><br><span class="line">[virtualbox]</span><br><span class="line">name=Oracle Linux / RHEL / CentOS-<span class="variable">$releasever</span> / <span class="variable">$basearch</span> - VirtualBox</span><br><span class="line">baseurl=http://download.virtualbox.org/virtualbox/rpm/el/<span class="variable">$releasever</span>/<span class="variable">$basearch</span></span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=https://www.virtualbox.org/download/oracle_vbox.asc</span><br></pre></td></tr></table></figure></li><li><p>安装VirtualBox</p><ul><li><p>CentOS</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 先搜索</span></span><br><span class="line"><span class="comment"># 2. 安装版本</span></span><br><span class="line"><span class="comment"># 3. 重新加载配置</span></span><br><span class="line">$ yum search VirtualBox </span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">======================================= N/S matched: VirtualBox ========================================</span><br><span class="line">VirtualBox-4.3.x86_64 : Oracle VM VirtualBox</span><br><span class="line">VirtualBox-5.0.x86_64 : Oracle VM VirtualBox</span><br><span class="line">VirtualBox-5.1.x86_64 : Oracle VM VirtualBox</span><br><span class="line">VirtualBox-5.2.x86_64 : Oracle VM VirtualBox</span><br><span class="line"></span><br><span class="line">  Name and summary matches only, use <span class="string">"search all"</span> <span class="keyword">for</span> everything.</span><br><span class="line">$ yum install -y VirtualBox-5.1</span><br><span class="line">$ /sbin/vboxconfig    </span><br><span class="line"><span class="comment"># 中间出了点问题，说是少了</span></span><br><span class="line"><span class="comment"># This system is not currently set up to build kernel modules (system extensions).</span></span><br><span class="line"><span class="comment">#Running the following commands should set the system up correctly:</span></span><br><span class="line"><span class="comment">#   yum install kernel-devel-3.10.0-693.2.2.el7.x86_64</span></span><br><span class="line">$ yum install kernel-devel-3.10.0-693.2.2.el7.x86_64</span><br><span class="line"><span class="comment"># 重新再次加载</span></span><br><span class="line">$ /sbin/vboxconfig  </span><br><span class="line"><span class="comment"># 启动成功，心累</span></span><br></pre></td></tr></table></figure><p>然后就可以创建了虚拟驱动了。</p></li><li><p>Ubuntu</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 手上暂时没有 Ubuntu 系统没有测试，网上都是这么说的，记录下，没有验证，</span></span><br><span class="line">$ apt-get install virtualbox</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>还有一种问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"This computer doesn't have VT-X/AMD-v enabled. Enabling it in the BIOS is mandatory"</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/docker/machine/issues/4271" rel="external nofollow noopener noreferrer" target="_blank">issues/4271</a>额，我之前是一直远程在阿里云上的服务器做的， 由于一直很讨厌 WINDOW 的命令模式，甩锅啦，现在好了，这个问题要修改 BIOS ，只好又回到 WINDOW 平台上做</p></li><li><p>登陆到主机：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker-machine ls </span><br><span class="line">NAME      ACTIVE   DRIVER       STATE     URL                         SWARM   DOCKER        ERRORS</span><br><span class="line">default   *        virtualbox   Running   tcp://192.168.99.100:2376           v17.12.0-ce</span><br><span class="line">test1     -        virtualbox   Running   tcp://192.168.99.101:2376           v18.04.0-ce</span><br><span class="line"></span><br><span class="line">$ docker-machine ssh test1</span><br><span class="line"><span class="comment"># 后面就可以操作 test1 了</span></span><br></pre></td></tr></table></figure></li></ol><p>补充，通过 <code>-d</code> 选项可以选择支持的驱动类型。</p><ul><li>amazonec2</li><li>azure</li><li>digitalocean</li><li>exoscale</li><li>generic</li><li>google</li><li>hyperv</li><li>none</li><li>openstack</li><li>rackspace</li><li>softlayer</li><li>virtualbox</li><li>vmwarevcloudair</li><li>vmwarefusion</li><li>vmwarevsphere</li></ul><h3 id="操作命令"><a href="#操作命令" class="headerlink" title="操作命令"></a>操作命令</h3><ul><li><code>active</code> 查看活跃的 Docker 主机</li><li><code>config</code> 输出连接的配置信息</li><li><code>create</code> 创建一个 Docker 主机</li><li><code>env</code> 显示连接到某个主机需要的环境变量</li><li><code>inspect</code> 输出主机更多信息</li><li><code>ip</code> 获取主机地址</li><li><code>kill</code> 停止某个主机</li><li><code>ls</code> 列出所有管理的主机</li><li><code>provision</code> 重新设置一个已存在的主机</li><li><code>regenerate-certs</code> 为某个主机重新生成 TLS 认证信息</li><li><code>restart</code> 重启主机</li><li><code>rm</code> 删除某台主机</li><li><code>ssh</code> SSH 到主机上执行命令</li><li><code>scp</code> 在主机之间复制文件</li><li><code>mount</code> 挂载主机目录到本地</li><li><code>start</code> 启动一个主机</li><li><code>status</code> 查看主机状态</li><li><code>stop</code> 停止一个主机</li><li><code>upgrade</code> 更新主机 Docker 版本为最新</li><li><code>url</code> 获取主机的 URL</li><li><code>version</code> 输出 docker-machine 版本信息</li><li><code>help</code> 输出帮助信息</li></ul><h2 id="Docker-Swarm"><a href="#Docker-Swarm" class="headerlink" title="Docker Swarm"></a>Docker Swarm</h2><p>Docker 1.12 <a href="https://docs.docker.com/engine/swarm/" rel="external nofollow noopener noreferrer" target="_blank">Swarm mode</a> 已经内嵌入 Docker 引擎，成为了 docker 子命令 <code>docker swarm</code>。</p><p><code>Swarm mode</code> 内置 kv 存储功能，提供了众多的新特性，比如：具有容错能力的去中心化设计、内置服务发现、负载均衡、路由网格、动态伸缩、滚动更新、安全传输等。</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h4><p>运行 Docker 的主机可以主动初始化一个 <code>Swarm</code> 集群或者加入一个已存在的 <code>Swarm</code> 集群，这样这个运行 Docker 的主机就成为一个 <code>Swarm</code> 集群的节点 (<code>node</code>) 。</p><p>节点分为管理 (<code>manager</code>) 节点和工作 (<code>worker</code>) 节点。</p><p>管理节点用于 <code>Swarm</code> 集群的管理，<code>docker swarm</code> 命令基本只能在管理节点执行（节点退出集群命令 <code>docker swarm leave</code> 可以在工作节点执行）。一个 <code>Swarm</code> 集群可以有多个管理节点，但只有一个管理节点可以成为 <code>leader</code>，<code>leader</code> 通过 <code>raft</code> 协议实现。</p><p>工作节点是任务执行节点，管理节点将服务 (<code>service</code>) 下发至工作节点执行。管理节点默认也作为工作节点。你也可以通过配置让服务只运行在管理节点。</p><p>来自 Docker 官网的这张图片形象的展示了集群中管理节点与工作节点的关系。</p><p><img src="https://docs.docker.com/engine/swarm/images/swarm-diagram.png" alt="img"></p><h4 id="服务和任务"><a href="#服务和任务" class="headerlink" title="服务和任务"></a>服务和任务</h4><p>任务 （<code>Task</code>）是 <code>Swarm</code> 中的最小的调度单位，目前来说就是一个单一的容器。</p><p>服务 （<code>Services</code>） 是指一组任务的集合，服务定义了任务的属性。服务有两种模式：</p><ul><li><code>replicated services</code> 按照一定规则在各个工作节点上运行指定个数的任务。</li><li><code>global services</code> 每个工作节点上运行一个任务</li></ul><p>两种模式通过 <code>docker service create</code> 的 <code>--mode</code> 参数指定。</p><p>来自 Docker 官网的这张图片形象的展示了容器、任务、服务的关系。</p><p><img src="https://docs.docker.com/engine/swarm/images/services-diagram.png" alt="img"></p><h3 id="创建-Swarm-集群"><a href="#创建-Swarm-集群" class="headerlink" title="创建 Swarm 集群"></a>创建 Swarm 集群</h3><p>前面我们了解到 Swarm 集群是由 <code>manager</code> 和 <code>worker</code> 组成的。</p><h4 id="初始化集群"><a href="#初始化集群" class="headerlink" title="初始化集群"></a>初始化集群</h4><p>初始化一个 manager，主机有多个网卡，拥有多个 IP，必须使用 <code>--advertise-addr</code> 指定 IP。：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ docker-machine create -d virtualbox manager</span><br><span class="line"></span><br><span class="line">docker@manager:~$ docker-machine ssh manager</span><br><span class="line">docker@manager:~$ ip addr</span><br><span class="line"><span class="comment"># 主机有多个网卡，拥有多个 IP，必须使用 --advertise-addr 指定 IP。</span></span><br><span class="line">docker@manager:~$ docker swarm init --advertise-addr 192.168.99.102</span><br><span class="line">Swarm initialized: current node (wwyq0ym88dvuhxkljr4963kei) is now a manager.</span><br><span class="line"></span><br><span class="line">To add a worker to this swarm, run the following <span class="built_in">command</span>:</span><br><span class="line"></span><br><span class="line">    docker swarm join --token SWMTKN-1-3js3ppvjj191r9qx92uiva4l64z8xgy6sno69et5y9ri7a8es5-695418k4uks90r9j9bgwag2k3 192.168.99.102:2377</span><br><span class="line"></span><br><span class="line">To add a manager to this swarm, run <span class="string">'docker swarm join-token manager'</span> and follow the instructions.</span><br></pre></td></tr></table></figure><h4 id="工作节点"><a href="#工作节点" class="headerlink" title="工作节点"></a>工作节点</h4><ol><li><p>新增加一个工作节点 <code>worker1</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker-machine create -d virtualbox worker1</span><br><span class="line">$ docker-machine ssh worker1</span><br><span class="line"></span><br><span class="line">docker@worker1:~$ docker swarm join --token SWMTKN-1-3js3ppvjj191r9qx92uiva4l64z8xgy6sno69et5y9ri7a8es5-695418k4uks90r9j</span><br><span class="line">9bgwag2k3 192.168.99.102:2377</span><br><span class="line">This node joined a swarm as a worker.</span><br></pre></td></tr></table></figure></li><li><p>然后按照上面的步骤，新增一个节点 <code>worker2</code>。</p></li><li><p>进入 <code>manager</code> 节点 ，查看集群状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker@manager:~$ docker node ls</span><br><span class="line">ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION</span><br><span class="line">wwyq0ym88dvuhxkljr4963kei *   manager             Ready               Active              Leader              18.04.0-ce</span><br><span class="line">dncrx0o8lbq0a5v8lcdwt2onl     worker1             Ready               Active                                  18.04.0-ce</span><br><span class="line">d9d9pjhwh86lz42klh41ud8ss     worker2             Ready               Active</span><br></pre></td></tr></table></figure></li></ol><h3 id="部署服务"><a href="#部署服务" class="headerlink" title="部署服务"></a>部署服务</h3><p>我们使用 <code>docker service</code> 命令来管理 <code>Swarm</code> 集群中的服务，该命令只能在管理（manager）节点运行。</p><h4 id="新建服务"><a href="#新建服务" class="headerlink" title="新建服务"></a>新建服务</h4><p>在上面我们创建的 Swarm 集群中的 <code>manager</code> 节点中 运行一个 nginx 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker service create --replicas 3 -p 80:80 --name nginx nginx:1.13.7-alpine</span><br><span class="line">mqisdpsereiv0x3whj74lpbxi</span><br><span class="line">overall progress: 3 out of 3 tasks</span><br><span class="line">1/3: running   [==================================================&gt;]</span><br><span class="line">2/3: running   [==================================================&gt;]</span><br><span class="line">3/3: running   [==================================================&gt;]</span><br><span class="line">verify: Service converged</span><br></pre></td></tr></table></figure><h4 id="查询服务"><a href="#查询服务" class="headerlink" title="查询服务"></a>查询服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询服务</span></span><br><span class="line">docker@manager:~$ docker service ls</span><br><span class="line">ID                  NAME                MODE                REPLICAS            IMAGE                 PORTS</span><br><span class="line">mqisdpsereiv        nginx               replicated          3/3                 nginx:1.13.7-alpine   *:80-&gt;80/tcp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询进程</span></span><br><span class="line">docker@manager:~$ docker service ps nginx</span><br><span class="line">ID                  NAME                IMAGE                 NODE                DESIRED STATE       CURRENT STATE           ERROR               PORTS</span><br><span class="line">wyvxj6nyp435        nginx.1             nginx:1.13.7-alpine   manager             Running             Running 2 minutes ago</span><br><span class="line">o9qb0pmi1epu        nginx.2             nginx:1.13.7-alpine   worker1             Running             Running 3 minutes ago</span><br><span class="line">45uxv7c6s2b0        nginx.3             nginx:1.13.7-alpine   worker2             Running             Running 3 minutes ago</span><br></pre></td></tr></table></figure><p>我的集群三个节点的 IP 分别是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker-machine ls</span><br><span class="line">NAME      ACTIVE   DRIVER       STATE     URL                         SWARM   DOCKER        ERRORS</span><br><span class="line">manager   -        virtualbox   Running   tcp://192.168.99.102:2376           v18.04.0-ce</span><br><span class="line">worker1   -        virtualbox   Running   tcp://192.168.99.103:2376           v18.04.0-ce</span><br><span class="line">worker2   -        virtualbox   Running   tcp://192.168.99.104:2376           v18.04.0-ce</span><br></pre></td></tr></table></figure><p>分别访问这几个节点的 ip 都能访问到熟悉 nginx 欢迎页。</p><p>查询日志 <code>docker service logs &lt;service&gt;</code></p><h4 id="删除服务"><a href="#删除服务" class="headerlink" title="删除服务"></a>删除服务</h4><p>使用 <code>docker service rm</code> 来从 <code>Swarm</code> 集群移除某个服务。</p><h3 id="使用-compose-文件部署"><a href="#使用-compose-文件部署" class="headerlink" title="使用 compose 文件部署"></a>使用 compose 文件部署</h3><p><strong>需要注意的 swarm 的compose 多出一些模板指令，而且以前 <code>docker-compose</code> 中的一些指令将失效。</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>部署服务使用 <code>docker stack deploy</code>，其中 <code>-c</code> 参数指定 compose 文件名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker stack deploy -c docker-compose-swarm.yml myweb-name</span><br></pre></td></tr></table></figure><p>查看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker stack ls</span><br><span class="line">NAME                SERVICES</span><br><span class="line">wordpress           2</span><br></pre></td></tr></table></figure><p>移除服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker stack down</span><br></pre></td></tr></table></figure><p><a href="https://github.com/kaimz/learning-code/tree/master/springboot-docker?1523630460079" rel="external nofollow noopener noreferrer" target="_blank">服务编排和 Swarm集群的例子</a></p><p>我们以在 <code>Swarm</code> 集群中部署 <code>WordPress</code> 为例进行说明。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  wordpress:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">wordpress</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">80</span><span class="string">:80</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">overlay</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">      WORDPRESS_DB_HOST:</span> <span class="attr">db:3306</span></span><br><span class="line"><span class="attr">      WORDPRESS_DB_USER:</span> <span class="string">wordpress</span></span><br><span class="line"><span class="attr">      WORDPRESS_DB_PASSWORD:</span> <span class="string">wordpress</span></span><br><span class="line"><span class="attr">    deploy:</span></span><br><span class="line"><span class="attr">      mode:</span> <span class="string">replicated</span></span><br><span class="line"><span class="attr">      replicas:</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  db:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">    networks:</span></span><br><span class="line"><span class="bullet">       -</span> <span class="string">overlay</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="attr">      - db-data:</span><span class="string">/var/lib/mysql</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">      MYSQL_ROOT_PASSWORD:</span> <span class="string">somewordpress</span></span><br><span class="line"><span class="attr">      MYSQL_DATABASE:</span> <span class="string">wordpress</span></span><br><span class="line"><span class="attr">      MYSQL_USER:</span> <span class="string">wordpress</span></span><br><span class="line"><span class="attr">      MYSQL_PASSWORD:</span> <span class="string">wordpress</span></span><br><span class="line"><span class="attr">    deploy:</span></span><br><span class="line"><span class="attr">      placement:</span></span><br><span class="line"><span class="attr">        constraints:</span> <span class="string">[node.role</span> <span class="string">==</span> <span class="string">manager]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  visualizer:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">dockersamples/visualizer:stable</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8080:8080"</span></span><br><span class="line"><span class="attr">    stop_grace_period:</span> <span class="number">1</span><span class="string">m30s</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"/var/run/docker.sock:/var/run/docker.sock"</span></span><br><span class="line"><span class="attr">    deploy:</span></span><br><span class="line"><span class="attr">      placement:</span></span><br><span class="line"><span class="attr">        constraints:</span> <span class="string">[node.role</span> <span class="string">==</span> <span class="string">manager]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">  db-data:</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">  overlay:</span></span><br></pre></td></tr></table></figure><p>在 <code>Swarm</code> 集群管理节点新建该文件，其中的 <code>visualizer</code> 服务提供一个可视化页面，我们可以从浏览器中很直观的查看集群中各个服务的运行节点。</p><h2 id="远程-API-架构"><a href="#远程-API-架构" class="headerlink" title="远程 API 架构"></a>远程 API 架构</h2><h3 id="了解-1"><a href="#了解-1" class="headerlink" title="了解"></a>了解</h3><h4 id="daemon"><a href="#daemon" class="headerlink" title="daemon"></a>daemon</h4><p>Docker的基础服务，比如容器的创建、查看、停止、镜像的管理，其实都是由docker的守护进程(daemon)来实现的。</p><p>每次执行的Docker指令其实都是通过向daemon发送请求来实现的。</p><p>daemon的运作（通信模式）主要有两种，一种是通过unix套接字（默认，但只能在本地访问到，比较安全），一种是通过监听tcp协议地址和端口来实现（这个可以实现在远程调用到docker服务）。</p><h4 id="远程-API"><a href="#远程-API" class="headerlink" title="远程 API"></a>远程 API</h4><p>除了通过远程tcp协议访问远程主机上的docker服务外，docker还提供了一套基于HTTP的API，可以使用curl来实现操作远程主机上的docker服务，这为开发基于WEB的docker服务提供了便利。</p><h3 id="开启远程-API"><a href="#开启远程-API" class="headerlink" title="开启远程 API"></a>开启远程 API</h3><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>1.12版本后, 用户可以自行创建配置文件 <code>/etc/docker/daemon.json</code>，该文件不区分系统，是通用的，推荐使用。具体参考：<a href="https://docs.docker.com/engine/admin/" rel="external nofollow noopener noreferrer" target="_blank">官方文档</a>。不知道版本的可以通过 <code>$ dockerd version</code> 查看。</p><p>方式一： 首先，你需要创建 <code>/etc/docker/daemon.json</code> 文件，文件内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"hosts"</span>: [</span><br><span class="line">    <span class="string">"tcp://0.0.0.0:2375"</span>,</span><br><span class="line">    <span class="string">"unix:///var/run/docker.sock"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开启的是 <code>2375</code> 端口。</p><p>然后重启生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ systemctl restart docker</span><br></pre></td></tr></table></figure><p>方式二 ： 当然也可以更改启动命令的方式 ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ubuntu 系统</span></span><br><span class="line">$ sudo vim /lib/systemd/system/docker.service</span><br><span class="line"><span class="comment"># CentOS</span></span><br><span class="line">$ sudo vim /usr/lib/systemd/system/docker.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改下面的启动命令</span></span><br><span class="line">ExecStart=/usr/bin/dockerd  -H tcp://0.0.0.0:2375  -H unix:///var/run/docker.sock</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ systemctl restart docker</span><br></pre></td></tr></table></figure><p>使用的时候只需要在客户端的主机上加上环境变量 <code>DOCKER_HOST=tcp://xxx.xxx.xx.xx/2375</code>，就可以在主机上使用远程的 Docker API。</p><h4 id="Docker-Toolbox"><a href="#Docker-Toolbox" class="headerlink" title="Docker Toolbox"></a>Docker Toolbox</h4><ol><li><p>在 window 或者 mac 上面使用 <code>Docker-toolbox</code>，则就比较简单了，,打开 <code>docker QuickStart Terminal</code> 终端，输入命令 ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker-machine ls</span><br><span class="line"></span><br><span class="line">NAME      ACTIVE   DRIVER       STATE     URL                         SWARM   DOCKER        ERRORS</span><br><span class="line">default   -        virtualbox   Running   tcp://192.168.99.100:2376           v17.10.0-ce</span><br></pre></td></tr></table></figure><p>查询到 URL，根据上面的结果</p><p>我使用的是 WONDOW 电脑的主机上加上环境变量 <code>DOCKER_HOST=tcp://192.168.99.100:2376</code>；</p><p>当然也可以使用 <code>VirtualBox</code> 的端口映射到 本地的 2375端口也行，docker 默认的 host 是 <code>127.0.0.1:2376</code>，这样环境变量也不用配置。</p></li><li><p>我使用的是 WIN10 ，后面也是这个开发环境，打开 <code>PowerShell</code> 执行命令 docker version 命令发现一个问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Get http://192.168.99.100:2376/v1.33/containers/json: malformed HTTP response <span class="string">"\x15\x03\x01\x00\x02\x02"</span>.</span><br><span class="line">* Are you trying to connect to a TLS-enabled daemon without TLS?</span><br></pre></td></tr></table></figure><p>发现它需要 TLS ，</p><p>设置环境变量 <code>DOCKER_TLS_VERIFY=1</code></p></li><li><p>然后再次执行 docker version 命令，发现又出现 问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The server probably has client authentication (--tlsverify) enabled. Please check your TLS client certification settings: Get https://192.168.99.100:2376/v1.35/version: remote error: tls: bad certificate</span><br></pre></td></tr></table></figure><p>没指定 证书 <code>cret</code>。 证书的路径在当前用户的 <code>/.docker/certs</code>下：</p><p>设置环境变量 <code>DOCKER_CERT_PATH=C:/Users/KronChan/.docker/machine/certs</code></p></li></ol><p>配置好，我们就能直接能在自己的主机中 使用 虚拟机中的 Docker API。</p><h2 id="一些其他的问题解决"><a href="#一些其他的问题解决" class="headerlink" title="一些其他的问题解决"></a>一些其他的问题解决</h2><h3 id="更改Docker-默认镜像路径"><a href="#更改Docker-默认镜像路径" class="headerlink" title="更改Docker 默认镜像路径"></a>更改Docker 默认镜像路径</h3><p>一般的我们系统盘不会给很大的空间，然而 Docker 镜像占用的空间一般都是非常大的，所以我们需要将镜像和容器挂在到其他数据盘下。</p><p>docker 默认的数据目录都在<code>/var/lib/docker/</code> 下，我们只要将这个目录挂载到其他数据盘目录下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前提关闭 docker </span></span><br><span class="line"><span class="comment"># 1. 数据盘中新建一个目录，用于存放docker数据</span></span><br><span class="line"><span class="comment"># 2. 将原数据目录移动到新建的目录中</span></span><br><span class="line"><span class="comment"># 3. 创建软链接，将数据盘中的docker数据目录挂到/var/lib/docker/</span></span><br><span class="line"><span class="comment"># 4. 重启 docker 查询 Docker 信息</span></span><br><span class="line"><span class="comment"># 查询到结果 ‘Docker Root Dir: /media/kronchan/文件/kronchan/tools/docker’</span></span><br></pre></td></tr></table></figure><h3 id="WARNING-No-memory-limit-support"><a href="#WARNING-No-memory-limit-support" class="headerlink" title="WARNING: No memory limit support"></a>WARNING: No memory limit support</h3><p>查询 <code>sudo docker info</code>的时候发现警告信息：<code>WARNING: No memory limit support</code>。</p><p>解决方案：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/default/grub</span><br><span class="line"><span class="comment"># 加入 GRUB_CMDLINE_LINUX="cgroup_enable=memory swapaccount=1"</span></span><br><span class="line"><span class="comment"># 更新 grub</span></span><br><span class="line">$ sudo grub-update</span><br><span class="line">sudo: grub-update：找不到命令</span><br><span class="line">$ sudo update-grub</span><br><span class="line">Generating grub configuration file ...</span><br><span class="line">Found theme: /boot/grub/themes/deepin/theme.txt</span><br><span class="line">Found background image: /boot/grub/themes/deepin/background.png</span><br><span class="line">Found linux image: /boot/vmlinuz-4.9.0-deepin13-amd64</span><br><span class="line">Found initrd image: /boot/initrd.img-4.9.0-deepin13-amd64</span><br><span class="line">Found deepin image: /boot/deepin/vmlinuz-4.13.4</span><br><span class="line">Found initrd image: /boot/deepin/initrd.img-4.13.4</span><br><span class="line">Adding boot menu entry <span class="keyword">for</span> EFI firmware configuration</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># 重启系统，然后检查查看问题是否存在</span></span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://docs.docker.com/" rel="external nofollow noopener noreferrer" target="_blank">Docker Documentation</a></li><li><a href="https://legacy.gitbook.com/book/yeasy/docker_practice/details" rel="external nofollow noopener noreferrer" target="_blank">Docker — 从入门到实践</a></li><li><a href="http://www.widuu.com/docker/index.html" rel="external nofollow noopener noreferrer" target="_blank">Docker 中文指南</a></li><li><a href="https://deepzz.com/post/dockerd-and-docker-remote-api.html" rel="external nofollow noopener noreferrer" target="_blank">远程连接docker daemon，Docker Remote API</a></li><li><a href="https://yq.aliyun.com/articles/91396" rel="external nofollow noopener noreferrer" target="_blank">优雅地实现安全的容器编排 - Docker Secrets</a></li></ul><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 Docker 安装 Jenkins]]></title>
      <url>/docker-jenkins.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>jenkins是一个用Java编写的开源自动化服务器,它是Hudson的一个分支project ; 它是一个持续集成软件(continuous integration),它以节点为单位,连接整个工作流, 通过各种类型插件支持构成具有个性化要求的项目持续集成, 通过各种各样的插件(plugin)来实现各个节点的功能, 它们共同完成持续集成(自动部署)/自动测试或者持续交付等工作.</p></blockquote><a id="more"></a><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li><p>直接从 DockerHub 上pull 镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull jenkins</span><br></pre></td></tr></table></figure></li><li><p>由于 Jenkins 容器运行后，会自动在宿主计算机中挂在一个数据卷 <code>var/jenkins_home</code>，我们在主机中可以新建一个数据卷的文件夹，这里注意的是，有权限问题，不然会启动失败，有点坑这里，卡了半天，给宿主的这个挂载卷目录中加上下面的权限的就好了，改成为uid 1000的用户，具体参考阿里云<a href="https://yq.aliyun.com/articles/53990" rel="external nofollow noopener noreferrer" target="_blank">谈谈 Docker Volume 之权限管理（一）</a>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R 1000 /var/jenkins_home</span><br></pre></td></tr></table></figure></li><li><p>启动容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 7322:8080 -p 50000:50000 -v /var/jenkins_home/:/var/jenkins_home/  --name my_jenkins -d jenkins</span><br></pre></td></tr></table></figure></li></ol><ul><li>8080 端口是访问 jenkins 网页的端口，如果你想在 80 端口访问，就改成 -p 80:8080</li><li><p>50000 端口与 slave 有关，主要作为master的jenkins用来连接slave的。</p><p>可以更改挂载卷的目录，不过记得也要设置目录权限的问题。</p><p>使用 <code>docker ps</code> 查看运行的容器。</p><h3 id="配置和使用"><a href="#配置和使用" class="headerlink" title="配置和使用"></a>配置和使用</h3></li></ul><ol><li><p>使用 host + port 访问 jenkins，会进入第一个页面：<br><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/docker/jenkins-1.png" alt="image"></p><p>因为我们将目录<code>/var/jenkins_home</code>已经挂载在宿主主机，可以直接去这个目录查看密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> cat /var/jenkins_home/secrets/initialAdminPassword</span><br><span class="line">688293f8bfd843c4b87398b4d910f506</span><br></pre></td></tr></table></figure></li><li><p>进入后就开始安装插件的过程，然后等待安装完成。</p></li><li>然后跳出一个页面设置账号和密码，这样就安装完成，后面学习使用 jenkins 运用到工作中。</li></ol><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TCP IP 学习笔记]]></title>
      <url>/tcp-ip.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><h4 id="为什么需要TCP-IP协议"><a href="#为什么需要TCP-IP协议" class="headerlink" title="为什么需要TCP/IP协议"></a>为什么需要TCP/IP协议</h4><p>电脑运行着不同的操作系统，想发送不同的信息出去，好像就是全国各地的方言一样，即使表达相同的意思，也不能理解它们，需要使用一个通用的方式，让两个语言不同的人能够就行交流。<br>所以它们需要一些相通的东西进行交流，所以普通话就产生了，呸，跑题了，所以TCP/IP 就这样诞生了。</p><a id="more"></a><p>TCP/IP不是一个协议，而是一个协议族的统称。里面包括了IP协议，IMCP协议，TCP协议，以及我们更加熟悉的http、ftp、pop3协议等等。电脑有了这些，就学会了普通话，可以和全国各地的人交流了。</p><h4 id="TCP-IP协议分层"><a href="#TCP-IP协议分层" class="headerlink" title="TCP/IP协议分层"></a>TCP/IP协议分层</h4><p>TCP工作在网络OSI的七层模型中如下所示：<br><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/tcp-ip/1.png" alt="image"></p><ol><li><code>应用层</code>：向用户提供一组常用的应用程序，如电子邮件（简单邮件传输协议，SMTP），文件传输访问（文件传输协议，FTP），远程登录（TELNET）等。</li><li><code>传输层</code>：提供应用程序间的通信。其功能包括： 格式化信息流；提供可靠传输。</li><li><code>网络层（网际层）</code>：这里有 IP 协议类似的协议，负责相邻计算机之间的通信。功能主要包括三方面：<ol><li><strong>处理来自传输层的分组发送请求</strong>：收到请求之后，将分组装入 IP 数据报，填充报头，选择去往信宿机的路径，然后将数据报发往适当的网络接口；</li><li><strong>处理输入数据报：首先检查其合法性，然后进行寻址</strong>：如果该数据包已经到达信宿机，则去掉报头，将剩下一部分交给适当的传输协议；如果该数据包尚未到达信宿机，则转发该数据报；</li><li><strong>处理路径、流控、拥塞等问题</strong>；</li></ol></li><li><code>网络接口层</code>：这个层次为待传送的数据加入一个以太网协议头，并进行CRC编码，数据传输做准备。</li><li><code>硬件层</code>：这个层次的定义包括网线的制式，网卡的定义等等</li></ol><h4 id="常识"><a href="#常识" class="headerlink" title="常识"></a>常识</h4><ol><li><code>ip 地址</code>：互联网地址，网络上每一个节点都必须有一个独立的Internet地址（也叫做IP地址）。。现在，通常使用的IP地址是一个32bit的数字，也就是我们常说的IPv4标准，这32bit的数字分成四组，也就是常见的255.255.255.255的样式。IPv4标准上，地址被分为五类，我们常用的是B类地址。具体的分类请参考其他文档。需要注意的是IP地址是网络号+主机号的组合，这非常重要。</li><li><code>域名系统</code>：域名系统是一个分布的数据库，它提供将主机名转换成IP地址的服务。</li><li><code>RFC</code>：tcp/ip协议的标准文档；</li><li><code>端口号</code>：用在TCP，UDP上的一个逻辑号码，并不是一个硬件端口，我们平时说把某某端口封掉了，也只是在IP层次把带有这个号码的IP包给过滤掉了而已。</li></ol><h3 id="TCP-的报文格式"><a href="#TCP-的报文格式" class="headerlink" title="TCP 的报文格式"></a>TCP 的报文格式</h3><p>参考<a href="https://zhangbinalan.gitbooks.io/protocol/content/tcpbao_wen_ge_shi.html" rel="external nofollow noopener noreferrer" target="_blank">TCP报文格式</a></p><ul><li><code>Source Port, Destination Port（源端口号，目的端口号）</code>：分别占用 16 位，用于区别主机中的不同进程；由于 IP 地址用来区分不同主机，所以源端口号、目的端口号与 IP 首部中的源 IP 地址和目的 IP 地址，技能确定唯一的一个 TCP 连接；</li><li><code>Sequence Number（发送序号）</code>：32 位数据，用来标识从 TCP 发送端向 TCP 接收端发送的数据字节流，它表示在这个报文段中的第一个数据字节在数据流中的序号，主要用来解决网络报乱序问题；</li><li><code>Acknowledgment Number（确认序号）</code>：占用 32 位，由接收端的计算机使用，将分段的报文重组成最初形式；如果设置了控制位 ACK = 1，则这个值表示下一个准备接受的包的序列码；</li><li><code>Offset（数据偏移量）</code>：占用 4 位，给出首部中 32bit 字的数目，需要这个值是因为任选字段的长度是可变的（如果没有任选字段，正常的长度是 20 字节）；</li><li><code>Reserved（保留位）</code>：占用 6 位，且必须是 0，为了将来定义新的用途而保留；</li><li><code>TCP Flags（TCP 标志位）</code><br>：用于标志 TCP 的某些状态，它们中的多个可同时被设置为 1，主要用于操控 TCP 的状态机，6 个标志位依次为 URG, ACK, PSH, RST, SYN, FIN。每个标志位的意义如下：</li></ul><ul><li><code>URG</code>：紧急标志 (Urgent)，该标志表示 TCP 包的紧急指针域有效（后面将会说到紧急指针域的内容），用来保证 TCP 连接不被中断，并督促中间层设备要尽快处理这些数据；</li><li><code>ACK</code>：确认标志 (Acknowledge)，该标志表示应答域有效，就是说前面提到的 TCP 应答信号会包含在 TCP 数据包中；ACK 可以由两个取值( 0/1 )：应答域有效为1，反之为0；</li><li><code>PSH</code>：推标志 (Push)，表示 Push 操作，即在数据报到达接收端以后，立即传送给应用程序，而不是在缓冲区中排队；</li><li><code>RST</code>：复位标志 (Reset)，用来复位那些产生错误的连接，也被用来拒绝错误和非法的数据报；</li><li><code>SYN</code>：同步标志 (Synchronize)，用来建立连接。该标志经常与 ACK 标志搭配使用。</li></ul><ul><li><code>FIN</code>：结束标志 (Finish)，表示发送端已经达到数据末尾，也就是说双方的数据传送完成，没有数据可以传送了，发送FIN标志位的TCP数据包后，连接将被断开。这个标志的数据包也经常被用于进行端口扫描；</li></ul><p>参考<a href="https://blog.csdn.net/ajianyingxiaoqinghan/article/details/77942066" rel="external nofollow noopener noreferrer" target="_blank">TCP 协议详解</a></p><h3 id="TCP-的三次握手"><a href="#TCP-的三次握手" class="headerlink" title="TCP 的三次握手"></a>TCP 的三次握手</h3><p><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/tcp-ip/2.png" alt="image"></p><p>三次握手详解 TCP 是面向连接的，无论哪一方向另一方发送数据之前，都必须先在双方之间建立一条连接。在 TCP / IP 协议中，TCP 协议提供可靠的连接服务，连接是通过三次握手进行初始化的。 三次握手的目的是同步连接双方的序列号和确认号并交换 TCP 窗口大小信息。这就是面试中经常会被问到的 TCP 三次握手。</p><p>参考<a href="https://github.com/jawil/blog/issues/14" rel="external nofollow noopener noreferrer" target="_blank">通俗大白话来理解TCP协议的三次握手和四次分手</a></p><p>第一次握手：建立连接。客户端发送连接请求报文段，将<code>SYN</code>位置为1，<code>Sequence Number</code>为x；然后，客户端进入<code>SYN_SEND</code>状态，等待服务器的确认；<br>第二次握手：服务器收到<code>SYN</code>报文段。服务器收到客户端的<code>SYN</code>报文段，需要对这个<code>SYN</code>报文段进行确认，设置A<code>cknowledgment Number为x+1(Sequence Number+1)；</code>同时，自己自己还要发送SYN请求信息，将<code>SYN</code>位置为1，<code>Sequence Number</code>为y；服务器端将上述所有信息放到一个报文段（即<code>SYN+ACK</code>报文段）中，一并发送给客户端，此时服务器进入<code>SYN_RECV</code>状态；<br>第三次握手：客户端收到服务器的SYN+ACK报文段。然后将<code>Acknowledgment Number</code>设置为y+1，向服务器发送ACK报文段，这个报文段发送完毕以后，客户端和服务器端都进入<code>ESTABLISHED</code>状态，完成TCP三次握手。<br>完成了三次握手，客户端和服务器端就可以开始传送数据。</p><p>主要是注意为什么要进行第三次连接，这里很容易挖坑，书中解释说：</p><blockquote><p>为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。</p></blockquote><blockquote><p>“已失效的连接请求报文段”的产生在这样一种情况下：客户端发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达服务器。本来这是一个早已失效的报文段，但服务器收到此失效的连接请求报文段后，就误认为是客户端再次发出的一个新的连接请求。于是就向客户端发出确认报文段，同意建立连接。假设不采用“三次握手”，那么只要服务器发出确认，新的连接就建立了。由于现在客户端并没有发出建立连接的请求，因此不会理睬服务器的确认，也不会向服务器发送数据。但服务器却以为新的运输连接已经建立，并一直等待客户端发来数据。这样，服务器的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，客户端不会向服务器的确认发出确认。服务器由于收不到确认，就知道客户端并没有要求建立连接。”</p></blockquote><p><strong>其实主要目的就是为了防止服务端一致等待导致资源浪费。</strong></p><h3 id="TCP-的四次分手"><a href="#TCP-的四次分手" class="headerlink" title="TCP 的四次分手"></a>TCP 的四次分手</h3><p>具体还是参考上面提供的这个链接<a href="https://github.com/jawil/blog/issues/14" rel="external nofollow noopener noreferrer" target="_blank">通俗大白话来理解TCP协议的三次握手和四次分手</a></p><p>第一次分手：主机1（可以使客户端，也可以是服务器端），设置<code>Sequence Number</code>和<code>Acknowledgment Number</code>，向主机2发送一个FIN报文段；此时，主机1进入<code>FIN_WAIT_1</code>状态；这表示主机1没有数据要发送给主机2了；<br>第二次分手：主机2收到了主机1发送的FIN报文段，向主机1回一个<code>ACK</code>报文段，<code>Acknowledgment Number</code>为<code>Sequence Number</code>加1；主机1进入<code>FIN_WAIT_2</code>状态；主机2告诉主机1，我也没有数据要发送了，可以进行关闭连接了；<br>第三次分手：主机2向主机1发送<code>FIN</code>报文段，请求关闭连接，同时主机2进入<code>CLOSE_WAIT</code>状态；<br>第四次分手：主机1收到主机2发送的<code>FIN</code>报文段，向主机2发送<code>ACK</code>报文段，然后主机1进入<code>TIME_WAIT</code>状态；主机2收到主机1的<code>ACK</code>报文段以后，就关闭连接；此时，主机1等待<code>2MSL</code>后依然没有收到回复，则证明Server端已正常关闭，那好，主机1也可以关闭连接了。</p><ul><li><code>FIN_WAIT_1</code>: 这个状态要好好解释一下，其实FIN_WAIT_1和FIN_WAIT_2状态的真正含义都是表示等待对方的FIN报文。而这两种状态的区别是：FIN_WAIT_1状态实际上是当SOCKET在ESTABLISHED状态时，它想主动关闭连接，向对方发送了FIN报文，此时该SOCKET即进入到FIN_WAIT_1状态。而当对方回应ACK报文后，则进入到FIN_WAIT_2状态，当然在实际的正常情况下，无论对方何种情况下，都应该马上回应ACK报文，所以FIN_WAIT_1状态一般是比较难见到的，而FIN_WAIT_2状态还有时常常可以用netstat看到。（主动方）</li><li><code>FIN_WAIT_2</code>：上面已经详细解释了这种状态，实际上FIN_WAIT_2状态下的SOCKET，表示半连接，也即有一方要求close连接，但另外还告诉对方，我暂时还有点数据需要传送给你(ACK信息)，稍后再关闭连接。（主动方）</li><li><code>CLOSE_WAIT</code>：这种状态的含义其实是表示在等待关闭。怎么理解呢？当对方close一个SOCKET后发送FIN报文给自己，你系统毫无疑问地会回应一个ACK报文给对方，此时则进入到CLOSE_WAIT状态。接下来呢，实际上你真正需要考虑的事情是察看你是否还有数据发送给对方，如果没有的话，那么你也就可以 close这个SOCKET，发送FIN报文给对方，也即关闭连接。所以你在CLOSE_WAIT状态下，需要完成的事情是等待你去关闭连接。（被动方）</li><li><code>LAST_ACK</code>: 这个状态还是比较容易好理解的，它是被动关闭一方在发送FIN报文后，最后等待对方的ACK报文。当收到ACK报文后，也即可以进入到CLOSED可用状态了。（被动方）</li><li><code>TIME_WAIT</code>: 表示收到了对方的FIN报文，并发送出了ACK报文，就等2MSL后即可回到CLOSED可用状态了。如果FINWAIT1状态下，收到了对方同时带FIN标志和ACK标志的报文时，可以直接进入到TIME_WAIT状态，而无须经过FIN_WAIT_2状态。（主动方）</li><li><code>CLOSED</code>: 表示连接中断。</li></ul><hr><p>了解了基础，好好整理下，面试时候该要上场的。</p><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><p>三次握手和四次挥手的流程上面已经提过了。</p><ul><li><p>TCP协议和UDP协议的区别是什么？</p><ul><li>TCP协议是有连接的，有连接的意思是开始传输实际数据之前TCP的客户端和服务器端必须通过三次握手建立连接，会话结束之后也要结束连接。而UDP是无连接的</li><li>TCP协议保证数据按序发送，按序到达，提供超时重传来保证可靠性，但是UDP不保证按序到达，甚至不保证到达，只是努力交付，即便是按序发送的序列，也不保证按序送到。</li><li>TCP协议所需资源多，TCP首部需20个字节（不算可选项），UDP首部字段只需8个字节。</li><li>TCP有流量控制和拥塞控制，UDP没有，网络拥堵不会影响发送端的发送速率</li><li>TCP是一对一的连接，而UDP则可以支持一对一，多对多，一对多的通信。</li><li>TCP面向的是字节流的服务，UDP面向的是报文的服务。</li></ul></li><li><p>为什么要三次握手，两次，四次行不行？</p><p>三次握手：<br>“喂，你听得到吗？”<br>“我听得到呀，你听得到我吗？”<br>“我能听到你，今天balabala……”<br>​</p><p>两次握手：<br>“喂，你听得到吗？”<br>“我听得到，你听得到吗？”<br>‘’今天balabala………‘’<br>“……谁在说话？”<br>“……”<br>​</p><p>四次握手：<br>“喂，你听得到吗？”<br>“我听得到呀，你听得到我吗？”<br>“我能听到你，你能听到我吗？”<br>“……不想跟傻逼说话”</p><p>(摘自知乎)<br>总的来说就是三次刚好，多一次浪费；少一次不够，会让服务端一直等待发送消息，白白浪费了资源。</p></li><li><p>四次挥手释放连接时，等待2MSL的意义？</p><p>假设 A 是客户端， B 是服务端</p><ul><li>第一，为了保证A发送的最有一个ACK报文段能够到达B。这个ACK报文段有可能丢失，因而使处在LAST-ACK状态的B收不到对已发送的FIN和ACK报文段的确认。B会超时重传这个FIN和ACK报文段，而A就能在2MSL时间内收到这个重传的ACK+FIN报文段。接着A重传一次确认。</li><li>第二，就是防止上面提到的已失效的连接请求报文段出现在本连接中，A在发送完最有一个ACK报文段后，再经过2MSL，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。</li></ul></li><li><p>常见的应用中有哪些是应用TCP协议的，哪些又是应用UDP协议的，为什么它们被如此设计？</p><ul><li><p>以下应用一般或必须用udp实现？</p></li><li><ul><li>多播的信息一定要用udp实现，因为tcp只支持一对一通信。</li><li>如果一个应用场景中大多是简短的信息，适合用udp实现，因为udp是基于报文段的，它直接对上层应用的数据封装成报文段，然后丢在网络中，如果信息量太大，会在链路层中被分片，影响传输效率。</li><li>如果一个应用场景重性能甚于重完整性和安全性，那么适合于udp，比如多媒体应用，缺一两帧不影响用户体验，但是需要流媒体到达的速度快，因此比较适合用udp</li><li>如果要求快速响应，那么udp听起来比较合适</li><li>如果又要利用udp的快速响应优点，又想可靠传输，那么只能考上层应用自己制定规则了。</li><li>常见的使用udp的例子：ICQ,QQ的聊天模块。</li></ul></li><li><p>以qq为例的一个说明</p><blockquote><p>登陆采用TCP协议和HTTP协议，你和好友之间发送消息，主要采用UDP协议，内网传文件采用了P2P技术。总来的说：</p><p>1.登陆过程，客户端client 采用TCP协议向服务器server发送信息，HTTP协议下载信息。登陆之后，会有一个TCP连接来保持在线状态。</p><p>2.和好友发消息，客户端client采用UDP协议，但是需要通过服务器转发。腾讯为了确保传输消息的可靠，采用上层协议来保证可靠传输。如果消息发送失败，客户端会提示消息发送失败，并可重新发送。</p><p>3.如果是在内网里面的两个客户端传文件，QQ采用的是P2P技术，不需要服务器中转。</p></blockquote><p><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/tcp-ip/5.png" alt="image"></p></li></ul></li></ul><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tcp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习 Spring Cloud：（一）Eureka  服务发现与注册]]></title>
      <url>/eureka-server.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="Spring-Cloud简介"><a href="#Spring-Cloud简介" class="headerlink" title="Spring Cloud简介"></a>Spring Cloud简介</h3><blockquote><p>Spring Cloud是一个基于Spring Boot实现的云应用开发工具，它为基于JVM的云应用开发中涉及的配置管理、服务发现、断路器、智能路由、微代理、控制总线、全局锁、决策竞选、分布式会话和集群状态管理等操作提供了一种简单的开发方式。</p><p>Spring Cloud包含了多个子项目（针对分布式系统中涉及的多个不同开源产品），比如：Spring Cloud Config、Spring Cloud Netflix、Spring Cloud0 CloudFoundry、Spring Cloud AWS、Spring Cloud Security、Spring Cloud Commons、Spring Cloud Zookeeper、Spring Cloud CLI等项目。</p></blockquote><a id="more"></a><h3 id="服务治理"><a href="#服务治理" class="headerlink" title="服务治理"></a>服务治理</h3><p>我使用的是Spring Cloud Eureka来实现服务治理。使用版本都是2.0版本：</p><ul><li>Spring Boot 2.0</li><li>Spring Cloud Finchley.M9</li></ul><blockquote><p>Spring Cloud Eureka是Spring Cloud Netflix项目下的服务治理模块。而Spring Cloud Netflix项目是Spring Cloud的子项目之一，主要内容是对Netflix公司一系列开源产品的包装，它为Spring Boot应用提供了自配置的Netflix OSS整合。通过一些简单的注解，开发者就可以快速的在应用中配置一下常用模块并构建庞大的分布式系统。它主要提供的模块包括：服务发现（Eureka），断路器（Hystrix），智能路由（Zuul），客户端负载均衡（Ribbon）等。</p></blockquote><h4 id="创建服务注册中心"><a href="#创建服务注册中心" class="headerlink" title="创建服务注册中心"></a>创建服务注册中心</h4><ol><li><p>使用 IDEA 创建一个 <code>Spring initializr</code> 工程，勾选 <code>Cloud Discovery</code>下面的 <code>Eureka Server</code>，直接创建应用，我是用 maven 构建的，加入的依赖如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要注意的是，相比较 1.X 版本中，netflix 公司的开源项目，都加了个前缀。</p></li></ol><ol><li><p>在程序启动入口加上注解 <code>@EnableEurekaServer</code> ，通过这样的注解配置，提供一个服务注册中心给其他服务进行对话。</p></li><li><p>在配置文件中加入：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认情况下 eureka 会将自己注册一个客户端，服务端不需要，所以我们将它关闭。</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span> <span class="comment"># 不注册自己本身</span></span><br></pre></td></tr></table></figure></li><li><p>我们尝试访问这个应用，我设置的端口是 <code>1001</code>，所以访问 <code>http://localhost:1001</code>，访问到 Eureka 的管理注册服务的页面，可以查看各个服务的状态。</p></li></ol><h4 id="创建服务提供者"><a href="#创建服务提供者" class="headerlink" title="创建服务提供者"></a>创建服务提供者</h4><ol><li><p>创建一个服务提供者工程 <code>eureka-producer</code>，现在我们加入的是客户端的依赖就可以了：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>然后再程序启动类加上注解 <code>@EnableDiscoveryClient</code> ，该注解能激活Eureka中的DiscoveryClient实现，这样才能实现Controller中对服务信息的输出。</p></li><li><p>配置文件中加上需要注册到的服务中心的地址（指定应用程序的名称，后期进行服务路由和负载均衡时候方便调用）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">eureka-producer</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://k.wuwii.com:1001/eureka/</span></span><br></pre></td></tr></table></figure></li><li><p>启动应用，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2018-04-04 23:53:47.436  INFO 1364 --- [  restartedMain] com.netflix.discovery.DiscoveryClient    : Discovery Client initialized at timestamp 1522857227434 with initial instances count: 4</span><br><span class="line">2018-04-04 23:53:47.440  INFO 1364 --- [  restartedMain] o.s.c.n.e.s.EurekaServiceRegistry        : Registering application eureka-producer with eureka with status UP</span><br><span class="line">2018-04-04 23:53:47.441  INFO 1364 --- [  restartedMain] com.netflix.discovery.DiscoveryClient    : Saw local status change event StatusChangeEvent [timestamp=1522857227440, current=UP, previous=STARTING]</span><br><span class="line">2018-04-04 23:53:47.442  INFO 1364 --- [nfoReplicator-0] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_EUREKA-PRODUCER/localhost:eureka-producer:1002: registering service...</span><br><span class="line">2018-04-04 23:53:47.494  INFO 1364 --- [nfoReplicator-0] com.netflix.discovery.DiscoveryClient    : DiscoveryClient_EUREKA-PRODUCER/localhost:eureka-producer:1002 - registration status: 204</span><br></pre></td></tr></table></figure><p>上面显示我的注册服务有四个实例，我之前已经注册过了，现在服务发现 <code>localhost:eureka-producer:1002</code>，注册到服务中心成功返回状态吗204。</p><p>我们再进入到<code>http://localhost:1001</code>，可以查看到 <code>eureka-producer</code> 已经注册到我们的服务中心，</p><p><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/spring-cloud/eureka-producer-1.png" alt="image"></p></li></ol><h4 id="复杂配置"><a href="#复杂配置" class="headerlink" title="复杂配置"></a>复杂配置</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">    client:</span></span><br><span class="line"><span class="comment">#healthcheck:</span></span><br><span class="line">  <span class="comment">#enabled: true</span></span><br><span class="line"><span class="attr">registry-fetch-interval-seconds:</span> <span class="number">10000</span> <span class="comment">#间隔多久去拉取服务注册信息，默认为30秒</span></span><br><span class="line"><span class="attr">service-url:</span></span><br><span class="line"><span class="attr">  defaultZone:</span> <span class="attr">http://localhost:9000/eureka/</span></span><br><span class="line"><span class="attr"> instance:</span></span><br><span class="line"><span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">ip-address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">instance-id:</span> <span class="string">$&#123;spring.application.name&#125;-$&#123;eureka.instance.ip-address&#125;-$&#123;server.port&#125;-$&#123;random.value&#125;</span></span><br><span class="line"><span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">10000</span>   <span class="comment">#租期更新时间间隔（默认30秒）</span></span><br><span class="line"><span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">30000</span> <span class="comment"># 租期到期时间（默认90秒）</span></span><br><span class="line"><span class="comment">#需要增加下面配置，告诉注册中心访问路径变化</span></span><br><span class="line"><span class="attr">status-page-url-path:</span> <span class="string">/actuator/info</span></span><br><span class="line"><span class="attr">health-check-url-path:</span> <span class="string">/actuator/health</span></span><br><span class="line"><span class="attr">home-page-url-path:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/kaimz/learn-spring-cloud/tree/master/eureka" rel="external nofollow noopener noreferrer" target="_blank">代码</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring Cloud </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习Spring Boot：（二十七）Spring Boot 2.0 中使用 Actuator]]></title>
      <url>/springboot-actuator.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>主要是完成微服务的监控，完成监控治理。可以查看微服务间的数据处理和调用，当它们之间出现了异常，就可以快速定位到出现问题的地方。</p><ul><li>springboot - version: 2.0</li></ul><a id="more"></a><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h4><p>maven 项目 在 <code>pom.xml</code> 文件中加入 actuator 的依赖：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>使用 Gradle 构建：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">	compile(&quot;org.springframework.boot:spring-boot-starter-actuator&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>需要注意的是 Spring Boot 2.0 相对于上个版本， Actuator 发生很多变化，</p><h5 id="keys-的配置改变"><a href="#keys-的配置改变" class="headerlink" title="keys 的配置改变"></a>keys 的配置改变</h5><table><thead><tr><th>旧的属性</th><th>新的属性</th></tr></thead><tbody><tr><td><code>endpoints.&lt;id&gt;.*</code></td><td><code>management.endpoint.&lt;id&gt;.*</code></td></tr><tr><td><code>endpoints.cors.*</code></td><td><code>management.endpoints.web.cors.*</code></td></tr><tr><td><code>endpoints.jmx.*</code></td><td><code>management.endpoints.jmx.*</code></td></tr><tr><td><code>management.address</code></td><td><code>management.server.address</code></td></tr><tr><td><code>management.context-path</code></td><td><code>management.server.servlet.context-path</code></td></tr><tr><td><code>management.ssl.*</code></td><td><code>management.server.ssl.*</code></td></tr><tr><td><code>management.port</code></td><td><code>management.server.port</code></td></tr></tbody></table><h5 id="基本路径"><a href="#基本路径" class="headerlink" title="基本路径"></a>基本路径</h5><ol><li><p>所有 endpoints 默认情况下都已移至 <code>/actuator</code>。就是多了跟路径 <code>actuator</code> ；</p></li><li><p>上个版本中的 <code>management/context-path:</code> 和 <code>management/port:</code> 改为 :</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  server:</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">8004</span></span><br><span class="line"><span class="attr">    servlet:</span></span><br><span class="line"><span class="attr">      context-path:</span> <span class="string">/xxx</span> <span class="comment"># 只有在设置了 management.server.port 时才有效</span></span><br></pre></td></tr></table></figure><p>另外，您还可以使用新的单独属性 <code>management.endpoints.web.base-path</code> 为管理端点设置基本路径。</p><p>例如，如果你设置<code>management.server.servlet.context-path=/management</code>和<code>management.endpoints.web.base-path=/application</code>，你就可以在下面的路径到达终点健康：<code>/management/application/health</code>。</p><p>如果你想恢复 1.x 的行为（即具有<code>/health</code>代替<code>/actuator/health</code>），设置以下属性：<code>management.endpoints.web.base-path=/</code></p></li></ol><h5 id="ENDPOINTS"><a href="#ENDPOINTS" class="headerlink" title="ENDPOINTS"></a>ENDPOINTS</h5><p>1.X 的时候属性：</p><table><thead><tr><th>HTTP 方法</th><th>路径</th><th>描述</th></tr></thead><tbody><tr><td>GET</td><td>/autoconfig</td><td>提供了一份自动配置报告，记录哪些自动配置条件通过了，哪些没通过</td></tr><tr><td>GET</td><td>/configprops</td><td>描述配置属性(包含默认值)如何注入Bean</td></tr><tr><td>GET</td><td>/beans</td><td>描述应用程序上下文里全部的Bean，以及它们的关系</td></tr><tr><td>GET</td><td>/dump</td><td>获取线程活动的快照</td></tr><tr><td>GET</td><td>/env</td><td>获取全部环境属性</td></tr><tr><td>GET</td><td>/env/{name}</td><td>根据名称获取特定的环境属性值</td></tr><tr><td>GET</td><td>/health</td><td>报告应用程序的健康指标，这些值由HealthIndicator的实现类提供</td></tr><tr><td>GET</td><td>/info</td><td>获取应用程序的定制信息，这些信息由info打头的属性提供</td></tr><tr><td>GET</td><td>/mappings</td><td>描述全部的URI路径，以及它们和控制器(包含Actuator端点)的映射关系</td></tr><tr><td>GET</td><td>/metrics</td><td>报告各种应用程序度量信息，比如内存用量和HTTP请求计数</td></tr><tr><td>GET</td><td>/metrics/{name}</td><td>报告指定名称的应用程序度量值</td></tr><tr><td>POST</td><td>/shutdown</td><td>关闭应用程序，要求endpoints.shutdown.enabled设置为true</td></tr><tr><td>GET</td><td>/trace</td><td>提供基本的HTTP请求跟踪信息(时间戳、HTTP头等)</td></tr></tbody></table><p>2.0 部分更改：</p><table><thead><tr><th>1.x 端点</th><th>2.0 端点（改变）</th></tr></thead><tbody><tr><td><code>/actuator</code></td><td>不再可用。 但是，在 <code>management.endpoints.web.base-path</code> 的根目录中有一个映射，它提供了到所有暴露端点的链接。</td></tr><tr><td><code>/auditevents</code></td><td>该<code>after</code>参数不再需要</td></tr><tr><td><code>/autoconfig</code></td><td>重命名为 <code>/conditions</code></td></tr><tr><td><code>/docs</code></td><td>不再可用</td></tr><tr><td><code>/health</code></td><td>现在有一个 <code>management.endpoint.health.show-details</code> 选项 <code>never</code>, <code>always</code>, <code>when-authenticated</code>，而不是依靠 <code>sensitive</code> 标志来确定 <code>health</code> 端点是否必须显示全部细节。 默认情况下，<code>/actuator/health</code>公开并且不显示细节。</td></tr><tr><td><code>/trace</code></td><td>重命名为 <code>/httptrace</code></td></tr></tbody></table><p>默认端点 path 前面多了一级 <code>/actuator</code> 。</p><p><strong>同时注意只有端点<code>/health</code>和<code>/info</code>端点是暴露的。</strong></p><table><thead><tr><th>Property</th><th>Default</th></tr></thead><tbody><tr><td><code>management.endpoints.jmx.exposure.exclude</code></td><td></td></tr><tr><td><code>management.endpoints.jmx.exposure.include</code></td><td><code>*</code></td></tr><tr><td><code>management.endpoints.web.exposure.exclude</code></td><td></td></tr><tr><td><code>management.endpoints.web.exposure.include</code></td><td><code>info, health</code></td></tr></tbody></table><ol><li>您可以按如下方式公开所有端点：<code>management.endpoints.web.exposure.include=*</code></li><li>您可以通过以下方式显式启用<code>/shutdown</code>端点：<code>management.endpoint.shutdown.enabled=true</code></li><li>要公开所有（已启用）网络端点除<code>env</code>端点之外：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">management.endpoints.web.exposure.include=*</span><br><span class="line">management.endpoints.web.exposure.exclude=env</span><br></pre></td></tr></table></figure><p>例如：</p><p>我现在开启所有的端点：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">"*"</span> <span class="comment"># * 在yaml 文件属于关键字</span></span><br></pre></td></tr></table></figure><p>执行 <code>localhost:${port}/actuator</code>，可以看到所有可以执行查看的端点监控的 Url，然后我们尝试执行关闭应用进程的指令：<code>shutdown</code>：</p><p><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/springboot-actuator/shotdown.png" alt="image"></p><h5 id="端点格式"><a href="#端点格式" class="headerlink" title="端点格式"></a>端点格式</h5><ol><li><code>/actuator/mappings</code> 端点大改变<br>JSON 格式已经更改为现在正确地包含有关上下文层次结构，多个<code>DispatcherServlets，</code>部署的 Servlet 和 Servlet 过滤器的信息。详情请参阅<a href="https://github.com/spring-projects/spring-boot/issues/9979#issuecomment-357930821" rel="external nofollow noopener noreferrer" target="_blank">＃9979</a>。<br>Actuator API 文档的<a href="https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/actuator-api/html/#mappings" rel="external nofollow noopener noreferrer" target="_blank">相关部分</a>提供了一个示例文档。</li></ol><ol start="2"><li><code>/actuator/httptrace</code> 端点大改变<br>响应的结构已经过改进，以反映端点关注跟踪 HTTP 请求 - 响应交换的情况。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>主要是 Spring Boot 2.0 版本升级在 Actuator 上面有许多改动，需要记录下。</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#production-ready-endpoints" rel="external nofollow noopener noreferrer" target="_blank">Part V. Spring Boot Actuator: Production-ready features</a></li><li><a href="http://www.54tianzhisheng.cn/2018/03/06/SpringBoot2-Migration-Guide/" rel="external nofollow noopener noreferrer" target="_blank">Spring Boot 2.0系列文章(一)：Spring Boot 2.0 迁移指南</a></li></ul><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 Fork Join 框架]]></title>
      <url>/fork-join.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>当需要执行大量的小任务的时候，我们需要将多个小任务进行拆分，类似 <code>快速排序</code> 的 <code>分而治之</code>。</p><p><code>Fork</code> 将一个大任务进行递归，不断的把它切割成符合条件的小任务，然后这些子任务分配到不同 CPU 核心上去分别计算，提高效率，<code>Join</code> 是 获取到小任务的计算结果，最后合并返回。</p><p>它充分利用了现在多核 CPU 的性能。</p><a id="more"></a><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p><code>Fork/Join</code>框架的核心类是<code>ForkJoinPool</code>，它能够接收一个<code>ForkJoinTask</code>，并得到计算结果。<code>ForkJoinTask</code>有两个子类，<code>RecursiveTask</code>（有返回值）和<code>RecursiveAction</code>（无返回结果），我们自己定义任务时，只需选择这两个类继承即可。</p><h4 id="RecursiveAction"><a href="#RecursiveAction" class="headerlink" title="RecursiveAction"></a>RecursiveAction</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没有返回值的 fork / join 任务框架</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintTask</span> <span class="keyword">extends</span> <span class="title">RecursiveAction</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> THRESHOLD = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> start;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> end;</span><br><span class="line"></span><br><span class="line">    PrintTask(<span class="keyword">int</span> start, <span class="keyword">int</span> end) &#123;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PrintTask task = <span class="keyword">new</span> PrintTask(<span class="number">0</span>, <span class="number">25</span>);</span><br><span class="line">        <span class="comment">// 分配四个线程给它</span></span><br><span class="line">        ForkJoinPool pool = <span class="keyword">new</span> ForkJoinPool(<span class="number">4</span>);</span><br><span class="line">        pool.execute(task);</span><br><span class="line">        pool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (THRESHOLD &gt;= (end - start)) &#123;</span><br><span class="line">            <span class="comment">// 满足小任务条件，分配打印任务</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; end; i++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">": "</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 任务还能继续拆分</span></span><br><span class="line">            <span class="keyword">int</span> division = (start + end) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            PrintTask task1 = <span class="keyword">new</span> PrintTask(start, division);</span><br><span class="line">            PrintTask task2 = <span class="keyword">new</span> PrintTask(division, end);</span><br><span class="line">            invokeAll(task1, task2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RecursiveTask"><a href="#RecursiveTask" class="headerlink" title="RecursiveTask"></a>RecursiveTask<t></t></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有返回值的 fork / join 任务框架 RecursiveTask&lt;T&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SumTask</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> THRESHOLD = <span class="number">50</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> start;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> end;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SumTask</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> works = <span class="number">200</span>;</span><br><span class="line">        SumTask task = <span class="keyword">new</span> SumTask(<span class="number">0</span>, works);</span><br><span class="line">        ForkJoinPool forkJoinPool = <span class="keyword">new</span> ForkJoinPool(<span class="number">4</span>);</span><br><span class="line">        <span class="keyword">long</span> beginTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">int</span> result = forkJoinPool.invoke(task);</span><br><span class="line">        <span class="keyword">long</span> consumeTime = System.currentTimeMillis() - beginTime;</span><br><span class="line">        System.out.println(<span class="string">"Fork Join calculated the result is "</span> + result + <span class="string">",consume "</span> + consumeTime + <span class="string">"ms"</span>);</span><br><span class="line">        forkJoinPool.shutdown();</span><br><span class="line"></span><br><span class="line">        result = <span class="number">0</span>;</span><br><span class="line">        beginTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; works; i++) &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            result += i;</span><br><span class="line">        &#125;</span><br><span class="line">        consumeTime = System.currentTimeMillis() - beginTime;</span><br><span class="line">        System.out.println(<span class="string">"The correct result is "</span> + result + <span class="string">",consume "</span> + consumeTime + <span class="string">"ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Integer <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (THRESHOLD &gt;= (end - start)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; end; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" result is ："</span> + sum);</span><br><span class="line">            <span class="keyword">return</span> sum;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> division = (start + end) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            SumTask task1 = <span class="keyword">new</span> SumTask(start, division);</span><br><span class="line">            SumTask task2 = <span class="keyword">new</span> SumTask(division, end);</span><br><span class="line">            invokeAll(task1, task2);</span><br><span class="line">            <span class="keyword">int</span> result1 = task1.join();</span><br><span class="line">            <span class="keyword">int</span> result2 = task2.join();</span><br><span class="line">            <span class="keyword">return</span> result1 + result2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ForkJoinPool-<span class="number">1</span>-worker-<span class="number">1</span> result is ：<span class="number">1225</span></span><br><span class="line">ForkJoinPool-<span class="number">1</span>-worker-<span class="number">0</span> result is ：<span class="number">8725</span></span><br><span class="line">ForkJoinPool-<span class="number">1</span>-worker-<span class="number">3</span> result is ：<span class="number">3725</span></span><br><span class="line">ForkJoinPool-<span class="number">1</span>-worker-<span class="number">2</span> result is ：<span class="number">6225</span></span><br><span class="line">Fork Join calculated the result is <span class="number">19900</span>,consume <span class="number">50018</span>ms</span><br><span class="line">The correct result is <span class="number">19900</span>,consume <span class="number">200053</span>ms</span><br></pre></td></tr></table></figure></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>我们虽然可以通过调整阈值 <code>THRESHOLD</code> 控制子任务的大小，从而控制了任务的数量，但是我们分配的 <code>Fork/Join Pool</code> 数量却是根据 CPU 性能而定的，所以，切割任务的大小和数量需要进行预先计算好，不是子任务越多就越好，而且合并结果集，需要消耗其他的计算性能。如果任务大小不能控制，可以设计可伸缩算法，动态来计算出合理的阈值，以符合要求。</li><li>注意正确的 <code>Fork/Join</code> 框架的写法，通过廖老师的文章 <a href="https://www.liaoxuefeng.com/article/001493522711597674607c7f4f346628a76145477e2ff82000" rel="external nofollow noopener noreferrer" target="_blank">Java的Fork/Join任务，你写对了吗？</a> ，指出了错误的写法的问题所在。</li></ol><p><a href="https://github.com/kaimz/learning-code/tree/master/fork-join" rel="external nofollow noopener noreferrer" target="_blank">源码地址</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习Spring Boot：（二十六）使用 RabbitMQ 消息队列]]></title>
      <url>/springboot-26.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前面学习了 RabbitMQ 基础，现在主要记录下学习 Spring Boot 整合 RabbitMQ ，调用它的 API ，以及中间使用的相关功能的记录。<br><a id="more"></a></p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>我这里测试都是使用的是 <code>topic</code> 交换器，Spring Boot 2.0.0， jdk 1.8</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>Spring Boot 版本 2.0.0<br>在 <code>pom.xml</code> 文件中引入 AMQP 的依赖<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>在系统配置文件中加入连接属性<br></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">RabbitMQ-Demo</span></span><br><span class="line"><span class="attr">  rabbitmq:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="string">k.wuwii.com</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">5672</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">kronchan</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="comment">#virtual-host: test</span></span><br><span class="line"><span class="attr">    publisher-confirms:</span> <span class="literal">true</span> <span class="comment"># 开启确认消息是否到达交换器，需要设置 true</span></span><br><span class="line"><span class="attr">    publisher-returns:</span> <span class="literal">true</span> <span class="comment"># 开启确认消息是否到达队列，需要设置 true</span></span><br></pre></td></tr></table></figure><p></p><h4 id="基本的使用"><a href="#基本的使用" class="headerlink" title="基本的使用"></a>基本的使用</h4><h5 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h5><p>新增一个消费者类：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Log</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageReceiver</span> <span class="keyword">implements</span> <span class="title">ChannelAwareMessageListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] body = message.getBody();</span><br><span class="line">            log.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt; receive： "</span> + <span class="keyword">new</span> String(body));</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 确认成功消费，否则消息会转发给其他的消费者，或者进行重试</span></span><br><span class="line">            channel.basicAck(message.getMessageProperties().getDeliveryTag(), <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h5 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h5><p>新增 RabbitMQ 的配置类，主要是对消费者的队列，交换器，路由键的一些设置：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"springboot.demo.test1"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String ROUTING_KEY = <span class="string">"route-key"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGES_NAME = <span class="string">"demo-exchanges"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 是否持久化</span></span><br><span class="line">        <span class="keyword">boolean</span> durable = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// 仅创建者可以使用的私有队列，断开后自动删除</span></span><br><span class="line">        <span class="keyword">boolean</span> exclusive = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// 当所有消费客户端连接断开后，是否自动删除队列</span></span><br><span class="line">        <span class="keyword">boolean</span> autoDelete = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(QUEUE_NAME, durable, exclusive, autoDelete);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置交换器，这里我使用的是 topic exchange</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TopicExchange <span class="title">exchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 是否持久化</span></span><br><span class="line">        <span class="keyword">boolean</span> durable = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// 当所有消费客户端连接断开后，是否自动删除队列</span></span><br><span class="line">        <span class="keyword">boolean</span> autoDelete = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TopicExchange(EXCHANGES_NAME, durable, autoDelete);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定路由</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">binding</span><span class="params">(Queue queue, TopicExchange exchange)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(ROUTING_KEY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SimpleMessageListenerContainer <span class="title">container</span><span class="params">(ConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">        SimpleMessageListenerContainer container = <span class="keyword">new</span> SimpleMessageListenerContainer();</span><br><span class="line">        container.setConnectionFactory(connectionFactory);</span><br><span class="line">        container.setQueueNames(QUEUE_NAME);</span><br><span class="line">        container.setMessageListener(receiver());</span><br><span class="line">        <span class="comment">//container.setMaxConcurrentConsumers(1);</span></span><br><span class="line">        <span class="comment">//container.setConcurrentConsumers(1); 默认为1</span></span><br><span class="line">        <span class="comment">//container.setExposeListenerChannel(true);</span></span><br><span class="line">         container.setAcknowledgeMode(AcknowledgeMode.MANUAL); <span class="comment">// 设置为手动，默认为 AUTO，如果设置了手动应答 basicack，就要设置manual</span></span><br><span class="line">        <span class="keyword">return</span> container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageReceiver <span class="title">receiver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MessageReceiver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h5 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSender</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * logger</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(MessageSender.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// public void convertAndSend(String exchange, String routingKey, final Object object, CorrelationData correlationData)</span></span><br><span class="line">        <span class="comment">// exchange:    交换机名称</span></span><br><span class="line">        <span class="comment">// routingKey:  路由关键字</span></span><br><span class="line">        <span class="comment">// object:      发送的消息内容</span></span><br><span class="line">        <span class="comment">// correlationData:消息ID</span></span><br><span class="line">        CorrelationData correlationId = <span class="keyword">new</span> CorrelationData(UUID.randomUUID().toString());</span><br><span class="line">        <span class="comment">// ConfirmListener是当消息无法发送到Exchange被触发，此时Ack为False，这时cause包含发送失败的原因，例如exchange不存在时</span></span><br><span class="line">        <span class="comment">// 需要在系统配置文件中设置 publisher-confirms: true</span></span><br><span class="line">        <span class="keyword">if</span> (!rabbitTemplate.isConfirmListener()) &#123;</span><br><span class="line">            rabbitTemplate.setConfirmCallback((correlationData, ack, cause) -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (ack) &#123;</span><br><span class="line">                    log.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt; 消息id:&#123;&#125; 发送成功"</span>, correlationData.getId());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    log.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt; 消息id:&#123;&#125; 发送失败"</span>, correlationData.getId());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ReturnCallback 是在交换器无法将路由键路由到任何一个队列中，会触发这个方法。</span></span><br><span class="line">        <span class="comment">// 需要在系统配置文件中设置 publisher-returns: true</span></span><br><span class="line">        rabbitTemplate.setReturnCallback((message, replyCode, replyText, exchange, routingKey) -&gt; &#123;</span><br><span class="line">            log.info(<span class="string">"消息id：&#123;&#125; 发送失败"</span>, message.getMessageProperties().getCorrelationId());</span><br><span class="line">        &#125;);</span><br><span class="line">        rabbitTemplate.convertAndSend(RabbitMQConfig.EXCHANGES_NAME, RabbitMQConfig.ROUTING_KEY, <span class="string">"&gt;&gt;&gt;&gt;&gt; Hello World"</span>, correlationId);</span><br><span class="line">        log.info(<span class="string">"Already sent message."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试发送消息"><a href="#测试发送消息" class="headerlink" title="测试发送消息"></a>测试发送消息</h5><p>先启动系统启动类，消费者开始订阅，启动测试类发送消息。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootRabbitmqApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> MessageSender sender;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReceiver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		sender.send();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>可以在消费者接收到信息，并且发送端将打出日志 成功发送消息的记录，也可以测试下 <code>Publisher Confirms and Returns机制</code> 主要是测试 <code>ConfirmCallback</code> 和 <code>ReturnCallback</code> 这两个方法。</p><ul><li><code>ConfirmCallback</code> ，确认消息是否到达交换器，例如我们发送一个消息到一个你没有创建过的 交换器上面去，看看情况，</li><li><code>ReturnCallback</code>，确认消息是否到达队列，我们可以这样测试，定义一个路由键，不会被任何队列订阅到，最后查看结果就可以了。</li></ul><p><a href="https://github.com/kaimz/rabbitmq-prac/tree/master/springboot-rabbitmq" rel="external nofollow noopener noreferrer" target="_blank">学习源码</a></p><h4 id="使用注解的方式"><a href="#使用注解的方式" class="headerlink" title="使用注解的方式"></a>使用注解的方式</h4><h5 id="引入依赖和连接参数"><a href="#引入依赖和连接参数" class="headerlink" title="引入依赖和连接参数"></a>引入依赖和连接参数</h5><p>跟文章第一步的配置一样的。</p><h5 id="消费者-1"><a href="#消费者-1" class="headerlink" title="消费者"></a>消费者</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Log</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无返回消息的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(value = <span class="meta">@Queue</span>(value = Constant.QUEUE_NAME, durable = <span class="string">"true"</span>, exclusive = <span class="string">"false"</span>, autoDelete = <span class="string">"false"</span>),</span><br><span class="line">            exchange = <span class="meta">@Exchange</span>(value = Constant.EXCHANGES_NAME, ignoreDeclarationExceptions = <span class="string">"true"</span>, type = ExchangeTypes.TOPIC, autoDelete = <span class="string">"false"</span>),</span><br><span class="line">            key = Constant.ROUTING_KEY))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(<span class="keyword">byte</span>[] message)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; receive："</span> + <span class="keyword">new</span> String(message));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置有返回消息的</span></span><br><span class="line"><span class="comment">     * 需要注意的是，</span></span><br><span class="line"><span class="comment">     * 1. 在消息的在生产者（发送消息端）一定要使用 SendAndReceive(……) 这种带有 receive 的方法，否则会抛异常，不捕获会死循环。</span></span><br><span class="line"><span class="comment">     * 2. 该方法调用时会锁定当前线程，并且有可能会造成MQ的性能下降或者服务端/客户端出现死循环现象，请谨慎使用。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(value = <span class="meta">@Queue</span>(value = Constant.QUEUE_NAME, durable = <span class="string">"true"</span>, exclusive = <span class="string">"false"</span>, autoDelete = <span class="string">"false"</span>),</span><br><span class="line">            exchange = <span class="meta">@Exchange</span>(value = Constant.EXCHANGES_NAME, ignoreDeclarationExceptions = <span class="string">"true"</span>, type = ExchangeTypes.TOPIC, autoDelete = <span class="string">"false"</span>),</span><br><span class="line">            key = Constant.ROUTING_REPLY_KEY))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">receiveAndReply</span><span class="params">(<span class="keyword">byte</span>[] message)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; receive："</span> + <span class="keyword">new</span> String(message));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; I got the message"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要是使用到 <code>@RabbitListener</code>，虽然看起来参数很多，仔细的你会发现这个和写配置类里面的基本属性是一摸一样的，没有任何区别。</p><p>需要注意的是我在这里多做了个有返回值的消息，这个使用异常的话，会不断重试消息，从而阻塞了线程。而且使用它的时候只能使用带有 <code>receive</code> 的方法给它发送消息。</p><h5 id="生产者-1"><a href="#生产者-1" class="headerlink" title="生产者"></a>生产者</h5><p>生产者没什么变化。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSender</span> <span class="keyword">implements</span> <span class="title">RabbitTemplate</span>.<span class="title">ConfirmCallback</span>, <span class="title">RabbitTemplate</span>.<span class="title">ReturnCallback</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * logger</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(MessageSender.class);</span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入 RabbitTemplate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MessageSender</span><span class="params">(RabbitTemplate rabbitTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rabbitTemplate = rabbitTemplate;</span><br><span class="line">        <span class="keyword">this</span>.rabbitTemplate.setConfirmCallback(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.rabbitTemplate.setReturnCallback(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试无返回消息的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CorrelationData correlationData = <span class="keyword">new</span> CorrelationData(UUID.randomUUID().toString());</span><br><span class="line">        rabbitTemplate.convertAndSend(Constant.EXCHANGES_NAME, Constant.ROUTING_KEY, <span class="string">"&gt;&gt;&gt;&gt;&gt;&gt; Hello World"</span>.getBytes(), correlationData);</span><br><span class="line">        log.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Already sent message"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试有返回消息的，需要注意一些问题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendAndReceive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CorrelationData correlationData = <span class="keyword">new</span> CorrelationData(UUID.randomUUID().toString());</span><br><span class="line">        Object o = rabbitTemplate.convertSendAndReceive(Constant.EXCHANGES_NAME, Constant.ROUTING_REPLY_KEY, <span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; Hello World Second"</span>.getBytes(), correlationData);</span><br><span class="line">        log.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &#123;&#125;"</span>, Objects.toString(o));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Confirmation callback.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> correlationData correlation data for the callback.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ack             true for ack, false for nack</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause           An optional cause, for nack, when available, otherwise null.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confirm</span><span class="params">(CorrelationData correlationData, <span class="keyword">boolean</span> ack, String cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ack) &#123;</span><br><span class="line">            log.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt; 消息id:&#123;&#125; 发送成功"</span>, correlationData.getId());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt; 消息id:&#123;&#125; 发送失败"</span>, correlationData.getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returned message callback.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message    the returned message.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> replyCode  the reply code.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> replyText  the reply text.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exchange   the exchange.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> routingKey the routing key.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnedMessage</span><span class="params">(Message message, <span class="keyword">int</span> replyCode, String replyText, String exchange, String routingKey)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"消息id：&#123;&#125; 发送失败"</span>, message.getMessageProperties().getCorrelationId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootAnnotationApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageSender sender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sender.send();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendAndReceive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sender.sendAndReceive();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/kaimz/rabbitmq-prac/tree/master/springboot-annotation" rel="external nofollow noopener noreferrer" target="_blank">学习源码</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习 RabbitMQ 的基础]]></title>
      <url>/rabbitmq-base.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>RabbitMQ是实现AMQP（高级消息队列协议）的消息中间件的一种，最初起源于金融系统，用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。RabbitMQ主要是为了实现系统之间的双向解耦而实现的。当生产者大量产生数据时，消费者无法快速消费，那么需要一个中间层。保存这个数据。</p><p>AMQP <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top-right hint--error hint--large" aria-label="Advanced Message Queuing Protocol，高级消息队列协议">[1]</span></a></sup>，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。</p></blockquote><p>关于学习 Rabiit 的相关笔记，学习的内容来自<a href="http://blog.720ui.com/columns/rabbitmq_action_all/" rel="external nofollow noopener noreferrer" target="_blank">RabbitMQ 实战教程 文集</a>，按照自己的思路记了个笔记。</p><p><a href="https://github.com/kaimz/rabbitmq-prac/tree/master/rabbitmq" rel="external nofollow noopener noreferrer" target="_blank">个人学习代码</a><br><a id="more"></a></p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="加入依赖"><a href="#加入依赖" class="headerlink" title="加入依赖"></a>加入依赖</h4><p>在 <code>pom.xml</code> 中加入 <code>amqp</code> 的依赖 ，它封装了对 RabbitMQ 的支持相关依赖信息：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.rabbitmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>amqp-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h4><p>发送消息的程序。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"hello"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建连接</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">// 设置 RabbitMQ 的主机名</span></span><br><span class="line">        factory.setHost(<span class="string">"k.wuwii.com"</span>);</span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        <span class="comment">// 创建一个连接</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="comment">// 创建一个通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 指定一个队列</span></span><br><span class="line">        <span class="comment">// queueDeclare(String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object&gt; arguments)</span></span><br><span class="line">        <span class="comment">// 参数1 queue ：队列名</span></span><br><span class="line">        <span class="comment">// 参数2 durable ：是否持久化</span></span><br><span class="line">        <span class="comment">// 参数3 exclusive ：仅创建者可以使用的私有队列，断开后自动删除</span></span><br><span class="line">        <span class="comment">// 参数4 autoDelete : 当所有消费客户端连接断开后，是否自动删除队列</span></span><br><span class="line">        <span class="comment">// 参数5 arguments</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 发送消息</span></span><br><span class="line">        String message = <span class="string">"Hello World!"</span>;</span><br><span class="line">        <span class="comment">// basicPublish(String exchange, String routingKey, BasicProperties props, byte[] body)</span></span><br><span class="line">        <span class="comment">// 参数1 exchange ：交换器</span></span><br><span class="line">        <span class="comment">// 参数2 routingKey ： 路由键，我们将要把消息发送到哪个队列</span></span><br><span class="line">        <span class="comment">// 参数3 props ： 消息的其他参数</span></span><br><span class="line">        <span class="comment">// 参数4 body ： 消息体</span></span><br><span class="line">        channel.basicPublish(<span class="string">""</span>, QUEUE_NAME, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">" [x] Sent '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line">        <span class="comment">// 关闭频道和连接</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h4><p>等待接收消息的程序。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String QUEUE_NAME = <span class="string">"hello"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建连接</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        <span class="comment">// 设置 RabbitMQ 的主机名，默认localhost</span></span><br><span class="line">        factory.setHost(<span class="string">"k.wuwii.com"</span>);</span><br><span class="line">        <span class="comment">// 设置端口， 默认 端口5672</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        <span class="comment">// 设置 Username，默认 guest</span></span><br><span class="line">        factory.setUsername(<span class="string">"kronchan"</span>);</span><br><span class="line">        <span class="comment">// 设置 Password，默认 guest</span></span><br><span class="line">        factory.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">        <span class="comment">// 创建一个连接</span></span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        <span class="comment">// 创建一个通道</span></span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 指定一个队列</span></span><br><span class="line">        <span class="comment">// queueDeclare(String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object&gt; arguments)</span></span><br><span class="line">        <span class="comment">// 参数1 queue ：队列名</span></span><br><span class="line">        <span class="comment">// 参数2 durable ：是否持久化</span></span><br><span class="line">        <span class="comment">// 参数3 exclusive ：仅创建者可以使用的私有队列，断开后自动删除</span></span><br><span class="line">        <span class="comment">// 参数4 autoDelete : 当所有消费客户端连接断开后，是否自动删除队列</span></span><br><span class="line">        <span class="comment">// 参数5 arguments</span></span><br><span class="line">        channel.queueDeclare(QUEUE_NAME, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">        System.out.println(<span class="string">" [*] Waiting for messages. To exit press CTRL+C"</span>);</span><br><span class="line">        <span class="comment">// 创建队列消费者</span></span><br><span class="line">        com.rabbitmq.client.Consumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       AMQP.BasicProperties properties, <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                String message = <span class="keyword">new</span> String(body, <span class="string">"UTF-8"</span>);</span><br><span class="line">                System.out.println(<span class="string">" [x] Received '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// basicConsume(String queue, boolean autoAck, Consumer callback)</span></span><br><span class="line">        <span class="comment">// 参数1 queue ：队列名</span></span><br><span class="line">        <span class="comment">// 参数2 autoAck ： 是否自动ACK，消息应答，为true关闭它</span></span><br><span class="line">        <span class="comment">// 参数3 callback ： 消费者对象的一个接口，用来配置回调</span></span><br><span class="line">        channel.basicConsume(QUEUE_NAME, <span class="keyword">true</span>, consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>执行完生产者和消费者，后消费者可以接收到到对应的消息</p><h4 id="工作队列"><a href="#工作队列" class="headerlink" title="工作队列"></a>工作队列</h4><p>队列类似于邮箱。虽然消息通过 RabbitMQ 在你的应用中传递，但是它们只能存储在队列中。队列只受主机的内存和磁盘限制的限制，它本质上是一个大的消息缓冲区。不同的生产者可以通过同一个队列发送消息，此外，不同的消费者也可以从同一个队列上接收消息。<br><img src="http://7xivgs.com1.z0.glb.clouddn.com/rabbitmq_python-two.png" alt="image"></p><h5 id="轮询调度（Round-robin-dispatching）"><a href="#轮询调度（Round-robin-dispatching）" class="headerlink" title="轮询调度（Round-robin dispatching）"></a>轮询调度（Round-robin dispatching）</h5><p>使用任务队列的有点之一就是能够轻松并行的执行任务，实际上就是多建立几个通道 <code>Channel</code> 来工作。</p><h5 id="消息应答（Message-acknowledgment）"><a href="#消息应答（Message-acknowledgment）" class="headerlink" title="消息应答（Message acknowledgment）"></a>消息应答（Message acknowledgment）</h5><p>执行一个任务可能需要几秒钟。你可能会想，如果一个消费者开始一个长期的任务，并且只有部分地完成它，会发生什么事情？使用我们当前的代码，一旦 RabbitMQ 向客户发送消息，它立即将其从内存中删除。在这种情况下，如果你杀死正在执行任务的某个工作进程，我们会丢失它正在处理的信息。我们还会丢失所有发送给该特定工作进程但尚未处理的消息。<br>但是，我们不想失去任何消息。如果某个工作进程被杀死时，我们希望把这个任务交给另一个工作进程。</p><p>但是，我们不想失去任何消息。如果某个工作进程被杀死时，我们希望把这个任务交给另一个工作进程。</p><p>为了确保消息永远不会丢失，RabbitMQ 支持消息应答。从消费者发送一个确认信息告诉 RabbitMQ 已经收到消息并已经被接收和处理，然后RabbitMQ 可以自由删除它。</p><p>如果消费者被杀死而没有发送应答，RabbitMQ 会认为该信息没有被完全的处理，然后将会重新转发给别的消费者。如果同时有其他消费者在线，则会迅速将其重新提供给另一个消费者。这样就可以确保没有消息丢失，即使工作进程偶尔也会死亡。</p><p>简单验证下，开启两个消费者，接收消息的时候，关闭一个，例外的一个消费者还是只是接收到原来它自己的那一部分消息。</p><p>完善，在其中一个消费者上面关闭自动应答机制：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> ack = <span class="keyword">false</span> ;  </span><br><span class="line">channel.basicConsume(QUEUE_NAME, ack, consumer);</span><br></pre></td></tr></table></figure><p></p><p>然后，每次处理完成一个消息后，手动发送一次应答。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel.basicAck(delivery.getEnvelope().getDeliveryTag(), <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><p>接收消息的时候然后异常让它中断，会发现其他的消费者会接收到其他的所有的消息。</p><h5 id="消息持久化（Message-durability）"><a href="#消息持久化（Message-durability）" class="headerlink" title="消息持久化（Message durability）"></a>消息持久化（Message durability）</h5><p>当 RabbitMQ 退出或崩溃时，将会丢失所有的队列和信息，除非你告诉它不要丢失。需要两件事来确保消息不丢失：我们需要分别将队列和消息标记为持久化。</p><p>首先，我们需要确保 RabbitMQ 永远不会失去我们的队列。为了这样做，我们需要将其声明为持久化的。</p><p>在生产者上面设置：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> durable = <span class="keyword">true</span>;</span><br><span class="line">channel.queueDeclare(<span class="string">"hello_dirable"</span>, durable, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p></p><p>其次，我们需要标识我们的信息为持久化的。通过设置 <code>MessageProperties</code> 值为 <code>PERSISTENT_TEXT_PLAIN</code>。</p><h5 id="公平转发（Fair-dispatch）"><a href="#公平转发（Fair-dispatch）" class="headerlink" title="公平转发（Fair dispatch）"></a>公平转发（Fair dispatch）</h5><p>设置 RabbitMQ 往<strong>空闲的工作线程</strong>中发送任务，避免某些工作线程的任务过高，而部分工作线程空闲的问题。</p><p>在生产者的管道设置参数：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> prefetchCount = <span class="number">1</span>;</span><br><span class="line">channel.basicQos(prefetchCount) ;</span><br></pre></td></tr></table></figure><p></p><h5 id="临时队列（Temporary-queues）"><a href="#临时队列（Temporary-queues）" class="headerlink" title="临时队列（Temporary queues）"></a>临时队列（Temporary queues）</h5><p>之前，我们都是使用的队列指定了一个特定的名称。不过，对于我们的日志系统而言，我们并不关心队列的名称。我们想要接收到所有的消息，而且我们也只对当前正在传递的消息感兴趣。要解决我们需求，需要做两件事。</p><p>首先，每当我们连接到 RabbitMQ，我们需要一个新的空的队列。为此，我们可以创建一个具有随机名称的队列，或者甚至更好 - 让服务器或者，让服务器为我们选择一个随机队列名称。</p><p>其次，一旦消费者与 RabbitMQ 断开，消费者所接收的那个队列应该被自动删除。</p><p>在 Java 客户端中，我们可以使用 queueDeclare() 方法来创建一个非持久的、唯一的、自动删除的队列，且队列名称由服务器随机产生。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String queueName = channel.queueDeclare().getQueue();</span><br></pre></td></tr></table></figure><p>此时，queueName 包含一个随机队列名称。</p><h4 id="交换器（Exchanges）"><a href="#交换器（Exchanges）" class="headerlink" title="交换器（Exchanges）"></a>交换器（Exchanges）</h4><p>RabbitMQ 消息模型的核心思想是，生产者不直接发送任何消息给队列。实际上，一般的情况下，生产者甚至不知道消息应该发送到哪些队列。<br>相反的，生产者只能将信息发送到交换器。交换器是非常简单的。它一边收到来自生产者的消息，另一边将它们推送到队列。交换器必须准确知道接收到的消息如何处理。是否被添加到一个特定的队列吗？是否应该追加到多个队列？或者是否应该被丢弃？这些规则通过交换器类型进行定义。<br><img src="http://7xivgs.com1.z0.glb.clouddn.com/rabbitmq_exchanges.png" alt="image"><br>交换器一共四种类型：<code>direct</code>、<code>topic</code>、<code>headers</code>、<code>fanout</code>。</p><h5 id="fanout"><a href="#fanout" class="headerlink" title="fanout"></a>fanout</h5><p>将所有收到的消息广播到所有它所知道的队列。<br><img src="http://7xivgs.com1.z0.glb.clouddn.com/rabbitmq_bindings.png" alt="image"></p><ul><li><p>生产者，指定一个交换器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutProducer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"logs"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.setHost(<span class="string">"k.wuwii.com"</span>);</span><br><span class="line">        factory.setUsername(<span class="string">"kronchan"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 指定一个交换器</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">"fanout"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开始写生产者 BIGIN</span></span><br><span class="line">        String message = <span class="string">"error log"</span>;</span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME, <span class="string">""</span>, <span class="keyword">null</span>, message.getBytes());</span><br><span class="line">        System.out.println(<span class="string">" &gt;&gt;&gt;&gt;&gt;&gt;&gt; sent logs"</span>);</span><br><span class="line">        <span class="comment">// 生产者 END</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>消费者，我们创建两个消费者，绑定我们指定的交换器和队列：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutConsumer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"logs"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.setHost(<span class="string">"k.wuwii.com"</span>);</span><br><span class="line">        factory.setUsername(<span class="string">"kronchan"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 指定一个交换器</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">"fanout"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开始创建消费者 BEGIN</span></span><br><span class="line">        <span class="comment">// 创建一个非持久的，唯一性，自动删除的队列</span></span><br><span class="line">        String queueName = channel.queueDeclare().getQueue();</span><br><span class="line">        <span class="comment">// 绑定交换器和队列</span></span><br><span class="line">        <span class="comment">// queueBind(String queue, String exchange, String routingKey)</span></span><br><span class="line">        <span class="comment">// 参数1 queue ：队列名</span></span><br><span class="line">        <span class="comment">// 参数2 exchange ：交换器名</span></span><br><span class="line">        <span class="comment">// 参数3 routingKey ：路由键名</span></span><br><span class="line">        channel.queueBind(queueName, EXCHANGE_NAME, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Consumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                String message = <span class="keyword">new</span> String(body, <span class="string">"UTF-8"</span>);</span><br><span class="line">                System.out.println(<span class="string">" Received '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(queueName, <span class="keyword">true</span>, consumer);</span><br><span class="line">        <span class="comment">// 创建消费者完成 END</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        FanoutConsumer fanoutConsumer = <span class="keyword">new</span> FanoutConsumer();</span><br><span class="line">        fanoutConsumer.execute();</span><br><span class="line">        FanoutConsumer fanoutConsumer1 = <span class="keyword">new</span> FanoutConsumer();</span><br><span class="line">        fanoutConsumer.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>先启动两个消费者注册交换器，再去启动生产者。结果是两个交换器都接收到消息。</p><h5 id="direct-直接交换"><a href="#direct-直接交换" class="headerlink" title="direct 直接交换"></a>direct 直接交换</h5><p><img src="http://7xivgs.com1.z0.glb.clouddn.com/rabbitmq_direct-exchange.png" alt="image"><br>涉及到 <code>路由键值</code>，也就是前面用的主题。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// queueBind(String queue, String exchange, String routingKey)</span></span><br><span class="line">        <span class="comment">// 参数1 queue ：队列名</span></span><br><span class="line">        <span class="comment">// 参数2 exchange ：交换器名</span></span><br><span class="line">        <span class="comment">// 参数3 routingKey ：路由键名</span></span><br></pre></td></tr></table></figure><p></p><p>就是一个队列中有多个路由键值。</p><p>其中，第一个队列与绑定键 orange 绑定，第二个队列有两个绑定，一个绑定键为 black，另一个绑定为 green。在这样的设置中，具有 orange 的交换器的消息将被路由到队列 Q1。具有 black 或 green 的交换器的消息将转到 Q2。所有其他消息将被丢弃。</p><p>支持多重绑定<br><img src="http://7xivgs.com1.z0.glb.clouddn.com/rabbitmq_direct-exchange-multiple.png" alt="image"><br>此外，使用相同的绑定键绑定多个队列是完全合法的。在我们的示例中，我们可以在 X 和 Q1 之间添加绑定键 black。在这种情况下，direct 类型的交换器将消息广播到所有匹配的队列 Q1 和 Q2。</p><h5 id="topic"><a href="#topic" class="headerlink" title="topic"></a>topic</h5><blockquote><p>使用 topic 类型的交换器，不能有任意的绑定键，它必须是由点隔开的一系列的标识符组成。标识符可以是任何东西，但通常它们指定与消息相关联的一些功能。其中，有几个有效的绑定键，例如 <code>stock.usd.nyse</code>， <code>nyse.vmw</code>， <code>quick.orange.rabbit</code>。可以有任何数量的标识符，最多可达 <strong>255</strong> 个字节。</p></blockquote><p>topic 类型的交换器和 direct 类型的交换器很类似，一个特定路由的消息将被传递到与匹配的绑定键绑定的匹配的所有队列。关于绑定键有两种有两个重要的特殊情况：</p><ul><li><code>*</code> 可以匹配一个标识符。</li><li><code>#</code> 可以匹配零个或多个标识符。</li></ul><p>例如：<br><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/rabbitmq/1.png" alt="image"></p><p>上面我用两个消费者分别订阅了主题为 <code>*.female.*</code> 和 <code>#.asia</code> ，服务端发送两个消息，对他们进行匹配，最后获得到结果。</p><ol><li><p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicProducer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGES_NAME = <span class="string">"topic_logs"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String[] TOPICS = &#123;<span class="string">"animal.female.pig"</span>, <span class="string">"man.female.asia"</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.setHost(<span class="string">"k.wuwii.com"</span>);</span><br><span class="line">        factory.setUsername(<span class="string">"kronchan"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 指定一个交换器</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGES_NAME, <span class="string">"topic"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开始写生产者 BIGIN</span></span><br><span class="line">        String message = <span class="string">"error log"</span>;</span><br><span class="line">        channel.basicPublish(EXCHANGES_NAME, TOPICS[<span class="number">0</span>], <span class="keyword">null</span>, <span class="string">"猪猪"</span>.getBytes());</span><br><span class="line">        channel.basicPublish(EXCHANGES_NAME, TOPICS[<span class="number">1</span>], <span class="keyword">null</span>, <span class="string">"亚洲女性"</span>.getBytes());</span><br><span class="line">        System.out.println(<span class="string">" &gt;&gt;&gt;&gt;&gt;&gt;&gt; sent logs"</span>);</span><br><span class="line">        <span class="comment">// 生产者 END</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicConsumer1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String EXCHANGE_NAME = <span class="string">"topic_logs"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String TOPIC = <span class="string">"*.female.*"</span>; <span class="comment">// 接收所有雌性的</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, TimeoutException </span>&#123;</span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        factory.setHost(<span class="string">"k.wuwii.com"</span>);</span><br><span class="line">        factory.setUsername(<span class="string">"kronchan"</span>);</span><br><span class="line">        factory.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">        Connection connection = factory.newConnection();</span><br><span class="line">        Channel channel = connection.createChannel();</span><br><span class="line">        <span class="comment">// 指定一个交换器</span></span><br><span class="line">        channel.exchangeDeclare(EXCHANGE_NAME, <span class="string">"topic"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开始创建消费者 BEGIN</span></span><br><span class="line">        <span class="comment">// 创建一个非持久的，唯一性，自动删除的队列</span></span><br><span class="line">        String queueName = channel.queueDeclare().getQueue();</span><br><span class="line">        <span class="comment">// 绑定交换器和队列</span></span><br><span class="line">        <span class="comment">// queueBind(String queue, String exchange, String routingKey)</span></span><br><span class="line">        <span class="comment">// 参数1 queue ：队列名</span></span><br><span class="line">        <span class="comment">// 参数2 exchange ：交换器名</span></span><br><span class="line">        <span class="comment">// 参数3 routingKey ：路由键名</span></span><br><span class="line">        channel.queueBind(queueName, EXCHANGE_NAME, TOPIC);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Consumer consumer = <span class="keyword">new</span> DefaultConsumer(channel) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       <span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                String message = <span class="keyword">new</span> String(body, <span class="string">"UTF-8"</span>);</span><br><span class="line">                System.out.println(<span class="string">" Received '"</span> + message + <span class="string">"'"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        channel.basicConsume(queueName, <span class="keyword">true</span>, consumer);</span><br><span class="line">        <span class="comment">// 创建消费者完成 END</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="Headers-Exchange"><a href="#Headers-Exchange" class="headerlink" title="Headers Exchange"></a>Headers Exchange</h5><p>headers 也是根据规则匹配, 相较于 direct 和 topic 固定地使用 routing_key , headers 则是一个自定义匹配规则的类型. 在队列与交换器绑定时, 会设定一组键值对规则, 消息中也包括一组键值对( headers 属性), 当这些键值对有一对, 或全部匹配时, 消息被投送到对应队列。</p><h4 id="消息确认机制"><a href="#消息确认机制" class="headerlink" title="消息确认机制"></a>消息确认机制</h4><p>虽然之前我们使用消息持久化解决了服务器退出或者崩溃后造成的消息丢失的情况，但是当我们生产者发送消息的时候，中间出现了问题，消息并没有成功到达消息代理服务器，提供了两种解决方案：</p><ol><li>事务机制，</li><li>confirm模式。</li></ol><h5 id="事务机制"><a href="#事务机制" class="headerlink" title="事务机制"></a>事务机制</h5><p>有关事务机制的方法有三个，一般情况下需要一起配合起来使用：</p><ol><li><code>txSelect</code>用于将当前channel设置成transaction模式，</li><li><code>txCommit</code>用于提交事务，</li><li><code>txRollback</code>用于回滚事务。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    channel.txSelect();</span><br><span class="line">    channel.basicPublish(exchange, routingKey, MessageProperties.PERSISTENT_TEXT_PLAIN, msg.getBytes());</span><br><span class="line">    channel.txCommit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    channel.txRollback();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用事务机制的话会降低RabbitMQ的性能，可以使用下面的 Confirm 模式。</p><h5 id="Confirm模式"><a href="#Confirm模式" class="headerlink" title="Confirm模式"></a>Confirm模式</h5><p>原理</p><p>生产者将信道设置成confirm模式，一旦信道进入confirm模式，所有在该信道上面发布的消息都会被指派一个唯一的ID(从1开始)，一旦消息被投递到所有匹配的队列之后，消息代理服务器就会发送一个确认给生产者（包含消息的唯一ID）,这就使得生产者知道消息已经正确到达目的队列了，如果消息和队列是可持久化的，那么确认消息会将消息写入磁盘之后发出，消息代理服务器回传给生产者的确认消息中 <code>deliver-tag</code>域包含了确认消息的序列号，此外消息服务器也可以设置basic.ack的multiple域，表示到这个序列号之前的所有消息都已经得到了处理。</p><p>confirm模式最大的好处在于他是异步的，一旦发布一条消息，生产者应用程序就可以在等信道返回确认的同时继续发送下一条消息，当消息最终得到确认之后，生产者应用便可以通过回调方法来处理该确认消息，如果RabbitMQ因为自身内部错误导致消息丢失，就会发送一条nack消息，生产者应用程序同样可以在回调方法中处理该nack消息。</p><p>在channel 被设置成 confirm 模式之后，所有被 publish 的后续消息都将被 confirm（即 ack） 或者被nack一次。但是没有对消息被 confirm 的快慢做任何保证，并且同一条消息不会既被 confirm又被nack 。</p><ol><li>普通confirm模式：每发送一条消息后，调用waitForConfirms()方法，等待服务器端confirm。实际上是一种串行confirm了。</li><li>批量confirm模式：每发送一批消息后，调用waitForConfirms()方法，等待服务器端confirm。</li><li>异步confirm模式：提供一个回调方法，服务端confirm了一条或者多条消息后Client端会回调这个方法。</li></ol><p>测试以及使用参考 <a href="https://blog.csdn.net/u013256816/article/details/55515234" rel="external nofollow noopener noreferrer" target="_blank">RabbitMQ之消息确认机制（事务+Confirm）</a></p><h3 id="中途出现的问题"><a href="#中途出现的问题" class="headerlink" title="中途出现的问题"></a>中途出现的问题</h3><ol><li>使用自己新增的账户进去的时候，给的是管理员权限，但是使用应用程序进行登陆的时候，不能进行登陆。<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: com.rabbitmq.client.ShutdownSignalException: connection error; protocol method: #method&lt;connection.close&gt;(reply-code=530, reply-text=NOT_ALLOWED - access to vhost '/' refused for user 'kronchan', class-id=10, method-id=40)</span><br></pre></td></tr></table></figure></li></ol><p>原因是该账户没有访问权限 <code>/</code>，进入 <code>rabbitmq</code> 机器中使用命令<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl  set_permissions -p / username <span class="string">'.*'</span> <span class="string">'.*'</span> <span class="string">'.*'</span></span><br></pre></td></tr></table></figure><p></p><p>该命令使用户 <code>username</code> 具有 <code>/</code>这个 <code>virtual host</code> 中所有资源的配置、写、读权限以便管理其中的资源。<a href="http://blog.csdn.net/godspeedlaile9/article/details/50594488" rel="external nofollow noopener noreferrer" target="_blank">参考</a></p><ol start="2"><li>如果需要设置持久的队列，要持久的队列必须是目前不存在的，不然会抛出异常<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//The AMQP operation was interrupted: AMQP close-reason, initiated by Peer, code=406, text=&quot;PRECONDITION_FAILED</span><br><span class="line">    // - inequivalent arg &apos;durable&apos; for queue &apos;queuename&apos; in vhost &apos;/&apos;: received &apos;false&apos; but current is &apos;true&apos;&quot;,</span><br></pre></td></tr></table></figure></li></ol><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none;padding-left:0;margin-left:40px"><li id="fn:1"><span style="display:inline-block;vertical-align:top;padding-right:10px;margin-left:-40px">1.</span><span style="display:inline-block;vertical-align:top;margin-left:10px">Advanced Message Queuing Protocol，高级消息队列协议<a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mq </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习Spring Boot：（二十五）使用 Redis 实现数据缓存]]></title>
      <url>/springboot-25.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>由于 Ehcache 存在于单个 java 程序的进程中，无法满足多个程序分布式的情况，需要将多个服务器的缓存集中起来进行管理，需要一个缓存的寄存器，这里使用的是 Redis。</p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>当应用程序要去缓存中读取数据，但是缓存中没有找到该数据，则重新去数据库中获取数据，然后将数据存入缓存中。<br>还有当我们需要更新或者删除缓存中的数据时候，需要让缓存失效。</p><p><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/springboot-cache/3.png" alt="cache"></p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>加入依赖:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在系统配置文件中加入 redis 的连接参数:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="number">192.168</span><span class="number">.19</span><span class="number">.200</span> <span class="comment"># 120.79.208.199 # host ,默认 localhost</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">6379</span> <span class="comment"># 端口号，默认6379</span></span><br><span class="line"><span class="attr">    pool:</span></span><br><span class="line">    <span class="comment"># 设置都是默认值，可以按需求设计</span></span><br><span class="line"><span class="attr">      max-active:</span> <span class="number">8</span> <span class="comment"># 可用连接实例的最大数目，默认值为8；如果赋值为-1，则表示不限制；</span></span><br><span class="line"><span class="attr">      max-idle:</span> <span class="number">8</span>  <span class="comment"># 控制一个pool最多有多少个状态为idle(空闲的)的redis实例，默认值也是8。</span></span><br><span class="line"><span class="attr">      max-wait:</span> <span class="bullet">-1</span> <span class="comment"># 等待可用连接的最大时间，单位毫秒，默认值为-1，表示永不超时。</span></span><br><span class="line"><span class="attr">      min-idle:</span> <span class="number">0</span> <span class="comment"># 控制一个pool最少有多少个状态为idle(空闲的)的redis实例，默认值为0。</span></span><br><span class="line"><span class="attr">    timeout:</span> <span class="number">0</span> <span class="comment"># 连接超时时间 单位 ms，默认为0</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">master</span> <span class="comment"># 密码，根据自己的 redis 设计，默认为空</span></span><br><span class="line"><span class="attr">  cache:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">redis</span> <span class="comment"># 设置缓存类型</span></span><br></pre></td></tr></table></figure><p>然后在系统入口启动类上面加入打开缓存的注解 <code>@EnableCaching</code>。<br>如果没启用其他缓存，这样就自动打开 redis 缓存。</p><h4 id="1-5-X-版本"><a href="#1-5-X-版本" class="headerlink" title="1.5.X 版本"></a>1.5.X 版本</h4><p>自定义注册 RedisCacheManager，设置相关参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">(RedisTemplate redisTemplate)</span> </span>&#123;</span><br><span class="line">    RedisCacheManager redisCacheManager = <span class="keyword">new</span> RedisCacheManager(redisTemplate);</span><br><span class="line">    <span class="comment">// 设置缓存最大时间 24 h</span></span><br><span class="line">    redisCacheManager.setDefaultExpiration(<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>);</span><br><span class="line">    <span class="keyword">return</span> redisCacheManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-0-X-版本"><a href="#2-0-X-版本" class="headerlink" title="2.0.X 版本"></a>2.0.X 版本</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisCacheConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化为默认设置</span></span><br><span class="line">        RedisCacheManager redisCacheManager = RedisCacheManager.create(factory);</span><br><span class="line">        <span class="comment">// 设置缓存最大时间</span></span><br><span class="line">        <span class="comment">/*RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig();  // 生成一个默认配置，通过config对象即可对缓存进行自定义配置</span></span><br><span class="line"><span class="comment">        config = config.entryTtl(Duration.ofMinutes(1))     // 设置缓存的默认过期时间，也是使用Duration设置</span></span><br><span class="line"><span class="comment">                .disableCachingNullValues();     // 不缓存空值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        <span class="keyword">return</span> redisCacheManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在业务层是用缓存"><a href="#在业务层是用缓存" class="headerlink" title="在业务层是用缓存"></a>在业务层是用缓存</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@CacheConfig</span>(cacheNames = <span class="string">"em"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeServiceImpl</span> <span class="keyword">implements</span> <span class="title">EmployeeService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeDao dao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Cacheable</span>(key = <span class="string">"#p0"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">findOne</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dao.findOne(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新缓存中的数据，</span></span><br><span class="line"><span class="comment">     * 由于 redis 是存在外部，不是 ehcache 那样存在于项目进程中，需要我们主动去更新 缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> employee</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span>(rollbackFor = Exception.class)</span><br><span class="line">    <span class="meta">@CachePut</span>(key = <span class="string">"#p0.id"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">update</span><span class="params">(Employee employee)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dao.save(employee);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同样主动去删除 cache</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span>(rollbackFor = Exception.class)</span><br><span class="line">    <span class="meta">@CacheEvict</span>(key = <span class="string">"#p0"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        dao.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解的使用参考前面的<a href="http://blog.wuwii.com/springboot-21.html#注解的使用">学习Spring Boot：（二十一）使用 EhCache 实现数据缓存</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> redis </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring 中使用定时任务]]></title>
      <url>/spring-schedule.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>需要定时用于系统监控，或者做一些定时自动做一些操作，使用起来还是蛮简单的，就是配置参数需要记录下。<br><a id="more"></a><br>Spring 中自己内置的定时任务</p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="Spring-中使用"><a href="#Spring-中使用" class="headerlink" title="Spring 中使用"></a>Spring 中使用</h4><p>在 Spring 中使用定时任务有两种方式：</p><ul><li>注解方式；</li><li>配置文件。</li></ul><h5 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h5><p>注解方式方式配置起来非常方便，但是，如果要修改定时任务的时间计划，就需要修改源代码，</p><ol><li><p>在 <code>application.xml</code> 文件中添加开启定时任务的注解：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">task:annotation-driven</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>如果使用的使用的 IDEA 可以自动添加配置文件的 <code>空间命名</code>、<code>xml 标签规范</code>和命名空间相应的验证文件，在 Eclipse 中将视图从 <code>source</code> 切换到 <code>Namespaces</code> 勾选自动添加相应命名空间。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmlns:task="http://www.springframework.org/schema/task"</span><br><span class="line">xsi:schemaLocation="http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd"</span><br></pre></td></tr></table></figure></li><li><p>新建定时任务计划，使用注解方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduleJob</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每 2s 执行一次，</span></span><br><span class="line"><span class="comment">     * 函数不能有返回值，不然会报错</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(fixedDelay = <span class="number">2000</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operateScheduleJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 执行定时任务！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="使用配置文件"><a href="#使用配置文件" class="headerlink" title="使用配置文件"></a>使用配置文件</h5><ol><li><p>新建定时任务计划类，不适用任何注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduleJob</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 函数不能有返回值，不然会报错</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operateScheduleJob</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 执行定时任务！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 <code>application.xml</code> 中上面的给出命名空间校验地址，后在配置文件中注册相应的实体类和方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"task"</span> <span class="attr">class</span>=<span class="string">"xxx.xxx.schedule.ScheduleJob"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">task:scheduled-tasks</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 这里表示的是每天0点执行一次 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">task:scheduled</span> <span class="attr">ref</span>=<span class="string">"task"</span> <span class="attr">method</span>=<span class="string">"operateScheduleJob"</span> <span class="attr">cron</span>=<span class="string">"0 0 0 * * ?"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">task:scheduled-tasks</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="Spring-Boot-中使用"><a href="#Spring-Boot-中使用" class="headerlink" title="Spring Boot 中使用"></a>Spring Boot 中使用</h4><p>在程序启动类上面加上注解 <code>EnableScheduling</code>，表示开启定时任务功能，然后就能在程序中和上面 <code>Spring</code> 一样使用注解的方式定义定时任务。</p><h4 id="关于-Schedule-注解"><a href="#关于-Schedule-注解" class="headerlink" title="关于 @Schedule 注解"></a>关于 @Schedule 注解</h4><p><strong>它有多种定时规则表达式：</strong></p><ul><li><code>cron</code>：指定cron表达式</li><li><code>zone</code>：默认使用服务器默认时区。可以设置为<code>java.util.TimeZone</code>中的zoneId</li><li><code>fixedDelay</code>：从上一个任务完成开始到下一个任务开始的间隔，单位毫秒</li><li><code>fixedDelayString</code>：同上，时间值是String类型</li><li><code>fixedRate</code>：从上一个任务开始到下一个任务开始的间隔，单位毫秒</li><li><code>fixedRateString</code>：同上，时间值是String类型</li><li><code>initialDelay</code>：任务首次执行延迟的时间，单位毫秒</li><li><code>initialDelayString</code>：同上，时间值是String类型<h4 id="cron-表达式"><a href="#cron-表达式" class="headerlink" title="cron 表达式"></a>cron 表达式</h4>Cron表达式是一个字符串，字符串以5或6个空格隔开，分为6或7个域，每一个域代表一个含义，Cron有如下两种语法格式：</li><li>Seconds Minutes Hours DayofMonth Month DayofWeek Year</li><li>Seconds Minutes Hours DayofMonth Month DayofWeek</li></ul><p><strong>每一个域可出现的字符如下：</strong></p><ul><li><code>Seconds</code>: 可出现 <code>, - * /</code> 四个字符，有效范围为<code>0-59</code>的整数</li><li><code>Minutes</code>: 可出现 <code>, - * /</code> 四个字符，有效范围为<code>0-59</code>的整数</li><li><code>Hours</code>: 可出现 <code>, - * /</code> 四个字符，有效范围为<code>0-23</code>的整数</li><li><code>DayofMonth</code>: 可出现 <code>, - * / ? L W C</code> 八个字符，有效范围为<code>0-31</code>的整数</li><li><code>Month</code>: 可出现 <code>, - * /</code>四个字符，有效范围为1-12的整数或<code>JAN-DEC</code></li><li><code>DayofWeek</code>: 可出现 <code>, - * / ? L C #</code> 四个字符，有效范围为<code>1-7</code>的整数或<code>SUN-SAT</code>两个范围。1表示星期天，2表示星期一， 依次类推</li><li><code>Year</code>: 可出现 <code>, - * /</code> 四个字符，有效范围为<code>1970-2099</code>年</li></ul><p><strong>每一个域都使用数字，但还可以出现如下特殊字符，它们的含义是：</strong></p><ul><li><code>*</code>：表示匹配该域的任意值，假如在<code>Minutes</code>域使用<code>*</code>, 即表示每分钟都会触发事件。</li><li><code>?</code>：只能用在<code>DayofMonth</code>和<code>DayofWeek</code>两个域。它也匹配域的任意值，但实际不会。因为DayofMonth和 DayofWeek会相互影响。例如想在每月的20日触发调度，不管20日到底是星期几，则只能使用如下写法： 13 13 15 20 * ?, 其中最后一位只能用？，而不能使用，如果使用表示不管星期几都会触发，实际上并不是这样。</li><li><code>-</code>：表示范围，例如在Minutes域使用5-20，表示从5分到20分钟每分钟触发一次。</li><li><code>/</code>：表示起始时间开始触发，然后每隔固定时间触发一次，例如在Minutes域使用5/20,则意味着5分钟触发一次，而25，45等分别触发一次。</li><li><code>,</code>：表示列出枚举值值。例如：在Minutes域使用5,20，则意味着在5和20分每分钟触发一次。</li><li><code>L</code>：表示最后，只能出现在DayofWeek和DayofMonth域，如果在DayofWeek域使用5L,意味着在最后的一个星期四触发。</li><li><code>W</code>：表示有效工作日(周一到周五),只能出现在DayofMonth域，系统将在离指定日期的最近的有效工作日触发事件。例如：在 DayofMonth使用5W，如果5日是星期六，则将在最近的工作日：星期五，即4日触发。如果5日是星期天，则在6日(周一)触发；如果5日在星期一 到星期五中的一天，则就在5日触发。另外一点，W的最近寻找不会跨过月份。</li><li><code>LW</code>：这两个字符可以连用，表示在某个月最后一个工作日，即最后一个星期五。</li><li><code>#</code>：用于确定每个月第几个星期几，只能出现在DayofMonth域。例如在<code>4#2</code>，表示某月的第二个星期三。</li></ul><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://github.com/kaimz/learning-code/tree/master/jpa-muti-datasource" rel="external nofollow noopener noreferrer" target="_blank">Spring Task定时任务的配置和使用](https://www.jianshu.com/p/25c601f43552)</a></li></ul><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习Spring Boot：（二十四）多数据源配置与使用]]></title>
      <url>/springboot-24.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>随着业务量增大，可能有些业务不是放在同一个数据库中，所以系统有需求使用多个数据库完成业务需求，我们需要配置多个数据源，从而进行操作不同数据库中数据。</p><a id="more"></a><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="JdbcTemplate-多数据源"><a href="#JdbcTemplate-多数据源" class="headerlink" title="JdbcTemplate 多数据源"></a>JdbcTemplate 多数据源</h4><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>需要在 Spring Boot 中配置多个数据库连接，当然怎么设置连接参数的 key 可以自己决定，</p><blockquote><p>需要注意的是 <code>Spring Boot 2.0</code> 的默认连接池配置参数好像有点问题，由于默认连接池已从 <code>Tomcat</code> 更改为 <code>HikariCP</code>，以前有一个参数 <code>url</code>，已经改成 <code>hikari.jdbcUrl</code> ，不然无法注册。我下面使用的版本是 <code>1.5.9</code>。<br></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8022</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">     url:</span> <span class="attr">jdbc:mysql://localhost:3306/learn?useSSL=false&amp;allowMultiQueries=true&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">     username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">     password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">     driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  second-datasource:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/learn1?useSSL=false&amp;allowMultiQueries=true&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123457</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p></p></blockquote><h5 id="注册-DataSource"><a href="#注册-DataSource" class="headerlink" title="注册 DataSource"></a>注册 DataSource</h5><p>注册两个数据源，分别注册两个 <code>JdbcTemplate</code>，<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册 data source</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"firstDataSource"</span>)</span><br><span class="line">    <span class="meta">@Primary</span> <span class="comment">// 有相同实例优先选择</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">firstDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.second-datasource"</span>)</span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"secondDataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">secondDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"firstJdbcTemplate"</span>)</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">firstJdbcTemplate</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"secondJdbcTemplate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">secondJdbcTemplate</span><span class="params">(@Qualifier(<span class="string">"secondDataSource"</span>)</span> DataSource dataSource) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBC</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"secondJdbcTemplate"</span>)</span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate1;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">"DELETE FROM employee"</span>);</span><br><span class="line">        jdbcTemplate1.update(<span class="string">"DELETE FROM employee"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJDBC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        jdbcTemplate.update(<span class="string">"insert into employee(id,name,age) VALUES (1, 'wuwii', 24)"</span>);</span><br><span class="line">        jdbcTemplate1.update(<span class="string">"insert into employee(id,name,age) VALUES (1, 'kronchan', 23)"</span>);</span><br><span class="line">        Assert.assertThat(<span class="string">"wuwii"</span>, Matchers.equalTo(jdbcTemplate.queryForObject(<span class="string">"SELECT name FROM employee WHERE id=1"</span>, String.class)));</span><br><span class="line">        Assert.assertThat(<span class="string">"kronchan"</span>, Matchers.equalTo(jdbcTemplate1.queryForObject(<span class="string">"SELECT name FROM employee WHERE id=1"</span>, String.class)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/kaimz/learning-code/tree/master/jdbc-muti-datasource" rel="external nofollow noopener noreferrer" target="_blank">源码地址</a></p><h4 id="使用-JPA-支持多数据源"><a href="#使用-JPA-支持多数据源" class="headerlink" title="使用 JPA 支持多数据源"></a>使用 JPA 支持多数据源</h4><h5 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h5><p>相比使用 <code>jdbcTemplate</code>，需要设置下 <code>JPA</code> 的相关参数即可，没多大变化：<br></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8022</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">     url:</span> <span class="attr">jdbc:mysql://localhost:3306/learn?useSSL=false&amp;allowMultiQueries=true&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">     username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">     password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">     driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  second-datasource:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/learn1?useSSL=false&amp;allowMultiQueries=true&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  jpa:</span></span><br><span class="line"><span class="attr">    show-sql:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    database:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">    hibernate:</span></span><br><span class="line">    <span class="comment"># update 更新表结构</span></span><br><span class="line">    <span class="comment"># create 每次启动删除上次表，再创建表，会造成数据丢失</span></span><br><span class="line">    <span class="comment"># create-drop： 每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除。</span></span><br><span class="line">    <span class="comment"># validate ：每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。</span></span><br><span class="line"><span class="attr">      ddl-auto:</span> <span class="string">update</span></span><br><span class="line"><span class="attr">    properties:</span></span><br><span class="line"><span class="attr">      hibernate:</span></span><br><span class="line"><span class="attr">        dialect:</span> <span class="string">org.hibernate.dialect.MySQLDialect</span></span><br></pre></td></tr></table></figure><p></p><p>首先一样的是我们要注册相应的 DataSource，还需要指定相应的数据源所对应的实体类和数据操作层 <code>Repository</code>的位置：</p><ul><li><p><code>firstDataSource</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@EnableJpaRepositories</span>(</span><br><span class="line">        entityManagerFactoryRef = <span class="string">"firstEntityManagerFactory"</span>,</span><br><span class="line">        transactionManagerRef = <span class="string">"firstTransactionManager"</span>,</span><br><span class="line">        basePackages = <span class="string">"com.wuwii.module.system.dao"</span> <span class="comment">// 设置该数据源对应 dao 层所在的位置</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstDataSourceConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JpaProperties jpaProperties;</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"firstEntityManager"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> EntityManager <span class="title">entityManager</span><span class="params">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> entityManagerFactoryPrimary(builder).getObject().createEntityManager();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"firstDataSource"</span>)</span><br><span class="line">    <span class="meta">@Primary</span> <span class="comment">// 有相同实例优先选择，相同实例只能设置唯一</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">firstDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"firstEntityManagerFactory"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalContainerEntityManagerFactoryBean <span class="title">entityManagerFactoryPrimary</span> <span class="params">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder</span><br><span class="line">                .dataSource(firstDataSource())</span><br><span class="line">                .properties(getVendorProperties(firstDataSource()))</span><br><span class="line">                .packages(<span class="string">"com.wuwii.module.system.entity"</span>) <span class="comment">//设置该数据源对应的实体类所在位置</span></span><br><span class="line">                .persistenceUnit(<span class="string">"firstPersistenceUnit"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Map&lt;String, String&gt; <span class="title">getVendorProperties</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jpaProperties.getHibernateProperties(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"firstTransactionManager"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">transactionManagerPrimary</span><span class="params">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JpaTransactionManager(entityManagerFactoryPrimary(builder).getObject());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>secondDataSource</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@EnableJpaRepositories</span>(</span><br><span class="line">        entityManagerFactoryRef = <span class="string">"secondEntityManagerFactory"</span>,</span><br><span class="line">        transactionManagerRef = <span class="string">"secondTransactionManager"</span>,</span><br><span class="line">        basePackages = <span class="string">"com.wuwii.module.user.dao"</span> <span class="comment">// 设置该数据源 dao 层所在的位置</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondDataSourceConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JpaProperties jpaProperties;</span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"secondEntityManager"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> EntityManager <span class="title">entityManager</span><span class="params">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> entityManagerFactoryPrimary(builder).getObject().createEntityManager();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.second-datasource"</span>)</span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"secondDataSource"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">secondDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"secondEntityManagerFactory"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocalContainerEntityManagerFactoryBean <span class="title">entityManagerFactoryPrimary</span> <span class="params">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder</span><br><span class="line">                .dataSource(secondDataSource())</span><br><span class="line">                .properties(getVendorProperties(secondDataSource()))</span><br><span class="line">                .packages(<span class="string">"com.wuwii.module.user.entity"</span>) <span class="comment">//设置该数据源锁对应的实体类所在的位置</span></span><br><span class="line">                .persistenceUnit(<span class="string">"secondPersistenceUnit"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Map&lt;String, String&gt; <span class="title">getVendorProperties</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jpaProperties.getHibernateProperties(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"secondTransactionManager"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">transactionManagerPrimary</span><span class="params">(EntityManagerFactoryBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JpaTransactionManager(entityManagerFactoryPrimary(builder).getObject());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeDao employeeDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        employeeDao.deleteAll();</span><br><span class="line">        userDao.deleteAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Employee employee = <span class="keyword">new</span> Employee(<span class="keyword">null</span>, <span class="string">"wuwii"</span>, <span class="number">24</span>);</span><br><span class="line">        employeeDao.save(employee);</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="keyword">null</span>, <span class="string">"KronChan"</span>, <span class="number">24</span>);</span><br><span class="line">        userDao.save(user);</span><br><span class="line">        Assert.assertThat(employee, Matchers.equalTo(employeeDao.findOne(Example.of(employee))));</span><br><span class="line">        Assert.assertThat(user, Matchers.equalTo(userDao.findOne(Example.of(user))));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/kaimz/learning-code/tree/master/jpa-muti-datasource" rel="external nofollow noopener noreferrer" target="_blank">源码地址</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习Spring Boot：（二十三）Spring Boot 中使用 Docker]]></title>
      <url>/springboot-23.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>简单的学习下怎么在 Spring Boot 中使用 Docker 进行构建，发布一个镜像，现在我们通过远程的 docker api 构建镜像，运行容器，发布镜像等操作。</p><p>这里只介绍两种方式：</p><ol><li>远程命令 api （需要知道 Docker 命令）</li><li>maven 插件 （不需要了解 Docker 命令）</li></ol><a id="more"></a><h3 id="开启-Docker-api-远程访问"><a href="#开启-Docker-api-远程访问" class="headerlink" title="开启 Docker api 远程访问"></a>开启 Docker api 远程访问</h3><p>开启 docker api 远程操作的功能，<br>例如，centos 7 中在 <code>/usr/lib/systemd/system/docker.service</code>，文件中，修改 <code>ExecStart</code> 的参数：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExecStart=/usr/bin/dockerd  -H tcp://0.0.0.0:2375  -H unix:///var/run/docker.sock</span><br></pre></td></tr></table></figure><p></p><p>端口自定义设置即可。</p><p>重载所有修改过的配置文件，并且重启 docker，<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload    </span><br><span class="line">systemctl restart docker.service</span><br></pre></td></tr></table></figure><p></p><blockquote><p>需要注意的是，由于没有密码登陆任何权限验证，外网或者生产环境需要上证书使用。</p></blockquote><h3 id="命令方式构建镜像"><a href="#命令方式构建镜像" class="headerlink" title="命令方式构建镜像"></a>命令方式构建镜像</h3><p>这种方式其实非常简单，就是需要懂得 docker 命令，才能操作。</p><p>经过上面开启 Docker Api 后，我们可以使用网络环境操作 Docker 引擎了。</p><ol><li><p>新建 <code>Dockerfile</code> 构建镜像文件，新创建一个文件夹，专门放构建镜像需要的文件，我创建的是 <code>/src/docker/</code></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /tmp</span></span><br><span class="line"><span class="bash">ADD springboot-docker.jar app.jar</span></span><br><span class="line"><span class="bash">ENTRYPOINT [<span class="string">"java"</span>,<span class="string">"-jar"</span>,<span class="string">"/app.jar"</span>]</span></span><br></pre></td></tr></table></figure></li><li><p>执行 maven 命令 ，将项目打包 <code>mvn clean package --DskipTests</code>，然后将打好的 jar 包，也放入到 <code>Dockerfile</code>项目目录中。</p></li><li><p>然后进入 <code>src/docker</code> 目录下执行 ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -H tcp://xxx.xxx.xxx.xxx:2375 build -t <span class="built_in">test</span> .</span><br></pre></td></tr></table></figure><p>开始构建镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Sending build context to Docker daemon  31.74MB</span><br><span class="line">Step 1/5 : FROM java:8</span><br><span class="line"> ---&gt; d23bdf5b1b1b</span><br><span class="line">Step 2/5 : EXPOSE 8080</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 060a43a42146</span><br><span class="line">Step 3/5 : VOLUME /tmp</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; b4f88fde6181</span><br><span class="line">Step 4/5 : ADD springboot-docker.jar app.jar</span><br><span class="line"> ---&gt; 3a40188825b0</span><br><span class="line">Step 5/5 : ENTRYPOINT [<span class="string">"java"</span>,<span class="string">"-jar"</span>,<span class="string">"/app.jar"</span>]</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> ab093916fc4c</span><br><span class="line">Removing intermediate container ab093916fc4c</span><br><span class="line"> ---&gt; 45a3966feb60</span><br><span class="line">Successfully built 45a3966feb60</span><br><span class="line">Successfully tagged <span class="built_in">test</span>:latest</span><br></pre></td></tr></table></figure></li></ol><h3 id="使用-docker-maven-plugin构建镜像"><a href="#使用-docker-maven-plugin构建镜像" class="headerlink" title="使用 docker-maven-plugin构建镜像"></a>使用 docker-maven-plugin构建镜像</h3><h4 id="在-maven-项目下加入-docker-maven-plugin"><a href="#在-maven-项目下加入-docker-maven-plugin" class="headerlink" title="在 maven 项目下加入 docker-maven-plugin"></a>在 maven 项目下加入 <code>docker-maven-plugin</code></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--打包docker插件相关参数的配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.4.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--打包的镜像名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>$&#123;project.groupId&#125;/$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Dockerfile文件位置，以项目的 root 目录为根节点，建议到单独建立一个目录--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dockerDirectory</span>&gt;</span>./src/docker/<span class="tag">&lt;/<span class="name">dockerDirectory</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Docker 远程的 API 地址及端口--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dockerHost</span>&gt;</span>http://xxx.xxx.xxx.199:2375<span class="tag">&lt;/<span class="name">dockerHost</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">imageTags</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">imageTag</span>&gt;</span>latest<span class="tag">&lt;/<span class="name">imageTag</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">imageTags</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--执行构建docker镜像的时候需要哪些文件，springboot项目指定 打包好的jar 镜像就好--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--这里指定的文件是target中的jar文件--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="创建-Dockerfile"><a href="#创建-Dockerfile" class="headerlink" title="创建 Dockerfile"></a>创建 Dockerfile</h4><p>需要跟<code>pom.xml</code> 上面配置的路径保持一致，所以我的路径是 <code>${baseProjectFolder}/src/docker</code>的文件夹下新建一个文件 <code>Dockerfile</code>，添加构建 docker 相关命令参数：<br></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /tmp </span></span><br><span class="line"><span class="bash">ADD springboot-docker.jar app.jar <span class="comment"># 根据打包的jar 包文件名进行修改</span></span></span><br><span class="line"><span class="bash">ENTRYPOINT [<span class="string">"java"</span>,<span class="string">"-jar"</span>,<span class="string">"/app.jar"</span>]</span></span><br></pre></td></tr></table></figure><p></p><h4 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h4><p>在应用的根目录下执行命令（打包加 dokcer build）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mvn clean package docker:build -DskipTests</span><br></pre></td></tr></table></figure><p>比如使用我的工程，进行打包后完成了 docker 的构建的信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[INFO] Building image com.wuwii/springboot-docker</span><br><span class="line">Step 1/5 : FROM java:8</span><br><span class="line"></span><br><span class="line"> ---&gt; d23bdf5b1b1b</span><br><span class="line">Step 2/5 : EXPOSE 8080</span><br><span class="line"></span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> b7936baae57f</span><br><span class="line">Removing intermediate container b7936baae57f</span><br><span class="line"> ---&gt; 060a43a42146</span><br><span class="line">Step 3/5 : VOLUME /tmp</span><br><span class="line"></span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 65e2b8ac44d3</span><br><span class="line">Removing intermediate container 65e2b8ac44d3</span><br><span class="line"> ---&gt; b4f88fde6181</span><br><span class="line">Step 4/5 : ADD springboot-docker.jar app.jar</span><br><span class="line"></span><br><span class="line"> ---&gt; aa3762cda143</span><br><span class="line">Step 5/5 : ENTRYPOINT [<span class="string">"java"</span>,<span class="string">"-jar"</span>,<span class="string">"/app.jar"</span>]</span><br><span class="line"></span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> d9f5f63b9736</span><br><span class="line">Removing intermediate container d9f5f63b9736</span><br><span class="line"> ---&gt; 622a7d1e315c</span><br><span class="line">ProgressMessage&#123;id=null, status=null, stream=null, error=null, progress=null, progressDetail=null&#125;</span><br><span class="line">Successfully built 622a7d1e315c</span><br><span class="line">Successfully tagged com.wuwii/springboot-docker:latest</span><br></pre></td></tr></table></figure><h3 id="使用镜像"><a href="#使用镜像" class="headerlink" title="使用镜像"></a>使用镜像</h3><ol><li><p>进入安装 docker 的主机中，使用命令查看镜像（<code>IMAGE ID</code> 和上面是一致的）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker image ls com.wuwii/springboot-docker</span><br><span class="line">REPOSITORY                    TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">com.wuwii/springboot-docker   latest              622a7d1e315c        22 minutes ago      659MB</span><br></pre></td></tr></table></figure></li><li><p>运行容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 8080:8080 --name learn  com.wuwii/springboot-docker</span><br><span class="line"></span><br><span class="line">180fe4a7ddfc10c0cf2c37649ae1628e804564bfe1594ef05840e707801e6da3</span><br></pre></td></tr></table></figure><p>监听 8080 端口，测试是否成功。</p></li></ol><h3 id="服务编排-compose"><a href="#服务编排-compose" class="headerlink" title="服务编排 compose"></a>服务编排 compose</h3><p>一般的我们的 WEB 项目会使用到很多外部工具，例如 Redis ，MYSQL, ES等，如果一个一个启动搭建部署，太麻烦了，还要测试如果把这个一套环境拿到别的地方还能用吗？</p><p>使用服务编排可以避免这些坑。</p><p>加入我们的项目中增加了 Mysql 的数据库，在根目录新建一个 <code>docker-compose.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  web:</span></span><br><span class="line"><span class="attr">    depends_on:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">db</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"8080:8080"</span> <span class="comment"># 建议加上引号，如果单独两位数的数字，可能出现解析问题</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line">   <span class="comment"># build:</span></span><br><span class="line">    <span class="comment">#  context: ./src/docker # Dockerfile 文件的目录，可以远程地址，绝对 or 相对</span></span><br><span class="line">     <span class="comment"># dockerfile: Dockerfile # 如果你的 Dockerfile 重命名了，需要指定</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">test:latest</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">      DB_HOST:</span> <span class="attr">db:3306</span></span><br><span class="line"><span class="attr">      DATABASE:</span> <span class="string">learn</span></span><br><span class="line"><span class="attr">      DB_USERNAME:</span> <span class="string">root</span> <span class="comment"># 测试用下 root</span></span><br><span class="line"><span class="attr">      DB_PASSWORD:</span> <span class="number">123456</span> <span class="comment">#  # 建议使用 secret</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  db:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">mysql:5.7</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="attr">        - db_data:</span><span class="string">/var/lib/mysql</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">      MYSQL_ROOT_PASSWORD:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">      MYSQL_DATABASE:</span> <span class="string">learn</span></span><br><span class="line"><span class="attr">      MYSQL_USER:</span> <span class="string">kronchan</span></span><br><span class="line"><span class="attr">      MYSQL_PASSWORD:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="attr">  db_data:</span>  <span class="comment"># 使用的数据卷必须声明</span></span><br></pre></td></tr></table></figure><p>上面我使用的是前面已经构建好的镜像，然后执行的编排，更好的是直接使用 <code>build</code> 让它自己编排服务。</p><p>系统配置文件<code>application.yml</code>使用缺省值的方式，不影响开发的使用：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://$&#123;DB_HOST:localhost:3306&#125;/$&#123;DATABASE:learn&#125;?useSSL=false&amp;allowMultiQueries=true&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">$&#123;DB_USERNAME:root&#125;</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">$&#123;DB_PASSWORD:123456&#125;</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">  jpa:</span></span><br><span class="line"><span class="attr">    show-sql:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    database:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">    hibernate:</span></span><br><span class="line"><span class="attr">      ddl-auto:</span> <span class="string">update</span></span><br><span class="line"><span class="attr">    properties:</span></span><br><span class="line"><span class="attr">      hibernate:</span></span><br><span class="line"><span class="attr">        dialect:</span> <span class="string">org.hibernate.dialect.MySQL57Dialect</span> <span class="comment"># 方言根据 数据库版本选择吧</span></span><br></pre></td></tr></table></figure><p>也可以使用不同的 <code>spring.profiles</code>指定不同的环境，在 <code>docker-compose.yml</code> 中覆盖执行命令指定环境也是常见做法的：<code>command: mvn clean spring-boot:run -Dspring-boot.run.profiles=xxx</code></p><p>最后启动，在 <code>docker-compose.yml</code>目录下执行 ： <code>docker-compose up</code></p><p>关闭服务 <code>docker-compose down</code></p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>docker-compose 顺序的问题，这个是开始学习编排的时候需要注意的问题，如果上面的服务编排中 mysql 启动的慢， web 项目就会启动失败，它启动的时候不知道被依赖的服务是否启动完成，就会出现这样的问题。</p><p>解决的办法有以下几种：</p><ul><li>足够的容错和重试机制，比如连接数据库，在初次连接不上的时候，服务消费者可以不断重试，直到连接上位置</li><li>docker-compose拆分，分成两部分部署，将要先启动的服务放在一个docker-compose中，后启动的服务放在两一个docker-compose中，启动两次，两者使用同一个网络。</li><li>同步等待，使用<code>wait-for-it.sh</code>或者其他<code>shell</code>脚本将当前服务启动阻塞，直到被依赖的服务加载完毕<br><code>wait-for-it</code>的github地址为：<a href="https://link.jianshu.com?t=https://github.com/vishnubob/wait-for-it" rel="external nofollow noopener noreferrer" target="_blank">wait-for-it</a></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>主要是写 Dockerfile 的时候最好单独的拿出一个文件夹来放它，我开始的时候就是直接放在项目的根路径，结果构建镜像的时候总是出现了将其他的文件也一起复制到了 Docker 目录中，WINDOW下使用 maven 插件操作这个需要注意这个上下文环境，不然很容易将一个磁盘的文件都拷贝进来了，初学者血的教训。解决办法就是单独创建一个文件夹，将需要的东西单独放置，就不用考虑这么多问题。</li></ol><p><a href="https://github.com/kaimz/learning-code/tree/master/springboot-docker" rel="external nofollow noopener noreferrer" target="_blank">代码</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[安装 Docker]]></title>
      <url>/docker-install.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><p>安装之前需要注意的是系统内核版本，linux内核至少在3.10版本以上，使用 command <code>uname -r</code> 查看linux内核版本。</p><a id="more"></a><h3 id="CentOS-安装"><a href="#CentOS-安装" class="headerlink" title="CentOS 安装"></a>CentOS 安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># step 1: 安装必要的一些系统工具</span></span><br><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="comment"># Step 2: 添加软件源信息</span></span><br><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment"># Step 3: 更新并安装 Docker-CE</span></span><br><span class="line">sudo yum makecache fast</span><br><span class="line">sudo yum -y install docker-ce</span><br><span class="line"><span class="comment"># Step 4: 开启Docker服务</span></span><br><span class="line">sudo service docker start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：</span></span><br><span class="line"><span class="comment"># 官方软件源默认启用了最新的软件，您可以通过编辑软件源的方式获取各个版本的软件包。例如官方并没有将测试版本的软件源置为可用，你可以通过以下方式开启。同理可以开启各种测试版本等。</span></span><br><span class="line"><span class="comment"># vim /etc/yum.repos.d/docker-ce.repo</span></span><br><span class="line"><span class="comment">#   将 [docker-ce-test] 下方的 enabled=0 修改为 enabled=1</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 安装指定版本的Docker-CE:</span></span><br><span class="line"><span class="comment"># Step 1: 查找Docker-CE的版本:</span></span><br><span class="line"><span class="comment"># yum list docker-ce.x86_64 --showduplicates | sort -r</span></span><br><span class="line"><span class="comment">#   Loading mirror speeds from cached hostfile</span></span><br><span class="line"><span class="comment">#   Loaded plugins: branch, fastestmirror, langpacks</span></span><br><span class="line"><span class="comment">#   docker-ce.x86_64            17.03.1.ce-1.el7.centos            docker-ce-stable</span></span><br><span class="line"><span class="comment">#   docker-ce.x86_64            17.03.1.ce-1.el7.centos            @docker-ce-stable</span></span><br><span class="line"><span class="comment">#   docker-ce.x86_64            17.03.0.ce-1.el7.centos            docker-ce-stable</span></span><br><span class="line"><span class="comment">#   Available Packages</span></span><br><span class="line"><span class="comment"># Step2 : 安装指定版本的Docker-CE: (VERSION 例如上面的 17.03.0.ce.1-1.el7.centos)</span></span><br><span class="line"><span class="comment"># sudo yum -y install docker-ce-[VERSION]</span></span><br></pre></td></tr></table></figure><p>安装校验<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">root@iZbp12adskpuoxodbkqzjfZ:$ docker version</span><br><span class="line">Client:</span><br><span class="line"> Version:      17.03.0-ce</span><br><span class="line"> API version:  1.26</span><br><span class="line"> Go version:   go1.7.5</span><br><span class="line"> Git commit:   3a232c8</span><br><span class="line"> Built:        Tue Feb 28 07:52:04 2017</span><br><span class="line"> OS/Arch:      linux/amd64</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Version:      17.03.0-ce</span><br><span class="line"> API version:  1.26 (minimum version 1.12)</span><br><span class="line"> Go version:   go1.7.5</span><br><span class="line"> Git commit:   3a232c8</span><br><span class="line"> Built:        Tue Feb 28 07:52:04 2017</span><br><span class="line"> OS/Arch:      linux/amd64</span><br><span class="line"> Experimental: <span class="literal">false</span></span><br></pre></td></tr></table></figure><p></p><p>加入开机自启<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure><p></p><p>docker安装教程网址</p><h3 id="ubuntu-安装"><a href="#ubuntu-安装" class="headerlink" title="ubuntu 安装"></a>ubuntu 安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># step 1: 安装必要的一些系统工具</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line"><span class="comment"># step 2: 安装GPG证书</span></span><br><span class="line">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"><span class="comment"># Step 3: 写入软件源信息</span></span><br><span class="line">sudo add-apt-repository <span class="string">"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="variable">$(lsb_release -cs)</span> stable"</span></span><br><span class="line"><span class="comment"># Step 4: 更新并安装 Docker-CE</span></span><br><span class="line">sudo apt-get -y update</span><br><span class="line">sudo apt-get -y install docker-ce</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装指定版本的Docker-CE:</span></span><br><span class="line"><span class="comment"># Step 1: 查找Docker-CE的版本:</span></span><br><span class="line"><span class="comment"># apt-cache madison docker-ce</span></span><br><span class="line"><span class="comment">#   docker-ce | 17.03.1~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages</span></span><br><span class="line"><span class="comment">#   docker-ce | 17.03.0~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages</span></span><br><span class="line"><span class="comment"># Step 2: 安装指定版本的Docker-CE: (VERSION 例如上面的 17.03.1~ce-0~ubuntu-xenial)</span></span><br><span class="line"><span class="comment"># sudo apt-get -y install docker-ce=[VERSION]</span></span><br></pre></td></tr></table></figure><h3 id="Window-安装"><a href="#Window-安装" class="headerlink" title="Window 安装"></a>Window 安装</h3><p>目前 win 10 pro 支持 typer-V</p><p><a href="http://mirrors.aliyun.com/docker-toolbox/windows/docker-for-windows/" rel="external nofollow noopener noreferrer" target="_blank">阿里云下载</a></p><p>在 控制面板 》 程序和功能 》 启用或关闭 Window 功能中勾选上 <code>Typer-V</code> 安装并重启，并且去<a href="https://yeasy.gitbooks.io/docker_practice/content/install/windows.html" rel="external nofollow noopener noreferrer" target="_blank">官网</a>下载 Docker 的安装包。</p><blockquote><p>注意的是，网站被墙，需要翻墙，不然下载龟速，或者去国内的镜像网站下载<br>且不是 win 10 pro 或企业版，不能启动 <code>Typer-V</code> 只能使用虚拟机环境了，可以下载 <code>Docker Toolbox</code>。</p></blockquote><h3 id="Deepin-安装"><a href="#Deepin-安装" class="headerlink" title="Deepin 安装"></a>Deepin 安装</h3><p>我使用的是桌面版 15.5</p><p><code>deepin</code> 使用官方的 <code>debian</code> 安装方式是安装不成功的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 卸载已经安装的 docker</span></span><br><span class="line">$ sudo apt-get remove docker docker-engine</span><br><span class="line"><span class="comment"># 2. 安装docker-ce与密钥管理与下载相关的依赖库</span></span><br><span class="line">$ sudo apt-get install apt-transport-https ca-certificates curl python-software-properties software-properties-common</span><br><span class="line"><span class="comment"># 3. 下载并安装密钥。</span></span><br><span class="line">$ curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -</span><br><span class="line"><span class="comment"># 4. 添加docker官方仓库</span></span><br><span class="line">$ sudo add-apt-repository   <span class="string">"deb [arch=amd64] https://download.docker.com/linux/debian   wheezy   stable"</span></span><br><span class="line"><span class="comment"># 5. 更新仓库</span></span><br><span class="line">$ sudo apt-get update</span><br><span class="line"><span class="comment"># 6. 安装docker-ce</span></span><br><span class="line">$ sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure><h3 id="Mac-安装"><a href="#Mac-安装" class="headerlink" title="Mac 安装"></a>Mac 安装</h3><p><em>首先要去官网查看版本支持情况</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew search docker  <span class="comment"># 查询， 推荐使用 Homebrew 包管理软件 </span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew cask install docker <span class="comment"># 安装</span></span></span><br></pre></td></tr></table></figure><h3 id="国内镜像加速器"><a href="#国内镜像加速器" class="headerlink" title="国内镜像加速器"></a>国内镜像加速器</h3><p>国内从 Docker Hub 拉取镜像有时会遇到困难，此时可以配置镜像加速器。<br>这里我配置的是阿里云的镜像加速。</p><p>获取自己的阿里云仓库的镜像 <a href="https://cr.console.aliyun.com/?spm=a2c4e.11153959.blogcont29941.9.520269d65b5sBo&amp;accounttraceid=7944ca1b-ff8f-4239-91ba-79d103b8e92e#/imageList" rel="external nofollow noopener noreferrer" target="_blank">地址</a><br>在左侧的 <code>镜像加速器</code> 中可以查看专属加速器地址 。</p><p>最新的Linux 系统 ，systemd 的系统，在 <code>/etc/docker/daemon.json</code> 中写入，例如我的:<br></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [</span><br><span class="line">    <span class="string">"https://2sloyw2o.mirror.aliyuncs.com"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>然后重新加载配置文件和重启<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p></p><blockquote><p>对于使用<code>Windows 10</code> 的系统，在系统右下角托盘 Docker 图标内右键菜单选择 <code>Settings</code>，打开配置窗口后左侧导航菜单选择 <code>Daemon</code>。在 <code>Registry mirrors</code> 一栏中填写加速器地址， 保存后 Docker 就会重启并应用配置的镜像地址了。</p></blockquote><p>使用 Docker toolbox 的话，进入虚拟机器更改配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker-machine ssh default </span><br><span class="line">sudo sed -i <span class="string">"s|EXTRA_ARGS='|EXTRA_ARGS='--registry-mirror=加速地址 |g"</span> /var/lib/boot2docker/profile </span><br><span class="line"><span class="built_in">exit</span> </span><br><span class="line">$ docker-machine restart default</span><br></pre></td></tr></table></figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://yq.aliyun.com/articles/110806" rel="external nofollow noopener noreferrer" target="_blank">Docker CE 镜像源站</a></li><li><a href="https://yeasy.gitbooks.io/docker_practice/content/install/mirror.html" rel="external nofollow noopener noreferrer" target="_blank">镜像加速器</a></li></ul><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JPA 使用 Specification 复杂查询和 Criteria 查询]]></title>
      <url>/jpa-specification.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>JPA</code> 给我们提供了基础的 <code>CURD</code> 的功能，并且用起来也是特别的方便，基本都是一行代码完成各种数据库操作，但是在复杂的多表查询的时候，我总是遇到各种问题，以前一般都是用原生 SQL 就行查询，原来它自带了复杂查询的 <code>JpaSpecificationExecutor</code> 接口，可以完成各种复杂查询，而且配合 JAVA 8的新特性，使用起来也是特别的方便。</p><a id="more"></a><p>环境：</p><ul><li>Spring Boot - 2.0.0.RELEASE</li><li>Jpa</li><li>jdk - 1.8</li><li>mysql</li><li>lombok<br><a href="https://github.com/kaimz/learning-code/tree/master/jpa-criteria" rel="external nofollow noopener noreferrer" target="_blank">本文学习代码的地址</a></li></ul><h3 id="使用-JpaSpecificationExecutor-复杂查询"><a href="#使用-JpaSpecificationExecutor-复杂查询" class="headerlink" title="使用 JpaSpecificationExecutor 复杂查询"></a>使用 JpaSpecificationExecutor 复杂查询</h3><h4 id="了解-JpaSpecificationExecutor"><a href="#了解-JpaSpecificationExecutor" class="headerlink" title="了解 JpaSpecificationExecutor"></a>了解 JpaSpecificationExecutor</h4><p>JPA 提供动态接口，利用类型检查的方式，进行复杂的条件查询，这个比自己写 SQL 更加安全。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Returns a single entity matching the given &#123;<span class="doctag">@link</span> Specification&#125;.</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> spec</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function">T <span class="title">findOne</span><span class="params">(Specification&lt;T&gt; spec)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Returns all entities matching the given &#123;<span class="doctag">@link</span> Specification&#125;.</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> spec</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">(Specification&lt;T&gt; spec)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Returns a &#123;<span class="doctag">@link</span> Page&#125; of entities matching the given &#123;<span class="doctag">@link</span> Specification&#125;.</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> spec</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> pageable</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function">Page&lt;T&gt; <span class="title">findAll</span><span class="params">(Specification&lt;T&gt; spec, Pageable pageable)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Returns all entities matching the given &#123;<span class="doctag">@link</span> Specification&#125; and &#123;<span class="doctag">@link</span> Sort&#125;.</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> spec</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> sort</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">(Specification&lt;T&gt; spec, Sort sort)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Returns the number of instances that the given &#123;<span class="doctag">@link</span> Specification&#125; will return.</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> spec the &#123;<span class="doctag">@link</span> Specification&#125; to count instances for</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the number of instances</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">long</span> <span class="title">count</span><span class="params">(Specification&lt;T&gt; spec)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>Specification</code> 是我们传入进去的查询参数，实际上它是一个接口，并且只有一个方法：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Specification</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Predicate <span class="title">toPredicate</span><span class="params">(Root&lt;T&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h4><ol><li>我现在有三个实体类是关联关系：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToOne</span>(cascade = CascadeType.ALL) <span class="comment">// 拥有级联维护的一方，参考http://westerly-lzh.github.io/cn/2014/12/JPA-CascadeType-Explaining/</span></span><br><span class="line">    <span class="meta">@JoinColumn</span>(foreignKey = <span class="meta">@ForeignKey</span>(name = <span class="string">"none"</span>, value = ConstraintMode.NO_CONSTRAINT))</span><br><span class="line">    <span class="keyword">private</span> EmployeeDetail detail;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToOne</span>(fetch = FetchType.LAZY) <span class="comment">// 默认 lazy ，通过懒加载，知道需要使用级联的数据，才去数据库查询这个数据，提高查询效率。</span></span><br><span class="line">    <span class="comment">// 设置外键的问题，参考http://mario1412.github.io/2016/06/27/JPA%E4%B8%AD%E5%B1%8F%E8%94%BD%E5%AE%9E%E4%BD%93%E9%97%B4%E5%A4%96%E9%94%AE/</span></span><br><span class="line">    <span class="meta">@JoinColumn</span>(name = <span class="string">"jobId"</span>, foreignKey = <span class="meta">@ForeignKey</span>(name = <span class="string">"none"</span>, value = ConstraintMode.NO_CONSTRAINT))</span><br><span class="line">    <span class="keyword">private</span> Job job;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeDetail</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Job</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToMany</span>(targetEntity = Employee.class, mappedBy = <span class="string">"job"</span>) <span class="comment">// mappedBy 只有在双向关联的时候设置，表示关系维护的一端，否则会生成中间表A_B</span></span><br><span class="line">    <span class="meta">@org</span>.hibernate.annotations.ForeignKey(name = <span class="string">"none"</span>) <span class="comment">// 注意这里不能使用 @JoinColumn 中的 @ForeignKey 不然会生成外键</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;Employee&gt; employees;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="创建持久化元模型"><a href="#创建持久化元模型" class="headerlink" title="创建持久化元模型"></a>创建持久化元模型</h4><p>这个可以不实现，但是在后面实现复杂查询的时候，只能手动输入相关的实体类的属性字段的字符串，然后进行强制转换类型，我认为这样相对来说好维护一些，关于持久化元模型，将在这篇文章最后部分再详细介绍下。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 不知道什么原因</span></span><br><span class="line"><span class="comment"> * 这个持久性单元模型需要与实体类相同的包中，否则相关的值不会注入到 spring 容器中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2018/3/8 10:16&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@StaticMetamodel</span>(Employee.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee_</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> SingularAttribute&lt;Employee, Long&gt; id;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> SingularAttribute&lt;Employee, EmployeeDetail&gt; detail;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> SingularAttribute&lt;Employee, Job&gt; job;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@StaticMetamodel</span>(EmployeeDetail.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeDetail_</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> SingularAttribute&lt;EmployeeDetail, Long&gt; id;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> SingularAttribute&lt;EmployeeDetail, String&gt; name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> SingularAttribute&lt;EmployeeDetail, String&gt; phone;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> SingularAttribute&lt;EmployeeDetail, Integer&gt; age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@StaticMetamodel</span>(EmployeeDetail.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeDetail_</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> SingularAttribute&lt;EmployeeDetail, Long&gt; id;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> SingularAttribute&lt;EmployeeDetail, String&gt; name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> SingularAttribute&lt;EmployeeDetail, String&gt; phone;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> SingularAttribute&lt;EmployeeDetail, Integer&gt; age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id="创建-dao-接口，继承-JpaSpecificationExecutor-lt-T-gt"><a href="#创建-dao-接口，继承-JpaSpecificationExecutor-lt-T-gt" class="headerlink" title="创建 dao 接口，继承 JpaSpecificationExecutor&lt;T&gt;:"></a>创建 dao 接口，继承 <code>JpaSpecificationExecutor&lt;T&gt;</code>:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeDao</span> <span class="keyword">extends</span> <span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">Employee</span>&gt;, <span class="title">PagingAndSortingRepository</span>&lt;<span class="title">Employee</span>, <span class="title">Id</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现复杂动态查询："><a href="#实现复杂动态查询：" class="headerlink" title="实现复杂动态查询："></a>实现复杂动态查询：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多条件动态分页查询，</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 如果后期还需要加入其他的查询的条件，可以直接添加代码逻辑就好了。</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 分割，需要注意的是 spring data 还提供了&lt;code&gt;Specification&lt;/code&gt; 这个类直接提供了 eq | gt | equal 等等 Specification</span></span><br><span class="line"><span class="comment"> * 接口的方法，但是它的方法已经过时了，不推荐使用，如果需要使用记录下</span></span><br><span class="line"><span class="comment"> * 来自 网站 https://www.tianmaying.com/tutorial/spring-jpa-page-sort</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;</span></span><br><span class="line"><span class="comment"> * public Page&lt;Person&gt; findAll(SearchRequest request) &#123;</span></span><br><span class="line"><span class="comment"> *      Specification&lt;Person&gt; specification = new Specifications&lt;Person&gt;()</span></span><br><span class="line"><span class="comment"> *          .eq(StringUtils.isNotBlank(request.getName()), "name", request.getName())</span></span><br><span class="line"><span class="comment"> *          .gt(Objects.nonNull(request.getAge()), "age", 18)</span></span><br><span class="line"><span class="comment"> *          .between("birthday", new Range&lt;&gt;(new Date(), new Date()))</span></span><br><span class="line"><span class="comment"> *          .like("nickName", "%og%", "%me")</span></span><br><span class="line"><span class="comment"> *          .build();</span></span><br><span class="line"><span class="comment"> *      return personRepository.findAll(specification, new PageRequest(0, 15));</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * &lt;/code&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> search   查询属性</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageable 分页和排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 分页数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;Employee&gt; <span class="title">pageBySearch</span><span class="params">(EmployeeSearch search, Pageable pageable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> employeeDao.findAll((Specification&lt;Employee&gt;) (root, criteriaQuery, criteriaBuilder) -&gt; &#123;</span><br><span class="line">        List&lt;Predicate&gt; predicates = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        Optional&lt;EmployeeSearch&gt; optional = Optional.ofNullable(search);</span><br><span class="line">        <span class="comment">// 根据 employee id 查询</span></span><br><span class="line">        optional.map(EmployeeSearch::getEmployeeId).ifPresent(id -&gt; &#123;</span><br><span class="line">            predicates.add(criteriaBuilder.equal(root.get(Employee_.id), id));</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 根据 employee detail name 模糊查询</span></span><br><span class="line">        optional.map(EmployeeSearch::getEmployeeName).ifPresent(name -&gt; &#123;</span><br><span class="line">            <span class="comment">// 使用左联接，如果直接 get(Employee_.detail).get(EmployeeDetail_.name) 就是无条件内联，</span></span><br><span class="line">            <span class="comment">// 相当于 cross join，会产生 笛卡尔积</span></span><br><span class="line">            Join&lt;Employee, EmployeeDetail&gt; join = root.join(Employee_.detail, JoinType.LEFT);</span><br><span class="line">            predicates.add(criteriaBuilder.like(join.get(EmployeeDetail_.name),</span><br><span class="line">                    <span class="string">"%"</span> + name + <span class="string">"%"</span>));</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 根据职位名查询</span></span><br><span class="line">        optional.map(EmployeeSearch::getJobName).ifPresent(name -&gt; &#123;</span><br><span class="line">            Join&lt;Employee, Job&gt; join = root.join(Employee_.job, JoinType.LEFT);</span><br><span class="line">            predicates.add(criteriaBuilder.equal(join.get(Job_.name), name));</span><br><span class="line">        &#125;);</span><br><span class="line">        Predicate[] array = <span class="keyword">new</span> Predicate[predicates.size()];</span><br><span class="line">        <span class="keyword">return</span> criteriaBuilder.and(predicates.toArray(array));</span><br><span class="line">    &#125;, pageable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>CriteriaBuilder</code> 有各种操作方法完成查询操作。</p><h4 id="进行测试"><a href="#进行测试" class="headerlink" title="进行测试"></a>进行测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPageBySearch</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    EmployeeSearch employeeSearch = <span class="keyword">new</span> EmployeeSearch(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="string">"程序猿"</span>);</span><br><span class="line">    Sort sort = <span class="keyword">new</span> Sort(Sort.Direction.ASC, <span class="string">"id"</span>);</span><br><span class="line">    Page&lt;Employee&gt; employees = employeeService.pageBySearch(employeeSearch, <span class="keyword">new</span> PageRequest(<span class="number">0</span>, <span class="number">5</span>, sort));</span><br><span class="line">    Assert.assertThat(<span class="string">"18772383543"</span>, Matchers.equalTo(employees.getContent().get(<span class="number">0</span>).getDetail().getPhone()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实实现起来不是很复杂，但是用起来很舒坦，再完全不用手动拼接字符串，使用面向对象的类型检测，写起来 BUG 也少些。</p><h3 id="使用-CriteriaQuery-查询和类型安全检测"><a href="#使用-CriteriaQuery-查询和类型安全检测" class="headerlink" title="使用 CriteriaQuery 查询和类型安全检测"></a>使用 CriteriaQuery 查询和类型安全检测</h3><h4 id="使用criteria-查询"><a href="#使用criteria-查询" class="headerlink" title="使用criteria 查询"></a>使用criteria 查询</h4><p>例如我现在要实现一个接口，查询在大于或等于某个年纪的员工：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PersistenceContext</span></span><br><span class="line"><span class="keyword">private</span> EntityManager em;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Search age gt or eq the parameter</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">listByAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">    CriteriaBuilder cb = em.getCriteriaBuilder();</span><br><span class="line">    CriteriaQuery&lt;Employee&gt; query = cb.createQuery(Employee.class);</span><br><span class="line">    Root&lt;Employee&gt; root = query.from(Employee.class); <span class="comment">// 设置查询根，可以根据查询的类型设置不同的 就是 Form 语句 后面的 entity</span></span><br><span class="line">    List&lt;Predicate&gt; predicates = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 连表查询使用左连接</span></span><br><span class="line">    Join&lt;Employee, EmployeeDetail&gt; join = root.join(Employee_.detail, JoinType.LEFT);</span><br><span class="line">    predicates.add(cb.gt(join.get(EmployeeDetail_.age), age));</span><br><span class="line">    predicates.add(cb.equal(join.get(EmployeeDetail_.age), age));</span><br><span class="line">    <span class="comment">// 设置排序规则</span></span><br><span class="line">    Order order = cb.asc(root.get(Employee_.id));</span><br><span class="line">    query.orderBy(order);</span><br><span class="line">    query.where(cb.or(predicates.toArray(<span class="keyword">new</span> Predicate[predicates.size()])));</span><br><span class="line">    TypedQuery typedQuery = em.createQuery(query); <span class="comment">// TypedQuery执行查询与获取元模型实例</span></span><br><span class="line">    <span class="keyword">return</span> typedQuery.getResultList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id="构建CriteriaQuery-实例API说明"><a href="#构建CriteriaQuery-实例API说明" class="headerlink" title="构建CriteriaQuery 实例API说明"></a>构建CriteriaQuery 实例API说明</h4><h5 id="CriteriaBuilder-安全查询创建工厂"><a href="#CriteriaBuilder-安全查询创建工厂" class="headerlink" title="CriteriaBuilder 安全查询创建工厂"></a>CriteriaBuilder 安全查询创建工厂</h5><p><code>CriteriaBuilder</code> 安全查询创建工厂,创建<code>CriteriaQuery</code>,创建查询具体具体条件<code>Predicate</code> 等<br><code>CriteriaBuilder</code> 是一个工厂对象,安全查询的开始.用于构建JPA安全查询.可以从EntityManager 或<code>EntityManagerFactory</code>类中获得<code>CriteriaBuilder</code>.<br><code>CriteriaBuilder</code> 工厂类是调用<code>EntityManager.getCriteriaBuilder</code> 或 <code>EntityManagerFactory.getCriteriaBuilder</code>而得。</p><h5 id="CriteriaQuery-安全查询主语句"><a href="#CriteriaQuery-安全查询主语句" class="headerlink" title="CriteriaQuery 安全查询主语句"></a>CriteriaQuery 安全查询主语句</h5><p>CriteriaQuery对象必须在实体类型或嵌入式类型上的Criteria 查询上起作用。<br>它通过调用 <code>CriteriaBuilder, createQuery</code> 或<code>CriteriaBuilder.createTupleQuery</code> 获得。</p><h5 id="Root-定义查询的From子句中能出现的类型"><a href="#Root-定义查询的From子句中能出现的类型" class="headerlink" title="Root 定义查询的From子句中能出现的类型"></a>Root 定义查询的From子句中能出现的类型</h5><p>AbstractQuery是CriteriaQuery 接口的父类。它提供得到查询根的方法。<br>Criteria查询的查询根定义了实体类型，能为将来导航获得想要的结果，它与SQL查询中的FROM子句类似。<br>Root实例也是类型化的，且定义了查询的FROM子句中能够出现的类型。<br>查询根实例能通过传入一个实体类型给 AbstractQuery.from方法获得。<br>Criteria查询，可以有多个查询根。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Root&lt;Employee&gt; employee = criteriaQuery.from(Employee.class);</span><br></pre></td></tr></table></figure><p></p><h5 id="Predicate-过滤条件"><a href="#Predicate-过滤条件" class="headerlink" title="Predicate 过滤条件"></a>Predicate 过滤条件</h5><p><strong>过滤条件应用到SQL语句的FROM子句中。因此它是 <code>root</code> 创建的。</strong><br>在criteria 查询中，查询条件通过Predicate 或Expression 实例应用到CriteriaQuery 对象上。<br>这些条件使用 CriteriaQuery .where 方法应用到CriteriaQuery 对象上。<br>CriteriaBuilder 也是作为Predicate 实例的工厂，Predicate 对象通过调用CriteriaBuilder 的条件方法（ equal，notEqual， gt， ge，lt， le，between，like等）创建。<br>Predicate 实例也可以用Expression 实例的 isNull， isNotNull 和 in方法获得，复合的Predicate 语句可以使用CriteriaBuilder的and, or andnot 方法构建。<br>下面的代码片段展示了Predicate 实例检查年龄大于24岁的员工实例:<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Predicate condition = criteriaBuilder.gt(employee.get(Employee_.age), <span class="number">24</span>);</span><br><span class="line">criteriaQuery.where(condition);</span><br></pre></td></tr></table></figure><p></p><p><code>Employee_</code>元模型类<code>age</code>属性，称之为路径表达式。<strong>若<code>age</code>属性与<code>String</code>文本比较，编译器会抛出错误，这在JPQL中是不可能的。</strong></p><h5 id="Predicate-多个过滤条件"><a href="#Predicate-多个过滤条件" class="headerlink" title="Predicate[] 多个过滤条件"></a>Predicate[] 多个过滤条件</h5><p>支持复杂的 条件拼接， or 语句<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">predicatesList.add(criteriaBuilder.or(criteriaBuilder.equal(root.get(RepairOrder_.localRepairStatus), LocalRepairStatus.repairing),criteriaBuilder.equal(root.get(RepairOrder_.localRepairStatus), LocalRepairStatus.diagnos)));</span><br></pre></td></tr></table></figure><p></p><p>最后查询的时候<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">query.where(cb.or(predicates.toArray(<span class="keyword">new</span> Predicate[predicates.size()])));</span><br><span class="line">TypedQuery typedQuery = em.createQuery(query); <span class="comment">// TypedQuery执行查询与获取元模型实例</span></span><br></pre></td></tr></table></figure><p></p><h5 id="TypedQuery执行查询与获取元模型实例"><a href="#TypedQuery执行查询与获取元模型实例" class="headerlink" title="TypedQuery执行查询与获取元模型实例"></a>TypedQuery执行查询与获取元模型实例</h5><p>注意，你使用EntityManager创建查询时，可以在输入中指定一个CriteriaQuery对象，它返回一个TypedQuery，它是JPA 2.0引入javax.persistence.Query接口的一个扩展，TypedQuery接口知道它返回的类型。</p><p>所以使用中,先创建查询得到TypedQuery,然后通过typeQuery得到结果.</p><p>当EntityManager.createQuery(CriteriaQuery)方法调用时，一个可执行的查询实例会创建，该方法返回指定从 criteria 查询返回的实际类型的TypedQuery 对象。</p><p>TypedQuery 接口是javax.persistence.Queryinterface.的子类型。在该片段中， TypedQuery 中指定的类型信息是Employee，调用getResultList时，查询就会得到执行 ：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TypedQuery&lt;Employee&gt; typedQuery = em.createQuery(criteriaQuery);</span><br><span class="line">List&lt;Employee&gt; result = typedQuery.getResultList();</span><br></pre></td></tr></table></figure><p></p><p>元模型实例通过调用 <code>EntityManager.getMetamodel</code> 方法获得，<code>EntityType&lt;Employee&gt;</code>的元模型实例通过调用<code>Metamodel.entity(Employee.class)</code>而获得，其被传入 <code>CriteriaQuery.from</code> 获得查询根。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Metamodel metamodel = em.getMetamodel();</span><br><span class="line">EntityType&lt;Employee&gt; Employee_ = metamodel.entity(Employee.class);</span><br><span class="line">Root&lt;Employee&gt; empRoot = criteriaQuery.from(Employee_);</span><br></pre></td></tr></table></figure><p></p><h5 id="Expression-用在查询语句的select，where和having子句中，该接口有-isNull-isNotNull-和-in方法"><a href="#Expression-用在查询语句的select，where和having子句中，该接口有-isNull-isNotNull-和-in方法" class="headerlink" title="Expression 用在查询语句的select，where和having子句中，该接口有 isNull, isNotNull 和 in方法"></a>Expression 用在查询语句的select，where和having子句中，该接口有 isNull, isNotNull 和 in方法</h5><p>Expression对象用在查询语句的select，where和having子句中，该接口有 isNull, isNotNull 和 in方法，下面的代码片段展示了Expression.in的用法，employye的年龄检查在20或24的。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CriteriaQuery&lt;Employee&gt; criteriaQuery = criteriaBuilder .createQuery(Employee.class);</span><br><span class="line">Root&lt;Employee&gt; employee = criteriaQuery.from(Employee.class);</span><br><span class="line">criteriaQuery.where(employee.get(Employee_.age).in(<span class="number">20</span>, <span class="number">24</span>));</span><br><span class="line">em.createQuery(criteriaQuery).getResultList();</span><br></pre></td></tr></table></figure><p></p><p>下面也是一个更贴切的例子:<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个Expression</span></span><br><span class="line">Expression&lt;String&gt; exp = root.get(Employee.id);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">List&lt;String&gt; strList=<span class="keyword">new</span> ArrayList&lt;&gt;();	</span><br><span class="line">strList.add(<span class="string">"20"</span>);</span><br><span class="line">strList.add(<span class="string">"24"</span>);		</span><br><span class="line">predicatesList.add(exp.in(strList));</span><br><span class="line"></span><br><span class="line">criteriaQuery.where(predicatesList.toArray(<span class="keyword">new</span> Predicate[predicatesList.size()]));</span><br></pre></td></tr></table></figure><p></p><h5 id="复合谓词"><a href="#复合谓词" class="headerlink" title="复合谓词"></a>复合谓词</h5><p>Criteria Query也允许开发者编写复合谓词，通过该查询可以为多条件测试下面的查询检查两个条件。首先，name属性是否以M开头，其次，employee的age属性是否是25。逻辑操作符and执行获得结果记录。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">criteriaQuery.where(</span><br><span class="line"> criteriaBuilder.and(</span><br><span class="line">  criteriaBuilder.like(employee.get(Employee_.name), <span class="string">"M%"</span>), </span><br><span class="line">  criteriaBuilder.equal(employee.get(Employee_.age), <span class="number">25</span>)</span><br><span class="line">));</span><br><span class="line">em.createQuery(criteriaQuery).getResultList();</span><br></pre></td></tr></table></figure><p></p><h5 id="路径表达式"><a href="#路径表达式" class="headerlink" title="路径表达式"></a>路径表达式</h5><p>Root实例，Join实例或者从另一个Path对象的get方法获得的对象使用get方法可以得到Path对象，当查询需要导航到实体的属性时，路径表达式是必要的。<br><strong>Get方法接收的参数是在实体元模型类中指定的属性。</strong></p><h5 id="参数化表达式"><a href="#参数化表达式" class="headerlink" title="参数化表达式"></a>参数化表达式</h5><p>在JPQL中，查询参数是在运行时通过使用命名参数语法(冒号加变量，如 <code>:age</code>传入的。在Criteria查询中，查询参数是在运行时创建<code>ParameterExpression</code>对象并为在查询前调用<code>TypeQuery,setParameter</code>方法设置而传入的。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ParameterExpression&lt;Integer&gt; ageParameter = cb.parameter(Integer.class);</span><br><span class="line"> List&lt;Predicate&gt; predicates = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"> <span class="comment">// 连表查询使用左连接</span></span><br><span class="line"> Join&lt;Employee, EmployeeDetail&gt; join = root.join(Employee_.detail, JoinType.LEFT);</span><br><span class="line"> predicates.add(cb.gt(join.get(EmployeeDetail_.age), ageParameter));</span><br><span class="line"> predicates.add(cb.equal(join.get(EmployeeDetail_.age), ageParameter));</span><br><span class="line"> query.where(cb.or(predicates.toArray(<span class="keyword">new</span> Predicate[predicates.size()])));</span><br><span class="line"> TypedQuery typedQuery = em.createQuery(query); <span class="comment">// TypedQuery执行查询与获取元模型实例</span></span><br><span class="line"> <span class="keyword">return</span> typedQuery.setParameter(ageParameter, age).getResultList();</span><br></pre></td></tr></table></figure><p></p><h5 id="排序结果"><a href="#排序结果" class="headerlink" title="排序结果"></a>排序结果</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置排序规则</span></span><br><span class="line">Order order = cb.asc(root.get(Employee_.id));</span><br><span class="line">query.orderBy(order);</span><br></pre></td></tr></table></figure><p>可以设置多个 order。</p><h5 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分组统计重名数量</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Tuple&gt; <span class="title">groupByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    CriteriaBuilder cb = em.getCriteriaBuilder();</span><br><span class="line">    CriteriaQuery&lt;Tuple&gt; query = cb.createTupleQuery();</span><br><span class="line">    Root&lt;Employee&gt; root = query.from(Employee.class);</span><br><span class="line">    Join&lt;Employee, EmployeeDetail&gt; join = root.join(Employee_.detail, JoinType.LEFT);</span><br><span class="line">    query.groupBy(join.get(EmployeeDetail_.name));</span><br><span class="line">    <span class="keyword">if</span> (name != <span class="keyword">null</span>) &#123;</span><br><span class="line">        query.having(cb.like(join.get(EmployeeDetail_.name), <span class="string">"%"</span> + name + <span class="string">"%"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    query.select(cb.tuple(join.get(EmployeeDetail_.name), cb.count(root)));</span><br><span class="line">    TypedQuery&lt;Tuple&gt; typedQuery = em.createQuery(query);</span><br><span class="line">    <span class="keyword">return</span> typedQuery.getResultList();</span><br><span class="line">    <span class="comment">// print sql :</span></span><br><span class="line">    <span class="comment">//select employeede1_.name as col_0_0_, count(employee0_.id) as col_1_0_ from employee employee0_</span></span><br><span class="line">    <span class="comment">// left outer join employee_detail employeede1_ on employee0_.detail_id=employeede1_.id</span></span><br><span class="line">    <span class="comment">// group by employeede1_.name having employeede1_.name like ?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="返回元组-Tuple-的查询"><a href="#返回元组-Tuple-的查询" class="headerlink" title="返回元组(Tuple)的查询"></a>返回元组(Tuple)的查询</h5><p>查询的时候需要查询 <code>单列</code> 的记录可以使用元组，<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CriteriaQuery&lt;Tuple&gt; criteriaQuery = criteriaBuilder.createTupleQuery();</span><br><span class="line">   Root&lt;Employee&gt; employee = criteriaQuery.from(Employee.class);</span><br><span class="line">   criteriaQuery.multiselect(employee.get(Employee_.name).alias(<span class="string">"name"</span>), employee.get(Employee_.age).alias(<span class="string">"age"</span>));</span><br><span class="line">   em.createQuery(criteriaQuery).getResultList();</span><br></pre></td></tr></table></figure><p></p><h5 id="使用-construct"><a href="#使用-construct" class="headerlink" title="使用 construct()"></a>使用 construct()</h5><p>使用一个不是实体类来装载 查询出来的数据，但是必须要的是实体类必须有相应的构造函数才行，还需要注意的是，<strong>该装载类必须继承实体类</strong></p><ol><li><p>首先实现一个装载数据的类，我只用来装载 name, age 两个属性即可，当然需要更多也可以设计的，毕竟我们继承了实体类，如果实体类有的字段我们可以不需要再制造了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeResult</span> <span class="keyword">extends</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写查询的业务代码，很方便：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用 构造函数 装载查询出来的数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;EmployeeResult&gt; <span class="title">findEmployee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    CriteriaBuilder cb = em.getCriteriaBuilder();</span><br><span class="line">    CriteriaQuery&lt;Employee&gt; query = cb.createQuery(Employee.class);</span><br><span class="line">    Root&lt;Employee&gt; root = query.from(Employee.class); <span class="comment">// 设置查询根，可以根据查询的类型设置不同的</span></span><br><span class="line">    Join&lt;Employee, EmployeeDetail&gt; join = root.join(Employee_.detail, JoinType.LEFT);</span><br><span class="line">    <span class="comment">// 使用构造函数 CriteriaBuilder.construct 来完成装载数据</span></span><br><span class="line">    query.select(cb.construct(EmployeeResult.class, join.get(EmployeeDetail_.name), join.get(EmployeeDetail_.age)));</span><br><span class="line">    <span class="comment">// 设置排序规则</span></span><br><span class="line">    Order order = cb.asc(root.get(Employee_.id));</span><br><span class="line">    query.orderBy(order);</span><br><span class="line">    TypedQuery typedQuery = em.createQuery(query); <span class="comment">// TypedQuery执行查询与获取元模型实例</span></span><br><span class="line">    <span class="keyword">return</span> typedQuery.getResultList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="返回-Object"><a href="#返回-Object" class="headerlink" title="返回 Object[]"></a>返回 Object[]</h5><p>Criteria查询也能通过设置值给CriteriaBuilder.array方法返回 <code>Object[]</code>的结果。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">criteriaQuery.select(criteriaBuilder.array(root.get(xxx),join.get(xxx)));</span><br></pre></td></tr></table></figure><p></p><h3 id="关于持久化元模型"><a href="#关于持久化元模型" class="headerlink" title="关于持久化元模型"></a>关于持久化元模型</h3><p>在JPA中,标准查询是以元模型的概念为基础的.元模型是为具体持久化单元的受管实体定义的.这些实体可以是实体类,嵌入类或者映射的父类.提供受管实体元信息的类就是元模型类.<br>描述受管类的状态和他们之间的关系的静态元模型类可以</p><ol><li>从注解处理器产生</li><li>从程序产生</li><li>用EntityManager访问.</li></ol><p>元模型类描述持久化类的元数据。如果一个类安装 JPA 2.0 规范精确地描述持久化实体的元数据，那么该元模型类就是 规范的。规范的元模型类是 静态的，因此它的所有成员变量都被声明为 静态的（也是 public的）。<br>Employee类的标准元模型类的名字将是使用 javax.persistence.StaticMetamodel注解的Employee_。元模型类的属性全部是static和public的。Employee的每一个属性都会使用在JPA2规范中描述的以下规则在相应的元模型类中映射：</p><ul><li>诸如id，name和age的非集合类型，会定义静态属性SingularAttribute&lt;A, B&gt; b，这里b是定义在类A中的类型为B的一个对象。</li><li>对于Addess这样的集合类型，会定义静态属性<code>ListAttribute&lt;A, B&gt; b</code>，这里List对象b是定义在类A中类型B的对象。其它集合类型可以是<code>SetAttribute</code>, <code>MapAttribute</code> 或 <code>CollectionAttribute</code> 类型。</li></ul><h3 id="简单总结下"><a href="#简单总结下" class="headerlink" title="简单总结下"></a>简单总结下</h3><ol><li>这次搭建的 jpa 框架是自动生成的数据库表，中间出了很多叉子，例如，自动生成了中间表，不想要外键，给你自己生成外键，而且还不好解决，最终通过谷歌终于找到了解决办法，相应的网页，也在代码上标注出来了，还是基础不行。</li><li>主要理解怎么从 <code>CriteriaBuilder</code> 一步步的在下面创建查询的条件，例如 查询类型 <code>root</code>，查询语句 <code>CriteriaQuery</code> ,查询条件 <code>Predicate</code> ，这样就很容易构建一个 criteria 查询。</li><li>了解了 JPA 复杂查询中 Specification 接口，给人第一体验就是完全面向对象，包括类型检查，基本上代码写了一遍就能编译运行它通过。再多条件动态条件查询的时候，利用 java 8 的 Optional 的空指针检查，比较方便，不用再被长长的 SQL 拼接发麻了。</li></ol><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://www.ibm.com/developerworks/cn/java/j-typesafejpa/" rel="external nofollow noopener noreferrer" target="_blank">JPA 2.0 中的动态类型安全查询</a></li><li><a href="https://my.oschina.net/zhaoqian/blog/133500" rel="external nofollow noopener noreferrer" target="_blank">JPA criteria 查询:类型安全与面向对象</a></li></ul><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jpa </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习Spring Boot：（二十二）使用 AOP]]></title>
      <url>/springboot-22.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>AOP <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top-right hint--error hint--large" aria-label="Aspect Oriented Programming的缩写">[1]</span></a></sup>，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。基于AOP实现的功能不会破坏原来程序逻辑，因此它可以很好的对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p></blockquote><p>AOP 专门用于处理系统中分布于各个模块（不同方法）中的交叉关注点的问题，在 Java EE 应用中，常常通过 AOP 来处理一些具有横切性质的系统级服务，如事务管理、安全检查、缓存、对象池管理等，AOP 已经成为一种非常常用的解决方案。</p><a id="more"></a><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="Spring-Boot-中使用"><a href="#Spring-Boot-中使用" class="headerlink" title="Spring Boot 中使用"></a>Spring Boot 中使用</h4><ol><li><p>在 <code>pom.xml</code> 中加入 aop 依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>当我们需要在非接口上面进行切面操作的时候，就需要 <code>CGLIB</code>来实现 AOP，在系统配置文件中加入设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line"><span class="attr">  aop:</span></span><br><span class="line"><span class="attr">    proxy-target-class:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ol><p>默认为 <code>false</code>。</p><h4 id="切点表达式"><a href="#切点表达式" class="headerlink" title="切点表达式"></a>切点表达式</h4><p>列出常用的几个表达式：</p><ol><li><code>execution()</code> 满足execution中描述的方法签名。 <code>execution(modifiers-pattern? ret-type-pattern declaring-type-pattern? name-pattern(param-pattern)throws-pattern?)</code></li></ol><ul><li><code>modifier-pattern</code>：表示方法的修饰符;</li><li><code>ret-type-pattern</code>：表示方法的返回值</li><li><code>declaring-type-pattern</code>：表示方法所在的类的路径</li><li><code>name-pattern</code>：表示方法名</li><li><code>param-pattern</code>：表示方法的参数</li><li><code>throws-pattern</code>：表示方法抛出的异常</li><li>其中后面跟着<code>?</code>的是可选项。</li></ul><ol start="2"><li><code>this()</code>是用来限定方法所属的类，为接口则限定所有的实现类，为类的话，限定这单个类。</li><li><code>@annotation</code>表示具有某个标注的方法。</li><li><code>args</code> 表示方法的参数属于一个特定的类，<code>@args</code> 表示参数有特定的标注注解。</li><li><code>within</code> 包或者类型满足within中描述的包或者类型的类的所有非私有方法，<code>@within</code> 类型拥有@target描述中给出的annotation,其中@target和@within的区别在于@within要求的annotation的级别为CLASS，而@target为RUNTIME<br>. <code>target</code> 业务实例对象（非代理实例）的类型满足target 中的描述的类型，@target 类型拥有@target描述中给出的annotation</li><li><code>bean()</code> 表示所有匹配的 bean，例如 ,bean(“*Service”)，匹配所有 <code>Service</code> 结尾的类。可以使用 <code>!bean()</code> 表示不匹配。</li></ol><p><strong>注意事项:</strong></p><ul><li>在各个pattern中，可以使用”*”来表示匹配所有。</li><li>在<code>param-pattern</code>中，可以指定具体的参数类型，多个参数间用<code>,</code>隔开，各个也可以用 <code>*</code> 来表示匹配任意类型的参数，如<code>(String)</code>表示匹配一个<code>String</code>参数的方法；<code>(*,String)</code>表示匹配有两个参数的方法，第一个参数可以是任意类型，而第二个参数是String类型。</li><li>可以用<code>(..)</code>表示零个或多个任意的方法参数。</li><li>使用<code>&amp;&amp;</code>符号表示与关系，使用<code>||</code>表示或关系、使用<code>!</code>表示非关系。在XML文件中使用<code>and</code>、<code>or</code>和<code>not</code>这三个符号。</li></ul><p>AspectJ提供了五种定义通知的标注：</p><ul><li><code>@Before</code>：前置通知，在调用目标方法之前执行通知定义的任务</li><li><code>@After</code>：后置通知，在目标方法执行结束后，无论执行结果如何都执行通知定义的任务</li><li><code>@AfterReturning</code>：后置通知，在目标方法执行结束后，如果执行成功，则执行通知定义的任务</li><li><code>@AfterThrowing</code>：异常通知，如果目标方法执行过程中抛出异常，则执行通知定义的任务</li><li><code>@Around</code>：环绕通知，在目标方法执行前和执行后，都需要执行通知定义的任务</li></ul><p><strong>通过标注定义通知只需要两个步骤：</strong></p><ol><li>将以上五种标注之一添加到切面的方法中</li><li>在标注中设置切点的定义。</li></ol><h4 id="创建环绕通知"><a href="#创建环绕通知" class="headerlink" title="创建环绕通知"></a>创建环绕通知</h4><p>环绕通知相比其它四种通知有其特殊之处。环绕通知本质上是将前置通知、后置通知和异常通知整合成一个单独的通知。</p><p>用<code>@Around</code>标注的方法，该方法必须有一个<code>ProceedingJoinPoint</code>类型的参数，</p><p>在方法体中，需要通过这个参数，以<code>joinPoint.proceed();</code>的形式调用目标方法。注意在环绕通知中必须进行该调用，否则目标方法本身的执行就会被跳过。</p><p>计算方法的执行时间：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Around(&quot;logPointCut()&quot;) //切点</span><br><span class="line">public Object around(ProceedingJoinPoint point) throws Throwable &#123;</span><br><span class="line">    long beginTime = System.currentTimeMillis();</span><br><span class="line">    //执行方法</span><br><span class="line">    Object result = point.proceed();</span><br><span class="line">    //执行时长(毫秒)</span><br><span class="line">    long time = System.currentTimeMillis() - beginTime;</span><br><span class="line"></span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id="处理通知中参数"><a href="#处理通知中参数" class="headerlink" title="处理通知中参数"></a>处理通知中参数</h4><p>获取参数的方式则需要使用关键词是<code>args</code>。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"bean(sysUserServiceImpl) &amp;&amp; args(userEntity,..)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userPointCut</span><span class="params">(SysUserEntity userEntity)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span>(<span class="string">"userPointCut(userEntity)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validateUser</span><span class="params">(SysUserEntity userEntity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// to handler args</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这里有个非常严格的一点就是，<code>args(userEntity,..)</code>，表示目标方法，可能有多个参数，但是包括 <code>userEntity</code>，这里 <code>userEntity</code> 必须参数名相同，不同就编织了。</p><p><strong><code>args()</code>中参数的名称必须跟切点方法的签名中<code>public void validateUser(SysUserEntity userEntity)</code>的参数名称相同。如果使用切点函数定义，其中的参数名称也必须与通知方法签名中的参数完全相同</strong></p><h4 id="AfterReturning增强处理"><a href="#AfterReturning增强处理" class="headerlink" title="AfterReturning增强处理"></a>AfterReturning增强处理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AfterReturning</span>(pointcut = <span class="string">"logPointCut()"</span>, returning = <span class="string">"rtv"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logAfter</span><span class="params">(Object rtv)</span> </span>&#123;</span><br><span class="line">    System.out.println(Objects.toString(rtv));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>@AfterReturning</code> 注解时，指定了一个<code>returning</code>属性，假设该属性值为<code>rvt</code>，这表明允许在Advice方法（logAfter()方法）中定义名为rvt的形参，程序可通过rvt形参来访问目标方法的返回值。</p><p>注意：<br><strong>虽然<code>AfterReturning</code>增强处理可以访问到方法的返回值，但它不可以改变目标方法的返回值。</strong></p><h4 id="AOP切面的优先级"><a href="#AOP切面的优先级" class="headerlink" title="AOP切面的优先级"></a>AOP切面的优先级</h4><p>有时候，我们对一个方法会有多个切面的问题，这个时候还会涉及到切面的执行顺序的问题。</p><p>我们可以定义每个切面的优先级， Spring 中提供注解 <code>@Order(i)</code> ，当 <code>i</code> 的值越小，优先级越高。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Spring AOP 属于动态代理。</p><p>Spring 的 AOP 代理由 Spring 的 IoC 容器负责生成、管理，其依赖关系也由 IoC 容器负责管理。因此，AOP 代理可以直接使用容器中的其他 Bean 实例作为目标，这种关系可由 IoC 容器的依赖注入提供。</p><p>总得来说使用 AOP 的时候，需要做好三件事情，</p><ol><li>由于 AOP 一般作用于业务代码上，首先写好业务代码；</li><li>AOP 使用阶段，定义切入点，一个切入点可以横切多个业务组件；</li><li>切入点增强处理，为业务点织入增强处理的动作。</li></ol><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://www.tianmaying.com/tutorial/spring-aop-point-advice" rel="external nofollow noopener noreferrer" target="_blank">Spring AOP中定义切点（PointCut）和通知（Advice）</a></li><li><a href="http://blog.didispace.com/springbootaoplog/" rel="external nofollow noopener noreferrer" target="_blank">Spring Boot中使用AOP统一处理Web请求日志</a><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none;padding-left:0;margin-left:40px"><li id="fn:1"><span style="display:inline-block;vertical-align:top;padding-right:10px;margin-left:-40px">1.</span><span style="display:inline-block;vertical-align:top;margin-left:10px">Aspect Oriented Programming的缩写<a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div></li></ul><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习Spring Boot：（二十一）使用 EhCache 实现数据缓存]]></title>
      <url>/springboot-21.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>当多次查询数据库影响到系统性能的时候，可以考虑使用缓存，来解决数据访问新能的问题。<br>SpringBoot 已经为我们提供了自动配置多个 CacheManager 的实现，只要去实现使用它就可以了。</p><a id="more"></a><p>一般的系统都是优先使用 EhCache，它工作在 JAVA 进程中，在传统的应用没有太大要求的时候，使用它比较方便，分布式系统中去使用 Shiro 集中管理缓存。</p><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="加入依赖"><a href="#加入依赖" class="headerlink" title="加入依赖"></a>加入依赖</h4><p>在 pom.xml 中加入依赖<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.ehcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h4 id="添加缓存相关的配置"><a href="#添加缓存相关的配置" class="headerlink" title="添加缓存相关的配置"></a>添加缓存相关的配置</h4><p>新建 <code>ehcache.xml</code>，加入缓存相关参数， 我新添加一个 name 为 users 的缓存设置：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">"http://ehcache.org/ehcache.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">updateCheck</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"java.io.tmpdir/Tmp_EhCache"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">"1000"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxEntriesLocalHeap</span>=<span class="string">"400"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskPersistent</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">"120"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">"users"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxEntriesLocalHeap</span>=<span class="string">"200"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">"600"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>参数详解：</p><ul><li><strong>name</strong>:缓存名称。</li><li><strong>maxElementsInMemory</strong>：缓存最大个数。</li><li><strong>eternal</strong>:对象是否永久有效，一但设置了，timeout将不起作用。</li><li><strong>timeToIdleSeconds</strong>：设置对象在失效前的允许闲置时间（单位：秒）。仅当eternal=false对象不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。</li><li><strong>timeToLiveSeconds</strong>：设置对象在失效前允许存活时间（单位：秒）。最大时间介于创建时间和失效时间之间。仅当eternal=false对象不是永久有效时使用，默认是0.，也就是对象存活时间无穷大。</li><li><strong>overflowToDisk</strong>：当内存中对象数量达到maxElementsInMemory时，Ehcache将会对象写到磁盘中。</li><li><strong>diskSpoolBufferSizeMB</strong>：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。</li><li><strong>maxElementsOnDisk</strong>：硬盘最大缓存个数。</li><li><strong>diskPersistent</strong>：是否缓存虚拟机重启期数据，默认为false。</li><li><strong>diskExpiryThreadIntervalSeconds</strong>：磁盘失效线程运行时间间隔，默认是120秒。</li><li><strong>memoryStoreEvictionPolicy</strong>：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。</li><li><strong>clearOnFlush</strong>：内存数量最大时是否清除。</li><li><strong>memoryStoreEvictionPolicy</strong>：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。</li></ul><h4 id="开启缓存"><a href="#开启缓存" class="headerlink" title="开启缓存"></a>开启缓存</h4><ol><li><p>在系统配置文件中指定<br>在配置文件中加入指定我们设置的 <code>ehcache.xml</code> 作为 EhCache 的配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cache:</span></span><br><span class="line"><span class="attr">    ehcache:</span></span><br><span class="line"><span class="attr">      config:</span> <span class="string">config/ehcache.xml</span> <span class="comment"># 指定 ehcache.xml 创建EhCache的缓存管理器</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">ehcache</span> <span class="comment"># 指定缓存管理器</span></span><br></pre></td></tr></table></figure></li><li><p>在启动类上加上注解 <code>@EnableCaching</code>，开启缓存。</p></li></ol><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p><strong>使用的时候需要注意，我们之前在 shiro 缓存中 配置了相关的缓存的配置，现在需要把 shiro 相关的缓存的内容全部都要删除掉，不然两者的缓存会存在冲突。</strong><br>还是以 shiro 的获取权限列表的服务为例，不用 shiro-cache 后，直接在查询的这里自己添加上缓存就可以了。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CacheConfig</span>(cacheNames = <span class="string">"users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ShiroService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户权限</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 用户ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 权限</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Cacheable</span></span><br><span class="line">    <span class="function">Set&lt;String&gt; <span class="title">getUserPermissions</span><span class="params">(<span class="keyword">long</span> userId)</span></span>;</span><br></pre></td></tr></table></figure><p></p><p>debug 调试，<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> CacheManager cacheManager;</span><br></pre></td></tr></table></figure><p></p><p>发现 key 为 <code>users</code> 中存储了相关内容。</p><h4 id="注解的使用"><a href="#注解的使用" class="headerlink" title="注解的使用"></a>注解的使用</h4><ul><li><code>@CacheConfig</code>：主要用于配置该类中会用到的一些共用的缓存配置。在这里<code>@CacheConfig(cacheNames = &quot;users&quot;)</code>：配置了该数据访问对象中返回的内容将存储于名为users的缓存对象中，我们也可以不使用该注解，直接通过@Cacheable自己配置缓存集的名字来定义。</li><li>@Cacheable：配置了<code>getUserPermissions(long userId)</code>函数的返回值将被加入缓存。同时在查询时，会先从缓存中获取，若不存在才再发起对数据库的访问。该注解主要有下面几个参数：</li></ul><ol><li><code>value</code>、<code>cacheNames</code>：两个等同的参数（cacheNames为Spring 4新增，作为value的别名），用于指定缓存存储的集合名。由于Spring 4中新增了@CacheConfig，因此在Spring 3中原本必须有的value属性，也成为非必需项了。</li><li><code>key</code>：缓存对象存储在<code>Map</code>集合中的<code>key</code>值，非必需，缺省按照函数的所有参数组合作为key值，若自己配置需使用<code>SpEL</code>表达式，比如：<code>@Cacheable(key = &quot;#p0&quot;)</code>：使用函数第一个参数作为缓存的key值，更多关于SpEL表达式的详细内容可参考<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/integration.html#cache" rel="external nofollow noopener noreferrer" target="_blank">官方文档</a></li><li><code>condition</code>：缓存对象的条件，非必需，也需使用SpEL表达式，只有满足表达式条件的内容才会被缓存，比如：<code>@Cacheable(key = &quot;#p0&quot;, condition = &quot;#p0.length() &lt; 3&quot;)</code>，表示只有当第一个参数的长度小于3的时候才会被缓存，</li><li><code>unless</code>：另外一个缓存条件参数，非必需，需使用SpEL表达式。它不同于<code>condition</code>参数的地方在于它的判断时机，该条件是在函数被调用之后才做判断的，所以它可以通过对<code>result</code>进行判断。</li><li><code>keyGenerator</code>：用于指定<code>key</code>生成器，非必需。若需要指定一个自定义的key生成器，我们需要去实现<code>org.springframework.cache.interceptor.KeyGenerator</code>接口，并使用该参数来指定。需要注意的是：<strong>该参数与key是互斥的</strong>。</li><li><code>cacheManager</code>：用于指定使用哪个缓存管理器，非必需。只有当有多个时才需要使用。</li><li><code>cacheResolver</code>：用于指定使用那个缓存解析器，非必需。需通过<code>org.springframework.cache.interceptor.CacheResolver</code>接口来实现自己的缓存解析器，并用该参数指定。</li></ol><p>除了这里用到的两个注解之外，还有下面几个核心注解：</p><ul><li><code>@CachePut</code>：配置于函数上，能够根据参数定义条件来进行缓存，它与<code>@Cacheable</code>不同的是，它每次都会真是调用函数，所以主要用于数据新增和修改操作上。它的参数与<code>@Cacheable</code>类似，具体功能可参考上面对@Cacheable参数的解析</li><li><code>@CacheEvict</code>：配置于函数上，通常用在删除方法上，用来从缓存中移除相应数据。除了同<code>@Cacheable</code>一样的参数之外，它还有下面两个参数：</li></ul><ol><li><code>allEntries</code>：非必需，默认为<code>false</code>。当为<code>true</code>时，会移除所有数据</li><li><code>beforeInvocation</code>：非必需，默认为<code>false</code>，会在调用方法之后移除数据。当为<code>true</code>时，会在调用方法之前移除数据。<h4 id="缓存配置"><a href="#缓存配置" class="headerlink" title="缓存配置"></a>缓存配置</h4><blockquote><p>在Spring Boot中通过@EnableCaching注解自动化配置合适的缓存管理器（CacheManager），Spring Boot根据下面的顺序去侦测缓存提供者：</p></blockquote></li><li>Generic</li><li>JCache (JSR-107)</li><li>EhCache 2.x</li><li>Hazelcast</li><li>Infinispan</li><li>Redis</li><li>Guava</li><li>Simple</li></ol><p>通常还是推荐去指定一个 缓存类型比较好，在系统配置文件配置：<br></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cache:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">ehcache</span></span><br></pre></td></tr></table></figure><p></p><h3 id="Spring-项目中使用"><a href="#Spring-项目中使用" class="headerlink" title="Spring 项目中使用"></a>Spring 项目中使用</h3><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--需要 spring-context-support 依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.ehcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="在主配置文件中配置bean"><a href="#在主配置文件中配置bean" class="headerlink" title="在主配置文件中配置bean"></a>在主配置文件中配置bean</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:cache</span>=<span class="string">"http://www.springframework.org/schema/cache"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    	http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 缓存配置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启用缓存注解功能(请将其配置在Spring主配置文件中) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache:annotation-driven</span> <span class="attr">cache-manager</span>=<span class="string">"cacheManager"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring提供的基于的Ehcache实现的缓存管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cacheManagerFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.cache.ehcache.EhCacheManagerFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置 ehcache --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:spring/ehcache.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cacheManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.cache.ehcache.EhCacheCacheManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheManager"</span> <span class="attr">ref</span>=<span class="string">"cacheManagerFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="http://blog.didispace.com/springbootcache1/" rel="external nofollow noopener noreferrer" target="_blank">Spring Boot中的缓存支持（一）注解配置与EhCache使用</a></li></ul><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习Spring Boot：（二十）使用 MongoDB]]></title>
      <url>/springboot-20.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>MongoDB <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top-right hint--error hint--large" aria-label="来自于英文单词“Humongous”，中文含义为“庞大”">[1]</span></a></sup> 是可以应用于各种规模的企业、各个行业以及各类应用程序的开源数据库。基于分布式文件存储的数据库。由C++语言编写。旨在为WEB应用提供可扩展的高性能数据存储解决方案。MongoDB是一个高性能，开源，无模式的文档型数据库，是当前NoSql数据库中比较热门的一种。</p></blockquote><a id="more"></a><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>Spring Boot 对 MongoDB 的数据源操作进行了封装。</p><h4 id="加入依赖"><a href="#加入依赖" class="headerlink" title="加入依赖"></a>加入依赖</h4><p>在 pom.xml 加入：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h4 id="配置连接参数"><a href="#配置连接参数" class="headerlink" title="配置连接参数"></a>配置连接参数</h4><p>在系统配置文件中配置：<br></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  data:</span></span><br><span class="line"><span class="attr">    mongodb:</span></span><br><span class="line"><span class="attr">      uri:</span> <span class="attr">mongodb://wuwii:123456@localhost:27017/learn</span></span><br></pre></td></tr></table></figure><p></p><h4 id="测试使用"><a href="#测试使用" class="headerlink" title="测试使用"></a>测试使用</h4><ol><li><p>创建实体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Document</span>(collection = <span class="string">"pet"</span>) <span class="comment">// 标识要持久化到MongoDB的域对象。模型名是 pet</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pet</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="comment">//@Indexed(unique = true) // 使用MongoDB的索引特性标记一个字段</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@Field</span>(<span class="string">"pet_name"</span>) <span class="comment">//自定义设置对应MongoDB中的key</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String species;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建 dao 接口完成基础操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PetDaoImpl</span> <span class="keyword">implements</span> <span class="title">PetDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pet <span class="title">find</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mongoTemplate.findById(id, Pet.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Pet&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mongoTemplate.findAll(Pet.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Pet pet)</span> </span>&#123;</span><br><span class="line">        mongoTemplate.insert(pet);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Pet pet)</span> </span>&#123;</span><br><span class="line">        Query query = <span class="keyword">new</span> Query();</span><br><span class="line">        Criteria criteria = <span class="keyword">new</span> Criteria(<span class="string">"id"</span>);</span><br><span class="line">        criteria.is(pet.getId());</span><br><span class="line">        query.addCriteria(criteria);</span><br><span class="line">        Update update = <span class="keyword">new</span> Update();</span><br><span class="line">        update.set(<span class="string">"pet_name"</span>, pet.getName())</span><br><span class="line">                .set(<span class="string">"species"</span>, pet.getSpecies());</span><br><span class="line">        mongoTemplate.updateFirst(query, update, Pet.class); <span class="comment">// 条件，更新的数据，更新的类型</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        Criteria criteria = <span class="keyword">new</span> Criteria(<span class="string">"id"</span>);</span><br><span class="line">        criteria.is(id);</span><br><span class="line">        Query query = <span class="keyword">new</span> Query();</span><br><span class="line">        query.addCriteria(criteria);</span><br><span class="line">        mongoTemplate.remove(query, Pet.class); <span class="comment">// 删除的条件、删除的类型</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>简单测试下</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@FixMethodOrder</span>(MethodSorters.NAME_ASCENDING)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PetDaoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PetDao petDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Pet pet;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        pet = <span class="keyword">new</span> Pet();</span><br><span class="line">        pet.setId(<span class="number">1L</span>);</span><br><span class="line">        pet.setName(<span class="string">"Tom"</span>);</span><br><span class="line">        pet.setSpecies(<span class="string">"cat"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01Add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Pet pet = <span class="keyword">new</span> Pet();</span><br><span class="line">        pet.setId(<span class="number">1L</span>);</span><br><span class="line">        pet.setName(<span class="string">"Tom"</span>);</span><br><span class="line">        pet.setSpecies(<span class="string">"cat"</span>);</span><br><span class="line">        petDao.add(pet);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02Find</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Assert.assertThat(pet, Matchers.equalTo(petDao.find(pet.getId())));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03FindAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(petDao.findAll());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04Update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        pet.setName(<span class="string">"KronChan"</span>);</span><br><span class="line">        petDao.update(pet);</span><br><span class="line">        Assert.assertThat(pet, Matchers.equalTo(petDao.find(pet.getId())));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test05Delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        petDao.delete(pet.getId());</span><br><span class="line">        Assert.assertThat(<span class="keyword">null</span>, Matchers.equalTo(petDao.find(pet.getId())));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="去数据库验证结果"><a href="#去数据库验证结果" class="headerlink" title="去数据库验证结果"></a>去数据库验证结果</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; use learn</span><br><span class="line">switched to db learn</span><br><span class="line">&gt; db.pet.find()</span><br><span class="line">&#123; <span class="attr">"_id"</span> : NumberLong(<span class="number">1</span>), <span class="attr">"_class"</span> : <span class="string">"com.wuwii.testmongodb.Pet"</span>, <span class="attr">"pet_name"</span> : <span class="string">"KronChan"</span>, <span class="attr">"species"</span> : <span class="string">"cat"</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="多数据源的使用"><a href="#多数据源的使用" class="headerlink" title="多数据源的使用"></a>多数据源的使用</h3><p>未完成</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none;padding-left:0;margin-left:40px"><li id="fn:1"><span style="display:inline-block;vertical-align:top;padding-right:10px;margin-left:-40px">1.</span><span style="display:inline-block;vertical-align:top;margin-left:10px">来自于英文单词“Humongous”，中文含义为“庞大”<a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> mongodb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[安装 MongoDB]]></title>
      <url>/install-mongodb.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><h3 id="Window-上安装-MongoDB"><a href="#Window-上安装-MongoDB" class="headerlink" title="Window 上安装 MongoDB"></a>Window 上安装 MongoDB</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p><a href="https://www.mongodb.com/download-center" rel="external nofollow noopener noreferrer" target="_blank">MongoDB 官网</a></p><p>官网下载需要翻墙，<br>网上看到一个人挂在云存储上的链接，拿来用下 <a href="http://oaq0p7t2g.bkt.clouddn.com/mongodb-win32-x86_64-2008plus-ssl-3.4.1-signed.msi?attname=" rel="external nofollow noopener noreferrer" target="_blank">地址</a></p><a id="more"></a><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>一路安装就行，如果不喜欢安装在 C 盘的朋友，请选择 <code>custom</code> 选择路径。</p><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><p>在 path 中配置安装的 bin 目录<br><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/mongodb/1.png" alt="image"></p><h4 id="创建数据库文件存放目录"><a href="#创建数据库文件存放目录" class="headerlink" title="创建数据库文件存放目录"></a>创建数据库文件存放目录</h4><p>首先创建数据库文件存储的目录，比如我建了一个新的文件夹 <code>D:\zhangkai\mongodb\data\db</code>，用来存储 MongoDB 的数据库文件，注意这个文件夹只能手动创建，启动 MongoDB 是不会帮助我们自动创建的，它会报一个错误，提示你找不到该文件夹。</p><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>window 下使用 powershell 或者 cmd 进入安装目录的 bin 文件夹下，执行启动命令：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath D:\zhangkai\mongodb\data\db</span><br></pre></td></tr></table></figure><p></p><p>执行完成命令出现连接上了 27017 端口。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2018-03-01T14:35:04.988+0800 I NETWORK  [thread1] waiting for connections on port 27017</span><br></pre></td></tr></table></figure><p></p><p>然后可以在 <code>D:\zhangkai\mongodb\data\db</code> 目录中查看到一堆文件。<br><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/mongodb/2.png" alt="image"></p><h4 id="创建日志文件存放目录"><a href="#创建日志文件存放目录" class="headerlink" title="创建日志文件存放目录"></a>创建日志文件存放目录</h4><p>我们在使用 MongoDB 的时候需要使用日志，这个时候需要指定 log 目录，所以我们创建 log 目录 <code>D:\zhangkai\mongodb\data\log\</code>，<br>执行启动命令：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath D:\zhangkai\mongodb\data\db --logpath=D:\zhangkai\mongodb\data\log\mongodb.log</span><br></pre></td></tr></table></figure><p></p><p>然后系统帮助我们在日志目录下生成一个 <code>mongodb.log</code> 的文件，用来记录日志信息。</p><p>再次启用的时候，会自动备份上次的日志文件，新创建一个 <code>mongodb.log</code> 的文件。<br>我们发现带有日志启动后，以前命令行一堆日志信息，将记录到这个日志文件中，命令行是干净的。</p><p>如果不想覆盖上个日志需要在上个命令后面加上 <code>--logappend</code><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath D:\zhangkai\mongodb\data\db --logpath=D:\zhangkai\mongodb\data\log\mongodb.log --logappend</span><br></pre></td></tr></table></figure><p></p><p><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/mongodb/3.png" alt="image"></p><h4 id="安装为-Windows-服务"><a href="#安装为-Windows-服务" class="headerlink" title="安装为 Windows 服务"></a>安装为 Windows 服务</h4><p>每次启动 MongoDB 都输入那么一大串命令很麻烦，而且还容易输入错误，可以将它注册成服务，方便后面使用。</p><p>以<code>管理员</code>的身份启动 powershell 或 cmd，执行下面的命令：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath D:\zhangkai\mongodb\data\db --logpath=D:\zhangkai\mongodb\data\log\mongodb.log --logappend --directoryperdb --serviceName MongoDB --install</span><br></pre></td></tr></table></figure><p></p><p>参数解释：</p><ul><li><code>dbpath</code>: 数据库文件目录</li><li><code>logpath</code>：日志文件目录</li><li><code>logappend</code>：日志文件以追加的方式输出，而不是新建文件</li><li><code>directoryperdb</code>：每个DB都会新建一个目录</li><li><code>serviceName</code>：window 服务名，我们用指定的名字来启动服务</li><li><code>install</code>：创建服务，相反 <code>remove</code>，移除服务，<code>reinstall</code> 重新构建</li></ul><p>执行完可以在日志文件看到日志信息：<br></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2018</span><span class="bullet">-03</span><span class="bullet">-01</span><span class="attr">T16:27:19.606+0800</span> <span class="string">I</span> <span class="string">CONTROL</span> <span class="string">[main]</span> <span class="string">Service</span> <span class="string">can</span> <span class="string">be</span> <span class="string">started</span> <span class="string">from</span> <span class="string">the</span> <span class="string">command</span> <span class="string">line</span> <span class="string">with</span> <span class="string">'net start MongoDB'</span></span><br></pre></td></tr></table></figure><p></p><p>尝试使用 <code>net start MongoDB</code> 启动服务：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PS C:\WINDOWS\system32&gt; net start MongoDB</span><br><span class="line">MongoDB 服务正在启动 .</span><br><span class="line">MongoDB 服务已经启动成功。</span><br></pre></td></tr></table></figure><p></p><p>可以使用 <code>net stop MongoDB</code> 停止服务。</p><h4 id="浏览器测试"><a href="#浏览器测试" class="headerlink" title="浏览器测试"></a>浏览器测试</h4><p>浏览器输入链接<br><a href="http://127.0.0.1:27017/" rel="external nofollow noopener noreferrer" target="_blank">http://127.0.0.1:27017/</a><br><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/mongodb/4.png" alt="image"></p><h3 id="Linux-安装-MongoDB"><a href="#Linux-安装-MongoDB" class="headerlink" title="Linux 安装 MongoDB"></a>Linux 安装 MongoDB</h3><p>我使用的是 CentOS 7 ，ubuntu 系统安装方式也差不多。</p><h4 id="使用-yum-安装"><a href="#使用-yum-安装" class="headerlink" title="使用 yum 安装"></a>使用 yum 安装</h4><p>由于官方镜像在国内被墙，需要设置国内的镜像，我使用的是阿里云的。</p><ol><li><p>最好先更新下软件包，开发人员多多更新软件，很有利的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y update</span><br></pre></td></tr></table></figure></li><li><p>编辑一个 mongodb 镜像，版本随便自己选择吧，我使用的是3.4，我之前安装的是 3.2的差别不大</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/yum.repos.d/mongodb-org.repo</span><br><span class="line"><span class="comment"># 在文件中添加以下镜像内容</span></span><br><span class="line">[mongodb-org]</span><br><span class="line">name=MongoDB Repository</span><br><span class="line">baseurl=http://mirrors.aliyun.com/mongodb/yum/redhat/7Server/mongodb-org/3.4/x86_64/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure></li><li><p>使用 yum 安装 <code>yum install -y mongodb-org</code></p></li></ol><p>这样我们就安装完成了</p><h4 id="启动方式"><a href="#启动方式" class="headerlink" title="启动方式"></a>启动方式</h4><ol><li><p>例如上面 window 命令行启动，只要在命令后街上相应的参数设置就行了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath=/opt/mongodb/data/db --logpath=/opt/mongodb/log/mongodb.log</span><br></pre></td></tr></table></figure></li><li><p>使用配置文件启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod -f /etc/mongod.conf</span><br></pre></td></tr></table></figure></li></ol><p>或者使用<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --config /etc/mongod.conf</span><br></pre></td></tr></table></figure><p></p><p>其实上面两种启动方式在 window 里也是适用的，可以试一试。</p><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>配置文件在 <code>/etc/mongod.conf</code>，参考配置文件，资料不全，大多数参数配置暂时也用不到，所以没仔细研究这个东西。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">systemLog:</span></span><br><span class="line">   <span class="comment"># verbosity: 0  #日志等级，0-5，默认0</span></span><br><span class="line">   <span class="comment"># quiet: false  #限制日志输出，</span></span><br><span class="line">   <span class="comment"># traceAllExceptions: true  #详细错误日志</span></span><br><span class="line">   <span class="comment"># syslogFacility: user #记录到操作系统的日志级别，指定的值必须是操作系统支持的，并且要以--syslog启动</span></span><br><span class="line"><span class="attr">   path:</span> <span class="string">/Users/mhq/projects/db/mongo/logs/log.txt</span>  <span class="comment">#日志路径。</span></span><br><span class="line"><span class="attr">   logAppend:</span> <span class="literal">false</span> <span class="comment">#启动时，日志追加在已有日志文件内还是备份旧日志后，创建新文件记录日志, 默认false</span></span><br><span class="line"><span class="attr">   logRotate:</span> <span class="string">rename</span> <span class="comment">#rename/reopen。rename，重命名旧日志文件，创建新文件记录；reopen，重新打开旧日志记录，需logAppend为true</span></span><br><span class="line"><span class="attr">   destination:</span> <span class="string">file</span> <span class="comment">#日志输出方式。file/syslog,如果是file，需指定path，默认是输出到标准输出流中</span></span><br><span class="line"><span class="attr">   timeStampFormat:</span> <span class="string">iso8601-local</span> <span class="comment">#日志日期格式。ctime/iso8601-utc/iso8601-local, 默认iso8601-local</span></span><br><span class="line">   <span class="comment"># component: #各组件的日志级别</span></span><br><span class="line">   <span class="comment">#    accessControl:</span></span><br><span class="line">   <span class="comment">#       verbosity: &lt;int&gt;</span></span><br><span class="line">   <span class="comment">#    command:</span></span><br><span class="line">   <span class="comment">#       verbosity: &lt;int&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">processManagement:</span></span><br><span class="line"><span class="attr">   fork:</span> <span class="literal">true</span> <span class="comment">#以守护进程运行 默认false</span></span><br><span class="line">   <span class="comment"># pidFilePath: &lt;string&gt; #PID 文件位置</span></span><br><span class="line"></span><br><span class="line"><span class="attr">net:</span></span><br><span class="line"><span class="attr">   port:</span> <span class="number">27017</span> <span class="comment">#监听端口，默认27017</span></span><br><span class="line"><span class="attr">   bindIp:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="comment">#绑定监听的ip，deb和rpm包里有默认的配置文件(/etc/mongod.conf)里面默认配置为127.0.0.1,若不限制IP，务必确保认证安全，多个Ip用逗号分隔</span></span><br><span class="line"><span class="attr">   maxIncomingConnections:</span> <span class="number">65536</span> <span class="comment">#最大连接数，可接受的连接数还受限于操作系统配置的最大连接数</span></span><br><span class="line"><span class="attr">   wireObjectCheck:</span> <span class="literal">true</span> <span class="comment">#校验客户端的请求，防止错误的或无效BSON插入,多层文档嵌套的对象会有轻微性能影响,默认true</span></span><br><span class="line"><span class="attr">   ipv6:</span> <span class="literal">false</span> <span class="comment">#是否启用ipv6,3.0以上版本始终开启</span></span><br><span class="line"><span class="attr">   unixDomainSocket:</span> <span class="comment">#unix socket监听，仅适用于基于unix的系统</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">false</span> <span class="comment">#默认true</span></span><br><span class="line"><span class="attr">      pathPrefix:</span> <span class="string">/tmp</span> <span class="comment">#路径前缀，默认/temp</span></span><br><span class="line"><span class="attr">      filePermissions:</span> <span class="number">0700</span> <span class="comment">#文件权限 默认0700</span></span><br><span class="line"><span class="attr">   http:</span> <span class="comment">#警告 确保生产环境禁用HTTP status接口、REST API以及JSON API以防止数据暴露和漏洞攻击</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">false</span> <span class="comment">#是否启用HTTP接口、启用会增加网络暴露。3.2版本后停止使用HTTP interface</span></span><br><span class="line"><span class="attr">      JSONPEnabled:</span> <span class="literal">false</span> <span class="comment">#JSONP的HTTP接口</span></span><br><span class="line"><span class="attr">      RESTInterfaceEnabled:</span> <span class="literal">false</span> <span class="comment">#REST API接口</span></span><br><span class="line">   <span class="comment"># ssl: # ssl 证书的配置，没研究</span></span><br><span class="line">   <span class="comment">#    sslOnNormalPorts: &lt;boolean&gt;  # deprecated since 2.6</span></span><br><span class="line">   <span class="comment">#    mode: &lt;string&gt;</span></span><br><span class="line">   <span class="comment">#    PEMKeyFile: &lt;string&gt;</span></span><br><span class="line">   <span class="comment">#    PEMKeyPassword: &lt;string&gt;</span></span><br><span class="line">   <span class="comment">#    clusterFile: &lt;string&gt;</span></span><br><span class="line">   <span class="comment">#    clusterPassword: &lt;string&gt;</span></span><br><span class="line">   <span class="comment">#    CAFile: &lt;string&gt;</span></span><br><span class="line">   <span class="comment">#    CRLFile: &lt;string&gt;</span></span><br><span class="line">   <span class="comment">#    allowConnectionsWithoutCertificates: &lt;boolean&gt;</span></span><br><span class="line">   <span class="comment">#    allowInvalidCertificates: &lt;boolean&gt;</span></span><br><span class="line">   <span class="comment">#    allowInvalidHostnames: &lt;boolean&gt;</span></span><br><span class="line">   <span class="comment">#    disabledProtocols: &lt;string&gt;</span></span><br><span class="line">   <span class="comment">#    FIPSMode: &lt;boolean&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">security:</span> <span class="comment"># 开启用户认证模式</span></span><br><span class="line"><span class="attr">   authorization:</span> <span class="string">enabled</span> <span class="comment"># enabled/disabled #开启客户端认证</span></span><br><span class="line"><span class="attr">   javascriptEnabled:</span>  <span class="literal">true</span> <span class="comment">#启用或禁用服务器端JavaScript执行</span></span><br><span class="line">   <span class="comment"># keyFile: &lt;string&gt; #密钥路径</span></span><br><span class="line">   <span class="comment"># clusterAuthMode: &lt;string&gt; #集群认证方式</span></span><br><span class="line">   <span class="comment"># enableEncryption: &lt;boolean&gt;</span></span><br><span class="line">   <span class="comment"># encryptionCipherMode: &lt;string&gt;</span></span><br><span class="line">   <span class="comment"># encryptionKeyFile: &lt;string&gt;</span></span><br><span class="line">   <span class="comment"># kmip:</span></span><br><span class="line">   <span class="comment">#    keyIdentifier: &lt;string&gt;</span></span><br><span class="line">   <span class="comment">#    rotateMasterKey: &lt;boolean&gt;</span></span><br><span class="line">   <span class="comment">#    serverName: &lt;string&gt;</span></span><br><span class="line">   <span class="comment">#    port: &lt;string&gt;</span></span><br><span class="line">   <span class="comment">#    clientCertificateFile: &lt;string&gt;</span></span><br><span class="line">   <span class="comment">#    clientCertificatePassword: &lt;string&gt;</span></span><br><span class="line">   <span class="comment">#    serverCAFile: &lt;string&gt;</span></span><br><span class="line">   <span class="comment"># sasl:</span></span><br><span class="line">   <span class="comment">#    hostName: &lt;string&gt;</span></span><br><span class="line">   <span class="comment">#    serviceName: &lt;string&gt;</span></span><br><span class="line">   <span class="comment">#    saslauthdSocketPath: &lt;string&gt;</span></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="comment"># setParameter: #设置参数</span></span><br><span class="line"><span class="comment">#    &lt;parameter1&gt;: &lt;value1&gt;</span></span><br><span class="line"><span class="comment">#    &lt;parameter2&gt;: &lt;value2&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line"><span class="attr">   dbPath:</span> <span class="string">/Users/mhq/projects/db/mongo/test/</span> <span class="comment">#数据库，默认/data/db,如果使用软件包管理安装的查看/etc/mongod.conf</span></span><br><span class="line"><span class="attr">   indexBuildRetry:</span> <span class="literal">true</span> <span class="comment">#重启时，重建不完整的索引</span></span><br><span class="line">   <span class="comment"># repairPath: &lt;string&gt;  #--repair操作时的临时工作目录，默认为dbPath下的一个_tmp_repairDatabase_&lt;num&gt;的目录</span></span><br><span class="line">   <span class="comment"># 对应 journal 启用操作日志，以确保写入持久性和数据的一致性，会在dbpath目录下创建journal目录</span></span><br><span class="line"><span class="attr">   journal:</span> </span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">true</span> <span class="comment">#启动journal,64位系统默认开启，32位默认关闭</span></span><br><span class="line">      <span class="comment"># commitIntervalMs: &lt;num&gt; #journal操作的最大时间间隔，默认100或30</span></span><br><span class="line"><span class="attr">   directoryPerDB:</span> <span class="literal">false</span> <span class="comment">#使用单独的目录来存储每个数据库的数据,默认false,如果需要更改，要备份数据，删除掉dbPath下的文件，重建后导入数据</span></span><br><span class="line">   <span class="comment"># syncPeriodSecs: 60 #使用fsync来将数据写入磁盘的延迟时间量,建议使用默认值</span></span><br><span class="line"><span class="attr">   engine:</span> <span class="string">wiredTiger</span> <span class="comment">#存储引擎，mmapv1/wiredTiger/inMemory 默认wiredTiger</span></span><br><span class="line">   <span class="comment"># mmapv1:</span></span><br><span class="line">   <span class="comment">#    preallocDataFiles: &lt;boolean&gt;</span></span><br><span class="line">   <span class="comment">#    nsSize: &lt;int&gt;</span></span><br><span class="line">   <span class="comment">#    quota:</span></span><br><span class="line">   <span class="comment">#       enforced: &lt;boolean&gt;</span></span><br><span class="line">   <span class="comment">#       maxFilesPerDB: &lt;int&gt;</span></span><br><span class="line">   <span class="comment">#    smallFiles: &lt;boolean&gt;</span></span><br><span class="line">   <span class="comment">#    journal:</span></span><br><span class="line">   <span class="comment">#       debugFlags: &lt;int&gt;</span></span><br><span class="line">   <span class="comment">#       commitIntervalMs: &lt;num&gt;</span></span><br><span class="line">   <span class="comment"># wiredTiger:</span></span><br><span class="line">   <span class="comment">#    engineConfig:</span></span><br><span class="line">   <span class="comment">#       cacheSizeGB: &lt;number&gt;  #缓存大小</span></span><br><span class="line">   <span class="comment">#       journalCompressor: &lt;string&gt; #数据压缩格式 none/snappy/zlib</span></span><br><span class="line">   <span class="comment">#       directoryForIndexes: &lt;boolean&gt; #将索引和集合存储在单独的子目录下，默认false</span></span><br><span class="line">   <span class="comment">#    collectionConfig:</span></span><br><span class="line">   <span class="comment">#       blockCompressor: &lt;string&gt; #集合数据压缩格式 </span></span><br><span class="line">   <span class="comment">#    indexConfig:</span></span><br><span class="line">   <span class="comment">#       prefixCompression: &lt;boolean&gt; #启用索引的前缀压缩</span></span><br><span class="line">   <span class="comment"># inMemory:</span></span><br><span class="line">   <span class="comment">#    engineConfig:</span></span><br><span class="line">   <span class="comment">#       inMemorySizeGB: &lt;number&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">operationProfiling:</span> <span class="comment">#性能分析</span></span><br><span class="line"><span class="attr">   slowOpThresholdMs:</span> <span class="number">100</span> <span class="comment">#认定为查询速度缓慢的时间阈值，超过该时间的查询即为缓慢查询，会被记录到日志中, 默认100</span></span><br><span class="line"><span class="attr">   mode:</span> <span class="string">off</span> <span class="comment">#operationProfiling模式 off/slowOp/all 默认off</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># replication: #复制集相关</span></span><br><span class="line"><span class="comment">#    oplogSizeMB: &lt;int&gt;</span></span><br><span class="line"><span class="comment">#    replSetName: &lt;string&gt;</span></span><br><span class="line"><span class="comment">#    secondaryIndexPrefetch: &lt;string&gt;</span></span><br><span class="line"><span class="comment">#    enableMajorityReadConcern: &lt;boolean&gt;</span></span><br><span class="line"><span class="comment"># sharding: #集群分片相关</span></span><br><span class="line"><span class="comment">#    clusterRole: &lt;string&gt;</span></span><br><span class="line"><span class="comment">#    archiveMovedChunks: &lt;boolean&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># auditLog:</span></span><br><span class="line"><span class="comment">#    destination: &lt;string&gt;</span></span><br><span class="line"><span class="comment">#    format: &lt;string&gt;</span></span><br><span class="line"><span class="comment">#    path: &lt;string&gt;</span></span><br><span class="line"><span class="comment">#    filter: &lt;string&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># snmp:</span></span><br><span class="line"><span class="comment">#    subagent: &lt;boolean&gt; #当设置为true，SNMP作为代理运行</span></span><br><span class="line"><span class="comment">#    master: &lt;boolean&gt; #当设置为true，SNMP作为主服务器运行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># basisTech:</span></span><br><span class="line"><span class="comment">#    rootDirectory: &lt;string&gt;</span></span><br></pre></td></tr></table></figure><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://www.jianshu.com/p/f179ce608391" rel="external nofollow noopener noreferrer" target="_blank">MongoDB初体验-配置文件mongod.conf</a></li></ul><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mongodb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习Spring Boot：（十九）Shiro 中使用缓存]]></title>
      <url>/spring-boot-19.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在 shiro 中每次去拦截请求进行权限认证的时候，都会去数据库查询该用户的所有权限信息， 这个时候就是有一个问题了，因为用户的权限信息在短时间内是不可变的，每次查询出来的数据其实都是重复数据，没必要每次都去重新获取这个数据，统一放在缓存中进行管理，这个时候，我们只需要获取一次权限信息，存入到缓存中，待缓存过期后，再次重新获取即可。</p><a id="more"></a><p>例如，我执行一个查询多次，它执行多次权限查询。<br><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/springboot-cache/1.png" alt="image"></p><h3 id="使用-Reids-缓存"><a href="#使用-Reids-缓存" class="headerlink" title="使用 Reids 缓存"></a>使用 Reids 缓存</h3><h4 id="加入-shiro-redis-依赖"><a href="#加入-shiro-redis-依赖" class="headerlink" title="加入 shiro-redis 依赖"></a>加入 shiro-redis 依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- shiro-redis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.crazycake<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.2.1-RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置-Redis"><a href="#配置-Redis" class="headerlink" title="配置 Redis"></a>配置 Redis</h4><p>和前面系统配置 Reids 一样。</p><ol><li><p>在系统配置文件中加入 Redis 配置参数：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="number">192.168</span><span class="number">.19</span><span class="number">.200</span> <span class="comment"># host ,默认 localhost</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">6379</span> <span class="comment"># 端口号，默认6379</span></span><br><span class="line"><span class="attr">    pool:</span></span><br><span class="line">    <span class="comment"># 设置都是默认值，可以按需求设计</span></span><br><span class="line"><span class="attr">      max-active:</span> <span class="number">8</span> <span class="comment"># 可用连接实例的最大数目，默认值为8；如果赋值为-1，则表示不限制；</span></span><br><span class="line"><span class="attr">      max-idle:</span> <span class="number">8</span>  <span class="comment"># 控制一个pool最多有多少个状态为idle(空闲的)的redis实例，默认值也是8。</span></span><br><span class="line"><span class="attr">      max-wait:</span> <span class="bullet">-1</span> <span class="comment"># 等待可用连接的最大时间，单位毫秒，默认值为-1，表示永不超时。</span></span><br><span class="line"><span class="attr">      min-idle:</span> <span class="number">0</span> <span class="comment"># 控制一个pool最少有多少个状态为idle(空闲的)的redis实例，默认值为0。</span></span><br><span class="line"><span class="attr">    timeout:</span> <span class="number">0</span> <span class="comment"># 连接超时时间 单位 ms，默认为0</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">master</span> <span class="comment"># 密码，根据自己的 redis 设计，默认为空</span></span><br></pre></td></tr></table></figure></li><li><p>这个我们是要使用 RedisManager 管理我们的 Redis，它默认没有注入我们设置的这些参数，需要我们自己手动创建一个注入我们设置的参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.redis"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomRedisManager</span> <span class="keyword">extends</span> <span class="title">RedisManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="配置-Shiro-缓存"><a href="#配置-Shiro-缓存" class="headerlink" title="配置 Shiro 缓存"></a>配置 Shiro 缓存</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis 管理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CustomRedisManager <span class="title">customRedisManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CustomRedisManager();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis 缓存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RedisCacheManager <span class="title">cacheManager</span><span class="params">(CustomRedisManager redisManager)</span> </span>&#123;</span><br><span class="line">    RedisCacheManager redisCacheManager = <span class="keyword">new</span> RedisCacheManager();</span><br><span class="line">    redisCacheManager.setRedisManager(redisManager);</span><br><span class="line">    <span class="keyword">return</span> redisCacheManager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">(OAuth2Realm oAuth2Realm, SessionManager sessionManager, RedisCacheManager cacheManager)</span> </span>&#123;</span><br><span class="line">    DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">    <span class="comment">// 可以添加多个认证，执行顺序是有影响的</span></span><br><span class="line">    securityManager.setRealm(oAuth2Realm);</span><br><span class="line">    securityManager.setSessionManager(sessionManager);</span><br><span class="line">    <span class="comment">// 注册 缓存</span></span><br><span class="line">    securityManager.setCacheManager(cacheManager);</span><br><span class="line">    <span class="keyword">return</span> securityManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用测试"><a href="#使用测试" class="headerlink" title="使用测试"></a>使用测试</h4><p>我们加入缓存后，看是个什么情况：<br><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/springboot-cache/2.png" alt="image"></p><p>执行多次请求，只执行了一次查询权限的 SQL。</p><p>可以去 redis-cli 查看 keys，检查是否存在权限对象的 key。</p><h3 id="使用-Ehcache-缓存"><a href="#使用-Ehcache-缓存" class="headerlink" title="使用 Ehcache 缓存"></a>使用 Ehcache 缓存</h3><h4 id="加入依赖"><a href="#加入依赖" class="headerlink" title="加入依赖"></a>加入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- shiro ehcache --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ehchache --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.ehcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Ehcache-配置"><a href="#Ehcache-配置" class="headerlink" title="Ehcache 配置"></a>Ehcache 配置</h4><p>新增一个 Ehcache 配置文件 <code>shiro-ehcache.xml</code>：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">"http://ehcache.org/ehcache.xsd"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">updateCheck</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"java.io.tmpdir/Tmp_EhCache"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxElementsInMemory</span>=<span class="string">"10000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToIdleSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToLiveSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">overflowToDisk</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">diskPersistent</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">"120"</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 登录记录缓存锁定1小时 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"passwordRetryCache"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxEntriesLocalHeap</span>=<span class="string">"2000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToIdleSeconds</span>=<span class="string">"3600"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToLiveSeconds</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">overflowToDisk</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">statistics</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h4 id="配置-EhCache-缓存"><a href="#配置-EhCache-缓存" class="headerlink" title="配置 EhCache 缓存"></a>配置 EhCache 缓存</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * EhCache 缓存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> EhCacheManager <span class="title">ehCacheManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    EhCacheManager em = <span class="keyword">new</span> EhCacheManager();</span><br><span class="line">    em.setCacheManagerConfigFile(<span class="string">"classpath:config/shiro-ehcache.xml"</span>);</span><br><span class="line">    <span class="keyword">return</span> em;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">(OAuth2Realm oAuth2Realm, SessionManager sessionManager,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       RedisCacheManager cacheManager, EhCacheManager ehCacheManager)</span> </span>&#123;</span><br><span class="line">    DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">    <span class="comment">// 可以添加多个认证，执行顺序是有影响的</span></span><br><span class="line">    securityManager.setRealm(oAuth2Realm);</span><br><span class="line">    securityManager.setSessionManager(sessionManager);</span><br><span class="line">    <span class="comment">// 设置缓存</span></span><br><span class="line">    securityManager.setCacheManager(ehCacheManager);</span><br><span class="line">    <span class="keyword">return</span> securityManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://mrbird.cc/Spring-Boot-Shiro%20cache.html" rel="external nofollow noopener noreferrer" target="_blank">Spring Boot Shiro中使用缓存</a></li></ul><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> shiro </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习Spring Boot：（十八）session共享]]></title>
      <url>/spring-boot-18.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前面我们将 Redis 集成到工程中来了，现在需要用它来做点实事了。这次为了解决分布式系统中的 session 共享的问题，将 session 托管到 Redis。</p><a id="more"></a><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><p>除了上篇文章中引入 <code>spring-boot-starter-data-redis</code>，还需要 <code>spring-session</code> 依赖：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>在系统的配置文件中加入：<br></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  session:</span></span><br><span class="line"><span class="attr">    store-type:</span> <span class="string">redis</span></span><br></pre></td></tr></table></figure><p></p><p>并且可以发现 <code>store-type</code> 有几种值可以设置，都是可以作为 session 共享的媒介。<br><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/springboot-session/1.png" alt="image"></p><p>可以看到，Spring Session 支持使用Redis、Mongo、JDBC、Hazelcast来存储Session，</p><p>这样就完成了。</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/springboot-session/2.png" alt="image"></p><p>可以看出，session 已经被 shiro 接管了。</p><p><strong>spring-session 实现的思路是</strong>：设计一个Filter，利用 <code>HttpServletRequestWrapper</code>，实现自己的 <code>getSession()方法</code>，接管创建和管理Session数据的工作。</p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习Spring Boot：（十七）使用 Redis]]></title>
      <url>/spring-boot-17.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>Redis <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top-right hint--error hint--large" aria-label="REmote DIctionary Server">[1]</span></a></sup> 是一个由Salvatore Sanfilippo写的key-value存储系统。<br>edis是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。<br>通常被称为数据结构服务器，因为值（value）可以是 字符串(String), 哈希(Map), 列表(list), 集合(sets) 和 有序集合(sorted sets)等类型。</p></blockquote><a id="more"></a><ul><li><a href="http://redis.io/" rel="external nofollow noopener noreferrer" target="_blank">Redis官网</a></li><li><a href="http://www.redis.cn/" rel="external nofollow noopener noreferrer" target="_blank">Redis中文社区</a></li></ul><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是，上面是 <code>Spring Boot 1.5</code> 版本后的名称，1.5版本前是 <code>spring-boot-starter-redis</code>。</p></blockquote><h4 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    host:</span> <span class="number">192.168</span><span class="number">.19</span><span class="number">.200</span> <span class="comment"># host ,默认 localhost</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">6379</span> <span class="comment"># 端口号，默认6379</span></span><br><span class="line"><span class="attr">    pool:</span></span><br><span class="line">    <span class="comment"># 设置都是默认值，可以按需求设计</span></span><br><span class="line"><span class="attr">      max-active:</span> <span class="number">8</span> <span class="comment"># 可用连接实例的最大数目，默认值为8；如果赋值为-1，则表示不限制；</span></span><br><span class="line"><span class="attr">      max-idle:</span> <span class="number">8</span>  <span class="comment"># 控制一个pool最多有多少个状态为idle(空闲的)的redis实例，默认值也是8。</span></span><br><span class="line"><span class="attr">      max-wait:</span> <span class="bullet">-1</span> <span class="comment"># 等待可用连接的最大时间，单位毫秒，默认值为-1，表示永不超时。</span></span><br><span class="line"><span class="attr">      min-idle:</span> <span class="number">0</span> <span class="comment"># 控制一个pool最少有多少个状态为idle(空闲的)的redis实例，默认值为0。</span></span><br><span class="line"><span class="attr">    timeout:</span> <span class="number">0</span> <span class="comment"># 连接超时时间 单位 ms，默认为0</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">master</span> <span class="comment"># 密码，根据自己的 redis 设计，默认为空</span></span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>在 配置类 中注册一个 <code>RedisTemplate</code> 用来支持序列化和反序列化:<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, String&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        StringRedisTemplate template = <span class="keyword">new</span> StringRedisTemplate(factory);</span><br><span class="line">        <span class="comment">// 使用 Jackson2JsonRedisSerializer 进行序列化，它继承 RedisSerializer，</span></span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>测试使用：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(<span class="string">"id"</span>, <span class="string">"1"</span>);</span><br><span class="line">        Assert.assertEquals(<span class="string">"1"</span>, stringRedisTemplate.opsForValue().get(<span class="string">"id"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试存储对象，redis 需要对对象进行序列化，取出对象数据后比对，又要进行反序列化</span></span><br><span class="line"><span class="comment">     * 所以注册了 RedisTemplate ，专门处理这类情况</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SysUserEntity sysUserEntity = <span class="keyword">new</span> SysUserEntity();</span><br><span class="line">        sysUserEntity.setId(<span class="number">2L</span>);</span><br><span class="line">        sysUserEntity.setEmail(<span class="string">"k@wuwii.com"</span>);</span><br><span class="line">        ValueOperations&lt;String, SysUserEntity&gt; operations = redisTemplate.opsForValue();</span><br><span class="line">        operations.set(<span class="string">"user1"</span>, sysUserEntity);</span><br><span class="line">        Assert.assertThat(sysUserEntity, Matchers.equalTo(operations.get(<span class="string">"user1"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><a href="https://docs.spring.io/spring-data/redis/docs/" rel="external nofollow noopener noreferrer" target="_blank">Spring Data Redis 使用文档</a></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none;padding-left:0;margin-left:40px"><li id="fn:1"><span style="display:inline-block;vertical-align:top;padding-right:10px;margin-left:-40px">1.</span><span style="display:inline-block;vertical-align:top;margin-left:10px">REmote DIctionary Server<a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> redis </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习Spring Boot：（十六）使用Shiro与JWT 实现认证服务]]></title>
      <url>/shiro-jwt.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>需要把Web应用做成无状态的，即服务器端无状态，就是说服务器端不会存储像会话这种东西，而是每次请求时access_token进行资源访问。这里我们将使用 JWT <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top-right hint--error hint--large" aria-label="JSON WEB Token">[1]</span></a></sup>，基于散列的消息认证码，使用一个密钥和一个消息作为输入，生成它们的消息摘要。该密钥只有服务端知道。访问时使用该消息摘要进行传播，服务端然后对该消息摘要进行验证。</p><a id="more"></a><h3 id="认证步骤"><a href="#认证步骤" class="headerlink" title="认证步骤"></a>认证步骤</h3><ol><li>客户端第一次使用用户名密码访问认证服务器，服务器验证用户名和密码，认证成功,使用用户密钥生成JWT并返回</li><li>之后每次请求客户端带上JWT</li><li>服务器对JWT进行验证</li></ol><h4 id="自定义-jwt-拦截器"><a href="#自定义-jwt-拦截器" class="headerlink" title="自定义 jwt 拦截器"></a>自定义 jwt 拦截器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * oauth2拦截器，现在改为 JWT 认证</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OAuth2Filter</span> <span class="keyword">extends</span> <span class="title">FormAuthenticationFilter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置 request 的键，用来保存 认证的 userID,</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String USER_ID = <span class="string">"USER_ID"</span>;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> JwtUtils jwtUtils;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * logger</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(OAuth2Filter.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * shiro权限拦截核心方法 返回true允许访问resource，</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mappedValue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isAccessAllowed</span><span class="params">(ServletRequest request, ServletResponse response, Object mappedValue)</span> </span>&#123;</span><br><span class="line">        String token = getRequestToken((HttpServletRequest) request);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 检查 token 有效性</span></span><br><span class="line">            <span class="comment">//ExpiredJwtException JWT已过期</span></span><br><span class="line">            <span class="comment">//SignatureException JWT可能被篡改</span></span><br><span class="line">            Jwts.parser().setSigningKey(jwtUtils.getSecret()).parseClaimsJws(token).getBody();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 身份验证失败，返回 false 将进入onAccessDenied 判断是否登陆。</span></span><br><span class="line">            onLoginFail(response);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Long userId = getUserIdFromToken(token);</span><br><span class="line">        <span class="comment">// 存入到 request 中，在后面的业务处理中可以使用</span></span><br><span class="line">        request.setAttribute(USER_ID, userId);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当访问拒绝时是否已经处理了；</span></span><br><span class="line"><span class="comment">     * 如果返回true表示需要继续处理；</span></span><br><span class="line"><span class="comment">     * 如果返回false表示该拦截器实例已经处理完成了，将直接返回即可。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">onAccessDenied</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isLoginRequest(request, response)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isLoginSubmission(request, response)) &#123;</span><br><span class="line">                <span class="keyword">return</span> executeLogin(request, response);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            onLoginFail(response);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 鉴定失败，返回错误信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">onLoginFailure</span><span class="params">(AuthenticationToken token, AuthenticationException e, ServletRequest request, ServletResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ((HttpServletResponse) response).setStatus(HttpStatus.BAD_REQUEST.value());</span><br><span class="line">            response.getWriter().print(<span class="string">"账号活密码错误"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">            LOGGER.error(e1.getMessage(), e1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * token 认证失败</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onLoginFail</span><span class="params">(ServletResponse response)</span> </span>&#123;</span><br><span class="line">        HttpServletResponse httpResponse = (HttpServletResponse) response;</span><br><span class="line">        ((HttpServletResponse) response).setStatus(HttpStatus.UNAUTHORIZED.value());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response.getWriter().print(<span class="string">"没有权限，请联系管理员授权"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            LOGGER.error(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取请求的token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getRequestToken</span><span class="params">(HttpServletRequest httpRequest)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//从header中获取token</span></span><br><span class="line">        String token = httpRequest.getHeader(jwtUtils.getHeader());</span><br><span class="line">        <span class="comment">//如果header中不存在token，则从参数中获取token</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(token)) &#123;</span><br><span class="line">            <span class="keyword">return</span> httpRequest.getParameter(jwtUtils.getHeader());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(token)) &#123;</span><br><span class="line">            <span class="comment">// 从 cookie 获取 token</span></span><br><span class="line">            Cookie[] cookies = httpRequest.getCookies();</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == cookies || cookies.length == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cookie.getName().equals(jwtUtils.getHeader())) &#123;</span><br><span class="line">                    token = cookie.getValue();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据 token 获取 userID</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> userId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Long <span class="title">getUserIdFromToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(token)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> KCException(<span class="string">"无效 token"</span>, HttpStatus.UNAUTHORIZED.value());</span><br><span class="line">        &#125;</span><br><span class="line">        Claims claims = jwtUtils.getClaimByToken(token);</span><br><span class="line">        <span class="keyword">if</span> (claims == <span class="keyword">null</span> || jwtUtils.isTokenExpired(claims.getExpiration())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> KCException(jwtUtils.getHeader() + <span class="string">"失效，请重新登录"</span>, HttpStatus.UNAUTHORIZED.value());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Long.parseLong(claims.getSubject());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将自定义shiro拦截器，设置到 <code>ShiroFilterFactoryBean</code> 中，然后将需要进行权限验证的 <code>path</code> 进行设置拦截过滤。</p><h4 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line"><span class="meta">@ApiOperation</span>(<span class="string">"系统登陆"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">login</span><span class="params">(@RequestBody SysUserLoginForm userForm)</span> </span>&#123;</span><br><span class="line">    String kaptcha = ShiroUtils.getKaptcha(Constants.KAPTCHA_SESSION_KEY);</span><br><span class="line">    <span class="keyword">if</span> (!userForm.getCaptcha().equalsIgnoreCase(kaptcha)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> KCException(<span class="string">"验证码不正确！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(userForm.getUsername(), userForm.getPassword());</span><br><span class="line">    Subject currentUser = SecurityUtils.getSubject();</span><br><span class="line">    currentUser.login(token);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//账号锁定</span></span><br><span class="line">    <span class="keyword">if</span> (getUser().getStatus() == SysConstant.SysUserStatus.LOCK) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> KCException(<span class="string">"账号已被锁定,请联系管理员"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 登陆成功后直接返回 token ,然后后续放到 header 中认证</span></span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.OK).body(jwtUtils.generateToken(getUserId()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JwtUtils"><a href="#JwtUtils" class="headerlink" title="JwtUtils"></a>JwtUtils</h4><p>我前面给 jwt 设置了三个参数<br></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># jwt 配置</span></span><br><span class="line"><span class="attr">jwt:</span></span><br><span class="line">  <span class="comment"># 加密密钥</span></span><br><span class="line"><span class="attr">  secret:</span> <span class="number">61</span><span class="string">D73234C4F93E03074D74D74D1E39D9</span> <span class="comment">#blog.wuwii.com</span></span><br><span class="line">  <span class="comment"># token有效时长</span></span><br><span class="line"><span class="attr">  expire:</span> <span class="number">7</span> <span class="comment"># 7天，单位天</span></span><br><span class="line">  <span class="comment"># token 存在 header 中的参数</span></span><br><span class="line"><span class="attr">  header:</span> <span class="string">token</span></span><br></pre></td></tr></table></figure><p></p><p>jwt 工具类的编写<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"jwt"</span>)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * logger</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(JwtUtils.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String secret;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有效期限</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> expire;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存储 token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String header;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成jwt token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 用户ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generateToken</span><span class="params">(<span class="keyword">long</span> userId)</span> </span>&#123;</span><br><span class="line">        Date nowDate = <span class="keyword">new</span> Date();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .setHeaderParam(<span class="string">"typ"</span>, <span class="string">"JWT"</span>)</span><br><span class="line">                <span class="comment">// 后续获取 subject 是 userid</span></span><br><span class="line">                .setSubject(userId + <span class="string">""</span>)</span><br><span class="line">                .setIssuedAt(nowDate)</span><br><span class="line">                .setExpiration(DateUtils.addDays(nowDate, expire))</span><br><span class="line">                <span class="comment">// 这里我采用的是 HS512 算法</span></span><br><span class="line">                .signWith(SignatureAlgorithm.HS512, secret)</span><br><span class="line">                .compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析 token，</span></span><br><span class="line"><span class="comment">     * 利用 jjwt 提供的parser传入秘钥，</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数据声明 Map&lt;String, Object&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Claims <span class="title">getClaimByToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Jwts.parser()</span><br><span class="line">                    .setSigningKey(secret)</span><br><span class="line">                    .parseClaimsJws(token)</span><br><span class="line">                    .getBody();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * token是否过期</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true：过期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTokenExpired</span><span class="params">(Date expiration)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> expiration.before(<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSecret</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> secret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSecret</span><span class="params">(String secret)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.secret = secret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getExpire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> expire;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setExpire</span><span class="params">(<span class="keyword">int</span> expire)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.expire = expire;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHeader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> header;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeader</span><span class="params">(String header)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.header = header;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>由于 JWT 这种方式，服务端不需要保存任何状态，所以服务端不需要使用 session 保存用户信息，单元测试也比较方便，虽然中间转码解码会消耗一些性能，但是影响不大，还比较方便的应用在 SSO <sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top-right hint--error hint--large" aria-label="Single Sign On
">[2]</span></a></sup>。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none;padding-left:0;margin-left:40px"><li id="fn:1"><span style="display:inline-block;vertical-align:top;padding-right:10px;margin-left:-40px">1.</span><span style="display:inline-block;vertical-align:top;margin-left:10px">JSON WEB Token<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display:inline-block;vertical-align:top;padding-right:10px;margin-left:-40px">2.</span><span style="display:inline-block;vertical-align:top;margin-left:10px">Single Sign On<a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> shiro </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习几种简单排序算法]]></title>
      <url>/sort-algorithm.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><p>分类：</p><ul><li>插入排序（直接插入排序、希尔排序）</li><li>交换排序（冒泡排序、快速排序）</li><li>选择排序（直接选择排序、堆排序）</li><li>归并排序</li><li>分配排序（基数排序）</li></ul><p>所需辅助空间最多：归并排序<br>所需辅助空间最少：堆排序<br>平均速度最快：快速排序<br>不稳定：快速排序，希尔排序，堆排序。</p><p><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fn4y9x6vkkj20ko0g174y.jpg" alt="image"></p><a id="more"></a><h3 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h3><h4 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h4><p>将数组中的所有元素依次跟前面已经排好的元素相比较，如果选择的元素比已排序的元素小，则交换，直到全部元素都比较过为止。</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插入排序</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 1. 从第一个元素开始，该元素可以认为已经被排序</span></span><br><span class="line"><span class="comment"> * 2. 取出下一个元素，在已经排序的元素序列中从后向前扫描</span></span><br><span class="line"><span class="comment"> * 3. 如果该元素（已排序）大于新元素，将该元素移到下一位置</span></span><br><span class="line"><span class="comment"> * 4. 重复步骤3，直到找到已排序的元素小于或者等于新元素的位置</span></span><br><span class="line"><span class="comment"> * 5. 将新元素插入到该位置后</span></span><br><span class="line"><span class="comment"> * 6. 重复步骤2~5</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array 待排序数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int[]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] insertSort(<span class="keyword">int</span>[] array) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = array[i];</span><br><span class="line">        <span class="keyword">int</span> j = i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (; j &gt;= <span class="number">0</span> &amp;&amp; array[j] &gt; temp; j--) &#123;</span><br><span class="line">            array[j + <span class="number">1</span>] = array[j];</span><br><span class="line">        &#125;</span><br><span class="line">        array[j + <span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h4><table><thead><tr><th>平均时间复杂度</th><th>最好情况</th><th>最坏情况</th><th>空间复杂度</th></tr></thead><tbody><tr><td>O(n²)</td><td>O(n²)</td><td>O(n²)</td><td>O(1)</td></tr></tbody></table><p>由于直接插入排序每次只移动一个元素的位， 并不会改变值相同的元素之间的排序， 因此它是一种稳定排序。</p><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><h4 id="基本思想-1"><a href="#基本思想-1" class="headerlink" title="基本思想"></a>基本思想</h4><p>该方法的基本思想是：先将整个待排元素序列分割成若干个子序列（由相隔某个“增量”的元素组成的）分别进行直接插入排序，然后依次缩减增量再进行排序，待整个序列中的元素基本有序（增量足够小）时，再对全体元素进行一次直接插入排序。因为直接插入排序在元素基本有序的情况下（接近最好情况），效率是很高的。</p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * shell sort</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 1. 选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1；（一般初次取数组半长，之后每次再减半，直到增量为1）</span></span><br><span class="line"><span class="comment"> * 2. 按增量序列个数k，对序列进行k 趟排序；</span></span><br><span class="line"><span class="comment"> * 3. 每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。</span></span><br><span class="line"><span class="comment"> * 仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array array</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int[] 排序后的array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] shellSort(<span class="keyword">int</span>[] array) &#123;</span><br><span class="line">    <span class="keyword">int</span> len = array.length;</span><br><span class="line">    <span class="keyword">if</span> (len &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 分组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> gap = len / <span class="number">2</span>; gap != <span class="number">0</span>; gap /= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; gap; i++) &#123;</span><br><span class="line">            <span class="comment">// 对组进行插入排序</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + gap; j &lt; len; j += gap) &#123;</span><br><span class="line">                <span class="comment">// 组第一个元素</span></span><br><span class="line">                <span class="keyword">int</span> index = j - gap;</span><br><span class="line">                <span class="comment">// 找到当前组的例外一个元素</span></span><br><span class="line">                <span class="keyword">int</span> temp = array[j];</span><br><span class="line">                <span class="comment">// 进行比较</span></span><br><span class="line">                <span class="keyword">for</span> (; index &gt;= <span class="number">0</span> &amp;&amp; temp &lt; array[index]; index -= gap) &#123;</span><br><span class="line">                    <span class="comment">// 交换</span></span><br><span class="line">                    array[index + gap] = array[index];</span><br><span class="line">                &#125;</span><br><span class="line">                array[index + gap] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h4><table><thead><tr><th>平均时间复杂度</th><th>最好情况</th><th>最坏情况</th><th>空间复杂度</th></tr></thead><tbody><tr><td>$O(nlog2 n)$</td><td>$O(nlog2 n)$</td><td>$O(nlog2 n)$</td><td>$O(1)$</td></tr></tbody></table><p>由于交换位置了，希尔排序是一种不稳定排序。</p><h3 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h3><h4 id="基本思想-2"><a href="#基本思想-2" class="headerlink" title="基本思想"></a>基本思想</h4><ol><li>在要排序的一组数中，选出最小的一个数与第一个位置的数交换；</li><li>然后在剩下的数当中再找最小的与第二个位置的数交换</li><li>回到步骤1，如此循环直到倒数第二个数和最后一个数比较为止。</li></ol><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 选择排序，</span></span><br><span class="line"><span class="comment"> * 直接选择排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1. 在要排序的一组数中，选出最小的一个数与第一个位置的数交换；</span></span><br><span class="line"><span class="comment"> * 2. 然后在剩下的数当中再找最小的与第二个位置的数交换</span></span><br><span class="line"><span class="comment"> * 3. 回到步骤1，如此循环直到倒数第二个数和最后一个数比较为止。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array 需要排序的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int[] 排序好的数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] selectionSort(<span class="keyword">int</span>[] array) &#123;</span><br><span class="line">    <span class="keyword">int</span> len = array.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="comment">// 记下最终交换的索引</span></span><br><span class="line">        <span class="keyword">int</span> position = i;</span><br><span class="line">        <span class="comment">// 记下当前轮次最小值</span></span><br><span class="line">        <span class="keyword">int</span> temp = array[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp &gt; array[j]) &#123;</span><br><span class="line">                temp = array[j];</span><br><span class="line">                position = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (position &gt; i) &#123;</span><br><span class="line">            <span class="comment">// 交换</span></span><br><span class="line">            array[position] = array[i];</span><br><span class="line">            array[i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度-2"><a href="#复杂度-2" class="headerlink" title="复杂度"></a>复杂度</h4><table><thead><tr><th>平均时间复杂度</th><th>最好情况</th><th>最坏情况</th><th>空间复杂度</th></tr></thead><tbody><tr><td>O(n²)</td><td>O(n²)</td><td>O(n²)</td><td>O(1)</td></tr></tbody></table><p>无论是哪种情况，哪怕原数组已排序完成，它也将花费将近n²/2次遍历来确认一遍。并且它是一种不稳定排序。</p><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><h4 id="基本思想-3"><a href="#基本思想-3" class="headerlink" title="基本思想"></a>基本思想</h4><p>堆排序是一种树形选择排序，是对直接选择排序的有效改进。<br>此处以大顶堆为例，堆排序的过程就是将待排序的序列构造成一个堆，选出堆中最大的移走，再把剩余的元素调整成堆，找出最大的再移走，重复直至有序。</p><p><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fn7zcyqz9jg20f70a4u0x.jpg" alt=""></p><ol><li>建堆；</li><li>堆顶与堆的最后一个元素交换位置，并且把最大值从堆删除；</li><li>重复到最后一个节点，删除最大一个，结束</li></ol><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 堆排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array array</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int[]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] heapSort(<span class="keyword">int</span>[] array) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = array.length; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="comment">//  每次交换后重新构造堆</span></span><br><span class="line">        maxHeapify(i, array);</span><br><span class="line">        <span class="comment">// 将堆顶和堆的最后一个数值进行交换，</span></span><br><span class="line">        swap(<span class="number">0</span>, i - <span class="number">1</span>, array);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化大顶堆，使得子节点永远小于父节点，并且记录最大值，然后将堆顶和堆的最后一个数值进行交换，</span></span><br><span class="line"><span class="comment"> * 对于堆节点的访问：</span></span><br><span class="line"><span class="comment"> *      父节点i的左子节点在位置：(2*i+1);</span></span><br><span class="line"><span class="comment"> *      父节点i的右子节点在位置：(2*i+2);</span></span><br><span class="line"><span class="comment"> *      子节点i的父节点在位置：floor((i-1)/2);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index index</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">maxHeapify</span><span class="params">(<span class="keyword">int</span> index, @NotNull <span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> parentIdx = index &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; parentIdx &gt;= <span class="number">0</span>; parentIdx--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (parentIdx &lt;&lt; <span class="number">1</span> &gt;= index) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//左子节点索引</span></span><br><span class="line">        <span class="keyword">int</span> left = parentIdx * <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//右子节点索引，如果没有右节点，默认为左节点索引</span></span><br><span class="line">        <span class="keyword">int</span> right = (left + <span class="number">1</span>) &gt;= index ? left : (left + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 找到较大的子节点</span></span><br><span class="line">        <span class="keyword">int</span> maxChildId = array[left] &gt;= array[right] ? left : right;</span><br><span class="line">        <span class="comment">//如果子节点中的较大值比父节点大，交换父节点与左右子节点中的最大值</span></span><br><span class="line">        <span class="keyword">if</span> (array[maxChildId] &gt; array[parentIdx]) &#123;</span><br><span class="line">            swap(maxChildId, parentIdx, array);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交换</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i     索引1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> j     索引2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j, @NotNull <span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = array[i];</span><br><span class="line">    array[i] = array[j];</span><br><span class="line">    array[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度-3"><a href="#复杂度-3" class="headerlink" title="复杂度"></a>复杂度</h4><table><thead><tr><th>平均时间复杂度</th><th>最好情况</th><th>最坏情况</th><th>空间复杂度</th></tr></thead><tbody><tr><td>$O(n \log_{2}n)$</td><td>$O(n \log_{2}n)$</td><td>$O(n \log_{2}n)$</td><td>$O(1)$</td></tr></tbody></table><p>顺序打乱，它是不稳定排序。</p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><h4 id="基本思想-4"><a href="#基本思想-4" class="headerlink" title="基本思想"></a>基本思想</h4><p>重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p><h4 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 冒泡排序</span></span><br><span class="line"><span class="comment"> * 将较小的数一直往前面冒</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array array</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int[]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] bubbleSort(<span class="meta">@NotNull</span> <span class="keyword">int</span>[] array) &#123;</span><br><span class="line">    <span class="keyword">int</span> len = array.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[i] &gt; array[j]) &#123;</span><br><span class="line">                swap(i, j, array);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度-4"><a href="#复杂度-4" class="headerlink" title="复杂度"></a>复杂度</h4><table><thead><tr><th>平均时间复杂度</th><th>最好情况</th><th>最坏情况</th><th>空间复杂度</th></tr></thead><tbody><tr><td>O(n²)</td><td>O(n)</td><td>O(n²)</td><td>O(1)</td></tr></tbody></table><p>不会改变相同元素直接的位置，所以它是稳定的排序算法。</p><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><h4 id="基本思想-5"><a href="#基本思想-5" class="headerlink" title="基本思想"></a>基本思想</h4><p>快速排序的基本思想：<strong>挖坑填数+分治法</strong>。<br>快速排序采用“分而治之、各个击破”的观念，</p><h4 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快速排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array array</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int[]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] quickSort(<span class="meta">@NotNull</span> <span class="keyword">int</span>[] array) &#123;</span><br><span class="line">    quickSort(array, <span class="number">0</span>, array.length - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快速排序 》递归</span></span><br><span class="line"><span class="comment"> * 递归满足条件：</span></span><br><span class="line"><span class="comment"> *      low &lt; high</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array array</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> low 最小边界</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> high 最大边界</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(@NotNull <span class="keyword">int</span>[] array, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &gt;= high) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> pivot = getPivot(array, low, high);</span><br><span class="line">    quickSort(array, low, pivot - <span class="number">1</span>);</span><br><span class="line">    quickSort(array, pivot + <span class="number">1</span>, high);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回基准的索引</span></span><br><span class="line"><span class="comment"> * 1. i = low;L = low; R = high 将基准数挖出形成第一个坑a[i]。</span></span><br><span class="line"><span class="comment"> * 2. R-- 向前找到比基准a[i]小的值，找到后挖出此数填前一个坑a[i]中。</span></span><br><span class="line"><span class="comment"> * 3. L++ 向后找比基准大的数，找到后也挖出此数填到前一个坑a[j]中。</span></span><br><span class="line"><span class="comment"> * 4. 重复 2 、 3 步操作，知道 L == R ，返回基准的索引。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array array</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> low 最小边界</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> high 最大边界</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 索引</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getPivot</span><span class="params">(@NotNull <span class="keyword">int</span>[] array, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个基准</span></span><br><span class="line">    <span class="keyword">int</span> pivotValue = array[low];</span><br><span class="line">    <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">        <span class="comment">// 找到比基准小的放在左边</span></span><br><span class="line">        <span class="keyword">while</span> (low &lt; high &amp;&amp; array[high] &gt;= pivotValue) &#123;</span><br><span class="line">            high--;</span><br><span class="line">        &#125;</span><br><span class="line">        array[low] = array[high];</span><br><span class="line">        <span class="comment">// 找到比基准大的放在右边</span></span><br><span class="line">        <span class="keyword">while</span> (low &lt; high &amp;&amp; array[low] &lt;= pivotValue) &#123;</span><br><span class="line">            low++;</span><br><span class="line">        &#125;</span><br><span class="line">        array[high] = array[low];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 找到基准的索引位置，并且返回</span></span><br><span class="line">    array[low] = pivotValue;</span><br><span class="line">    <span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度-5"><a href="#复杂度-5" class="headerlink" title="复杂度"></a>复杂度</h4><table><thead><tr><th>平均时间复杂度</th><th>最好情况</th><th>最坏情况</th><th>空间复杂度</th></tr></thead><tbody><tr><td>$O(n \log_{2}n)$</td><td>$O(n \log_{2}n)$</td><td>$O(n^2)$</td><td>$O(1)$</td></tr></tbody></table><blockquote><p>快速排序是通常被认为在同数量级（$O(n \log_{2}n)$）的排序方法中平均性能最好的。但若初始序列按关键码有序或基本有序时，快排序反而蜕化为冒泡排序。为改进之，通常以“三者取中法”来选取基准记录，即将排序区间的两个端点与中点三个记录关键码居中的调整为支点记录。快速排序是一个不稳定的排序方法。</p></blockquote><blockquote><p>快速排序排序效率非常高。 虽然它运行最糟糕时将达到O(n²)的时间复杂度, 但通常平均来看, 它的时间复杂为O(nlogn), 比同样为O(nlogn)时间复杂度的归并排序还要快. 快速排序似乎更偏爱乱序的数列, 越是乱序的数列, 它相比其他排序而言, 相对效率更高.</p></blockquote><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><h4 id="基本思想-6"><a href="#基本思想-6" class="headerlink" title="基本思想"></a>基本思想</h4><p>归并排序算法是将两个（或两个以上）有序表合并成一个新的有序表，即把待排序序列分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列。</p><h4 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 归并排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1. 将序列每相邻两个数字进行归并操作，形成 floor(n/2)个序列，排序后每个序列包含两个元素；</span></span><br><span class="line"><span class="comment"> * 2. 将上述序列再次归并，形成 floor(n/4)个序列，每个序列包含四个元素；</span></span><br><span class="line"><span class="comment"> * 3. 重复步骤2，直到所有元素排序完毕。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array array</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int[]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] mergingSort(<span class="keyword">int</span>[] array) &#123;</span><br><span class="line">    <span class="comment">// 拆分到最小单元的时候终止递归操作。</span></span><br><span class="line">    <span class="keyword">if</span> (array.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 每次拆分的长度</span></span><br><span class="line">    <span class="keyword">int</span> segmentLen = array.length &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span>[] leftArr = Arrays.copyOfRange(array, <span class="number">0</span>, segmentLen);</span><br><span class="line">    <span class="keyword">int</span>[] rightArr = Arrays.copyOfRange(array, segmentLen, array.length);</span><br><span class="line">    <span class="comment">// 拆分成最小单元排序后，合并</span></span><br><span class="line">    <span class="keyword">return</span> merge(mergingSort(leftArr), mergingSort(rightArr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 合并左右两个数组</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr1 数组1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr2 数组2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int[]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] merge(<span class="keyword">int</span>[] arr1, <span class="keyword">int</span>[] arr2) &#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 创建一个新数组</span></span><br><span class="line">    <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[arr1.length + arr2.length];</span><br><span class="line">    <span class="comment">// 将两个数据中的元素进行一一比较，较小的放入新的数组中</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; arr1.length &amp;&amp; j &lt; arr2.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr1[i] &lt;= arr2[j]) &#123;</span><br><span class="line">            result[k++] = arr1[i++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result[k++] = arr2[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 经过上一步骤后，可能有一个数组的数没有放完，继续在后面添加上</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; arr1.length) &#123;</span><br><span class="line">        result[k++] = arr1[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; arr2.length) &#123;</span><br><span class="line">        result[k++] = arr2[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度-6"><a href="#复杂度-6" class="headerlink" title="复杂度"></a>复杂度</h4><table><thead><tr><th>平均时间复杂度</th><th>最好情况</th><th>最坏情况</th><th>空间复杂度</th></tr></thead><tbody><tr><td>O(nlog₂n)</td><td>O(nlog₂n)</td><td>O(nlog₂n)</td><td>O(n)</td></tr></tbody></table><blockquote><p>和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是O(n log n）的时间复杂度。代价是需要额外的内存空间。<br>度为n的数组, 最终会调用mergeSort函数2n-1次。通过自上而下的递归实现的归并排序, 将存在堆栈溢出的风险。</p></blockquote><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><h4 id="基本思想-7"><a href="#基本思想-7" class="headerlink" title="基本思想"></a>基本思想</h4><p>它是这样实现的：将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后，数列就变成一个有序序列。</p><p>基数排序按照优先从高位或低位来排序有两种实现方案：</p><p><code>MSD</code><sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top-right hint--error hint--large" aria-label="Most significant digital
">[1]</span></a></sup> : 从最左侧高位开始进行排序。先按k1排序分组, 同一组中记录, 关键码k1相等, 再对各组按k2排序分成子组, 之后, 对后面的关键码继续这样的排序分组, 直到按最次位关键码kd对各子组排序后. 再将各组连接起来, 便得到一个有序序列。MSD方式适用于位数多的序列。</p><p><code>LSD</code><sup id="fnref:2"><a href="#fn:2" rel="footnote"><span class="hint--top-right hint--error hint--large" aria-label="Least significant digital">[2]</span></a></sup> :从最右侧低位开始进行排序。先从kd开始排序，再对kd-1进行排序，依次重复，直到对k1排序后便得到一个有序序列。LSD方式适用于位数少的序列。</p><h4 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基数排序（LSD 从低位开始）</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 基数排序适用于：</span></span><br><span class="line"><span class="comment"> * (1)数据范围较小，建议在小于1000</span></span><br><span class="line"><span class="comment"> * (2)每个数值都要大于等于0</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * ①. 取得数组中的最大数，并取得位数；</span></span><br><span class="line"><span class="comment"> * ②. arr为原始数组，从最低位开始取每个位组成radix数组；</span></span><br><span class="line"><span class="comment"> * ③. 对radix进行计数排序（利用计数排序适用于小范围数的特点）；</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr 待排序数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> int[] 排序好的数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] radixSort(<span class="meta">@NotNull</span> <span class="keyword">int</span>[] arr) &#123;</span><br><span class="line">    <span class="keyword">int</span> len = arr.length;</span><br><span class="line">    <span class="keyword">if</span> (len &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//取得数组中的最大数，并取得位数</span></span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> anArr : arr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (max &lt; anArr) &#123;</span><br><span class="line">            max = anArr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> maxDigit = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (max / <span class="number">10</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        maxDigit++;</span><br><span class="line">        max = max / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// System.out.println("maxDigit: " + maxDigit);</span></span><br><span class="line">    <span class="comment">//申请一个桶空间</span></span><br><span class="line">    <span class="keyword">int</span>[][] buckets = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][arr.length];</span><br><span class="line">    <span class="keyword">int</span> base = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//从低位到高位，对每一位遍历，将所有元素分配到桶中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxDigit; i++) &#123;</span><br><span class="line">        <span class="comment">//存储各个桶中存储元素的数量</span></span><br><span class="line">        <span class="keyword">int</span>[] bktLen = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="comment">//分配：将所有元素分配到桶中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> whichBucket = (arr[j] % base) / (base / <span class="number">10</span>);</span><br><span class="line">            buckets[whichBucket][bktLen[whichBucket]] = arr[j];</span><br><span class="line">            bktLen[whichBucket]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//收集：将不同桶里数据挨个捞出来,为下一轮高位排序做准备,由于靠近桶底的元素排名靠前,因此从桶底先捞</span></span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">0</span>; b &lt; buckets.length; b++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; bktLen[b]; p++) &#123;</span><br><span class="line">                arr[k++] = buckets[b][p];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        base *= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="复杂度-7"><a href="#复杂度-7" class="headerlink" title="复杂度"></a>复杂度</h4><table><thead><tr><th>平均时间复杂度</th><th>最好情况</th><th>最坏情况</th><th>空间复杂度</th></tr></thead><tbody><tr><td>O(d*(n+r))</td><td>O(d*(n+r))</td><td>O(d*(n+r))</td><td>O(n+r)</td></tr></tbody></table><p>其中，d 为位数，r 为基数，n 为原数组个数。在基数排序中，因为没有比较操作，所以在复杂上，最好的情况与最坏的情况在时间上是一致的，均为 <code>O(d*(n + r))</code>。</p><p>基数排序更适合用于对时间, 字符串等这些整体权值未知的数据进行排序。</p><p>Tips: 基数排序不改变相同元素之间的相对顺序，因此它是稳定的排序算法。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>当原表有序或基本有序时，直接插入排序和冒泡排序将大大减少比较次数和移动记录的次数，时间复杂度可降至O（n）；</li><li>而快速排序则相反，当原表基本有序时，将蜕化为冒泡排序，时间复杂度提高为O（n2）；</li><li>原表是否有序，对简单选择排序、堆排序、归并排序和基数排序的时间复杂度影响不大。</li></ul><p><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/sort/常用排序算法.png" alt="image"></p><h3 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h3><ul><li><a href="https://itimetraveler.github.io/2017/07/18/%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93%E4%B8%8Ejava%E5%AE%9E%E7%8E%B0/" rel="external nofollow noopener noreferrer" target="_blank">八大排序算法总结与java实现</a></li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none;padding-left:0;margin-left:40px"><li id="fn:1"><span style="display:inline-block;vertical-align:top;padding-right:10px;margin-left:-40px">1.</span><span style="display:inline-block;vertical-align:top;margin-left:10px">Most significant digital<a href="#fnref:1" rev="footnote"> ↩</a></span></li><li id="fn:2"><span style="display:inline-block;vertical-align:top;padding-right:10px;margin-left:-40px">2.</span><span style="display:inline-block;vertical-align:top;margin-left:10px">Least significant digital<a href="#fnref:2" rev="footnote"> ↩</a></span></li></ol></div></div><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据结构和算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Apache Shiro的拦截器和认证]]></title>
      <url>/shiro-2.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="Apache-Shiro的拦截器"><a href="#Apache-Shiro的拦截器" class="headerlink" title="Apache Shiro的拦截器"></a>Apache Shiro的拦截器</h3><h4 id="FormAuthenticationFilter"><a href="#FormAuthenticationFilter" class="headerlink" title="FormAuthenticationFilter"></a>FormAuthenticationFilter</h4><p><code>FormAuthenticationFilter</code> 是shiro 包自带的一个拦截器，继承了 <code>AuthenticatingFilter</code> 这个抽象类，再上一级就是 <code>AuthenticationFilter</code> 。</p><a id="more"></a><ol><li><p>在进入拦截器之前，会进入 <code>onPreHandle</code> 方法中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只要isAccessAllowed或者onAccessDenied有一个为真，就返回true，继续执行</span></span><br><span class="line">判断这两个方法需不需要执行，按顺序</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onPreHandle</span><span class="params">(ServletRequest request, ServletResponse response, Object mappedValue)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> isAccessAllowed(request, response, mappedValue) || onAccessDenied(request, response, mappedValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>isAccessAllowed</code> 方法验证请求是否认证<br>如果认证结果为 <code>false</code>，根据上面的流程控制，则进入 <code>onAccessDenied</code> 方法中进行认证。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**如果满足（1）.当前的subject是被认证过的。</span></span><br><span class="line"><span class="comment">（2）.用户请求的不是登录页面，但是在定义该过滤器时，使用了PERMISSIVE=”permissive”参数。</span></span><br><span class="line"><span class="comment">只要满足两个条件的一个即可允许操作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isAccessAllowed</span><span class="params">(ServletRequest request, ServletResponse response, Object mappedValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.isAccessAllowed(request, response, mappedValue) ||(!isLoginRequest(request, response) &amp;&amp; isPermissive(mappedValue));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//其实就是判断当前的subject是不是被认证过的</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isAccessAllowed</span><span class="params">(ServletRequest request, ServletResponse response, Object mappedValue)</span> </span>&#123;</span><br><span class="line">        Subject subject = getSubject(request, response);</span><br><span class="line">        <span class="keyword">return</span> subject.isAuthenticated();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断当前的请求是不是登陆请求</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isLoginRequest</span><span class="params">(ServletRequest request, ServletResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pathsMatch(getLoginUrl(), request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断当前的拦截器是不是配置了PERMISSIVE=”permissive”参数，如果配置了就可以通过</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isPermissive</span><span class="params">(Object mappedValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(mappedValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String[] values = (String[]) mappedValue;</span><br><span class="line">            <span class="keyword">return</span> Arrays.binarySearch(values, PERMISSIVE) &gt;= <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p><code>onAccessDenied</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">onAccessDenied</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isLoginRequest(request, response)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isLoginSubmission(request, response)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">                log.trace(<span class="string">"Login submission detected.  Attempting to execute login."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> executeLogin(request, response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">                log.trace(<span class="string">"Login page view."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//allow them to see the login page ;)</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">            log.trace(<span class="string">"Attempting to access a path which requires authentication.  Forwarding to the "</span> +</span><br><span class="line">                    <span class="string">"Authentication url ["</span> + getLoginUrl() + <span class="string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        saveRequestAndRedirectToLogin(request, response);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断当前的其实是不是一个HTTP的POST请求</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isLoginSubmission</span><span class="params">(ServletRequest request, ServletResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (request <span class="keyword">instanceof</span> HttpServletRequest) &amp;&amp; WebUtils.toHttp(request).getMethod().equalsIgnoreCase(POST_METHOD);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//经过前面的判断是不是POST请求后，程序就为我们创建一个token，但是我们并没有传入userName和password在创建的时候就会抛出异常了</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">executeLogin</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        AuthenticationToken token = createToken(request, response);</span><br><span class="line">        <span class="keyword">if</span> (token == <span class="keyword">null</span>) &#123;</span><br><span class="line">            String msg = <span class="string">"createToken method implementation returned null. A valid non-null AuthenticationToken "</span> +</span><br><span class="line">                    <span class="string">"must be created in order to execute a login attempt."</span>;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Subject subject = getSubject(request, response);</span><br><span class="line">            subject.login(token);</span><br><span class="line">            <span class="keyword">return</span> onLoginSuccess(token, subject, request, response);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> onLoginFailure(token, e, request, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**saveRequest就是把一个request保存在session中，redirectToLogin这里就是返回到设置的登录页面，在开头自定义的过滤器中就是重载了这个函数，在实际项目中，一般都会重载这个函数，比方说返回到指定的页面*/</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">saveRequestAndRedirectToLogin</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        saveRequest(request);</span><br><span class="line">        redirectToLogin(request, response);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><p>可以看到如果前面 <code>isAccessAllowed</code> 检查是否认证过的请求，则进入 <code>onAccessDenied</code> 进行认证的操作。</p><h4 id="自定义认证拦截器"><a href="#自定义认证拦截器" class="headerlink" title="自定义认证拦截器"></a>自定义认证拦截器</h4><p>继承 <code>FormAuthenticationFilter</code> 或者 <code>AuthenticatingFilter</code>，并改写核心认证逻辑即可，这个需要阅读下 <code>FormAuthenticationFilter的源码</code> 的源码，这个时候思路就很清晰了。</p><h3 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h3><h4 id="AuthorizingRealm-抽象类"><a href="#AuthorizingRealm-抽象类" class="headerlink" title="AuthorizingRealm 抽象类"></a>AuthorizingRealm 抽象类</h4><p>Shiro的认证过程最终会交由Realm执行，这时会调用Realm的 <code>getAuthenticationInfo(token)</code> 方法。<br>该方法主要执行以下操作:</p><ol><li>检查提交的进行认证的令牌信息</li><li>根据令牌信息从数据源(通常为数据库)中获取用户信息</li><li>对用户信息进行匹配验证。</li><li>验证通过将返回一个封装了用户信息的 <code>AuthenticationInfo</code> 实例。</li><li>验证失败则抛出 <code>AuthenticationException</code> 异常信息。<h4 id="拓展认证"><a href="#拓展认证" class="headerlink" title="拓展认证"></a>拓展认证</h4>需要自己定义一个 realm 类，来继承 <code>AuthorizingRealm</code> 抽象类，然后重写相关需要修改的方法即可。<br>一般重写这两个方法即可：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取授权信息</span></span><br><span class="line"><span class="comment">     PrincipalCollection是一个身份集合，因为我们现在就一个Realm，所以直接调用getPrimaryPrincipal得到之前传入的用户名即可；然后根据用户名调用UserService接口获取角色及权限信息。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">/**</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 获取身份验证信息</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 认证回调函数,登录时调用</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 首先根据传入的用户名获取User信息；然后如果user为空，那么抛出没找到帐号异常UnknownAccountException；</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 如果user找到但锁定了抛出锁定异常LockedAccountException；最后生成AuthenticationInfo信息，</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 交给间接父类AuthenticatingRealm使用CredentialsMatcher进行判断密码是否匹配，</span></span></span><br><span class="line"><span class="function"><span class="comment"> * 如果不匹配将抛出密码错误异常IncorrectCredentialsException；</span></span></span><br><span class="line"><span class="function"><span class="comment"> */</span></span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>UserRealm父类AuthorizingRealm将获取Subject相关信息分成两步：获取身份验证信息（doGetAuthenticationInfo）及授权信息（doGetAuthorizationInfo）</strong>；</p><ol><li>doGetAuthenticationInfo获取身份验证相关信息：首先根据传入的用户名获取User信息；然后如果user为空，那么抛出没找到帐号异常UnknownAccountException；如果user找到但锁定了抛出锁定异常LockedAccountException；最后生成AuthenticationInfo信息，交给间接父类AuthenticatingRealm使用CredentialsMatcher进行判断密码是否匹配，如果不匹配将抛出密码错误异常IncorrectCredentialsException；另外如果密码重试此处太多将抛出超出重试次数异常ExcessiveAttemptsException；在组装SimpleAuthenticationInfo信息时，需要传入：身份信息（用户名）、凭据（密文密码）、盐（username+salt），CredentialsMatcher使用盐加密传入的明文密码和此处的密文密码进行匹配。</li><li>doGetAuthorizationInfo获取授权信息：PrincipalCollection是一个身份集合，因为我们现在就一个Realm，所以直接调用getPrimaryPrincipal得到之前传入的用户名即可；然后根据用户名调用UserService接口获取角色及权限信息。</li></ol><h3 id="AuthenticationToken"><a href="#AuthenticationToken" class="headerlink" title="AuthenticationToken"></a>AuthenticationToken</h3><p><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/learn-shiro/5.png" alt="image"><br>AuthenticationToken用于收集用户提交的身份（如用户名）及凭据（如密码）：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AuthenticationToken</span> <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;  </span><br><span class="line">    <span class="function">Object <span class="title">getPrincipal</span><span class="params">()</span></span>; <span class="comment">//身份  </span></span><br><span class="line">    <span class="function">Object <span class="title">getCredentials</span><span class="params">()</span></span>; <span class="comment">//凭据  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><ul><li>扩展接口 <code>RememberMeAuthenticationToken</code>：提供了 <code>boolean isRememberMe()</code> 现“记住我”的功能；</li><li>扩展接口是 <code>HostAuthenticationToken</code>：提供了 <code>String getHost()</code> 方法用于获取用户“主机”的功能。</li></ul><p>Shiro提供了一个直接拿来用的UsernamePasswordToken，用于实现用户名/密码Token组，另外其实现了RememberMeAuthenticationToken和HostAuthenticationToken，可以实现记住我及主机验证的支持。</p><h4 id="自己实现-AuthenticationToken"><a href="#自己实现-AuthenticationToken" class="headerlink" title="自己实现 AuthenticationToken"></a>自己实现 AuthenticationToken</h4><p>主要实现能够实现获取用户的身份信息的 token :<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OAuth2Token</span> <span class="keyword">implements</span> <span class="title">AuthenticationToken</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String token;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OAuth2Token</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.token = token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPrincipal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getCredentials</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="AuthenticationInfo"><a href="#AuthenticationInfo" class="headerlink" title="AuthenticationInfo"></a>AuthenticationInfo</h3><p><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/learn-shiro/6.png" alt="image"></p><p>AuthenticationInfo有两个作用：</p><ol><li>如果Realm是AuthenticatingRealm子类，则提供给AuthenticatingRealm内部使用的CredentialsMatcher进行凭据验证；（如果没有继承它需要在自己的Realm中自己实现验证）；</li><li>提供给SecurityManager来创建Subject（提供身份信息）；<h3 id="PrincipalCollection"><a href="#PrincipalCollection" class="headerlink" title="PrincipalCollection"></a>PrincipalCollection</h3><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/learn-shiro/7.png" alt="image"><br>因为我们可以在Shiro中同时配置多个Realm，所以呢身份信息可能就有多个；因此其提供了PrincipalCollection用于聚合这些身份信息：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PrincipalCollection</span> <span class="keyword">extends</span> <span class="title">Iterable</span>, <span class="title">Serializable</span> </span>&#123;  </span><br><span class="line">    <span class="function">Object <span class="title">getPrimaryPrincipal</span><span class="params">()</span></span>; <span class="comment">//得到主要的身份  </span></span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">oneByType</span><span class="params">(Class&lt;T&gt; type)</span></span>; <span class="comment">//根据身份类型获取第一个  </span></span><br><span class="line">    &lt;T&gt; <span class="function">Collection&lt;T&gt; <span class="title">byType</span><span class="params">(Class&lt;T&gt; type)</span></span>; <span class="comment">//根据身份类型获取一组  </span></span><br><span class="line">    <span class="function">List <span class="title">asList</span><span class="params">()</span></span>; <span class="comment">//转换为List  </span></span><br><span class="line">    <span class="function">Set <span class="title">asSet</span><span class="params">()</span></span>; <span class="comment">//转换为Set  </span></span><br><span class="line">    <span class="function">Collection <span class="title">fromRealm</span><span class="params">(String realmName)</span></span>; <span class="comment">//根据Realm名字获取  </span></span><br><span class="line">    <span class="function">Set&lt;String&gt; <span class="title">getRealmNames</span><span class="params">()</span></span>; <span class="comment">//获取所有身份验证通过的Realm名字  </span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>; <span class="comment">//判断是否为空  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>因为PrincipalCollection聚合了多个，此处最需要注意的是getPrimaryPrincipal，如果只有一个Principal那么直接返回即可，如果有多个Principal，则返回第一个（因为内部使用Map存储，所以可以认为是返回任意一个）；oneByType / byType根据凭据的类型返回相应的Principal；fromRealm根据Realm名字（每个Principal都与一个Realm关联）获取相应的Principal。</p><p>如果我们还需要实现别的类型的多个认证，具体参考文章第二篇，我先不研究了。</p><h3 id="AuthorizationInfo"><a href="#AuthorizationInfo" class="headerlink" title="AuthorizationInfo"></a>AuthorizationInfo</h3><p><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/learn-shiro/8.png" alt="image"><br>AuthorizationInfo用于聚合授权信息的：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AuthorizationInfo</span> <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;  </span><br><span class="line">    <span class="function">Collection&lt;String&gt; <span class="title">getRoles</span><span class="params">()</span></span>; <span class="comment">//获取角色字符串信息  </span></span><br><span class="line">    <span class="function">Collection&lt;String&gt; <span class="title">getStringPermissions</span><span class="params">()</span></span>; <span class="comment">//获取权限字符串信息  </span></span><br><span class="line">    <span class="function">Collection&lt;Permission&gt; <span class="title">getObjectPermissions</span><span class="params">()</span></span>; <span class="comment">//获取Permission对象信息  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>当我们使用AuthorizingRealm时，如果身份验证成功，在进行授权时就通过 <code>doGetAuthorizationInfo</code> 方法获取角色/权限信息用于授权验证。</p><p>Shiro提供了一个实现 <code>SimpleAuthorizationInfo</code>，大多数时候使用这个即可。</p><h3 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h3><p>Subject是Shiro的核心对象，基本所有身份验证、授权都是通过Subject完成。<br>对于Subject的构建一般没必要我们去创建；一般通过 <code>SecurityUtils.getSubject()</code> 获取;</p><p>对于Subject我们一般这么使用：</p><ol><li>身份验证（login）</li><li>授权（<code>hasRole*/isPermitted*</code>或<code>checkRole*/checkPermission*</code>）</li><li>将相应的数据存储到会话（Session）</li><li>切换身份（RunAs）/多线程身份传播</li><li>退出 logout</li></ol><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a rel="external nofollow noopener noreferrer" target="_blank" href="http://blog.csdn.net/makecontral/article/details/77387026">Apache Shiro源码 拦截器过程</a></li><li><a rel="external nofollow noopener noreferrer" target="_blank" href="http://jinnianshilongnian.iteye.com/blog/2022468">第六章 Realm及相关对象——《跟我学Shiro》</a></li></ul><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> shiro </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习 Apache Shiro 架构]]></title>
      <url>/shiro-1.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><p>很久以前就在公司的项目接触过 <code>Shiro</code>，但是现在想在自己的项目中集成它，并且结合 <code>JWT</code>，自己需要定义一些特殊的验证，却出现了很多问题，并且还没好好解决，当我重新把所有基础的架构学习了一遍，很快就找到了问题所在，并且对 Shiro 的认证流程有比较清晰的了解。<br>学习的时候，不能总是停留在怎么使用它的地步，许多的配置，都是从网上直接 copy 过来的，却不知道为很么需要这么写。这是工作中存在的非常大的隐患，直到需要你架构一个项目的时候，才知道，即使不需要阅读源码，也要清楚相关代码写的到底是为了什么，不能一知半解。</p><a id="more"></a><h3 id="架构体系"><a href="#架构体系" class="headerlink" title="架构体系"></a>架构体系</h3><h4 id="架构介绍"><a href="#架构介绍" class="headerlink" title="架构介绍"></a>架构介绍</h4><p>Apache Shiro是一个安全框架，提供了认证（登陆）、授权（权限）、加密（密码）和会话管理等功能：</p><p>Shiro 的三大组件：</p><p><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/learn-shiro/1.png" alt="image"></p><ul><li><code>Subject</code>：即<code>当前操作用户</code>。但是，在Shiro中，Subject这一概念并不仅仅指人，也可以是第三方进程、后台帐户（Daemon Account）或其他类似事物。它仅仅意味着<code>当前跟软件交互的东西</code>。但考虑到大多数目的和用途，你可以把它认为是Shiro的<code>用户</code>概念。<br>Subject代表了当前用户的安全操作，SecurityManager则管理所有用户的安全操作。</li><li><code>SecurityManager</code>：它是Shiro框架的核心，典型的Facade模式，Shiro通过SecurityManager来管理内部组件实例，并通过它来提供安全管理的各种服务。</li><li><code>Realm</code>： Realm充当了Shiro与应用安全数据间的“桥梁”或者“连接器”。也就是说，当对用户执行认证（登录）和授权（访问控制）验证时，Shiro会从应用配置的Realm中查找用户及其权限信息。<br>从这个意义上讲，Realm实质上是一个安全相关的DAO：它封装了数据源的连接细节，并在需要时将相关数据提供给Shiro。当配置Shiro时，你必须至少指定一个Realm，用于认证和（或）授权。配置多个Realm是可以的，但是至少需要一个。<br>Shiro内置了可以连接大量安全数据源（又名目录）的Realm，如LDAP、关系数据库（JDBC）、类似INI的文本配置资源以及属性文件等。如果缺省的Realm不能满足需求，你还可以插入代表自定义数据源的自己的Realm实现。</li></ul><p><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/learn-shiro/2.png" alt="image"></p><h4 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h4><p>认证大致上就是系统的登陆相关的功能，我们有两种方法进行验证：</p><ul><li>一是提交需要验证的实体信息，也就是我们平常的登陆时候需要的用户名和密码；</li><li>二是使用凭据信息进行验证合法性，一般就是使用一个加密并且有效时常的 token，服务端进行解密，查询数据库，得到该用户的信息。</li></ul><h5 id="收集实体-凭据信息"><a href="#收集实体-凭据信息" class="headerlink" title="收集实体/凭据信息"></a>收集实体/凭据信息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Example using most common scenario of username/password pair:  </span></span><br><span class="line">UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(username, password);  </span><br><span class="line"><span class="comment">//”Remember Me” built-in:  </span></span><br><span class="line">token.setRememberMe(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><blockquote><p><code>UsernamePasswordToken</code> 支持最常见的用户名/密码的认证机制。同时，由于它实现了 <code>RememberMeAuthenticationToken</code> 接口，我们可以通过令牌设置“记住我”的功能。<br>是，“已记住”和“已认证”是有区别的：<br>*已记住的用户仅仅是非匿名用户，你可以通过 <code>subject.getPrincipals()</code> 获取用户信息。但是它并非是完全认证通过的用户，当你访问需要认证用户的功能时，你仍然需要重新提交认证信息**。<br>一区别可以参考亚马逊网站，网站会默认记住登录的用户，再次访问网站时，对于非敏感的页面功能，页面上会显示记住的用户信息，但是当你访问网站账户信息时仍然需要再次进行登录认证。</p></blockquote><h5 id="提交实体-凭据信息"><a href="#提交实体-凭据信息" class="headerlink" title="提交实体/凭据信息"></a>提交实体/凭据信息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Subject currentUser = SecurityUtils.getSubject();  </span><br><span class="line">currentUser.login(token);</span><br></pre></td></tr></table></figure><p>收集了实体/凭据信息之后，我们可以通过SecurityUtils工具类，获取当前的用户，然后通过调用login方法提交认证。</p><h5 id="认证处理"><a href="#认证处理" class="headerlink" title="认证处理"></a>认证处理</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;  </span><br><span class="line">    currentUser.login(token);  </span><br><span class="line">&#125; <span class="keyword">catch</span> ( UnknownAccountException uae ) &#123; ...  </span><br><span class="line">&#125; <span class="keyword">catch</span> ( IncorrectCredentialsException ice ) &#123; ...  </span><br><span class="line">&#125; <span class="keyword">catch</span> ( LockedAccountException lae ) &#123; ...  </span><br><span class="line">&#125; <span class="keyword">catch</span> ( ExcessiveAttemptsException eae ) &#123; ...  </span><br><span class="line">&#125; ... <span class="keyword">catch</span> your own ...  </span><br><span class="line">&#125; <span class="keyword">catch</span> ( AuthenticationException ae ) &#123;  </span><br><span class="line">    <span class="comment">//unexpected error?  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果login方法执行完毕且没有抛出任何异常信息，那么便认为用户认证通过。之后在应用程序任意地方调用SecurityUtils.getSubject() 都可以获取到当前认证通过的用户实例，使用subject.isAuthenticated()判断用户是否已验证都将返回true.<br>相反，如果login方法执行过程中抛出异常，那么将认为认证失败。Shiro有着丰富的层次鲜明的异常类来描述认证失败的原因，如代码示例。</p><h4 id="登出"><a href="#登出" class="headerlink" title="登出"></a>登出</h4><p>登出操作可以通过调用subject.logout()来删除你的登录信息，如：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">currentUser.logout(); <span class="comment">//removes all identifying information and invalidates their session too.</span></span><br></pre></td></tr></table></figure><p></p><h4 id="认证内部处理机制"><a href="#认证内部处理机制" class="headerlink" title="认证内部处理机制"></a>认证内部处理机制</h4><p><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/learn-shiro/3.png" alt="image"></p><p>如上图，我们通过Shiro架构图的认证部分，来说明Shiro认证内部的处理顺序：</p><ol><li>应用程序构建了一个终端用户认证信息的AuthenticationToken 实例后，调用Subject.login方法。</li><li>Sbuject的实例通常是DelegatingSubject类（或子类）的实例对象，在认证开始时，会委托应用程序设置的securityManager实例调用securityManager.login(token)方法。</li><li>SecurityManager接受到token(令牌)信息后会委托内置的Authenticator的实例（通常都是ModularRealmAuthenticator类的实例）调用authenticator.authenticate(token). ModularRealmAuthenticator在认证过程中会对设置的一个或多个Realm实例进行适配，它实际上为Shiro提供了一个可拔插的认证机制。</li><li>如果在应用程序中配置了多个Realm，ModularRealmAuthenticator会根据配置的AuthenticationStrategy(认证策略)来进行多Realm的认证过程。在Realm被调用后，AuthenticationStrategy将对每一个Realm的结果作出响应。<br>注：如果应用程序中仅配置了一个Realm，Realm将被直接调用而无需再配置认证策略。</li><li>判断每一个Realm是否支持提交的token，如果支持，Realm将调用getAuthenticationInfo(token); getAuthenticationInfo 方法就是实际认证处理，我们通过覆盖Realm的doGetAuthenticationInfo方法来编写我们自定义的认证处理。</li></ol><h4 id="使用多个Realm认证"><a href="#使用多个Realm认证" class="headerlink" title="使用多个Realm认证"></a>使用多个Realm认证</h4><h5 id="Authenticator（认证器）"><a href="#Authenticator（认证器）" class="headerlink" title="Authenticator（认证器）"></a>Authenticator（认证器）</h5><p>默认实现是 <code>ModularRealmAuthenticator</code>,它既支持单一Realm也支持多个Realm。如果仅配置了一个Realm，ModularRealmAuthenticator 会直接调用该Realm处理认证信息，如果配置了多个Realm，它会根据认证策略来适配Realm，找到合适的Realm执行认证信息。</p><h5 id="AuthenticationStrategy（认证策略）"><a href="#AuthenticationStrategy（认证策略）" class="headerlink" title="AuthenticationStrategy（认证策略）"></a>AuthenticationStrategy（认证策略）</h5><p>当应用程序配置了多个Realm时，ModularRealmAuthenticator将根据认证策略来判断认证成功或是失败。<br>例如，如果只有一个Realm验证成功，而其他Realm验证失败，那么这次认证是否成功呢？如果大多数的Realm验证成功了，认证是否就认为成功呢？或者，一个Realm验证成功后，是否还需要判断其他Realm的结果？认证策略就是根据应用程序的需要对这些问题作出决断。<br>认证策略是一个无状态的组件，在认证过程中会经过4次的调用：</p><ul><li>在所有Realm被调用之前</li><li>在调用Realm的getAuthenticationInfo 方法之前</li><li>在调用Realm的getAuthenticationInfo 方法之后</li><li>在所有Realm被调用之后</li></ul><p><strong>认证策略的另外一项工作就是聚合所有Realm的结果信息封装至一个AuthenticationInfo实例中，并将此信息返回，以此作为Subject的身份信息。</strong></p><p>Shiro有三种认证策略的具体实现：</p><ul><li><code>AtLeastOneSuccessfulStrategy</code> 只要有一个（或更多）的Realm验证成功，那么认证将被视为成功<br><code>FirstSuccessfulStrategy</code> 第一个Realm验证成功，整体认证将被视为成功，且后续Realm将被忽略<br><code>AllSuccessfulStrategy</code> 所有Realm成功，认证才视为成功</li></ul><p><strong><code>ModularRealmAuthenticator</code> 内置的认证策略默认实现是第一种 <code>AtLeastOneSuccessfulStrategy</code> 方式，因为这种方式也是被广泛使用的一种认证策略。当然，你也可以通过配置文件定义你需要的策略</strong>，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[main]  </span><br><span class="line">...  </span><br><span class="line">authcStrategy = org.apache.shiro.authc.pam.FirstSuccessfulStrategy  </span><br><span class="line">securityManager.authenticator.authenticationStrategy = $authcStrategy  </span><br><span class="line">...</span><br></pre></td></tr></table></figure><h5 id="Realm的顺序"><a href="#Realm的顺序" class="headerlink" title="Realm的顺序"></a>Realm的顺序</h5><p>由刚才提到的认证策略，可以看到Realm在ModularRealmAuthenticator 里面的顺序对认证是有影响的。<br>ModularRealmAuthenticator 会读取配置在SecurityManager里的Realm。当执行认证是，它会遍历Realm集合，对所有支持提交的token的Realm调用getAuthenticationInfo 。<br>因此，Realm的顺序对你使用的认证策略结果有影响。</p><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><p>授权即访问控制，它将判断用户在应用程序中对资源是否拥有相应的访问权限。 如，判断一个用户有查看页面的权限，编辑数据的权限，拥有某一按钮的权限，以及是否拥有打印的权限等等。</p><h4 id="授权的三要素"><a href="#授权的三要素" class="headerlink" title="授权的三要素"></a>授权的三要素</h4><p>授权有着三个核心元素：权限、角色和用户。</p><h5 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h5><p>权限是Apache Shiro安全机制最核心的元素。它在应用程序中明确声明了被允许的行为和表现。一个格式良好好的权限声明可以清晰表达出用户对该资源拥有的权限。<br>大多数的资源会支持典型的CRUD操作（create,read,update,delete）,但是任何操作建立在特定的资源上才是有意义的。因此，权限声明的根本思想就是建立在资源以及操作上。<br>而我们通过权限声明仅仅能了解这个权限可以在应用程序中做些什么，而不能确定谁拥有此权限。<br>于是，我们就需要在应用程序中对用户和权限建立关联。<br>通常的做法就是将权限分配给某个角色，然后将这个角色关联一个或多个用户。</p><h5 id="权限声明及粒度"><a href="#权限声明及粒度" class="headerlink" title="权限声明及粒度"></a>权限声明及粒度</h5><p>Shiro权限声明通常是使用以冒号分隔的表达式。就像前文所讲，一个权限表达式可以清晰的指定资源类型，允许的操作，可访问的数据。同时，Shiro权限表达式支持简单的通配符，可以更加灵活的进行权限设置。<br>下面以实例来说明权限表达式。</p><ul><li>可查询用户数据<br><code>User:view</code></li><li>可查询或编辑用户数据<br><code>User:view,edit</code></li><li>可对用户数据进行所有操作<br><code>User:* 或 user</code></li><li>可编辑id为123的用户数据<br><code>User:edit:123</code></li></ul><h5 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h5><p>Shiro支持两种角色模式：</p><ol><li>传统角色：一个角色代表着一系列的操作，当需要对某一操作进行授权验证时，只需判断是否是该角色即可。这种角色权限相对简单、模糊，不利于扩展。</li><li>权限角色：一个角色拥有一个权限的集合。授权验证时，需要判断当前角色是否拥有该权限。这种角色权限可以对该角色进行详细的权限描述，适合更复杂的权限设计。</li></ol><p>下面将详细描述对两种角色模式的授权实现。</p><h4 id="授权实现"><a href="#授权实现" class="headerlink" title="授权实现"></a>授权实现</h4><h5 id="角色验证"><a href="#角色验证" class="headerlink" title="角色验证"></a>角色验证</h5><h6 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h6><p>当需要验证用户是否拥有某个角色时，可以调用Subject 实例的 <code>hasRole*</code>方法验证。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Subject currentUser = SecurityUtils.getSubject();  </span><br><span class="line"><span class="keyword">if</span> (currentUser.hasRole(<span class="string">"administrator"</span>)) &#123;  </span><br><span class="line">    <span class="comment">//show the admin button  </span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">    <span class="comment">//don't show the button?  Grey it out?  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>相关验证方法如下：</p><table><thead><tr><th>Subject方法</th><th>描述</th></tr></thead><tbody><tr><td>hasRole(String roleName)</td><td>当用户拥有指定角色时，返回true</td></tr><tr><td>hasRoles(List<string>roleNames)</string></td><td>按照列表顺序返回相应的一个boolean值数组</td></tr><tr><td>hasAllRoles(Collection<string>roleNames)</string></td><td>如果用户拥有所有指定角色时，返回true</td></tr></tbody></table><h5 id="断言支持"><a href="#断言支持" class="headerlink" title="断言支持"></a>断言支持</h5><p>Shiro还支持以断言的方式进行授权验证。断言成功，不返回任何值，程序继续执行；断言失败时，将抛出异常信息。使用断言，可以使我们的代码更加简洁。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Subject currentUser = SecurityUtils.getSubject();  </span><br><span class="line"><span class="comment">//guarantee that the current user is a bank teller and  </span></span><br><span class="line"><span class="comment">//therefore allowed to open the account:  </span></span><br><span class="line">currentUser.checkRole(<span class="string">"bankTeller"</span>);  </span><br><span class="line">openBankAccount();</span><br></pre></td></tr></table></figure><p></p><table><thead><tr><th>Subject方法</th><th>描述</th></tr></thead><tbody><tr><td>checkRole(String roleName)</td><td>断言用户是否拥有指定角色</td></tr><tr><td>checkRoles(Collection<string>roleNames)</string></td><td>断言用户是否拥有所有指定角色</td></tr><tr><td>checkRoles(String… roleNames)</td><td>对上一方法的方法重载</td></tr></tbody></table><h5 id="权限验证"><a href="#权限验证" class="headerlink" title="权限验证"></a>权限验证</h5><p>和上面的 role 差不多，验证权限字符串，方法名改了一下</p><h5 id="注解验证"><a href="#注解验证" class="headerlink" title="注解验证"></a>注解验证</h5><p>一般我们都是使用注解的方式进行编码。<br>Shiro注解支持AspectJ、Spring、Google-Guice等，可根据应用进行不同的配置。</p><p>相关注解：</p><ol><li><code>@RequiresAuthentication</code> 可以用户类/属性/方法，用于表明当前用户需是经过认证的用户。</li><li><code>@RequiresGuest</code> 表明该用户需为 <code>guest</code> 用户</li><li><code>@RequiresPermissions</code> 当前用户需拥有制定权限</li><li><code>@RequiresRoles</code> 当前用户需拥有制定角色</li><li><code>@RequiresUser</code> 当前用户需为已认证用户或已记住用户</li></ol><h4 id="Shiro授权的内部处理机制"><a href="#Shiro授权的内部处理机制" class="headerlink" title="Shiro授权的内部处理机制"></a>Shiro授权的内部处理机制</h4><p><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/learn-shiro/3.png" alt="image"></p><ol><li>在应用程序中调用授权验证方法(Subject的 <code>isPermitted*</code> 或 <code>hasRole*</code> 等)</li><li>Sbuject的实例通常是 <code>DelegatingSubject</code> 类（或子类）的实例对象，在认证开始时，会委托应用程序设置的 <code>securityManager</code> 实例调用相应的 <code>isPermitted*</code> 或 <code>hasRole*</code> 方法。</li><li>接下来SecurityManager会委托内置的 <code>Authorizer</code> 的实例（默认是 <code>ModularRealmAuthorizer</code> 类的实例，类似认证实例，它同样支持一个或多个Realm实例认证）调用相应的授权方法。</li><li>每一个Realm将检查是否实现了相同的 Authorizer 接口。然后，将调用Reaml自己的相应的授权验证方法。</li></ol><p>当使用多个Realm时，不同于认证策略处理方式，默认的授权处理过程中：</p><ol><li>当调用Realm出现异常时，将立即抛出异常，结束授权验证。</li><li>只要有一个Realm验证成功，那么将认为授权成功，立即返回，结束认证。</li></ol><p>这篇文章主要是转载了 <a rel="external nofollow noopener noreferrer" target="_blank" href="http://kdboy.iteye.com/blog/1154644">http://kdboy.iteye.com/blog/1154644</a> 下面的系列文章，进行学习，并且整理一部分内容，下面会继续学习 shiro 拦截器和自定义认证，包括 jwt 或者结合 redis 完成分布式认证。</p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> shiro </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习Spring Boot：（十五）使用Lombok来优雅的编码]]></title>
      <url>/springboot-15.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p><code>Lombok</code> 是一种 <code>Java™</code> 实用工具，可用来帮助开发人员消除 Java 的冗长，尤其是对于简单的 Java 对象（POJO）。它通过注解实现这一目的。</p></blockquote><a id="more"></a><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><p>在 pom.xml 文件中添加相关依赖：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.16.20<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>由于 <code>Lombok</code> 采取的注解形式的，在编译后，自动生成相应的方法，为了不让 ide 疯了，需要下载插件了支持它。<br>以 idea 为例：查找插件 <code>lombok plugin</code> 安装即可。</p><p>用我的 User 实体类为例（set,get,toString 方法），<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysUserEntity</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure><p></p><p>在按快捷键 <code>Ctrl + F12</code>，可以查找到set,get,toString 方法。</p><h4 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h4><p>写点常用的，其余的 api 的打开 Jar 包一目了然</p><h5 id="Getter"><a href="#Getter" class="headerlink" title="@Getter"></a>@Getter</h5><h5 id="Setter"><a href="#Setter" class="headerlink" title="@Setter"></a>@Setter</h5><h5 id="ToString"><a href="#ToString" class="headerlink" title="@ToString"></a>@ToString</h5><h5 id="EqualsAndHashCode"><a href="#EqualsAndHashCode" class="headerlink" title="@EqualsAndHashCode"></a>@EqualsAndHashCode</h5><h5 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h5><h6 id="AllArgsConstructor"><a href="#AllArgsConstructor" class="headerlink" title="@AllArgsConstructor"></a>@AllArgsConstructor</h6><p>会生成一个包含所有变量，同时如果变量使用了NotNull annotation ， 会进行是否为空的校验，<br>全部参数的构造函数的自动生成，该注解的作用域也是只有在实体类上，参数的顺序与属性定义的顺序一致。</p><h6 id="NoArgsConstructor"><a href="#NoArgsConstructor" class="headerlink" title="@NoArgsConstructor"></a>@NoArgsConstructor</h6><p>无参构造函数</p><h6 id="RequiredArgsConstructor"><a href="#RequiredArgsConstructor" class="headerlink" title="@RequiredArgsConstructor"></a>@RequiredArgsConstructor</h6><p>会生成一个包含常量（final），和标识了@NotNull的变量 的构造方法。</p><h6 id="怎么使用"><a href="#怎么使用" class="headerlink" title="怎么使用"></a>怎么使用</h6><p>它们都有三个参数可以设置</p><ol><li><p><code>String staticName() default &quot;&quot;;</code></p><p>如果设置了它，将原来的构造方法的访问修饰符将会变成 <strong>私有</strong>的，而外添加一个<strong>静态构造方法</strong>，参数相同，名字是<strong>设置的字符串的名字</strong>，访问修饰符为<strong>公有</strong>的。</p></li><li><p><code>AnyAnnotation[] onConstructor() default {};</code><br>在构造方法上添加<strong>注解</strong>。使用方法<code>@RequiredArgsConstructor(onConstructor=@__({@AnnotationsGoHere}))}</code></p><p>例如我们在 Spring 项目中需要注入多个值，写很多个 <code>@Autowired</code> 很麻烦，就可以使用这种方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span>(onConstructor = @__(<span class="meta">@Autowired</span>))</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IUserRepository userRepository;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IOrderRepository orderRepository;</span><br><span class="line">    ………………</span><br></pre></td></tr></table></figure></li><li><p><code>AccessLevel access() default lombok.AccessLevel.PUBLIC;</code><br>构造函数访问修饰符；</p></li><li><p><code>@NoArgsConstructor</code>无参构造函数中还有个注解 <code>boolean force() default false;</code><br>作者的注释是 <em>If {@code true}, initializes all final fields to 0 / null / false. Otherwise, a compile time error occurs.</em></p><p>设置为 <code>true</code> 的时候，初始化所有的参数为默认值，否则编译错误。</p><h5 id="Data"><a href="#Data" class="headerlink" title="@Data"></a>@Data</h5><p>我自己尝试了下，我们使用 <code>@Data</code> 注解就可以有下面几个注解的功能： <code>@ToString</code>、<code>@Getter</code>、<code>@Setter</code>、<code>@EqualsAndHashCode</code>、<code>@NoArgsConstructor</code> 。</p></li></ol><blockquote><p>注意的是，同时使用<code>@Data</code> 和 <code>@AllArgsConstructor</code> 后 ，默认的无参构造函数失效，如果需要它，要重新设置 <code>@NoArgsConstructor</code></p></blockquote><h5 id="Slf4j"><a href="#Slf4j" class="headerlink" title="@Slf4j"></a>@Slf4j</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类上面注解了，直接调用 log 即可：</span></span><br><span class="line">log.info(xxxx);</span><br></pre></td></tr></table></figure><h5 id="Log"><a href="#Log" class="headerlink" title="@Log"></a>@Log</h5><p>使用的是 <code>java.util.logging.Logger</code> ，直接使用 变量 <code>log</code>。</p><h5 id="Builder"><a href="#Builder" class="headerlink" title="@Builder"></a>@Builder</h5><p>bulder 模式构建对象。</p><h5 id="Cleanup"><a href="#Cleanup" class="headerlink" title="@Cleanup"></a>@Cleanup</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cleanup</span> </span><br><span class="line">InputStream in = <span class="keyword">new</span> FileInputStream(args[<span class="number">0</span>]);</span><br><span class="line"><span class="meta">@Cleanup</span> </span><br><span class="line">OutputStream out = <span class="keyword">new</span> FileOutputStream(args[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><p>自动化关闭流，相当于 jdk1.7 种的 try with resource</p><h5 id="val"><a href="#val" class="headerlink" title="val"></a>val</h5><p>类型推导。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">val example = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">example.add(<span class="string">"Hello, World!"</span>);</span><br></pre></td></tr></table></figure><p>对应的转换后代码就是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">val example = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">example.add(<span class="string">"Hello, World!"</span>);</span><br></pre></td></tr></table></figure><h5 id="NonNull"><a href="#NonNull" class="headerlink" title="@NonNull"></a>@NonNull</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NonNullExample</span><span class="params">(@NonNull Person person)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = person.getName();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>转换后就是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NonNullExample</span><span class="params">(@NonNull Person person)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (person == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"person"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.name = person.getName();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h5 id="SneakyThrows"><a href="#SneakyThrows" class="headerlink" title="@SneakyThrows"></a>@SneakyThrows</h5><p>翻译就是暗中抛出异常</p><p>当我们需要抛出异常，在当前方法上调用，不用显示的在方法名后面写 throw</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span>(Exception.class)</span><br></pre></td></tr></table></figure><h5 id="Synchronized"><a href="#Synchronized" class="headerlink" title="@Synchronized"></a>@Synchronized</h5><p>方法中所有的代码都加入到一个代码块中，默认静态方法使用的是全局锁，普通方法使用的是对象锁，当然也可以指定锁的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="meta">@Synchronized</span>(<span class="string">"lock"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>个人认为这样的阅读起来比较麻烦，实际开发中往往将 <code>synchronized</code> 颗粒化到代码块中。</p><h5 id="Builder-1"><a href="#Builder-1" class="headerlink" title="@Builder"></a>@Builder</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Builder</span><br><span class="line">public class Student &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用方式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student student = Student.builder().name(&quot;zs&quot;).age(24).build();</span><br></pre></td></tr></table></figure><p>这样会少写非常多的代码。</p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习Spring Boot：（十四）spring-shiro的密码加密]]></title>
      <url>/springboot-14.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前面配置了怎么使用 shiro ，这次研究下怎么使用spring shiro的密码加密，并且需要在新增、更新用户的时候，实现生成盐，加密后的密码进行入库操作。</p><a id="more"></a><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="配置凭证匹配器"><a href="#配置凭证匹配器" class="headerlink" title="配置凭证匹配器"></a>配置凭证匹配器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> HashedCredentialsMatcher <span class="title">hashedCredentialsMatcher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    HashedCredentialsMatcher hashedCredentialsMatcher = <span class="keyword">new</span> HashedCredentialsMatcher();</span><br><span class="line">    hashedCredentialsMatcher.setHashAlgorithmName(<span class="string">"SHA-256"</span>);<span class="comment">//散列算法:MD2、MD5、SHA-1、SHA-256、SHA-384、SHA-512等。</span></span><br><span class="line">    hashedCredentialsMatcher.setHashIterations(<span class="number">1</span>);<span class="comment">//散列的次数，默认1次， 设置两次相当于 md5(md5(""));</span></span><br><span class="line">    <span class="keyword">return</span> hashedCredentialsMatcher;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册身份验证</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hashedCredentialsMatcher 凭证匹配器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> OAuth2Realm <span class="title">oAuth2Realm</span><span class="params">(HashedCredentialsMatcher hashedCredentialsMatcher)</span> </span>&#123;</span><br><span class="line">    OAuth2Realm oAuth2Realm = <span class="keyword">new</span> OAuth2Realm();</span><br><span class="line">    oAuth2Realm.setCredentialsMatcher(hashedCredentialsMatcher);</span><br><span class="line">    <span class="keyword">return</span> oAuth2Realm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就把凭证匹配器注册到身份验证的 Realm 中，在用户进行登陆操作的时候，在 Realm 中的 <code>doGetAuthenticationInfo</code> 方法中使用这种方法进行用户身份认证：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(</span><br><span class="line">                user, <span class="comment">// 存入凭证的信息，登陆成功后可以使用 SecurityUtils.getSubject().getPrincipal();在任何地方使用它</span></span><br><span class="line">                user.getPassword(),</span><br><span class="line">                ByteSource.Util.bytes(user.getSalt()), <span class="comment">// 加盐，</span></span><br><span class="line">                getName());</span><br></pre></td></tr></table></figure><p></p><h4 id="生成加密密码"><a href="#生成加密密码" class="headerlink" title="生成加密密码"></a>生成加密密码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 随机生成 salt 需要指定 它的字符串的长度</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> len 字符串的长度</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> salt</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateSalt</span><span class="params">(<span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//一个Byte占两个字节</span></span><br><span class="line">    <span class="keyword">int</span> byteLen = len &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    SecureRandomNumberGenerator secureRandom = <span class="keyword">new</span> SecureRandomNumberGenerator();</span><br><span class="line">    <span class="keyword">return</span> secureRandom.nextBytes(byteLen).toHex();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取加密后的密码，使用默认hash迭代的次数 1 次</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hashAlgorithm hash算法名称 MD2、MD5、SHA-1、SHA-256、SHA-384、SHA-512、etc。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> password      需要加密的密码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> salt          盐</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 加密后的密码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encryptPassword</span><span class="params">(String hashAlgorithm, String password, String salt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> encryptPassword(hashAlgorithm, password, salt, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取加密后的密码，需要指定 hash迭代的次数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hashAlgorithm  hash算法名称 MD2、MD5、SHA-1、SHA-256、SHA-384、SHA-512、etc。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> password       需要加密的密码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> salt           盐</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hashIterations hash迭代的次数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 加密后的密码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encryptPassword</span><span class="params">(String hashAlgorithm, String password, String salt, <span class="keyword">int</span> hashIterations)</span> </span>&#123;</span><br><span class="line">    SimpleHash hash = <span class="keyword">new</span> SimpleHash(hashAlgorithm, password, salt, hashIterations);</span><br><span class="line">    <span class="keyword">return</span> hash.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将生成出来的盐，加密密码插入到数据库就完成了。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(SysUserEntity sysUser)</span> </span>&#123;</span><br><span class="line">    sysUser.setCreateDate(<span class="keyword">new</span> Date());</span><br><span class="line">    <span class="comment">// 密码加密 方式很多，任选</span></span><br><span class="line">   <span class="comment">/* String salt = RandomStringUtils.randomAlphanumeric(20);</span></span><br><span class="line"><span class="comment">    sysUser.setPassword(new Sha256Hash(sysUser.getPassword(), salt).toHex());*/</span></span><br><span class="line"></span><br><span class="line">    String salt = ShiroUtils.generateSalt(<span class="number">20</span>);</span><br><span class="line">    sysUser.setPassword(ShiroUtils.encryptPassword(<span class="string">"SHA-256"</span>, sysUser.getPassword(), salt));</span><br><span class="line">    sysUser.setSalt(salt);</span><br><span class="line">    sysUser.setUsername(sysUser.getEmail());</span><br><span class="line">    sysUser.setStatus(SysConstant.SysUserStatus.ACTIVE);</span><br><span class="line">    sysUser.setType(SysConstant.SysUserType.USER);</span><br><span class="line">    sysUserDao.save(sysUser);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> shiro </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习Spring Boot：（十三）配置 Shiro 权限认证]]></title>
      <url>/springboot-13.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><p>经过前面学习 Apache Shiro ，现在结合 Spring Boot 使用在项目里，进行相关配置。</p><a id="more"></a><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><p>在 <code>pom.xml</code> 文件中添加 <code>shiro-spring</code> 的依赖：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;shiro.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h4 id="RBAC"><a href="#RBAC" class="headerlink" title="RBAC"></a>RBAC</h4><p>RBAC <sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top-right hint--error hint--large" aria-label="Role-Based Access Control 
">[1]</span></a></sup> 是基于角色的访问控制，权限与角色关联，给用户配置相关角色，来获取权限信息。</p><h4 id="Shiro-配置"><a href="#Shiro-配置" class="headerlink" title="Shiro 配置"></a>Shiro 配置</h4><p>新建一个新的 <code>Shiro</code> 配置类 <code>ShiroConfig</code>:<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuwii.common.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wuwii.<span class="keyword">module</span>.sys.autho2.OAuth2Realm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.SecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.session.mgt.SessionManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.LifecycleBeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.session.mgt.DefaultWebSessionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Apache Shiro 核心通过 Filter 来实现，就好像SpringMvc 通过DispachServlet 来主控制一样。</span></span><br><span class="line"><span class="comment"> * 既然是使用 Filter 一般也就能猜到，是通过URL规则来进行过滤和权限校验，</span></span><br><span class="line"><span class="comment"> * 所以我们需要定义一系列关于URL的规则和访问权限。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> KronChan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2018/2/9 10:35&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SessionManager <span class="title">sessionManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultWebSessionManager sessionManager = <span class="keyword">new</span> DefaultWebSessionManager();</span><br><span class="line">        sessionManager.setSessionValidationSchedulerEnabled(<span class="keyword">true</span>);</span><br><span class="line">        sessionManager.setSessionIdCookieEnabled(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> sessionManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册安全管理,必须设置 SecurityManager</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> oAuth2Realm    认证</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sessionManager 缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">(OAuth2Realm oAuth2Realm, SessionManager sessionManager)</span> </span>&#123;</span><br><span class="line">        DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        <span class="comment">// 可以添加多个认证，执行顺序是有影响的</span></span><br><span class="line">        securityManager.setRealm(oAuth2Realm);</span><br><span class="line">        securityManager.setSessionManager(sessionManager);</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shirFilter</span><span class="params">(SecurityManager securityManager)</span> </span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean shiroFilter = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        shiroFilter.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自定义一个oauth2拦截器，不设置就是使用默认的拦截器</span></span><br><span class="line">        <span class="comment">/*Map&lt;String, Filter&gt; filters = new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">        filters.put("oauth2", new OAuth2Filter());</span></span><br><span class="line"><span class="comment">        shiroFilter.setFilters(filters);*/</span></span><br><span class="line">        <span class="comment">//拦截器</span></span><br><span class="line">        <span class="comment">//&lt;!-- 过滤链定义，从上向下顺序执行，一般将 /**放在最为下边 --&gt;</span></span><br><span class="line">        <span class="comment">//&lt;!-- authc:所有url都必须认证通过才可以访问; anon:所有url都都可以匿名访问--&gt;</span></span><br><span class="line">        Map&lt;String, String&gt; filterMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//配置退出过滤器,其中的具体的退出代码Shiro已经替我们实现了</span></span><br><span class="line">        filterMap.put(<span class="string">"/sys/logout"</span>, <span class="string">"logout"</span>);</span><br><span class="line">        <span class="comment">// 验证码</span></span><br><span class="line">        filterMap.put(<span class="string">"/sys/captcha.jpg"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        <span class="comment">// 设置系统模块下访问需要权限</span></span><br><span class="line">        filterMap.put(<span class="string">"/sys/login"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        <span class="comment">// 自定义的拦截</span></span><br><span class="line">        <span class="comment">//filterMap.put("/sys/**", "oauth2");</span></span><br><span class="line">        filterMap.put(<span class="string">"/sys/**"</span>, <span class="string">"authc"</span>);</span><br><span class="line">        <span class="comment">// 登陆的 url</span></span><br><span class="line">        shiroFilter.setLoginUrl(<span class="string">"/sys/login"</span>);</span><br><span class="line">        <span class="comment">// 登陆成功跳转的 url</span></span><br><span class="line">        shiroFilter.setSuccessUrl(<span class="string">"/"</span>);</span><br><span class="line">        <span class="comment">// 未授权的 url</span></span><br><span class="line">        <span class="comment">// shiroFilter.setUnauthorizedUrl("/login.html");</span></span><br><span class="line">        <span class="comment">//未授权界面;</span></span><br><span class="line">        shiroFilter.setUnauthorizedUrl(<span class="string">"/403"</span>);</span><br><span class="line">        shiroFilter.setFilterChainDefinitionMap(filterMap);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> shiroFilter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Shiro生命周期处理器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LifecycleBeanPostProcessor <span class="title">lifecycleBeanPostProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LifecycleBeanPostProcessor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开启Shiro的注解，</span></span><br><span class="line"><span class="comment">     * (如<span class="doctag">@RequiresRoles</span>,<span class="doctag">@RequiresPermissions</span>),需借助SpringAOP扫描使用Shiro注解的类,</span></span><br><span class="line"><span class="comment">     * 并在必要时进行安全逻辑验证 * 配置以下两个bean(DefaultAdvisorAutoProxyCreator(可选)和AuthorizationAttributeSourceAdvisor)即可实现此功能</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultAdvisorAutoProxyCreator <span class="title">defaultAdvisorAutoProxyCreator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultAdvisorAutoProxyCreator proxyCreator = <span class="keyword">new</span> DefaultAdvisorAutoProxyCreator();</span><br><span class="line">        proxyCreator.setProxyTargetClass(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> proxyCreator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开启 shiro aop注解支持.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> securityManager</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="title">authorizationAttributeSourceAdvisor</span><span class="params">(SecurityManager securityManager)</span> </span>&#123;</span><br><span class="line">        AuthorizationAttributeSourceAdvisor advisor = <span class="keyword">new</span> AuthorizationAttributeSourceAdvisor();</span><br><span class="line">        advisor.setSecurityManager(securityManager);</span><br><span class="line">        <span class="keyword">return</span> advisor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 凭证匹配器</span></span><br><span class="line"><span class="comment">     * （由于我们的密码校验交给Shiro的SimpleAuthenticationInfo进行处理了</span></span><br><span class="line"><span class="comment">     * 所以我们需要修改下doGetAuthenticationInfo中的代码;</span></span><br><span class="line"><span class="comment">     * ）</span></span><br><span class="line"><span class="comment">     *  &lt;b&gt;需要在身份认证中添加 realm.setCredentialsMatcher(hashedCredentialsMatcher())&lt;/b&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/*@Bean</span></span><br><span class="line"><span class="comment">    public HashedCredentialsMatcher hashedCredentialsMatcher() &#123;</span></span><br><span class="line"><span class="comment">        HashedCredentialsMatcher hashedCredentialsMatcher = new HashedCredentialsMatcher();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        hashedCredentialsMatcher.setHashAlgorithmName("md5");//散列算法:这里使用MD5算法;</span></span><br><span class="line"><span class="comment">        hashedCredentialsMatcher.setHashIterations(2);//散列的次数，比如散列两次，相当于 md5(md5(""));</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        return hashedCredentialsMatcher;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Filter Chain定义说明：</p><ol><li>一个URL可以配置多个Filter，使用逗号分隔</li><li>当设置多个过滤器时，全部验证通过，才视为通过</li><li>部分过滤器可指定参数，如perms，roles</li></ol><p>Shiro内置的FilterChain:</p><table><thead><tr><th>Filter Name</th><th>Class</th></tr></thead><tbody><tr><td>anon</td><td>org.apache.shiro.web.filter.authc.AnonymousFilter</td></tr><tr><td>authc</td><td>org.apache.shiro.web.filter.authc.FormAuthenticationFilter</td></tr><tr><td>authcBasic</td><td>org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter</td></tr><tr><td>perms</td><td>org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter</td></tr><tr><td>port</td><td>org.apache.shiro.web.filter.authz.PortFilter</td></tr><tr><td>rest</td><td>org.apache.shiro.web.filter.authz.HttpMethodPermissionFilter</td></tr><tr><td>roles</td><td>org.apache.shiro.web.filter.authz.RolesAuthorizationFilter</td></tr><tr><td>ssl</td><td>org.apache.shiro.web.filter.authz.SslFilter</td></tr><tr><td>user</td><td>org.apache.shiro.web.filter.authc.UserFilter</td></tr></tbody></table><ul><li>anon:所有url都都可以匿名访问</li><li>authc: 需要认证才能进行访问</li><li>user:配置记住我或认证通过可以访问<h4 id="自定义的拦截器-可选"><a href="#自定义的拦截器-可选" class="headerlink" title="自定义的拦截器(可选)"></a>自定义的拦截器(可选)</h4>如果需要按照自己的需要定义一个 oauth2 的拦截器，则需要 继承 <code>AuthenticatingFilter</code> 实现几个方法即可。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * oauth2过滤器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OAuth2Filter</span> <span class="keyword">extends</span> <span class="title">AuthenticatingFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * logger</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(OAuth2Filter.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationToken <span class="title">createToken</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获取请求token</span></span><br><span class="line">        String token = getRequestToken((HttpServletRequest) request);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(token)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OAuth2Token(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  shiro权限拦截核心方法 返回true允许访问resource，</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mappedValue</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isAccessAllowed</span><span class="params">(ServletRequest request, ServletResponse response, Object mappedValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当访问拒绝时是否已经处理了；</span></span><br><span class="line"><span class="comment">     * 如果返回true表示需要继续处理；</span></span><br><span class="line"><span class="comment">     * 如果返回false表示该拦截器实例已经处理完成了，将直接返回即可。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">onAccessDenied</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获取请求token，如果token不存在，直接返回401</span></span><br><span class="line">        String token = getRequestToken((HttpServletRequest) request);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(token)) &#123;</span><br><span class="line">            HttpServletResponse httpResponse = (HttpServletResponse) response;</span><br><span class="line">            ((HttpServletResponse) response).setStatus(<span class="number">401</span>);</span><br><span class="line">            response.getWriter().print(<span class="string">"没有权限，请联系管理员授权"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> executeLogin(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 鉴定失败，返回错误信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">onLoginFailure</span><span class="params">(AuthenticationToken token, AuthenticationException e, ServletRequest request, ServletResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ((HttpServletResponse) response).setStatus(<span class="number">401</span>);</span><br><span class="line">            response.getWriter().print(<span class="string">"没有权限，请联系管理员授权"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">            LOGGER.error(e1.getMessage(), e1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取请求的token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getRequestToken</span><span class="params">(HttpServletRequest httpRequest)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//从header中获取token</span></span><br><span class="line">        String token = httpRequest.getHeader(<span class="string">"token"</span>);</span><br><span class="line">        <span class="comment">//如果header中不存在token，则从参数中获取token</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(token)) &#123;</span><br><span class="line">            <span class="keyword">return</span> httpRequest.getParameter(<span class="string">"token"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 还可以实现从 cookie 获取</span></span><br><span class="line">        Cookie[] cookies = httpRequest.getCookies();</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span>==cookies||cookies.length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cookie.getName().equals(<span class="string">"token"</span>)) &#123;</span><br><span class="line">                token = cookie.getValue();</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>具体实现可以参考我的上篇文章 《Apache Shiro的拦截器和认证》</p><h4 id="认证实现"><a href="#认证实现" class="headerlink" title="认证实现"></a>认证实现</h4><p>Shiro的认证过程最终会交由Realm执行，这时会调用Realm的 <code>getAuthenticationInfo(token)</code> 方法。<br>该方法主要执行以下操作:</p><ol><li>检查提交的进行认证的令牌信息</li><li>根据令牌信息从数据源(通常为数据库)中获取用户信息</li><li>对用户信息进行匹配验证。</li><li>验证通过将返回一个封装了用户信息的AuthenticationInfo实例。</li><li>验证失败则抛出AuthenticationException异常信息。</li></ol><p>而在我们的应用程序中要做的就是自定义一个Realm类，继承 <code>AuthorizingRealm</code> 抽象类，重载 <code>doGetAuthenticationInfo ()</code>，重写获取用户信息的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OAuth2Realm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ShiroService shiroService;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SysUserService sysUserService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 此方法调用  hasRole,hasPermission的时候才会进行回调.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 权限信息.(授权):</span></span><br><span class="line"><span class="comment">     * 1、如果用户正常退出，缓存自动清空；</span></span><br><span class="line"><span class="comment">     * 2、如果用户非正常退出，缓存自动清空；</span></span><br><span class="line"><span class="comment">     * 3、如果我们修改了用户的权限，而用户不退出系统，修改的权限无法立即生效。</span></span><br><span class="line"><span class="comment">     * （需要手动编程进行实现；放在service进行调用）</span></span><br><span class="line"><span class="comment">     * 在权限修改后调用realm中的方法，realm已经由spring管理，所以从spring中获取realm实例，</span></span><br><span class="line"><span class="comment">     * 调用clearCached方法；</span></span><br><span class="line"><span class="comment">     * :Authorization 是授权访问控制，用于对用户进行的操作授权，证明该用户是否允许进行当前操作，如访问某个链接，某个资源文件等。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 当没有使用缓存的时候，不断刷新页面的话，这个代码会不断执行，</span></span><br><span class="line"><span class="comment">     * 当其实没有必要每次都重新设置权限信息，所以我们需要放到缓存中进行管理；</span></span><br><span class="line"><span class="comment">     * 当放到缓存中时，这样的话，doGetAuthorizationInfo就只会执行一次了，</span></span><br><span class="line"><span class="comment">     * 缓存过期之后会再次执行。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> principals</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">        SysUserEntity user =(SysUserEntity) (principals.getPrimaryPrincipal());;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取该用户权限列表</span></span><br><span class="line">        Set&lt;String&gt; permsSet = shiroService.getUserPermissions(user.getId());</span><br><span class="line"></span><br><span class="line">        SimpleAuthorizationInfo info = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">        info.setStringPermissions(permsSet);</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 认证回调函数,登录时调用</span></span><br><span class="line"><span class="comment">     * 首先根据传入的用户名获取User信息；然后如果user为空，那么抛出没找到帐号异常UnknownAccountException；</span></span><br><span class="line"><span class="comment">     * 如果user找到但锁定了抛出锁定异常LockedAccountException；最后生成AuthenticationInfo信息，</span></span><br><span class="line"><span class="comment">     * 交给间接父类AuthenticatingRealm使用CredentialsMatcher进行判断密码是否匹配，</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        UsernamePasswordToken usernamePasswordToken = (UsernamePasswordToken) token;</span><br><span class="line">        SysUserEntity user = sysUserService.queryByUsername(usernamePasswordToken.getUsername());</span><br><span class="line">        <span class="comment">//账号不存在、密码错误</span></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> KCException(<span class="string">"账号或密码不正确"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 交给 shiro 自己去验证，</span></span><br><span class="line">        <span class="comment">// 明文验证</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(</span><br><span class="line">                user, <span class="comment">// 存入凭证的信息，登陆成功后可以使用 SecurityUtils.getSubject().getPrincipal();在任何地方使用它</span></span><br><span class="line">                user.getPassword(),</span><br><span class="line">                getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加密的方式</span></span><br><span class="line">        <span class="comment">// 交给AuthenticatingRealm使用CredentialsMatcher进行密码匹配，如果觉得人家的不好可以自定义实现</span></span><br><span class="line">        <span class="comment">/*return new SimpleAuthenticationInfo(</span></span><br><span class="line"><span class="comment">                user,</span></span><br><span class="line"><span class="comment">                user.getPassword(),</span></span><br><span class="line"><span class="comment">                ByteSource.Util.bytes(user.getSalt()), // 加盐，可以注册凭证匹配器 HashedCredentialsMatcher 告诉它怎么加密的</span></span><br><span class="line"><span class="comment">                getName());*/</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现上面两个方法即可完成身份验证和权限验证。</p><h4 id="登陆实现"><a href="#登陆实现" class="headerlink" title="登陆实现"></a>登陆实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line"><span class="meta">@ApiOperation</span>(<span class="string">"系统登陆"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">login</span><span class="params">(@RequestBody SysUserLoginForm userForm)</span> </span>&#123;</span><br><span class="line">    String kaptcha = ShiroUtils.getKaptcha(Constants.KAPTCHA_SESSION_KEY);</span><br><span class="line">    <span class="keyword">if</span> (!userForm.getCaptcha().equalsIgnoreCase(kaptcha)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> KCException(<span class="string">"验证码不正确！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(userForm.getUsername(), userForm.getPassword());</span><br><span class="line">    Subject currentUser = SecurityUtils.getSubject();</span><br><span class="line">    currentUser.login(token);</span><br><span class="line">    </span><br><span class="line">     <span class="comment">//账号锁定</span></span><br><span class="line">    <span class="keyword">if</span> (getUser().getStatus() == SysConstant.SysUserStatus.LOCK) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> KCException(<span class="string">"账号已被锁定,请联系管理员"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(HttpStatus.OK).body(<span class="string">"登陆成功！"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="权限验证"><a href="#权限验证" class="headerlink" title="权限验证"></a>权限验证</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation</span>(<span class="string">"用于测试，查询"</span>)</span><br><span class="line"><span class="meta">@ApiImplicitParam</span>(name = <span class="string">"string"</span>, value = <span class="string">"id"</span>, dataType = <span class="string">"string"</span>)</span><br><span class="line"><span class="meta">@RequiresPermissions</span>(<span class="string">"sys:user:list1"</span>)</span><br><span class="line"><span class="meta">@GetMapping</span>()</span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;List&lt;SysUserEntity&gt;&gt; query(<span class="meta">@CustomValid</span> String string) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(sysUserService.query(<span class="keyword">new</span> SysUserEntity()), OK);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单测试一个例子，<code>sys:user:list1</code> 多加一个 <code>1</code> 肯定会验证失败，查看程序会做什么，它会去我们定义的 Realm 中的 <code>doGetAuthorizationInfo(PrincipalCollection principals)</code> 方法中，执行查询该用户的所有权限。<br>验证失败后最后程序结果如下：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Caused by: org.apache.shiro.authz.AuthorizationException: Not authorized to invoke method: <span class="keyword">public</span> org.springframework.http.ResponseEntity com.wuwii.<span class="keyword">module</span>.sys.controller.SysUserController.query(java.lang.String)</span><br><span class="line">	at org.apache.shiro.authz.aop.AuthorizingAnnotationMethodInterceptor.assertAuthorized(AuthorizingAnnotationMethodInterceptor.java:<span class="number">90</span>)</span><br><span class="line">	... <span class="number">77</span> common frames omitted</span><br></pre></td></tr></table></figure><p></p><h5 id="权限注解"><a href="#权限注解" class="headerlink" title="权限注解"></a>权限注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequiresAuthentication</span>  </span><br><span class="line">表示当前Subject已经通过login进行了身份验证；即Subject. isAuthenticated()返回<span class="keyword">true</span>。 </span><br><span class="line"></span><br><span class="line"><span class="meta">@RequiresUser</span>  </span><br><span class="line">表示当前Subject已经身份验证或者通过记住我登录的。</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequiresGuest</span>  </span><br><span class="line">表示当前Subject没有身份验证或通过记住我登录过，即是游客身份。</span><br><span class="line">  </span><br><span class="line"><span class="meta">@RequiresRoles</span>(value=&#123;“admin”, “user”&#125;, logical= Logical.AND)  </span><br><span class="line">表示当前Subject需要角色admin和user。</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequiresPermissions</span> (value=&#123;“user:a”, “user:b”&#125;, logical= Logical.OR)  </span><br><span class="line">表示当前Subject需要权限user:a或user:b。</span><br></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a rel="external nofollow noopener noreferrer" target="_blank" href="https://segmentfault.com/a/1190000008847948">Spring Boot [集成-Shiro]</a></li><li><a rel="external nofollow noopener noreferrer" target="_blank" href="http://http://412887952-qq-com.iteye.com/blog/2299777">39.2. Spring Boot Shiro权限管理【从零开始学Spring Boot】</a></li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none;padding-left:0;margin-left:40px"><li id="fn:1"><span style="display:inline-block;vertical-align:top;padding-right:10px;margin-left:-40px">1.</span><span style="display:inline-block;vertical-align:top;margin-left:10px">Role-Based Access Control<a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> shiro </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习Spring Boot：（十二）Mybatis 中自定义枚举转换器]]></title>
      <url>/springboot-12.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在 Spring Boot 中使用 Mybatis 中遇到了字段为枚举类型，数据库存储的是枚举的值，发现它不能自动装载。</p><a id="more"></a><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><h4 id="内置枚举转换器"><a href="#内置枚举转换器" class="headerlink" title="内置枚举转换器"></a>内置枚举转换器</h4><p>MyBatis内置了两个枚举转换器分别是：<code>org.apache.ibatis.type.EnumTypeHandler</code> 和 <code>org.apache.ibatis.type.EnumOrdinalTypeHandler</code>。</p><h5 id="EnumTypeHandler"><a href="#EnumTypeHandler" class="headerlink" title="EnumTypeHandler"></a>EnumTypeHandler</h5><p>mybatis 中默认的枚举转换器，是获取枚举中的 <code>name</code> 属性。</p><h5 id="EnumOrdinalTypeHandler"><a href="#EnumOrdinalTypeHandler" class="headerlink" title="EnumOrdinalTypeHandler"></a>EnumOrdinalTypeHandler</h5><p>获取枚举中 <code>ordinal</code> 属性，就是例如索引一样的东西，不过是从 1 开始递增的。</p><p>因此上面提供的两种的转换器都不能满足我们的需求，我们需要自定义一个转换器。</p><h4 id="自定义枚举转换器"><a href="#自定义枚举转换器" class="headerlink" title="自定义枚举转换器"></a>自定义枚举转换器</h4><p>MyBatis提供了 <code>org.apache.ibatis.type.BaseTypeHandler</code> 类用于我们自己扩展类型转换器，上面的<code>EnumTypeHandler和EnumOrdinalTypeHandler</code> 也都实现了这个接口。</p><p>继承 <code>BaseTypeHandler&lt;T&gt;</code> 一共需要实现4个方法：</p><ol><li><code>void setNonNullParameter(PreparedStatement ps, int i, T parameter, JdbcType jdbcType)</code><br>用于定义设置参数时，该如何把Java类型的参数转换为对应的数据库类型；</li><li><code>T getNullableResult(ResultSet rs, String columnName)</code><br>用于定义通过字段名称获取字段数据时，如何把数据库类型转换为对应的Java类型；</li><li><code>T getNullableResult(ResultSet rs, int columnIndex)</code><br>用于定义通过字段索引获取字段数据时，如何把数据库类型转换为对应的Java类型；</li><li><code>T getNullableResult(CallableStatement cs, int columnIndex)</code><br>用定义调用存储过程后，如何把数据库类型转换为对应的Java类型。</li></ol><h5 id="定义一个枚举通用行为"><a href="#定义一个枚举通用行为" class="headerlink" title="定义一个枚举通用行为"></a>定义一个枚举通用行为</h5><p>定义一个枚举通用行为，规范枚举的实现。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseEnum</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Enum</span>&lt;?&gt;, <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取枚举的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 枚举的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">T <span class="title">getValue</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>定义自己需要的枚举：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysConstant</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 人员状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> SysUserStatus implements BaseEnum&lt;SysUserStatus, String&gt; &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 账户已经激活（默认）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ACTIVE(<span class="string">"1"</span>),</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 账户锁定</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        LOCK(<span class="string">"0"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">SysUserStatus</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 人员类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> SysUserType implements BaseEnum&lt;SysUserType, String&gt; &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 普通用户</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        USER(<span class="string">"1"</span>),</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 系统管理员</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ADMIN(<span class="string">"0"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">SysUserType</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h5 id="实现自定义转换器"><a href="#实现自定义转换器" class="headerlink" title="实现自定义转换器"></a>实现自定义转换器</h5><p>自定义一个基本的枚举转换器工具，如果有其他需求可以在这个基类上自定义。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuwii.common.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.BaseTypeHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.JdbcType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.CallableStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参考 http://blog.csdn.net/fighterandknight/article/details/51520595 </span></span><br><span class="line"><span class="comment"> * 进行对本地项目的优化</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 解决 Mybatis 中枚举的问题，</span></span><br><span class="line"><span class="comment"> * 获取 ResultSet 的值都是获取字符串的，然后比较字符串，以便通用。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2018/2/9 17:26&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseEnumTypeHandler</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Enum</span>&lt;<span class="title">E</span>&gt; &amp; <span class="title">BaseEnum</span>&gt; <span class="keyword">extends</span> <span class="title">BaseTypeHandler</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 枚举的class</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Class&lt;E&gt; type;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 枚举的每个子类枚</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> E[] enums;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一定要有默认的构造函数，不然抛出 not found method 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseEnumTypeHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置配置文件设置的转换类以及枚举类内容，供其他方法更便捷高效的实现</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type 配置文件中设置的转换类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseEnumTypeHandler</span><span class="params">(Class&lt;E&gt; type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Type argument cannot be null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">        <span class="keyword">this</span>.enums = type.getEnumConstants();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.enums == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(type.getSimpleName()</span><br><span class="line">                    + <span class="string">" does not represent an enum type."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNonNullParameter</span><span class="params">(PreparedStatement ps, <span class="keyword">int</span> i, E parameter,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * BaseTypeHandler已经帮我们做了parameter的null判断</span></span><br><span class="line"><span class="comment">         * 数据库存储的是枚举的值，所以我们这里使用 value ， 如果需要存储 name，可以自定义修改</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (jdbcType == <span class="keyword">null</span>) &#123;</span><br><span class="line">            ps.setString(i, Objects.toString(parameter.getValue()));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ps.setObject(i, parameter.getValue(), jdbcType.TYPE_CODE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getNullableResult</span><span class="params">(ResultSet rs, String columnName)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        String i = rs.getString(columnName);</span><br><span class="line">        <span class="keyword">if</span> (rs.wasNull()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> locateEnumStatus(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getNullableResult</span><span class="params">(ResultSet rs, <span class="keyword">int</span> columnIndex)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        String i = rs.getString(columnIndex);</span><br><span class="line">        <span class="keyword">if</span> (rs.wasNull()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> locateEnumStatus(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getNullableResult</span><span class="params">(CallableStatement cs, <span class="keyword">int</span> columnIndex)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        String i = cs.getString(columnIndex);</span><br><span class="line">        <span class="keyword">if</span> (cs.wasNull()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> locateEnumStatus(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 枚举类型转换，由于构造函数获取了枚举的子类 enums，让遍历更加高效快捷，</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 我将取出来的值 全部转换成字符串 进行比较，</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 数据库中存储的自定义value属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> value 对应的枚举类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> E <span class="title">locateEnumStatus</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (E e : enums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Objects.toString(e.getValue()).equals(value)) &#123;</span><br><span class="line">                <span class="keyword">return</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"未知的枚举类型："</span> + value + <span class="string">",请核对"</span></span><br><span class="line">                + type.getSimpleName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h5 id="配置转换器"><a href="#配置转换器" class="headerlink" title="配置转换器"></a>配置转换器</h5><p>将枚举转换器编写完成后，我们需要定义它对哪些枚举进行转换。<br>可以在Mybatis 配置文件配置<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">"com.example.typeHandler.CodeEnumTypeHandler"</span> <span class="attr">javaType</span>=<span class="string">"com.example.entity.enums.ComputerState"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h6 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h6><p>在MyBatis中添加typeHandler用于指定哪些类使用我们自定义的转换器，<strong>一旦系统中的枚举类多了起来，MyBatis的配置文件维护起来会变得非常麻烦，也容易出错</strong>。</p><p><strong>方法一</strong>：<br>定义一个 <code>EnumTypeHandler</code> 去继承我们的 <code>BaseEnumTypeHandler</code>。然后使用注解 <code>@MappedTypes</code> 类型转换。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuwii.<span class="keyword">module</span>.sys.common.handle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wuwii.common.handle.BaseEnumTypeHandler;</span><br><span class="line"><span class="keyword">import</span> com.wuwii.common.util.BaseEnum;</span><br><span class="line"><span class="keyword">import</span> com.wuwii.<span class="keyword">module</span>.sys.common.util.SysConstant;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.MappedTypes;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 枚举转换的公共模块</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2018/2/9 18:12&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@MappedTypes</span>(value = &#123;SysConstant.SysUserStatus.class, SysConstant.SysUserType.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysEnumTypeHandler</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Enum</span>&lt;<span class="title">E</span>&gt; &amp; <span class="title">BaseEnum</span>&gt; <span class="keyword">extends</span> <span class="title">BaseEnumTypeHandler</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置配置文件设置的转换类以及枚举类内容，供其他方法更便捷高效的实现</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type 配置文件中设置的转换类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SysEnumTypeHandler</span><span class="params">(Class&lt;E&gt; type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(type);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>需要在系统配置文件中配置<br></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 多个模块的的多个 包配置可以使用逗号分开。</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line"><span class="attr">    typeHandlersPackage:</span> <span class="string">com.wuwii.module.sys.common.handle,com.wuwii.module.task.common.handle</span></span><br></pre></td></tr></table></figure><p></p><p><strong>方法二</strong>：<br>如果你的项目中自定义了 <code>SqlSessionFactory</code>，推荐使用下面这种方式，一次使用无需多次配置。</p><p><a rel="external nofollow noopener noreferrer" target="_blank" href="https://segmentfault.com/a/1190000010755321">如何在MyBatis中优雅的使用枚举</a></p><p>在 =》 方案 6. 优化</p><p><strong>方法三</strong>：<br>还有个人修改源码实现的，有兴趣的可以看看：</p><p><a rel="external nofollow noopener noreferrer" target="_blank" href="http://blog.csdn.net/fighterandknight/article/details/51600997">修改MyBatis源码实现扫描注册枚举-具体实现</a></p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a rel="external nofollow noopener noreferrer" target="_blank" href="https://segmentfault.com/a/1190000010755321">如何在MyBatis中优雅的使用枚举</a></li><li><a rel="external nofollow noopener noreferrer" target="_blank" href="http://blog.csdn.net/u014044812/article/details/78258730">SpringBoot Mybatis EnumTypeHandler自定义统一处理器</a></li></ul><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习Spring Boot：（十一） 自定义装配参数]]></title>
      <url>/springboot-11.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>SpringMVC 中 <code>Controller</code> 中方法的参数非常灵活，得益于它的强大自动装配，这次将根据上次遗留下的问题，将研究下装配参数。</p><a id="more"></a><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>SpringMVC中使用了两个接口来处理参数：</p><ul><li><code>HandlerMethodArgumentResolver</code> 处理方法请求参数；</li><li><code>HandlerMethodReturnValueHandler</code> 处理方法的返回参数。</li></ul><p>这里我们将使用 <code>HandlerMethodArgumentResolver</code> 来处理方法上的参数。</p><p>未完成<br>大家可以参考<a href="https://blog.csdn.net/he90227/article/details/51537273" rel="external nofollow noopener noreferrer" target="_blank">使用HandlerMethodArgumentResolver接口自定义Spring MVC的参数接受规则</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习Spring Boot：（十）使用hibernate validation完成数据后端校验]]></title>
      <url>/springboot-10.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>后台数据的校验也是开发中比较注重的一点，用来校验数据的正确性，以免一些非法的数据破坏系统，或者进入数据库，造成数据污染，由于数据检验可能应用到很多层面，所以系统对数据校验要求比较严格且追求可变性及效率。</p><a id="more"></a><h3 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h3><p>了解一点概念性的东东。</p><ul><li>JSR 303 是 Java 为 Bean 数据合法性校验提供的标准框架,它已经包含在 JavaEE 6.0 中 。</li><li>Hibernate Validator 是 JSR 303 的一个参考实现，所以它多实现了几个校验规则。</li><li>Spring 4.0 拥有自己独立的数据校验框架,同时支持 JSR303 标准的校验框架。</li><li>在已经标注了 JSR303 注解的表单/命令对象前标注一个@Valid,Spring MVC 框架在将请求参数绑定到该入参对象后,就会调用校验框架根据注解声明的校验规则实施校验</li><li>Spring MVC 是通过对处理方法签名的规约来保存校验结果的:前一个表单/命令对象的校验结果保存到随后的入参中,这个保存校验结果的入参必须是 BindingResult 或Errors 类型,这两个类都位于org.springframework.validation 包中。</li><li>需校验的 Bean 对象和其绑定结果对象或错误对象时成对出现的,它们之间不允许声明其他的入参</li><li>Errors 接口提供了获取错误信息的方法,如 getErrorCount() 或getFieldErrors(String field)</li><li>BindingResult 扩展了 Errors 接口。</li></ul><h4 id="支持的注解"><a href="#支持的注解" class="headerlink" title="支持的注解"></a>支持的注解</h4><p><code>JSR</code> 提供的校验注解:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Null   被的注解元素必须为 null    </span><br><span class="line">@NotNull    被注解的元素必须不为 null    </span><br><span class="line">@AssertTrue     被注解的元素必须为 true    </span><br><span class="line">@AssertFalse    被注解的元素必须为 false    </span><br><span class="line">@Min(value)     被注解的元素必须是一个数字，其值必须大于等于指定的最小值    </span><br><span class="line">@Max(value)     被注解的元素必须是一个数字，其值必须小于等于指定的最大值    </span><br><span class="line">@DecimalMin(value)  被注解的元素必须是一个数字，其值必须大于等于指定的最小值    </span><br><span class="line">@DecimalMax(value)  被注解的元素必须是一个数字，其值必须小于等于指定的最大值    </span><br><span class="line">@Size(max=, min=)   被注解的元素的大小必须在指定的范围内   集合或数组 集合或数组的大小是否在指定范围内 </span><br><span class="line">@Digits (integer, fraction)     被注解的元素必须是一个数字，验证是否是符合指定格式的数字，interger指定整数精度，fraction指定小数精度。   </span><br><span class="line">@Past   被注解的元素必须是一个过去的日期    </span><br><span class="line">@Future     被注解的元素必须是一个将来的日期    </span><br><span class="line">@Pattern(regex=,flag=)  被注解的元素必须符合指定的正则表达式</span><br></pre></td></tr></table></figure><p></p><p><code>Hibernate Validator</code> 提供的校验注解：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@NotBlank(message =)   验证字符串非null，且长度必须大于0    </span><br><span class="line">@Email  被注释的元素必须是电子邮箱地址    </span><br><span class="line">@Length(min=,max=)  被注解的值大小必须在指定的范围内    </span><br><span class="line">@NotEmpty   被注解的字符串的必须非空    </span><br><span class="line">@Range(min=,max=,message=)  验证该值必须在合适的范围内</span><br></pre></td></tr></table></figure><p></p><p>可以在需要验证的属性上，使用多个验证方式，它们同时生效。<br><code>spring boot web</code> 已经有 <code>hibernate-validation</code> 的依赖，所以不需要再手动添加依赖。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>首先我在我的实体类上写了几个校验注解。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysUserEntity</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主键</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">//用户名</span></span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"用户名不能为空"</span>, groups = &#123;AddGroup.class, UpdateGroup.class&#125;)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="comment">//密码</span></span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"密码不能为空"</span>, groups = &#123;AddGroup.class&#125;)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">//手机号</span></span><br><span class="line">    <span class="meta">@Pattern</span>(regexp = <span class="string">"^1([345789])\\d&#123;9&#125;$"</span>,message = <span class="string">"手机号码格式错误"</span>)</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"手机号码不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String mobile;</span><br><span class="line">    <span class="comment">//邮箱</span></span><br><span class="line">    <span class="meta">@Email</span>(message = <span class="string">"邮箱格式不正确"</span>)</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="comment">//创建者</span></span><br><span class="line">    <span class="keyword">private</span> Long createUserId;</span><br><span class="line">    <span class="comment">//创建时间</span></span><br><span class="line">    <span class="keyword">private</span> Date createDate;</span><br><span class="line"><span class="comment">// ignore set and get</span></span><br></pre></td></tr></table></figure><p></p><h4 id="使用-Validated进行校验"><a href="#使用-Validated进行校验" class="headerlink" title="使用@Validated进行校验"></a>使用@Validated进行校验</h4><p>首先了解下：<br><strong>关于@Valid和@Validated的区别联系</strong></p><ul><li><code>@Valid</code>: <code>javax.validation</code>， 是javax，也是就是<strong>jsr303中定义的规范注解</strong></li><li><code>@Validated</code>: <code>org.springframework.validation.annotation</code>， 是spring自己封装的注解。参数校验失败抛出 <code>org.springframework.validation.BindException</code> 异常。</li></ul><p><code>@Validated</code> 是 <code>@Valid</code> 的一个变种，扩展了 <code>@Valid</code> 的功能，支持 <code>group分组校验</code> 的写法，所以为了校验统一，尽量使用 <code>@Validated</code></p><p>在controller自定义一个接口<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/valid"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">valid</span><span class="params">(@Validated @RequestBody SysUserEntity user, BindingResult result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (result.hasErrors()) &#123;</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.status(BAD_REQUEST).body(<span class="string">"校验失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(OK).body(<span class="string">"校验成功"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><p>需要注意的有几点：</p><ul><li>需要校验对象的时候，需要加上 spring 的校验注解 <code>@Validated</code> ，表示我们需要 spring 对它进行校验，而校验的信息会存放到其后的BindingResult中。</li><li>BindingResult 必须和检验对象紧邻，中间不能穿插任何参数，如果有多个校验对象 <code>@Validated @RequestBody SysUserEntity user, BindingResult result, @Validated @RequestBody SysUserEntity user1, BindingResult result1</code>。</li></ul><p>我在前端用 Swagger 进行测试下。<br>我发送一个 body，将 手机号输错：<br></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"createDate"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"createUserId"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"email"</span>: <span class="string">"k@wuwii.com"</span>,</span><br><span class="line">  <span class="attr">"id"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"mobile"</span>: <span class="string">"12354354"</span>,</span><br><span class="line">  <span class="attr">"password"</span>: <span class="string">"123"</span>,</span><br><span class="line">  <span class="attr">"username"</span>: <span class="string">"12312"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>后端调试下 BindingResult 的结果，发现结果：<br><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/hibernate-validation/1.png" alt="image"><br>只要注意下 <code>errors</code> 属性，它是校验<strong>所有</strong>不符合规则的，是一个数组。</p><h4 id="分组校验"><a href="#分组校验" class="headerlink" title="分组校验"></a>分组校验</h4><p>有时候 ，我们在新增和更新的时候校验效果是不一样的。例如上面，我在User新增的时候需要判断密码是不是为空，但是更新的时候我不做校验。这个时候就也要用到分组校验了。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NotBlank</span>(message = <span class="string">"密码不能为空"</span>, groups = &#123;AddGroup.class&#125;)</span><br><span class="line"><span class="keyword">private</span> String password;</span><br></pre></td></tr></table></figure><p></p><p>将Contoller中的校验修改下。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="meta">@Validated</span>(&#123;AddGroup.class&#125;) <span class="meta">@RequestBody</span> SysUserEntity user, BindingResult result)</span><br></pre></td></tr></table></figure><p></p><p>上面的意思是只有分组是AddGroup的校验才生效，其余的校验忽略。</p><p>经过我测试，把分组情况分下：</p><ol><li>在controller校验没加分组的时候，只对实体类的没有分组的注解有效。</li><li>在controller校验加分组的时候，只对实体类的当前分组的注解有效，没有注解的也无效。</li><li>当校验有两个分组的时候<code>@Validated({AddGroup.class, UpdateGroup.class})</code>，满足当前两个分组其中任意一个都可以校验，两个注解同时一起出现，也没问题，而且检验不通过的信息不会重复。</li></ol><h4 id="自定义校验"><a href="#自定义校验" class="headerlink" title="自定义校验"></a>自定义校验</h4><p>有时候系统提供给我们的校验注解，并不够用，我们可以自定义校验，来满足我们的业务需求。</p><p>例如：现在我们有一个需求，需要检测一条信息的敏感词汇，如<code>sb</code> ……文明人，举个栗子 ……</p><h5 id="自定义校验注解"><a href="#自定义校验注解" class="headerlink" title="自定义校验注解"></a>自定义校验注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注解可以用在哪些地方</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="comment">// 指定校验规则实现类</span></span><br><span class="line"><span class="meta">@Constraint</span>(validatedBy = &#123;NotHaveSBValidator.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> NotHaveSB &#123;</span><br><span class="line">    <span class="comment">//默认错误消息</span></span><br><span class="line">    <span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> "不能包含字符sb"</span>;</span><br><span class="line">    <span class="comment">//分组</span></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    <span class="comment">//负载</span></span><br><span class="line">    Class&lt;? extends Payload&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    <span class="comment">//指定多个时使用</span></span><br><span class="line">    <span class="meta">@Target</span>(&#123;FIELD, METHOD, PARAMETER, ANNOTATION_TYPE&#125;)</span><br><span class="line">    <span class="meta">@Retention</span>(RUNTIME)</span><br><span class="line">    <span class="meta">@Documented</span></span><br><span class="line">    <span class="meta">@interface</span> List &#123;</span><br><span class="line">        NotHaveSB[] value();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="规则校验实现类"><a href="#规则校验实现类" class="headerlink" title="规则校验实现类"></a>规则校验实现类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以指定检验类型，这里选择的是 String</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotHaveSBValidator</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">NotHaveSB</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(NotHaveSB notHaveSB)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s 待检验对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> constraintValidatorContext 检验上下文，可以设置检验的错误信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> false 代表检验失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s, ConstraintValidatorContext constraintValidatorContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !StringUtils.isNotBlank(s) || !s.toLowerCase().contains(<span class="string">"sb"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有的验证者都需要实现ConstraintValidator接口，它的接口也很形象，包含一个初始化事件方法，和一个判断是否合法的方法。</p><h5 id="测试一下喂"><a href="#测试一下喂" class="headerlink" title="测试一下喂"></a>测试一下喂</h5><p>现在我的用户类上，也没什么多余的字段拿出来测试，暂时把 password 字段拿来测试吧。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@NotBlank(message = "密码不能为空", groups = AddGroup.class)</span></span><br><span class="line">    <span class="meta">@NotHaveSB</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br></pre></td></tr></table></figure><p></p><p><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/hibernate-validation/2.png" alt="image"></p><h4 id="手动校验"><a href="#手动校验" class="headerlink" title="手动校验"></a>手动校验</h4><p>这个是我最终想要的处理方式。<br>由于现在都是前后端分离开发的，校验失败的时候，抛出自定义的异常，然后统一处理这些异常，最后将相关的错误提示信息返回给前端处理。</p><p><del>新建一个验证工具类</del><br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidatorUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Validator validator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        validator = Validation.buildDefaultValidatorFactory().getValidator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手动校验对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object 待校验对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> groups 待校验的组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> KCException 校验不通过，则抛出 KCException 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">validateEntity</span><span class="params">(Object object, Class&lt;?&gt;... groups)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> KCException </span>&#123;</span><br><span class="line">        Set&lt;ConstraintViolation&lt;Object&gt;&gt; constraintViolations = validator.validate(object, groups);</span><br><span class="line">        <span class="keyword">if</span> (!constraintViolations.isEmpty()) &#123;</span><br><span class="line">            String msg = constraintViolations.parallelStream()</span><br><span class="line">                    .map(ConstraintViolation::getMessage)</span><br><span class="line">                    .collect(Collectors.joining(<span class="string">"，"</span>));</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> KCException(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><del>它主要做的事情就是验证我们的待验证对象，验证不同通过的时候，抛出自定义异常，在后台统一处理异常就可以了。</del></p><p><del>在业务中直接调用就可以了，有分组添加分组就行</del>：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/valid1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">customValid</span><span class="params">(@RequestBody SysUserEntity user)</span> </span>&#123;</span><br><span class="line">        ValidatorUtils.validateEntity(user);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(OK).body(<span class="string">"校验成功"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><p>最后测试一下，查看返回结果是否符合预期：</p><p><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/hibernate-validation/3.png" alt="image"></p><h5 id="手动校验的补充"><a href="#手动校验的补充" class="headerlink" title="手动校验的补充"></a>手动校验的补充</h5><p>决定还是采用注解的形式进行编码，本来想用处理方法参数的装配进行检验，写好了发现和 <code>@responseBody</code> 不能同时使用，然后发现还是可以使用 <code>@Validated</code> 直接校验，抛出异常， 进行捕捉异常统一处理。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>()</span><br><span class="line"><span class="meta">@ApiOperation</span>(<span class="string">"新增"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">insert</span><span class="params">(@Validated SysUserAddForm user)</span></span></span><br></pre></td></tr></table></figure><p></p><p>在全局异常处理里面加上 处理绑定参数异常 <code>org.springframework.validation.BindException</code>：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参数检验违反约束（数据校验）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e BindException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> error message</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@org</span>.springframework.web.bind.annotation.ExceptionHandler(BindException.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">handleConstraintViolationException</span><span class="params">(BindException e)</span> </span>&#123;</span><br><span class="line">    LOGGER.debug(e.getMessage(), e);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.status(BAD_REQUEST).body(</span><br><span class="line">            e.getBindingResult()</span><br><span class="line">                    .getAllErrors()</span><br><span class="line">                    .stream()</span><br><span class="line">                    .map(DefaultMessageSourceResolvable::getDefaultMessage)</span><br><span class="line">                    .collect(Collectors.joining(<span class="string">","</span>)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习Spring Boot：（九）统一异常处理]]></title>
      <url>/springboot-9.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>开发的时候，每个controller的接口都需要进行捕捉异常的处理，以前有的是用切面做的，但是SpringMVC中就自带了<code>@ControllerAdvice</code> ，用来定义统一异常处理类，在 SpringBoot 中额外增加了 <code>@RestControllerAdvice</code>。</p><a id="more"></a><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="创建全局异常处理类"><a href="#创建全局异常处理类" class="headerlink" title="创建全局异常处理类"></a>创建全局异常处理类</h4><p>通过使用 <code>@ControllerAdvice</code> 或者 <code>@RestControllerAdvice</code> 定义统一的异常处理类。</p><p>在方法的注解上加上 <code>@ExceptionHandler</code> 用来指定这个方法用来处理哪种异常类型，然后处理完异常，将相关的结果返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * logger</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(ExceptionHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理系统自定义的异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 状态码和错误信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@org</span>.springframework.web.bind.annotation.ExceptionHandler(KCException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">handleKCException</span><span class="params">(KCException e)</span> </span>&#123;</span><br><span class="line">        LOGGER.error(e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(e.getCode()).body(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@org</span>.springframework.web.bind.annotation.ExceptionHandler(DuplicateKeyException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">handleDuplicateKeyException</span><span class="params">(DuplicateKeyException e)</span> </span>&#123;</span><br><span class="line">        LOGGER.error(e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.CONFLICT).body(<span class="string">"数据库中已存在该记录"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@org</span>.springframework.web.bind.annotation.ExceptionHandler(AuthorizationException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">handleAuthorizationException</span><span class="params">(AuthorizationException e)</span> </span>&#123;</span><br><span class="line">        LOGGER.error(e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(<span class="string">"没有权限，请联系管理员授权"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理异常</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@org</span>.springframework.web.bind.annotation.ExceptionHandler(Exception.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">handleException</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">        LOGGER.error(e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>我在 controller 写了一个新增的方法，由于我的数据库中设置了 username 字段<strong>唯一索引</strong>，所以相同的值添加第二次的时候，肯定会抛出上面方法中的第二个异常 <code>DuplicateKeyException</code> ：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>()</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">insert</span><span class="params">(@RequestBody SysUserEntity user)</span> </span>&#123;</span><br><span class="line">        sysUserService.save(user);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(CREATED).build();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><p>第一次新增的时候：<br><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/contoller-advice/1.png" alt="image"></p><p>第二次新增的时候返回异常信息：<br><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/contoller-advice/2.png" alt="image"></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习Spring Boot：（七）集成Mybatis]]></title>
      <url>/springboot-7.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><p>前面都是用的是spring data JPA，现在学习下Mybatis，而且现在Mybatis也像JPA那样支持注解形式了，也非常方便，学习一下。</p><ul><li>数据库 mysql 5.7</li></ul><a id="more"></a><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>在pom文件中添加：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.1.3<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>由于springboot 默认使用的 tomcat-jdbc数据源，为了方便，我添加了阿里巴巴的数据源。</p><p>首先了解下<code>mybatis-spring-boot-starter</code> 会做哪些事情：</p><ul><li>自动检测现有的DataSource</li><li>将创建并注册SqlSessionFactory的实例，该实例使用SqlSessionFactoryBean将该DataSource作为输入进行传递</li><li>将创建并注册从SqlSessionFactory中获取的SqlSessionTemplate的实例。</li><li>自动扫描您的mappers，将它们链接到SqlSessionTemplate并将其注册到Spring上下文，以便将它们注入到您的bean中。</li></ul><p>只要使用这个springboot mybatis starter 只需要DataSource的配置就可以使用了，它会自动创建使用该DataSource的SqlSessionFactoryBean以及SqlSessionTemplate。会自动扫描你的Mappers，连接到SqlSessionTemplate，并注册到Spring上下文中。</p><h3 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h3><p>在<code>resources/applicaiton.yml</code>文件中添加一些数据源的连接参数配置（可选）：<br></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">    datasource:</span></span><br><span class="line"><span class="attr">        type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="attr">        driverClassName:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">        druid:</span></span><br><span class="line"><span class="attr">            url:</span> <span class="attr">jdbc:mysql://localhost:3306/learnboot?allowMultiQueries=true&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">            username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">            password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">            initial-size:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">            max-active:</span> <span class="number">100</span></span><br><span class="line"><span class="attr">            min-idle:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">            max-wait:</span> <span class="number">60000</span></span><br><span class="line"><span class="attr">            pool-prepared-statements:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">            max-pool-prepared-statement-per-connection-size:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">            time-between-eviction-runs-millis:</span> <span class="number">60000</span></span><br><span class="line"><span class="attr">            min-evictable-idle-time-millis:</span> <span class="number">300000</span></span><br><span class="line"><span class="attr">            validation-query:</span> <span class="string">SELECT</span> <span class="number">1</span></span><br><span class="line"><span class="attr">            test-while-idle:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">            test-on-borrow:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">            test-on-return:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">            stat-view-servlet:</span></span><br><span class="line"><span class="attr">                enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">                url-pattern:</span> <span class="string">/druid/*</span></span><br><span class="line"><span class="attr">            filter:</span></span><br><span class="line"><span class="attr">                stat:</span></span><br><span class="line"><span class="attr">                    log-slow-sql:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">                    slow-sql-millis:</span> <span class="number">1000</span></span><br><span class="line"><span class="attr">                    merge-sql:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">                wall:</span></span><br><span class="line"><span class="attr">                    config:</span></span><br><span class="line"><span class="attr">                        multi-statement-allow:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p></p><p>springboot会自动加载spring.datasource.*相关配置，数据源就会自动注入到sqlSessionFactory中，sqlSessionFactory会自动注入到Mapper中，</p><h3 id="使用Mybatis"><a href="#使用Mybatis" class="headerlink" title="使用Mybatis"></a>使用Mybatis</h3><p>首先我有一个<code>SysUser</code>，<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysUserEntity</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主键</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="comment">//用户名</span></span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"用户名不能为空"</span>, groups = &#123;AddGroup.class, UpdateGroup.class&#125;)</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="comment">//密码</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br></pre></td></tr></table></figure><p></p><h4 id="使用XMl形式"><a href="#使用XMl形式" class="headerlink" title="使用XMl形式"></a>使用XMl形式</h4><p>我们来创建User的映射SysUserDao，也可以命名Mapper作为尾缀，这里我们写个新增一条数据的接口，需要注意的是每个Mapper类上要加上<code>@Mapper</code>注解：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SysUserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(SysUserEntity user)</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据条件查询User</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user User</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 符合条件列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;SysUserEntity&gt; <span class="title">query</span><span class="params">(SysUserEntity user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>使用xml的时候需要注意的是Mybatis扫描mapper.xml并且装配，需要在系统的配置文件<code>resources/applicaiton.yml</code>加入：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Mybatis配置</span><br><span class="line">mybatis:</span><br><span class="line">    mapperLocations: classpath:mapper/**/*.xml</span><br><span class="line">    configuration:</span><br><span class="line">        map-underscore-to-camel-case: true</span><br></pre></td></tr></table></figure><p></p><p>根据自己的xml目录，进行配置。<br>例如：我在<code>resources/mapper/sys</code>目录下面加入<code>SysUserDao.xml</code>文件，添加我们查询的SQL：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=&quot;com.wuwii.module.sys.dao.SysUserDao&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 可根据自己的需求，是否要使用 --&gt;</span><br><span class="line">    &lt;resultMap type=&quot;com.wuwii.module.sys.entity.SysUserEntity&quot; id=&quot;sysUserMap&quot;&gt;</span><br><span class="line">        &lt;result property=&quot;id&quot; column=&quot;id&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;username&quot; column=&quot;username&quot;/&gt;</span><br><span class="line">        &lt;result property=&quot;password&quot; column=&quot;password&quot;/&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">    </span><br><span class="line">        &lt;insert id=&quot;save&quot; parameterType=&quot;com.wuwii.module.sys.entity.SysUserEntity&quot; useGeneratedKeys=&quot;true&quot;</span><br><span class="line">            keyProperty=&quot;id&quot;&gt;</span><br><span class="line">        INSERT INTO sys_user</span><br><span class="line">        (</span><br><span class="line">            `username`,</span><br><span class="line">            `password`</span><br><span class="line">        )</span><br><span class="line">        VALUES</span><br><span class="line">            (</span><br><span class="line">                #&#123;username&#125;,</span><br><span class="line">                #&#123;password&#125;</span><br><span class="line">            )</span><br><span class="line">    &lt;/insert&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;select id=&quot;query&quot; resultType=&quot;com.wuwii.module.sys.entity.SysUserEntity&quot;&gt;</span><br><span class="line">        SELECT *</span><br><span class="line">        FROM sys_user</span><br><span class="line">       &lt;where&gt;</span><br><span class="line">           &lt;if test=&quot;username != null&quot;&gt; and `username` = #&#123;username&#125;&lt;/if&gt;</span><br><span class="line">           &lt;if test=&quot;password != null&quot;&gt;and `password` = #&#123;password&#125;&lt;/if&gt;</span><br><span class="line">       &lt;/where&gt;</span><br><span class="line">    &lt;/select&gt;</span><br></pre></td></tr></table></figure><p></p><h4 id="使用注解形式"><a href="#使用注解形式" class="headerlink" title="使用注解形式"></a>使用注解形式</h4><p>这个就要方便很多，没有Mapper.xml文件了，也不要配置它的文件路径的映射了，只要把xml中的SQL 写到注解上就可以了。<br>直接在<code>SysUserDao</code>中改成：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SysUserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"INSERT INTO sys_user(username,password) VALUES(#&#123;username&#125;, #&#123;password&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(SysUserEntity user)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"SELECT * FROM sys_user WHERE id = #&#123;id&#125;"</span>)</span><br><span class="line">	<span class="meta">@Results</span>(&#123;</span><br><span class="line">		<span class="meta">@Result</span>(property = <span class="string">"username"</span>,  column = <span class="string">"username"</span>, javaType = String.class),</span><br><span class="line">		<span class="meta">@Result</span>(property = <span class="string">"password"</span>, column = <span class="string">"password"</span>)</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="function">UserEntity <span class="title">getOne</span><span class="params">(Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>根据对数据库的操作不同，使用不同的注解：</p><ul><li>@Select 是查询类的注解，所有的查询均使用这个</li><li>@Result 修饰返回的结果集，关联实体类属性和数据库字段一一对应，如果实体类属性和数据库属性名保持一致，就不需要这个属性来修饰。</li><li>@Insert 插入数据库使用，直接传入实体类会自动解析属性到对应的值</li><li>@Update 负责修改，也可以直接传入对象</li><li>@Delete 负责删除</li></ul><p><strong>注意，使用#符号和$符号的不同：</strong><br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This example creates a prepared statement, something like select * from teacher where name = ?;</span></span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"Select * from teacher where name = #&#123;name&#125;"</span>)</span><br><span class="line"><span class="function">Teacher <span class="title">selectTeachForGivenName</span><span class="params">(@Param(<span class="string">"name"</span>)</span> String name)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This example creates n inlined statement, something like select * from teacher where name = 'someName';</span></span><br><span class="line"><span class="meta">@Select</span>(<span class="string">"Select * from teacher where name = '$&#123;name&#125;'"</span>)</span><br><span class="line"><span class="function">Teacher <span class="title">selectTeachForGivenName</span><span class="params">(@Param(<span class="string">"name"</span>)</span> String name)</span>;</span><br></pre></td></tr></table></figure><p></p><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SysUserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Rollback</span>(<span class="keyword">false</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SysUserEntity user = <span class="keyword">new</span> SysUserEntity();</span><br><span class="line">        user.setUsername(<span class="string">"wuwii"</span>);</span><br><span class="line">        user.setPassword(<span class="string">"123"</span>);</span><br><span class="line">        userDao.save(user);</span><br><span class="line">        Assert.assertEquals(user.getUsername(), userDao.query(user).get(<span class="number">0</span>).getUsername());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习Spring Boot：（五）使用 devtools热部署]]></title>
      <url>/springboot-5.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>spring-boot-devtools 是一个为开发者服务的一个模块，其中最重要的功能就是自动应用代码更改到最新的App上面去。原理是在发现代码有更改之后，重新启动应用，但是比速度比手动停止后再启动还要更快，更快指的不是节省出来的手工操作的时间。</p></blockquote><p>其深层原理是使用了两个ClassLoader，一个Classloader加载那些不会改变的类（第三方Jar包），另一个ClassLoader加载会更改的类，称为 restart ClassLoader</p><p>,这样在有代码更改的时候，原来的restart ClassLoader 被丢弃，重新创建一个restart ClassLoader，由于需要加载的类相比较少，所以实现了较快的重启时间（5秒以内）。</p><a id="more"></a><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="第一步：添加依赖"><a href="#第一步：添加依赖" class="headerlink" title="第一步：添加依赖"></a>第一步：添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">           devtools可以实现页面热部署（即页面修改后会立即生效，这个可以直接在application.properties文件中配置spring.thymeleaf.cache=false来实现），      </span></span><br><span class="line"><span class="comment">           实现类文件热部署（类文件修改后不会立即生效），实现对属性文件的热部署。   </span></span><br><span class="line"><span class="comment">           即devtools会监听classpath下的文件变动，并且会立即重启应用（发生在保存时机），注意：因为其采用的虚拟机机制，该项重启是很快的      </span></span><br><span class="line"><span class="comment">        --&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="第二步：配置spring-boot-maven-plugin"><a href="#第二步：配置spring-boot-maven-plugin" class="headerlink" title="第二步：配置spring-boot-maven-plugin"></a>第二步：配置spring-boot-maven-plugin</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span>  </span><br><span class="line">           <span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">             用于将应用打成可直接运行的jar（该jar就是用于生产环境中的jar） 值得注意的是，如果没有引用spring-boot-starter-parent做parent，  </span></span><br><span class="line"><span class="comment">                       且采用了上述的第二种方式，这里也要做出相应的改动  </span></span><br><span class="line"><span class="comment">             --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">                   <span class="comment">&lt;!--fork :  如果没有该项配置，肯呢个devtools不会起作用，即应用不会restart --&gt;</span>  </span><br><span class="line">                    <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="第三步：开启编译器的自动编译"><a href="#第三步：开启编译器的自动编译" class="headerlink" title="第三步：开启编译器的自动编译"></a>第三步：开启编译器的自动编译</h4><ul><li>Eclipse Project 在运行选项中查看是否开启了Build Automatically，如果没勾上，就选中勾上。Eclipse默认是自动编译的。</li><li>IDEA 默认在非RUN或DEBUG情况下才会自动编译。因此，我们在启动Spring Boot后，再次修改类的时候不会自动编译的，开启在Run状态自动编译的流程如下：</li></ul><ol><li>setting -&gt; build<br><img src="https://i.loli.net/2018/01/25/5a69665a66fe7.png" alt="springboot-5-1.png"></li><li>Shift+Ctrl+Alt+/，选择Registry；</li><li>找到下面的选项，勾选上就行了：<br><img src="https://i.loli.net/2018/01/25/5a69673f3c07e.png" alt="springboot-5-2.png"><br>我的是已经勾选过了的，所以是蓝颜色的提示，第一次就去找c开头的就可以了。</li></ol><h4 id="第四步：运行测试"><a href="#第四步：运行测试" class="headerlink" title="第四步：运行测试"></a>第四步：运行测试</h4><p>启动项目，在run dashboard发现有devtools：<br><img src="https://i.loli.net/2018/01/25/5a696dec06776.png" alt="springboot-5-3.png"></p><ol><li>修改类文件，项目重启；</li><li>修改配置文件，项目重启。</li></ol><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><ol><li>如果设置<code>SpringApplication.setRegisterShutdownHook(false)</code>，则自动重启将不起作用。</li><li>默认情况下，<code>/META-INF/maven</code>，<code>/META-INF/resources</code>，<code>/resources</code>，<code>/static</code>，<code>/templates</code>，<code>/public</code>这些文件夹下的文件修改不会使应用重启，但是会重新加载（devtools内嵌了一个LiveReload server，当资源发生改变时，浏览器刷新）。</li><li>如果想改变默认的设置，可以自己设置不重启的目录：<code>spring.devtools.restart.exclude=static/**,public/**</code>，这样的话，就只有这两个目录下的文件修改不会导致restart操作了。</li><li>如果要在保留默认设置的基础上还要添加其他的排除目录：<code>spring.devtools.restart.additional-exclude</code>;</li><li>如果想要使得当非classpath下的文件发生变化时应用得以重启，使用：<code>spring.devtools.restart.additional-paths</code>，这样devtools就会将该目录列入了监听范围。</li><li>设置 spring.devtools.restart.enabled 属性为false，可以关闭自动重启。可以在application.properties中设置，也可以通过设置环境变量的方式。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    System.setProperty(<span class="string">"spring.devtools.restart.enabled"</span>,<span class="string">"false"</span>);</span><br><span class="line">    SpringApplication.run(MyApp.class, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><ul><li><a rel="external nofollow noopener noreferrer" target="_blank" href="http://412887952-qq-com.iteye.com/blog/2300313">40. springboot + devtools（热部署）【从零开始学Spring Boot】</a></li><li><a rel="external nofollow noopener noreferrer" target="_blank" href="http://blog.csdn.net/wjc475869/article/details/52442484">Intellij IDEA 使用Spring-boot-devTools无效解决办法</a></li></ul><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习Spring Boot：（四）应用日志]]></title>
      <url>/springboot-4.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>应用日志是一个系统非常重要的一部分，后来不管是开发还是线上，日志都起到至关重要的作用。这次使用的是 <code>Logback</code> 日志框架。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>Spring Boot在所有内部日志中使用Commons Logging，但是默认配置也提供了对常用日志的支持，如：Java Util Logging，Log4J, Log4J2和Logback。每种Logger都可以通过配置使用控制台或者文件输出日志内容。</p><h3 id="默认日志Logback"><a href="#默认日志Logback" class="headerlink" title="默认日志Logback"></a>默认日志Logback</h3><ul><li><p><strong>SLF4J</strong>——Simple Logging Facade For Java，它是一个针对于各类Java日志框架的统一Facade抽象。Java日志框架众多——常用的有java.util.logging, log4j, logback，commons-logging, Spring框架使用的是Jakarta Commons Logging API (JCL)。而SLF4J定义了统一的日志抽象接口，而真正的日志实现则是在运行时决定的——它提供了各类日志框架的binding。</p></li><li><p><strong>Logback</strong>是log4j框架的作者开发的新一代日志框架，它效率更高、能够适应诸多的运行环境，同时天然支持SLF4J。</p></li></ul><p>默认情况下，Spring Boot会用Logback来记录日志，并用INFO级别输出到控制台。在运行应用程序和其他例子时，你应该已经看到很多INFO级别的日志了。<br><img src="https://i.loli.net/2018/01/21/5a6475f94024e.png" alt="springboot4-1.png"></p><p>从上图可以看到，日志输出内容元素具体如下：</p><ul><li>时间日期：精确到毫秒</li><li>日志级别：ERROR, WARN, INFO, DEBUG or TRACE</li><li>进程ID</li><li>分隔符：<code>---</code> 标识实际日志的开始</li><li>线程名：方括号括起来（可能会截断控制台输出）</li><li>Logger名：通常使用源代码的类名</li><li>日志内容</li></ul><h3 id="添加日志依赖"><a href="#添加日志依赖" class="headerlink" title="添加日志依赖"></a>添加日志依赖</h3><p>假如maven依赖中添加了spring-boot-starter-logging：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>那么，我们的Spring Boot应用将自动使用logback作为应用日志框架，Spring Boot启动的时候，由org.springframework.boot.logging.Logging-Application-Listener根据情况初始化并使用。</p><p><strong>但是呢，实际开发中我们不需要直接添加该依赖，你会发现spring-boot-starter其中包含了 spring-boot-starter-logging，该依赖内容就是 Spring Boot 默认的日志框架 logback。</strong></p><p>也就是我们不需要额外配置。</p><h3 id="默认配置属性支持"><a href="#默认配置属性支持" class="headerlink" title="默认配置属性支持"></a>默认配置属性支持</h3><p>Spring Boot为我们提供了很多默认的日志配置，所以，只要将spring-boot-starter-logging作为依赖加入到当前应用的classpath，则“开箱即用”。<br>下面介绍几种在application.properties就可以配置的日志相关属性。</p><h4 id="控制台输出"><a href="#控制台输出" class="headerlink" title="控制台输出"></a>控制台输出</h4><p>日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出。<br>Spring Boot中默认配置ERROR、WARN和INFO级别的日志输出到控制台。您还可以通过启动您的应用程序–debug标志来启用“调试”模式（开发的时候推荐开启）,以下两种方式皆可：</p><p>在运行命令后加入<code>--debug</code>标志，如：<code>$ java -jar springTest.jar --debug</code><br>在<code>application.properties</code>中配置<code>debug=true</code>，该属性置为true的时候，核心Logger（包含嵌入式容器、hibernate、spring）会输出更多内容，但是你自己应用的日志并不会输出为DEBUG级别。</p><h5 id="文件输出"><a href="#文件输出" class="headerlink" title="文件输出"></a>文件输出</h5><p>默认情况下，Spring Boot将日志输出到控制台，不会写到日志文件。如果要编写除控制台输出之外的日志文件，则需在application.properties中设置logging.file或logging.path属性。</p><ul><li><strong>logging.file</strong>，设置文件，可以是绝对路径，也可以是相对路径。如：logging.file=my.log</li><li><strong>logging.path</strong>，设置目录，会在该目录下创建spring.log文件，并写入日志内容，如：logging.path=/var/log<br>如果只配置 logging.file，会在项目的当前路径下生成一个 xxx.log 日志文件。<br>如果只配置 logging.path，在 /var/log文件夹生成一个日志文件为 spring.log<blockquote><p>注：二者不能同时使用，如若同时使用，则只有logging.file生效</p></blockquote></li></ul><p><strong>默认情况下，日志文件的大小达到10MB时会切分一次，产生新的日志文件，默认级别为：ERROR、WARN、INFO</strong></p><h4 id="级别控制"><a href="#级别控制" class="headerlink" title="级别控制"></a>级别控制</h4><p>所有支持的日志记录系统都可以在Spring环境中设置记录级别（例如在application.properties中）<br>格式为：’logging.level.* = LEVEL’</p><ul><li><strong>logging.level</strong>：日志级别控制前缀，*为包名或Logger名</li><li><p><strong>LEVEL</strong>：选项TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF<br>举例：</p></li><li><p>logging.level.com.dudu=DEBUG：<code>com.dudu</code>包下所有class以DEBUG级别输出</p></li><li>logging.level.root=WARN：root日志以WARN级别输出</li></ul><h4 id="自定义日志配置"><a href="#自定义日志配置" class="headerlink" title="自定义日志配置"></a>自定义日志配置</h4><p>由于日志服务一般都在ApplicationContext创建前就初始化了，它并不是必须通过Spring的配置文件控制。因此通过系统属性和传统的Spring Boot外部配置文件依然可以很好的支持日志控制和管理。</p><p>根据不同的日志系统，你可以按如下规则组织配置文件名，就能被正确加载：</p><ul><li>Logback：logback-spring.xml, logback-spring.groovy, logback.xml, logback.groovy</li><li>Log4j：log4j-spring.properties,log4j-spring.xml, log4j.properties, log4j.xml</li><li>Log4j2：log4j2-spring.xml, log4j2.xml</li><li>JDK (Java Util Logging)：logging.properties</li></ul><p><strong>Spring Boot官方推荐优先使用带有-spring的文件名作为你的日志配置（如使用logback-spring.xml，而不是logback.xml），命名为logback-spring.xml的日志配置文件，spring boot可以为它添加一些spring boot特有的配置项（下面会提到）。</strong></p><p>上面是默认的命名规则，并且放在<code>src/main/resources</code>下面即可。</p><h2 id="logback-xml"><a href="#logback-xml" class="headerlink" title="logback.xml"></a>logback.xml</h2><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><p>如果你即想完全掌控日志配置，但又不想用<code>logback.xml</code>作为<code>Logback</code>配置的名字，可以在<code>application.properties</code>配置文件里面通过<code>logging.config</code>属性指定自定义的名字：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logging.config=classpath:logging-config.xml</span><br></pre></td></tr></table></figure><p></p><p>虽然一般并不需要改变配置文件的名字，但是如果你想针对不同运行时Profile使用不同的日<br>志配置，这个功能会很有用。</p><p>下面我们来看看一个普通的logback-spring.xml例子<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>  <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"60 seconds"</span> <span class="attr">debug</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>logback<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log.path"</span> <span class="attr">value</span>=<span class="string">"/Users/tengjun/Documents/log"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--输出到控制台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"console"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- &lt;filter class="ch.qos.logback.classic.filter.ThresholdFilter"&gt;</span></span><br><span class="line"><span class="comment">            &lt;level&gt;ERROR&lt;/level&gt;</span></span><br><span class="line"><span class="comment">        &lt;/filter&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; %contextName [%thread] %-5level %logger&#123;36&#125;.%M:%L - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--输出到文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/logback.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; %contextName [%thread] %-5level %logger&#123;36&#125;.%M:%L - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"file"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- logback为java中的包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.dudu.controller"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--logback.LogbackDemo：类的全路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.dudu.controller.LearnController"</span> <span class="attr">level</span>=<span class="string">"WARN"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h3 id="属性分析"><a href="#属性分析" class="headerlink" title="属性分析"></a>属性分析</h3><h4 id="根节点"><a href="#根节点" class="headerlink" title="根节点"></a>根节点<configuration></configuration></h4><p><strong>根节点<code>&lt;configuration&gt;</code>包含的属性</strong>:</p><ul><li>scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。</li><li>scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。</li><li>debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。</li></ul><p>**根节点<configuration>的子节点：</configuration></p><p><configuration>下面一共有2个属性，3个子节点，分别是**：</configuration></p><ul><li><p>设置上下文名称<code>&lt;contextName&gt;</code><br>每个logger都关联到logger上下文，默认上下文名称为“default”。但可以使用设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改,可以通过%contextName来打印日志上下文名称。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">contextName</span>&gt;</span>logback<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>设置变量<property><br>用来定义变量值的标签， 有两个属性，name和value；其中name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。</property></p></li></ul><h4 id="子节点一-lt-appender-gt"><a href="#子节点一-lt-appender-gt" class="headerlink" title="子节点一&lt;appender&gt;"></a>子节点一<code>&lt;appender&gt;</code></h4><p><strong>appender用来格式化日志输出节点，有俩个属性<code>name</code>和<code>class</code>，class用来指定哪种输出策略，常用就是控制台输出策略和文件输出策略。</strong></p><h5 id="控制台输出ConsoleAppender："><a href="#控制台输出ConsoleAppender：" class="headerlink" title="控制台输出ConsoleAppender："></a>控制台输出ConsoleAppender：</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--输出到控制台--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"console"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.filter.ThresholdFilter"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; %contextName [%thread] %-5level %logger&#123;36&#125;.%M:%L - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;encoder&gt;</code>表示对日志进行编码：</p><ul><li>%d{HH: mm:ss.SSS}——日志输出时间</li><li>%thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用</li><li>%-5level——日志级别，并且使用5个字符靠左对齐</li><li>%logger{36}——日志输出者的名字</li><li>%msg——日志消息</li><li>%n——平台的换行符</li></ul><p>ThresholdFilter为系统定义的拦截器，例如我们用ThresholdFilter来过滤掉ERROR级别以下的日志不输出到文件中。如果不用记得注释掉，不然你控制台会发现没日志~</p><h5 id="输出到文件RollingFileAppender"><a href="#输出到文件RollingFileAppender" class="headerlink" title="输出到文件RollingFileAppender"></a>输出到文件RollingFileAppender</h5><p>另一种常见的日志输出到文件，随着应用的运行时间越来越长，日志也会增长的越来越多，将他们输出到同一个文件并非一个好办法。<code>RollingFileAppender</code>用于切分文件日志：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--输出到文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;log.path&#125;/logback.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>1GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; %contextName [%thread] %-5level %logger&#123;36&#125;.%M:%L - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>其中重要的是rollingPolicy的定义，上例中<filenamepattern>${log.path}/logback.%d{yyyy-MM-dd}.log</filenamepattern>定义了日志的切分方式——把每一天的日志归档到一个文件中，<maxhistory>30</maxhistory>表示只保留最近30天的日志，以防止日志填满整个磁盘空间。同理，可以使用%d{yyyy-MM-dd_HH-mm}来定义精确到分的日志切分方式。<totalsizecap>1GB</totalsizecap>用来指定日志文件的上限大小，例如设置为1GB的话，那么到了这个值，就会删除旧的日志。</p><p>补:如果你想把日志直接放到当前项目下，把${log.path}/去掉即可。</p><p>logback 每天生成和大小生成冲突的问题可以看这个解答：<a href="http://blog.csdn.net/wujianmin577/article/details/68922545" rel="external nofollow noopener noreferrer" target="_blank">传送门</a></p><h4 id="子节点二"><a href="#子节点二" class="headerlink" title="子节点二"></a>子节点二<root></root></h4><p>root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性。</p><p>level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。<br>默认是DEBUG。<br>可以包含零个或多个元素，标识这个appender将会添加到这个logger。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"debug"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"file"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="子节点三"><a href="#子节点三" class="headerlink" title="子节点三"></a>子节点三<logger></logger></h4><p><logger>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。<logger>仅有一个name属性，一个可选的level和一个可选的addtivity属性。</logger></appender></logger></p><ul><li>name:用来指定受此logger约束的某一个包或者具体的某一个类。</li><li>level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前logger将会继承上级的级别。</li><li>addtivity:是否向上级logger传递打印信息。默认是true。</li></ul><p>注：使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作：</p><ul><li>第一种把<root level="info">改成<root level="DEBUG">这样就会打印sql，不过这样日志那边会出现很多其他消息。</root></root></li><li>第二种就是单独给dao下目录配置debug模式，代码如下，这样配置sql语句会打印，其他还是正常info级别：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.dudu.dao"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="多环境日志输出"><a href="#多环境日志输出" class="headerlink" title="多环境日志输出"></a>多环境日志输出</h2><p>据不同环境（prod:生产环境，test:测试环境，dev:开发环境）来定义不同的日志输出，在 logback-spring.xml中使用 springProfile 节点来定义，方法如下：</p><blockquote><p>文件名称不是logback.xml，想使用spring扩展profile支持，要以logback-spring.xml命名:<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/base.xml"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springframework.web"</span> <span class="attr">level</span>=<span class="string">"INFO"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springboot.sample"</span> <span class="attr">level</span>=<span class="string">"TRACE"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开发、测试环境，多个用逗号隔开 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev,test"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springframework.web"</span> <span class="attr">level</span>=<span class="string">"INFO"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springboot.sample"</span> <span class="attr">level</span>=<span class="string">"INFO"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.wuwii"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> <span class="attr">additivity</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 生产环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"pro"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springframework.web"</span> <span class="attr">level</span>=<span class="string">"ERROR"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springboot.sample"</span> <span class="attr">level</span>=<span class="string">"ERROR"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.wuwii"</span> <span class="attr">level</span>=<span class="string">"ERROR"</span> <span class="attr">additivity</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p></blockquote><p>可以启动服务的时候指定 profile （如不指定使用默认），如指定prod 的方式为：<br>java -jar xxx.jar –spring.profiles.active=prod</p><h2 id="格式化颜色"><a href="#格式化颜色" class="headerlink" title="格式化颜色"></a>格式化颜色</h2><p>注意到Spring Boot 输出日志到控制台按日志级别有不同的颜色，logback官方也给出了解释：<br><a rel="external nofollow noopener noreferrer" target="_blank" href="https://logback.qos.ch/manual/layouts.html#coloring">https://logback.qos.ch/manual/layouts.html#coloring</a></p><p>我配置了一个这样的 ：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; %contextName [%thread] %highlight(%-5level) %cyan(%logger&#123;36&#125;).%M:%L - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Boot常用应用程序属性]]></title>
      <url>/springboot-properties.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><p>可以在application.properties/application.yml文件中或作为命令行开关指定各种属性，资料来自<a rel="external nofollow noopener noreferrer" target="_blank" href="http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html">http://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html</a></p><blockquote><p>可以选择需要的属性进行设置。</p></blockquote><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ===================================================================</span></span><br><span class="line"><span class="comment"># COMMON SPRING BOOT PROPERTIES</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This sample file is provided as a guideline. Do NOT copy it in its</span></span><br><span class="line"><span class="comment"># entirety to your own application.               ^^^</span></span><br><span class="line"><span class="comment"># ===================================================================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------------------</span></span><br><span class="line"><span class="comment"># CORE PROPERTIES</span></span><br><span class="line"><span class="comment"># ----------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># BANNER</span></span><br><span class="line">banner.charset=UTF-8 <span class="comment"># Banner file encoding.</span></span><br><span class="line">banner.location=classpath:banner.txt <span class="comment"># Banner file location.</span></span><br><span class="line">banner.image.location=classpath:banner.gif <span class="comment"># Banner image file location (jpg/png can also be used).</span></span><br><span class="line">banner.image.width= <span class="comment"># Width of the banner image in chars (default 76)</span></span><br><span class="line">banner.image.height= <span class="comment"># Height of the banner image in chars (default based on image height)</span></span><br><span class="line">banner.image.margin= <span class="comment"># Left hand image margin in chars (default 2)</span></span><br><span class="line">banner.image.invert= <span class="comment"># If images should be inverted for dark terminal themes (default false)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># LOGGING</span></span><br><span class="line">logging.config= <span class="comment"># Location of the logging configuration file. For instance `classpath:logback.xml` for Logback</span></span><br><span class="line">logging.exception-conversion-word=%wEx <span class="comment"># Conversion word used when logging exceptions.</span></span><br><span class="line">logging.file= <span class="comment"># Log file name. For instance `myapp.log`</span></span><br><span class="line">logging.level.*= <span class="comment"># Log levels severity mapping. For instance `logging.level.org.springframework=DEBUG`</span></span><br><span class="line">logging.path= <span class="comment"># Location of the log file. For instance `/var/log`</span></span><br><span class="line">logging.pattern.console= <span class="comment"># Appender pattern for output to the console. Only supported with the default logback setup.</span></span><br><span class="line">logging.pattern.file= <span class="comment"># Appender pattern for output to the file. Only supported with the default logback setup.</span></span><br><span class="line">logging.pattern.level= <span class="comment"># Appender pattern for log level (default %5p). Only supported with the default logback setup.</span></span><br><span class="line">logging.register-shutdown-hook=<span class="literal">false</span> <span class="comment"># Register a shutdown hook for the logging system when it is initialized.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># AOP</span></span><br><span class="line">spring.aop.auto=<span class="literal">true</span> <span class="comment"># Add @EnableAspectJAutoProxy.</span></span><br><span class="line">spring.aop.proxy-target-class= <span class="comment"># Whether subclass-based (CGLIB) proxies are to be created (true) as opposed to standard Java interface-based proxies (false). Defaults to "true" when using Spring Transaction Management, otherwise "false".</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># IDENTITY (ContextIdApplicationContextInitializer)</span></span><br><span class="line">spring.application.index= <span class="comment"># Application index.</span></span><br><span class="line">spring.application.name= <span class="comment"># Application name.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ADMIN (SpringApplicationAdminJmxAutoConfiguration)</span></span><br><span class="line">spring.application.admin.enabled=<span class="literal">false</span> <span class="comment"># Enable admin features for the application.</span></span><br><span class="line">spring.application.admin.jmx-name=org.springframework.boot:<span class="built_in">type</span>=Admin,name=SpringApplication <span class="comment"># JMX name of the application admin MBean.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># AUTO-CONFIGURATION</span></span><br><span class="line">spring.autoconfigure.exclude= <span class="comment"># Auto-configuration classes to exclude.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SPRING CORE</span></span><br><span class="line">spring.beaninfo.ignore=<span class="literal">true</span> <span class="comment"># Skip search of BeanInfo classes.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SPRING CACHE (CacheProperties)</span></span><br><span class="line">spring.cache.cache-names= <span class="comment"># Comma-separated list of cache names to create if supported by the underlying cache manager.</span></span><br><span class="line">spring.cache.caffeine.spec= <span class="comment"># The spec to use to create caches. Check CaffeineSpec for more details on the spec format.</span></span><br><span class="line">spring.cache.couchbase.expiration=0 <span class="comment"># Entry expiration in milliseconds. By default the entries never expire.</span></span><br><span class="line">spring.cache.ehcache.config= <span class="comment"># The location of the configuration file to use to initialize EhCache.</span></span><br><span class="line">spring.cache.guava.spec= <span class="comment"># The spec to use to create caches. Check CacheBuilderSpec for more details on the spec format.</span></span><br><span class="line">spring.cache.infinispan.config= <span class="comment"># The location of the configuration file to use to initialize Infinispan.</span></span><br><span class="line">spring.cache.jcache.config= <span class="comment"># The location of the configuration file to use to initialize the cache manager.</span></span><br><span class="line">spring.cache.jcache.provider= <span class="comment"># Fully qualified name of the CachingProvider implementation to use to retrieve the JSR-107 compliant cache manager. Only needed if more than one JSR-107 implementation is available on the classpath.</span></span><br><span class="line">spring.cache.type= <span class="comment"># Cache type, auto-detected according to the environment by default.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SPRING CONFIG - using environment property only (ConfigFileApplicationListener)</span></span><br><span class="line">spring.config.location= <span class="comment"># Config file locations.</span></span><br><span class="line">spring.config.name=application <span class="comment"># Config file name.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># HAZELCAST (HazelcastProperties)</span></span><br><span class="line">spring.hazelcast.config= <span class="comment"># The location of the configuration file to use to initialize Hazelcast.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PROJECT INFORMATION (ProjectInfoProperties)</span></span><br><span class="line">spring.info.build.location=classpath:META-INF/build-info.properties <span class="comment"># Location of the generated build-info.properties file.</span></span><br><span class="line">spring.info.git.location=classpath:git.properties <span class="comment"># Location of the generated git.properties file.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># JMX</span></span><br><span class="line">spring.jmx.default-domain= <span class="comment"># JMX domain name.</span></span><br><span class="line">spring.jmx.enabled=<span class="literal">true</span> <span class="comment"># Expose management beans to the JMX domain.</span></span><br><span class="line">spring.jmx.server=mbeanServer <span class="comment"># MBeanServer bean name.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Email (MailProperties)</span></span><br><span class="line">spring.mail.default-encoding=UTF-8 <span class="comment"># Default MimeMessage encoding.</span></span><br><span class="line">spring.mail.host= <span class="comment"># SMTP server host. For instance `smtp.example.com`</span></span><br><span class="line">spring.mail.jndi-name= <span class="comment"># Session JNDI name. When set, takes precedence to others mail settings.</span></span><br><span class="line">spring.mail.password= <span class="comment"># Login password of the SMTP server.</span></span><br><span class="line">spring.mail.port= <span class="comment"># SMTP server port.</span></span><br><span class="line">spring.mail.properties.*= <span class="comment"># Additional JavaMail session properties.</span></span><br><span class="line">spring.mail.protocol=smtp <span class="comment"># Protocol used by the SMTP server.</span></span><br><span class="line">spring.mail.test-connection=<span class="literal">false</span> <span class="comment"># Test that the mail server is available on startup.</span></span><br><span class="line">spring.mail.username= <span class="comment"># Login user of the SMTP server.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># APPLICATION SETTINGS (SpringApplication)</span></span><br><span class="line">spring.main.banner-mode=console <span class="comment"># Mode used to display the banner when the application runs.</span></span><br><span class="line">spring.main.sources= <span class="comment"># Sources (class name, package name or XML resource location) to include in the ApplicationContext.</span></span><br><span class="line">spring.main.web-environment= <span class="comment"># Run the application in a web environment (auto-detected by default).</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># FILE ENCODING (FileEncodingApplicationListener)</span></span><br><span class="line">spring.mandatory-file-encoding= <span class="comment"># Expected character encoding the application must use.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># INTERNATIONALIZATION (MessageSourceAutoConfiguration)</span></span><br><span class="line">spring.messages.always-use-message-format=<span class="literal">false</span> <span class="comment"># Set whether to always apply the MessageFormat rules, parsing even messages without arguments.</span></span><br><span class="line">spring.messages.basename=messages <span class="comment"># Comma-separated list of basenames, each following the ResourceBundle convention.</span></span><br><span class="line">spring.messages.cache-seconds=-1 <span class="comment"># Loaded resource bundle files cache expiration, in seconds. When set to -1, bundles are cached forever.</span></span><br><span class="line">spring.messages.encoding=UTF-8 <span class="comment"># Message bundles encoding.</span></span><br><span class="line">spring.messages.fallback-to-system-locale=<span class="literal">true</span> <span class="comment"># Set whether to fall back to the system Locale if no files for a specific Locale have been found.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># OUTPUT</span></span><br><span class="line">spring.output.ansi.enabled=detect <span class="comment"># Configure the ANSI output.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PID FILE (ApplicationPidFileWriter)</span></span><br><span class="line">spring.pid.fail-on-write-error= <span class="comment"># Fail if ApplicationPidFileWriter is used but it cannot write the PID file.</span></span><br><span class="line">spring.pid.file= <span class="comment"># Location of the PID file to write (if ApplicationPidFileWriter is used).</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PROFILES</span></span><br><span class="line">spring.profiles.active= <span class="comment"># Comma-separated list (or list if using YAML) of active profiles.</span></span><br><span class="line">spring.profiles.include= <span class="comment"># Unconditionally activate the specified comma separated profiles (or list of profiles if using YAML).</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SENDGRID (SendGridAutoConfiguration)</span></span><br><span class="line">spring.sendgrid.api-key= <span class="comment"># SendGrid api key (alternative to username/password).</span></span><br><span class="line">spring.sendgrid.username= <span class="comment"># SendGrid account username.</span></span><br><span class="line">spring.sendgrid.password= <span class="comment"># SendGrid account password.</span></span><br><span class="line">spring.sendgrid.proxy.host= <span class="comment"># SendGrid proxy host.</span></span><br><span class="line">spring.sendgrid.proxy.port= <span class="comment"># SendGrid proxy port.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------------------</span></span><br><span class="line"><span class="comment"># WEB PROPERTIES</span></span><br><span class="line"><span class="comment"># ----------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># EMBEDDED SERVER CONFIGURATION (ServerProperties)</span></span><br><span class="line">server.address= <span class="comment"># Network address to which the server should bind to.</span></span><br><span class="line">server.compression.enabled=<span class="literal">false</span> <span class="comment"># If response compression is enabled.</span></span><br><span class="line">server.compression.excluded-user-agents= <span class="comment"># List of user-agents to exclude from compression.</span></span><br><span class="line">server.compression.mime-types=text/html,text/xml,text/plain,text/css,text/javascript,application/javascript <span class="comment"># Comma-separated list of MIME types that should be compressed.</span></span><br><span class="line">server.compression.min-response-size=2048 <span class="comment"># Minimum response size that is required for compression to be performed.</span></span><br><span class="line">server.connection-timeout= <span class="comment"># Time in milliseconds that connectors will wait for another HTTP request before closing the connection. When not set, the connector's container-specific default will be used. Use a value of -1 to indicate no (i.e. infinite) timeout.</span></span><br><span class="line">server.context-parameters.*= <span class="comment"># Servlet context init parameters. For instance `server.context-parameters.a=alpha`</span></span><br><span class="line">server.context-path= <span class="comment"># Context path of the application.</span></span><br><span class="line">server.display-name=application <span class="comment"># Display name of the application.</span></span><br><span class="line">server.max-http-header-size=0 <span class="comment"># Maximum size in bytes of the HTTP message header.</span></span><br><span class="line">server.error.include-stacktrace=never <span class="comment"># When to include a "stacktrace" attribute.</span></span><br><span class="line">server.error.path=/error <span class="comment"># Path of the error controller.</span></span><br><span class="line">server.error.whitelabel.enabled=<span class="literal">true</span> <span class="comment"># Enable the default error page displayed in browsers in case of a server error.</span></span><br><span class="line">server.jetty.acceptors= <span class="comment"># Number of acceptor threads to use.</span></span><br><span class="line">server.jetty.max-http-post-size=0 <span class="comment"># Maximum size in bytes of the HTTP post or put content.</span></span><br><span class="line">server.jetty.selectors= <span class="comment"># Number of selector threads to use.</span></span><br><span class="line">server.jsp-servlet.class-name=org.apache.jasper.servlet.JspServlet <span class="comment"># The class name of the JSP servlet.</span></span><br><span class="line">server.jsp-servlet.init-parameters.*= <span class="comment"># Init parameters used to configure the JSP servlet</span></span><br><span class="line">server.jsp-servlet.registered=<span class="literal">true</span> <span class="comment"># Whether or not the JSP servlet is registered</span></span><br><span class="line">server.port=8080 <span class="comment"># Server HTTP port.</span></span><br><span class="line">server.server-header= <span class="comment"># Value to use for the Server response header (no header is sent if empty)</span></span><br><span class="line">server.servlet-path=/ <span class="comment"># Path of the main dispatcher servlet.</span></span><br><span class="line">server.use-forward-headers= <span class="comment"># If X-Forwarded-* headers should be applied to the HttpRequest.</span></span><br><span class="line">server.session.cookie.comment= <span class="comment"># Comment for the session cookie.</span></span><br><span class="line">server.session.cookie.domain= <span class="comment"># Domain for the session cookie.</span></span><br><span class="line">server.session.cookie.http-only= <span class="comment"># "HttpOnly" flag for the session cookie.</span></span><br><span class="line">server.session.cookie.max-age= <span class="comment"># Maximum age of the session cookie in seconds.</span></span><br><span class="line">server.session.cookie.name= <span class="comment"># Session cookie name.</span></span><br><span class="line">server.session.cookie.path= <span class="comment"># Path of the session cookie.</span></span><br><span class="line">server.session.cookie.secure= <span class="comment"># "Secure" flag for the session cookie.</span></span><br><span class="line">server.session.persistent=<span class="literal">false</span> <span class="comment"># Persist session data between restarts.</span></span><br><span class="line">server.session.store-dir= <span class="comment"># Directory used to store session data.</span></span><br><span class="line">server.session.timeout= <span class="comment"># Session timeout in seconds.</span></span><br><span class="line">server.session.tracking-modes= <span class="comment"># Session tracking modes (one or more of the following: "cookie", "url", "ssl").</span></span><br><span class="line">server.ssl.ciphers= <span class="comment"># Supported SSL ciphers.</span></span><br><span class="line">server.ssl.client-auth= <span class="comment"># Whether client authentication is wanted ("want") or needed ("need"). Requires a trust store.</span></span><br><span class="line">server.ssl.enabled= <span class="comment"># Enable SSL support.</span></span><br><span class="line">server.ssl.enabled-protocols= <span class="comment"># Enabled SSL protocols.</span></span><br><span class="line">server.ssl.key-alias= <span class="comment"># Alias that identifies the key in the key store.</span></span><br><span class="line">server.ssl.key-password= <span class="comment"># Password used to access the key in the key store.</span></span><br><span class="line">server.ssl.key-store= <span class="comment"># Path to the key store that holds the SSL certificate (typically a jks file).</span></span><br><span class="line">server.ssl.key-store-password= <span class="comment"># Password used to access the key store.</span></span><br><span class="line">server.ssl.key-store-provider= <span class="comment"># Provider for the key store.</span></span><br><span class="line">server.ssl.key-store-type= <span class="comment"># Type of the key store.</span></span><br><span class="line">server.ssl.protocol=TLS <span class="comment"># SSL protocol to use.</span></span><br><span class="line">server.ssl.trust-store= <span class="comment"># Trust store that holds SSL certificates.</span></span><br><span class="line">server.ssl.trust-store-password= <span class="comment"># Password used to access the trust store.</span></span><br><span class="line">server.ssl.trust-store-provider= <span class="comment"># Provider for the trust store.</span></span><br><span class="line">server.ssl.trust-store-type= <span class="comment"># Type of the trust store.</span></span><br><span class="line">server.tomcat.accept-count= <span class="comment"># Maximum queue length for incoming connection requests when all possible request processing threads are in use.</span></span><br><span class="line">server.tomcat.accesslog.buffered=<span class="literal">true</span> <span class="comment"># Buffer output such that it is only flushed periodically.</span></span><br><span class="line">server.tomcat.accesslog.directory=logs <span class="comment"># Directory in which log files are created. Can be relative to the tomcat base dir or absolute.</span></span><br><span class="line">server.tomcat.accesslog.enabled=<span class="literal">false</span> <span class="comment"># Enable access log.</span></span><br><span class="line">server.tomcat.accesslog.file-date-format=.yyyy-MM-dd <span class="comment"># Date format to place in log file name.</span></span><br><span class="line">server.tomcat.accesslog.pattern=common <span class="comment"># Format pattern for access logs.</span></span><br><span class="line">server.tomcat.accesslog.prefix=access_log <span class="comment"># Log file name prefix.</span></span><br><span class="line">server.tomcat.accesslog.rename-on-rotate=<span class="literal">false</span> <span class="comment"># Defer inclusion of the date stamp in the file name until rotate time.</span></span><br><span class="line">server.tomcat.accesslog.request-attributes-enabled=<span class="literal">false</span> <span class="comment"># Set request attributes for IP address, Hostname, protocol and port used for the request.</span></span><br><span class="line">server.tomcat.accesslog.rotate=<span class="literal">true</span> <span class="comment"># Enable access log rotation.</span></span><br><span class="line">server.tomcat.accesslog.suffix=.<span class="built_in">log</span> <span class="comment"># Log file name suffix.</span></span><br><span class="line">server.tomcat.additional-tld-skip-patterns= <span class="comment"># Comma-separated list of additional patterns that match jars to ignore for TLD scanning.</span></span><br><span class="line">server.tomcat.background-processor-delay=30 <span class="comment"># Delay in seconds between the invocation of backgroundProcess methods.</span></span><br><span class="line">server.tomcat.basedir= <span class="comment"># Tomcat base directory. If not specified a temporary directory will be used.</span></span><br><span class="line">server.tomcat.internal-proxies=10\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\</span><br><span class="line">        192\\.168\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\</span><br><span class="line">        169\\.254\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\</span><br><span class="line">        127\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\</span><br><span class="line">        172\\.1[6-9]&#123;1&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\</span><br><span class="line">        172\\.2[0-9]&#123;1&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\</span><br><span class="line">        172\\.3[0-1]&#123;1&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125; <span class="comment"># regular expression matching trusted IP addresses.</span></span><br><span class="line">server.tomcat.max-connections= <span class="comment"># Maximum number of connections that the server will accept and process at any given time.</span></span><br><span class="line">server.tomcat.max-http-post-size=0 <span class="comment"># Maximum size in bytes of the HTTP post content.</span></span><br><span class="line">server.tomcat.max-threads=0 <span class="comment"># Maximum amount of worker threads.</span></span><br><span class="line">server.tomcat.min-spare-threads=0 <span class="comment"># Minimum amount of worker threads.</span></span><br><span class="line">server.tomcat.port-header=X-Forwarded-Port <span class="comment"># Name of the HTTP header used to override the original port value.</span></span><br><span class="line">server.tomcat.protocol-header= <span class="comment"># Header that holds the incoming protocol, usually named "X-Forwarded-Proto".</span></span><br><span class="line">server.tomcat.protocol-header-https-value=https <span class="comment"># Value of the protocol header that indicates that the incoming request uses SSL.</span></span><br><span class="line">server.tomcat.redirect-context-root= <span class="comment"># Whether requests to the context root should be redirected by appending a / to the path.</span></span><br><span class="line">server.tomcat.remote-ip-header= <span class="comment"># Name of the http header from which the remote ip is extracted. For instance `X-FORWARDED-FOR`</span></span><br><span class="line">server.tomcat.uri-encoding=UTF-8 <span class="comment"># Character encoding to use to decode the URI.</span></span><br><span class="line">server.undertow.accesslog.dir= <span class="comment"># Undertow access log directory.</span></span><br><span class="line">server.undertow.accesslog.enabled=<span class="literal">false</span> <span class="comment"># Enable access log.</span></span><br><span class="line">server.undertow.accesslog.pattern=common <span class="comment"># Format pattern for access logs.</span></span><br><span class="line">server.undertow.accesslog.prefix=access_log. <span class="comment"># Log file name prefix.</span></span><br><span class="line">server.undertow.accesslog.rotate=<span class="literal">true</span> <span class="comment"># Enable access log rotation.</span></span><br><span class="line">server.undertow.accesslog.suffix=<span class="built_in">log</span> <span class="comment"># Log file name suffix.</span></span><br><span class="line">server.undertow.buffer-size= <span class="comment"># Size of each buffer in bytes.</span></span><br><span class="line">server.undertow.direct-buffers= <span class="comment"># Allocate buffers outside the Java heap.</span></span><br><span class="line">server.undertow.io-threads= <span class="comment"># Number of I/O threads to create for the worker.</span></span><br><span class="line">server.undertow.max-http-post-size=0 <span class="comment"># Maximum size in bytes of the HTTP post content.</span></span><br><span class="line">server.undertow.worker-threads= <span class="comment"># Number of worker threads.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># FREEMARKER (FreeMarkerAutoConfiguration)</span></span><br><span class="line">spring.freemarker.allow-request-override=<span class="literal">false</span> <span class="comment"># Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.</span></span><br><span class="line">spring.freemarker.allow-session-override=<span class="literal">false</span> <span class="comment"># Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.</span></span><br><span class="line">spring.freemarker.cache=<span class="literal">false</span> <span class="comment"># Enable template caching.</span></span><br><span class="line">spring.freemarker.charset=UTF-8 <span class="comment"># Template encoding.</span></span><br><span class="line">spring.freemarker.check-template-location=<span class="literal">true</span> <span class="comment"># Check that the templates location exists.</span></span><br><span class="line">spring.freemarker.content-type=text/html <span class="comment"># Content-Type value.</span></span><br><span class="line">spring.freemarker.enabled=<span class="literal">true</span> <span class="comment"># Enable MVC view resolution for this technology.</span></span><br><span class="line">spring.freemarker.expose-request-attributes=<span class="literal">false</span> <span class="comment"># Set whether all request attributes should be added to the model prior to merging with the template.</span></span><br><span class="line">spring.freemarker.expose-session-attributes=<span class="literal">false</span> <span class="comment"># Set whether all HttpSession attributes should be added to the model prior to merging with the template.</span></span><br><span class="line">spring.freemarker.expose-spring-macro-helpers=<span class="literal">true</span> <span class="comment"># Set whether to expose a RequestContext for use by Spring's macro library, under the name "springMacroRequestContext".</span></span><br><span class="line">spring.freemarker.prefer-file-system-access=<span class="literal">true</span> <span class="comment"># Prefer file system access for template loading. File system access enables hot detection of template changes.</span></span><br><span class="line">spring.freemarker.prefix= <span class="comment"># Prefix that gets prepended to view names when building a URL.</span></span><br><span class="line">spring.freemarker.request-context-attribute= <span class="comment"># Name of the RequestContext attribute for all views.</span></span><br><span class="line">spring.freemarker.settings.*= <span class="comment"># Well-known FreeMarker keys which will be passed to FreeMarker's Configuration.</span></span><br><span class="line">spring.freemarker.suffix=.ftl <span class="comment"># Suffix that gets appended to view names when building a URL.</span></span><br><span class="line">spring.freemarker.template-loader-path=classpath:/templates/ <span class="comment"># Comma-separated list of template paths.</span></span><br><span class="line">spring.freemarker.view-names= <span class="comment"># White list of view names that can be resolved.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># GROOVY TEMPLATES (GroovyTemplateAutoConfiguration)</span></span><br><span class="line">spring.groovy.template.allow-request-override=<span class="literal">false</span> <span class="comment"># Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.</span></span><br><span class="line">spring.groovy.template.allow-session-override=<span class="literal">false</span> <span class="comment"># Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.</span></span><br><span class="line">spring.groovy.template.cache= <span class="comment"># Enable template caching.</span></span><br><span class="line">spring.groovy.template.charset=UTF-8 <span class="comment"># Template encoding.</span></span><br><span class="line">spring.groovy.template.check-template-location=<span class="literal">true</span> <span class="comment"># Check that the templates location exists.</span></span><br><span class="line">spring.groovy.template.configuration.*= <span class="comment"># See GroovyMarkupConfigurer</span></span><br><span class="line">spring.groovy.template.content-type=<span class="built_in">test</span>/html <span class="comment"># Content-Type value.</span></span><br><span class="line">spring.groovy.template.enabled=<span class="literal">true</span> <span class="comment"># Enable MVC view resolution for this technology.</span></span><br><span class="line">spring.groovy.template.expose-request-attributes=<span class="literal">false</span> <span class="comment"># Set whether all request attributes should be added to the model prior to merging with the template.</span></span><br><span class="line">spring.groovy.template.expose-session-attributes=<span class="literal">false</span> <span class="comment"># Set whether all HttpSession attributes should be added to the model prior to merging with the template.</span></span><br><span class="line">spring.groovy.template.expose-spring-macro-helpers=<span class="literal">true</span> <span class="comment"># Set whether to expose a RequestContext for use by Spring's macro library, under the name "springMacroRequestContext".</span></span><br><span class="line">spring.groovy.template.prefix= <span class="comment"># Prefix that gets prepended to view names when building a URL.</span></span><br><span class="line">spring.groovy.template.request-context-attribute= <span class="comment"># Name of the RequestContext attribute for all views.</span></span><br><span class="line">spring.groovy.template.resource-loader-path=classpath:/templates/ <span class="comment"># Template path.</span></span><br><span class="line">spring.groovy.template.suffix=.tpl <span class="comment"># Suffix that gets appended to view names when building a URL.</span></span><br><span class="line">spring.groovy.template.view-names= <span class="comment"># White list of view names that can be resolved.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SPRING HATEOAS (HateoasProperties)</span></span><br><span class="line">spring.hateoas.use-hal-as-default-json-media-type=<span class="literal">true</span> <span class="comment"># Specify if application/hal+json responses should be sent to requests that accept application/json.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># HTTP message conversion</span></span><br><span class="line">spring.http.converters.preferred-json-mapper=jackson <span class="comment"># Preferred JSON mapper to use for HTTP message conversion. Set to "gson" to force the use of Gson when both it and Jackson are on the classpath.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># HTTP encoding (HttpEncodingProperties)</span></span><br><span class="line">spring.http.encoding.charset=UTF-8 <span class="comment"># Charset of HTTP requests and responses. Added to the "Content-Type" header if not set explicitly.</span></span><br><span class="line">spring.http.encoding.enabled=<span class="literal">true</span> <span class="comment"># Enable http encoding support.</span></span><br><span class="line">spring.http.encoding.force= <span class="comment"># Force the encoding to the configured charset on HTTP requests and responses.</span></span><br><span class="line">spring.http.encoding.force-request= <span class="comment"># Force the encoding to the configured charset on HTTP requests. Defaults to true when "force" has not been specified.</span></span><br><span class="line">spring.http.encoding.force-response= <span class="comment"># Force the encoding to the configured charset on HTTP responses.</span></span><br><span class="line">spring.http.encoding.mapping= <span class="comment"># Locale to Encoding mapping.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MULTIPART (MultipartProperties)</span></span><br><span class="line">spring.http.multipart.enabled=<span class="literal">true</span> <span class="comment"># Enable support of multi-part uploads.</span></span><br><span class="line">spring.http.multipart.file-size-threshold=0 <span class="comment"># Threshold after which files will be written to disk. Values can use the suffixed "MB" or "KB" to indicate a Megabyte or Kilobyte size.</span></span><br><span class="line">spring.http.multipart.location= <span class="comment"># Intermediate location of uploaded files.</span></span><br><span class="line">spring.http.multipart.max-file-size=1MB <span class="comment"># Max file size. Values can use the suffixed "MB" or "KB" to indicate a Megabyte or Kilobyte size.</span></span><br><span class="line">spring.http.multipart.max-request-size=10MB <span class="comment"># Max request size. Values can use the suffixed "MB" or "KB" to indicate a Megabyte or Kilobyte size.</span></span><br><span class="line">spring.http.multipart.resolve-lazily=<span class="literal">false</span> <span class="comment"># Whether to resolve the multipart request lazily at the time of file or parameter access.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># JACKSON (JacksonProperties)</span></span><br><span class="line">spring.jackson.date-format= <span class="comment"># Date format string or a fully-qualified date format class name. For instance `yyyy-MM-dd HH:mm:ss`.</span></span><br><span class="line">spring.jackson.default-property-inclusion= <span class="comment"># Controls the inclusion of properties during serialization.</span></span><br><span class="line">spring.jackson.deserialization.*= <span class="comment"># Jackson on/off features that affect the way Java objects are deserialized.</span></span><br><span class="line">spring.jackson.generator.*= <span class="comment"># Jackson on/off features for generators.</span></span><br><span class="line">spring.jackson.joda-date-time-format= <span class="comment"># Joda date time format string. If not configured, "date-format" will be used as a fallback if it is configured with a format string.</span></span><br><span class="line">spring.jackson.locale= <span class="comment"># Locale used for formatting.</span></span><br><span class="line">spring.jackson.mapper.*= <span class="comment"># Jackson general purpose on/off features.</span></span><br><span class="line">spring.jackson.parser.*= <span class="comment"># Jackson on/off features for parsers.</span></span><br><span class="line">spring.jackson.property-naming-strategy= <span class="comment"># One of the constants on Jackson's PropertyNamingStrategy. Can also be a fully-qualified class name of a PropertyNamingStrategy subclass.</span></span><br><span class="line">spring.jackson.serialization.*= <span class="comment"># Jackson on/off features that affect the way Java objects are serialized.</span></span><br><span class="line">spring.jackson.time-zone= <span class="comment"># Time zone used when formatting dates. For instance `America/Los_Angeles`</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># JERSEY (JerseyProperties)</span></span><br><span class="line">spring.jersey.application-path= <span class="comment"># Path that serves as the base URI for the application. Overrides the value of "@ApplicationPath" if specified.</span></span><br><span class="line">spring.jersey.filter.order=0 <span class="comment"># Jersey filter chain order.</span></span><br><span class="line">spring.jersey.init.*= <span class="comment"># Init parameters to pass to Jersey via the servlet or filter.</span></span><br><span class="line">spring.jersey.servlet.load-on-startup=-1 <span class="comment"># Load on startup priority of the Jersey servlet.</span></span><br><span class="line">spring.jersey.type=servlet <span class="comment"># Jersey integration type.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SPRING LDAP (LdapProperties)</span></span><br><span class="line">spring.ldap.urls= <span class="comment"># LDAP URLs of the server.</span></span><br><span class="line">spring.ldap.base= <span class="comment"># Base suffix from which all operations should originate.</span></span><br><span class="line">spring.ldap.username= <span class="comment"># Login user of the server.</span></span><br><span class="line">spring.ldap.password= <span class="comment"># Login password of the server.</span></span><br><span class="line">spring.ldap.base-environment.*= <span class="comment"># LDAP specification settings.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># EMBEDDED LDAP (EmbeddedLdapProperties)</span></span><br><span class="line">spring.ldap.embedded.base-dn= <span class="comment"># The base DN</span></span><br><span class="line">spring.ldap.embedded.credential.username= <span class="comment"># Embedded LDAP username.</span></span><br><span class="line">spring.ldap.embedded.credential.password= <span class="comment"># Embedded LDAP password.</span></span><br><span class="line">spring.ldap.embedded.ldif=classpath:schema.ldif <span class="comment"># Schema (LDIF) script resource reference.</span></span><br><span class="line">spring.ldap.embedded.port= <span class="comment"># Embedded LDAP port.</span></span><br><span class="line">spring.ldap.embedded.validation.enabled=<span class="literal">true</span> <span class="comment"># Enable LDAP schema validation.</span></span><br><span class="line">spring.ldap.embedded.validation.schema= <span class="comment"># Path to the custom schema.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SPRING MOBILE DEVICE VIEWS (DeviceDelegatingViewResolverAutoConfiguration)</span></span><br><span class="line">spring.mobile.devicedelegatingviewresolver.enable-fallback=<span class="literal">false</span> <span class="comment"># Enable support for fallback resolution.</span></span><br><span class="line">spring.mobile.devicedelegatingviewresolver.enabled=<span class="literal">false</span> <span class="comment"># Enable device view resolver.</span></span><br><span class="line">spring.mobile.devicedelegatingviewresolver.mobile-prefix=mobile/ <span class="comment"># Prefix that gets prepended to view names for mobile devices.</span></span><br><span class="line">spring.mobile.devicedelegatingviewresolver.mobile-suffix= <span class="comment"># Suffix that gets appended to view names for mobile devices.</span></span><br><span class="line">spring.mobile.devicedelegatingviewresolver.normal-prefix= <span class="comment"># Prefix that gets prepended to view names for normal devices.</span></span><br><span class="line">spring.mobile.devicedelegatingviewresolver.normal-suffix= <span class="comment"># Suffix that gets appended to view names for normal devices.</span></span><br><span class="line">spring.mobile.devicedelegatingviewresolver.tablet-prefix=tablet/ <span class="comment"># Prefix that gets prepended to view names for tablet devices.</span></span><br><span class="line">spring.mobile.devicedelegatingviewresolver.tablet-suffix= <span class="comment"># Suffix that gets appended to view names for tablet devices.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SPRING MOBILE SITE PREFERENCE (SitePreferenceAutoConfiguration)</span></span><br><span class="line">spring.mobile.sitepreference.enabled=<span class="literal">true</span> <span class="comment"># Enable SitePreferenceHandler.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MUSTACHE TEMPLATES (MustacheAutoConfiguration)</span></span><br><span class="line">spring.mustache.allow-request-override= <span class="comment"># Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.</span></span><br><span class="line">spring.mustache.allow-session-override= <span class="comment"># Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.</span></span><br><span class="line">spring.mustache.cache= <span class="comment"># Enable template caching.</span></span><br><span class="line">spring.mustache.charset= <span class="comment"># Template encoding.</span></span><br><span class="line">spring.mustache.check-template-location= <span class="comment"># Check that the templates location exists.</span></span><br><span class="line">spring.mustache.content-type= <span class="comment"># Content-Type value.</span></span><br><span class="line">spring.mustache.enabled= <span class="comment"># Enable MVC view resolution for this technology.</span></span><br><span class="line">spring.mustache.expose-request-attributes= <span class="comment"># Set whether all request attributes should be added to the model prior to merging with the template.</span></span><br><span class="line">spring.mustache.expose-session-attributes= <span class="comment"># Set whether all HttpSession attributes should be added to the model prior to merging with the template.</span></span><br><span class="line">spring.mustache.expose-spring-macro-helpers= <span class="comment"># Set whether to expose a RequestContext for use by Spring's macro library, under the name "springMacroRequestContext".</span></span><br><span class="line">spring.mustache.prefix=classpath:/templates/ <span class="comment"># Prefix to apply to template names.</span></span><br><span class="line">spring.mustache.request-context-attribute= <span class="comment"># Name of the RequestContext attribute for all views.</span></span><br><span class="line">spring.mustache.suffix=.html <span class="comment"># Suffix to apply to template names.</span></span><br><span class="line">spring.mustache.view-names= <span class="comment"># White list of view names that can be resolved.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SPRING MVC (WebMvcProperties)</span></span><br><span class="line">spring.mvc.async.request-timeout= <span class="comment"># Amount of time (in milliseconds) before asynchronous request handling times out.</span></span><br><span class="line">spring.mvc.date-format= <span class="comment"># Date format to use. For instance `dd/MM/yyyy`.</span></span><br><span class="line">spring.mvc.dispatch-trace-request=<span class="literal">false</span> <span class="comment"># Dispatch TRACE requests to the FrameworkServlet doService method.</span></span><br><span class="line">spring.mvc.dispatch-options-request=<span class="literal">true</span> <span class="comment"># Dispatch OPTIONS requests to the FrameworkServlet doService method.</span></span><br><span class="line">spring.mvc.favicon.enabled=<span class="literal">true</span> <span class="comment"># Enable resolution of favicon.ico.</span></span><br><span class="line">spring.mvc.formcontent.putfilter.enabled=<span class="literal">true</span> <span class="comment"># Enable Spring's HttpPutFormContentFilter.</span></span><br><span class="line">spring.mvc.ignore-default-model-on-redirect=<span class="literal">true</span> <span class="comment"># If the content of the "default" model should be ignored during redirect scenarios.</span></span><br><span class="line">spring.mvc.locale= <span class="comment"># Locale to use. By default, this locale is overridden by the "Accept-Language" header.</span></span><br><span class="line">spring.mvc.locale-resolver=accept-header <span class="comment"># Define how the locale should be resolved.</span></span><br><span class="line">spring.mvc.log-resolved-exception=<span class="literal">false</span> <span class="comment"># Enable warn logging of exceptions resolved by a "HandlerExceptionResolver".</span></span><br><span class="line">spring.mvc.media-types.*= <span class="comment"># Maps file extensions to media types for content negotiation.</span></span><br><span class="line">spring.mvc.message-codes-resolver-format= <span class="comment"># Formatting strategy for message codes. For instance `PREFIX_ERROR_CODE`.</span></span><br><span class="line">spring.mvc.servlet.load-on-startup=-1 <span class="comment"># Load on startup priority of the Spring Web Services servlet.</span></span><br><span class="line">spring.mvc.static-path-pattern=/** <span class="comment"># Path pattern used for static resources.</span></span><br><span class="line">spring.mvc.throw-exception-if-no-handler-found=<span class="literal">false</span> <span class="comment"># If a "NoHandlerFoundException" should be thrown if no Handler was found to process a request.</span></span><br><span class="line">spring.mvc.view.prefix= <span class="comment"># Spring MVC view prefix.</span></span><br><span class="line">spring.mvc.view.suffix= <span class="comment"># Spring MVC view suffix.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SPRING RESOURCES HANDLING (ResourceProperties)</span></span><br><span class="line">spring.resources.add-mappings=<span class="literal">true</span> <span class="comment"># Enable default resource handling.</span></span><br><span class="line">spring.resources.cache-period= <span class="comment"># Cache period for the resources served by the resource handler, in seconds.</span></span><br><span class="line">spring.resources.chain.cache=<span class="literal">true</span> <span class="comment"># Enable caching in the Resource chain.</span></span><br><span class="line">spring.resources.chain.enabled= <span class="comment"># Enable the Spring Resource Handling chain. Disabled by default unless at least one strategy has been enabled.</span></span><br><span class="line">spring.resources.chain.gzipped=<span class="literal">false</span> <span class="comment"># Enable resolution of already gzipped resources.</span></span><br><span class="line">spring.resources.chain.html-application-cache=<span class="literal">false</span> <span class="comment"># Enable HTML5 application cache manifest rewriting.</span></span><br><span class="line">spring.resources.chain.strategy.content.enabled=<span class="literal">false</span> <span class="comment"># Enable the content Version Strategy.</span></span><br><span class="line">spring.resources.chain.strategy.content.paths=/** <span class="comment"># Comma-separated list of patterns to apply to the Version Strategy.</span></span><br><span class="line">spring.resources.chain.strategy.fixed.enabled=<span class="literal">false</span> <span class="comment"># Enable the fixed Version Strategy.</span></span><br><span class="line">spring.resources.chain.strategy.fixed.paths=/** <span class="comment"># Comma-separated list of patterns to apply to the Version Strategy.</span></span><br><span class="line">spring.resources.chain.strategy.fixed.version= <span class="comment"># Version string to use for the Version Strategy.</span></span><br><span class="line">spring.resources.static-locations=classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/ <span class="comment"># Locations of static resources.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SPRING SESSION (SessionProperties)</span></span><br><span class="line">spring.session.hazelcast.flush-mode=on-save <span class="comment"># Sessions flush mode.</span></span><br><span class="line">spring.session.hazelcast.map-name=spring:session:sessions <span class="comment"># Name of the map used to store sessions.</span></span><br><span class="line">spring.session.jdbc.initializer.enabled= <span class="comment"># Create the required session tables on startup if necessary. Enabled automatically if the default table name is set or a custom schema is configured.</span></span><br><span class="line">spring.session.jdbc.schema=classpath:org/springframework/session/jdbc/schema-@@platform@@.sql <span class="comment"># Path to the SQL file to use to initialize the database schema.</span></span><br><span class="line">spring.session.jdbc.table-name=SPRING_SESSION <span class="comment"># Name of database table used to store sessions.</span></span><br><span class="line">spring.session.mongo.collection-name=sessions <span class="comment"># Collection name used to store sessions.</span></span><br><span class="line">spring.session.redis.flush-mode=on-save <span class="comment"># Sessions flush mode.</span></span><br><span class="line">spring.session.redis.namespace= <span class="comment"># Namespace for keys used to store sessions.</span></span><br><span class="line">spring.session.store-type= <span class="comment"># Session store type.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SPRING SOCIAL (SocialWebAutoConfiguration)</span></span><br><span class="line">spring.social.auto-connection-views=<span class="literal">false</span> <span class="comment"># Enable the connection status view for supported providers.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SPRING SOCIAL FACEBOOK (FacebookAutoConfiguration)</span></span><br><span class="line">spring.social.facebook.app-id= <span class="comment"># your application's Facebook App ID</span></span><br><span class="line">spring.social.facebook.app-secret= <span class="comment"># your application's Facebook App Secret</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SPRING SOCIAL LINKEDIN (LinkedInAutoConfiguration)</span></span><br><span class="line">spring.social.linkedin.app-id= <span class="comment"># your application's LinkedIn App ID</span></span><br><span class="line">spring.social.linkedin.app-secret= <span class="comment"># your application's LinkedIn App Secret</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SPRING SOCIAL TWITTER (TwitterAutoConfiguration)</span></span><br><span class="line">spring.social.twitter.app-id= <span class="comment"># your application's Twitter App ID</span></span><br><span class="line">spring.social.twitter.app-secret= <span class="comment"># your application's Twitter App Secret</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># THYMELEAF (ThymeleafAutoConfiguration)</span></span><br><span class="line">spring.thymeleaf.cache=<span class="literal">true</span> <span class="comment"># Enable template caching.</span></span><br><span class="line">spring.thymeleaf.check-template=<span class="literal">true</span> <span class="comment"># Check that the template exists before rendering it.</span></span><br><span class="line">spring.thymeleaf.check-template-location=<span class="literal">true</span> <span class="comment"># Check that the templates location exists.</span></span><br><span class="line">spring.thymeleaf.content-type=text/html <span class="comment"># Content-Type value.</span></span><br><span class="line">spring.thymeleaf.enabled=<span class="literal">true</span> <span class="comment"># Enable MVC Thymeleaf view resolution.</span></span><br><span class="line">spring.thymeleaf.encoding=UTF-8 <span class="comment"># Template encoding.</span></span><br><span class="line">spring.thymeleaf.excluded-view-names= <span class="comment"># Comma-separated list of view names that should be excluded from resolution.</span></span><br><span class="line">spring.thymeleaf.mode=HTML5 <span class="comment"># Template mode to be applied to templates. See also StandardTemplateModeHandlers.</span></span><br><span class="line">spring.thymeleaf.prefix=classpath:/templates/ <span class="comment"># Prefix that gets prepended to view names when building a URL.</span></span><br><span class="line">spring.thymeleaf.suffix=.html <span class="comment"># Suffix that gets appended to view names when building a URL.</span></span><br><span class="line">spring.thymeleaf.template-resolver-order= <span class="comment"># Order of the template resolver in the chain.</span></span><br><span class="line">spring.thymeleaf.view-names= <span class="comment"># Comma-separated list of view names that can be resolved.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SPRING WEB SERVICES (WebServicesProperties)</span></span><br><span class="line">spring.webservices.path=/services <span class="comment"># Path that serves as the base URI for the services.</span></span><br><span class="line">spring.webservices.servlet.init= <span class="comment"># Servlet init parameters to pass to Spring Web Services.</span></span><br><span class="line">spring.webservices.servlet.load-on-startup=-1 <span class="comment"># Load on startup priority of the Spring Web Services servlet.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------------------</span></span><br><span class="line"><span class="comment"># SECURITY PROPERTIES</span></span><br><span class="line"><span class="comment"># ----------------------------------------</span></span><br><span class="line"><span class="comment"># SECURITY (SecurityProperties)</span></span><br><span class="line">security.basic.authorize-mode=role <span class="comment"># Security authorize mode to apply.</span></span><br><span class="line">security.basic.enabled=<span class="literal">true</span> <span class="comment"># Enable basic authentication.</span></span><br><span class="line">security.basic.path=/** <span class="comment"># Comma-separated list of paths to secure.</span></span><br><span class="line">security.basic.realm=Spring <span class="comment"># HTTP basic realm name.</span></span><br><span class="line">security.enable-csrf=<span class="literal">false</span> <span class="comment"># Enable Cross Site Request Forgery support.</span></span><br><span class="line">security.filter-order=0 <span class="comment"># Security filter chain order.</span></span><br><span class="line">security.filter-dispatcher-types=ASYNC, FORWARD, INCLUDE, REQUEST <span class="comment"># Security filter chain dispatcher types.</span></span><br><span class="line">security.headers.cache=<span class="literal">true</span> <span class="comment"># Enable cache control HTTP headers.</span></span><br><span class="line">security.headers.content-security-policy= <span class="comment"># Value for content security policy header.</span></span><br><span class="line">security.headers.content-security-policy-mode=default <span class="comment"># Content security policy mode.</span></span><br><span class="line">security.headers.content-type=<span class="literal">true</span> <span class="comment"># Enable "X-Content-Type-Options" header.</span></span><br><span class="line">security.headers.frame=<span class="literal">true</span> <span class="comment"># Enable "X-Frame-Options" header.</span></span><br><span class="line">security.headers.hsts=all <span class="comment"># HTTP Strict Transport Security (HSTS) mode (none, domain, all).</span></span><br><span class="line">security.headers.xss=<span class="literal">true</span> <span class="comment"># Enable cross site scripting (XSS) protection.</span></span><br><span class="line">security.ignored= <span class="comment"># Comma-separated list of paths to exclude from the default secured paths.</span></span><br><span class="line">security.require-ssl=<span class="literal">false</span> <span class="comment"># Enable secure channel for all requests.</span></span><br><span class="line">security.sessions=stateless <span class="comment"># Session creation policy (always, never, if_required, stateless).</span></span><br><span class="line">security.user.name=user <span class="comment"># Default user name.</span></span><br><span class="line">security.user.password= <span class="comment"># Password for the default user name. A random password is logged on startup by default.</span></span><br><span class="line">security.user.role=USER <span class="comment"># Granted roles for the default user name.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SECURITY OAUTH2 CLIENT (OAuth2ClientProperties)</span></span><br><span class="line">security.oauth2.client.client-id= <span class="comment"># OAuth2 client id.</span></span><br><span class="line">security.oauth2.client.client-secret= <span class="comment"># OAuth2 client secret. A random secret is generated by default</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SECURITY OAUTH2 RESOURCES (ResourceServerProperties)</span></span><br><span class="line">security.oauth2.resource.filter-order= <span class="comment"># The order of the filter chain used to authenticate tokens.</span></span><br><span class="line">security.oauth2.resource.id= <span class="comment"># Identifier of the resource.</span></span><br><span class="line">security.oauth2.resource.jwt.key-uri= <span class="comment"># The URI of the JWT token. Can be set if the value is not available and the key is public.</span></span><br><span class="line">security.oauth2.resource.jwt.key-value= <span class="comment"># The verification key of the JWT token. Can either be a symmetric secret or PEM-encoded RSA public key.</span></span><br><span class="line">security.oauth2.resource.jwk.key-set-uri= <span class="comment"># The URI for getting the set of keys that can be used to validate the token.</span></span><br><span class="line">security.oauth2.resource.prefer-token-info=<span class="literal">true</span> <span class="comment"># Use the token info, can be set to false to use the user info.</span></span><br><span class="line">security.oauth2.resource.service-id=resource <span class="comment">#</span></span><br><span class="line">security.oauth2.resource.token-info-uri= <span class="comment"># URI of the token decoding endpoint.</span></span><br><span class="line">security.oauth2.resource.token-type= <span class="comment"># The token type to send when using the userInfoUri.</span></span><br><span class="line">security.oauth2.resource.user-info-uri= <span class="comment"># URI of the user endpoint.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SECURITY OAUTH2 SSO (OAuth2SsoProperties)</span></span><br><span class="line">security.oauth2.sso.filter-order= <span class="comment"># Filter order to apply if not providing an explicit WebSecurityConfigurerAdapter</span></span><br><span class="line">security.oauth2.sso.login-path=/login <span class="comment"># Path to the login page, i.e. the one that triggers the redirect to the OAuth2 Authorization Server</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------------------</span></span><br><span class="line"><span class="comment"># DATA PROPERTIES</span></span><br><span class="line"><span class="comment"># ----------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># FLYWAY (FlywayProperties)</span></span><br><span class="line">flyway.baseline-description= <span class="comment">#</span></span><br><span class="line">flyway.baseline-version=1 <span class="comment"># version to start migration</span></span><br><span class="line">flyway.baseline-on-migrate= <span class="comment">#</span></span><br><span class="line">flyway.check-location=<span class="literal">false</span> <span class="comment"># Check that migration scripts location exists.</span></span><br><span class="line">flyway.clean-on-validation-error= <span class="comment">#</span></span><br><span class="line">flyway.enabled=<span class="literal">true</span> <span class="comment"># Enable flyway.</span></span><br><span class="line">flyway.encoding= <span class="comment">#</span></span><br><span class="line">flyway.ignore-failed-future-migration= <span class="comment">#</span></span><br><span class="line">flyway.init-sqls= <span class="comment"># SQL statements to execute to initialize a connection immediately after obtaining it.</span></span><br><span class="line">flyway.locations=classpath:db/migration <span class="comment"># locations of migrations scripts</span></span><br><span class="line">flyway.out-of-order= <span class="comment">#</span></span><br><span class="line">flyway.password= <span class="comment"># JDBC password if you want Flyway to create its own DataSource</span></span><br><span class="line">flyway.placeholder-prefix= <span class="comment">#</span></span><br><span class="line">flyway.placeholder-replacement= <span class="comment">#</span></span><br><span class="line">flyway.placeholder-suffix= <span class="comment">#</span></span><br><span class="line">flyway.placeholders.*= <span class="comment">#</span></span><br><span class="line">flyway.schemas= <span class="comment"># schemas to update</span></span><br><span class="line">flyway.sql-migration-prefix=V <span class="comment">#</span></span><br><span class="line">flyway.sql-migration-separator= <span class="comment">#</span></span><br><span class="line">flyway.sql-migration-suffix=.sql <span class="comment">#</span></span><br><span class="line">flyway.table= <span class="comment">#</span></span><br><span class="line">flyway.url= <span class="comment"># JDBC url of the database to migrate. If not set, the primary configured data source is used.</span></span><br><span class="line">flyway.user= <span class="comment"># Login user of the database to migrate.</span></span><br><span class="line">flyway.validate-on-migrate= <span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># LIQUIBASE (LiquibaseProperties)</span></span><br><span class="line">liquibase.change-log=classpath:/db/changelog/db.changelog-master.yaml <span class="comment"># Change log configuration path.</span></span><br><span class="line">liquibase.check-change-log-location=<span class="literal">true</span> <span class="comment"># Check the change log location exists.</span></span><br><span class="line">liquibase.contexts= <span class="comment"># Comma-separated list of runtime contexts to use.</span></span><br><span class="line">liquibase.default-schema= <span class="comment"># Default database schema.</span></span><br><span class="line">liquibase.drop-first=<span class="literal">false</span> <span class="comment"># Drop the database schema first.</span></span><br><span class="line">liquibase.enabled=<span class="literal">true</span> <span class="comment"># Enable liquibase support.</span></span><br><span class="line">liquibase.labels= <span class="comment"># Comma-separated list of runtime labels to use.</span></span><br><span class="line">liquibase.parameters.*= <span class="comment"># Change log parameters.</span></span><br><span class="line">liquibase.password= <span class="comment"># Login password of the database to migrate.</span></span><br><span class="line">liquibase.rollback-file= <span class="comment"># File to which rollback SQL will be written when an update is performed.</span></span><br><span class="line">liquibase.url= <span class="comment"># JDBC url of the database to migrate. If not set, the primary configured data source is used.</span></span><br><span class="line">liquibase.user= <span class="comment"># Login user of the database to migrate.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># COUCHBASE (CouchbaseProperties)</span></span><br><span class="line">spring.couchbase.bootstrap-hosts= <span class="comment"># Couchbase nodes (host or IP address) to bootstrap from.</span></span><br><span class="line">spring.couchbase.bucket.name=default <span class="comment"># Name of the bucket to connect to.</span></span><br><span class="line">spring.couchbase.bucket.password=  <span class="comment"># Password of the bucket.</span></span><br><span class="line">spring.couchbase.env.endpoints.key-value=1 <span class="comment"># Number of sockets per node against the Key/value service.</span></span><br><span class="line">spring.couchbase.env.endpoints.query=1 <span class="comment"># Number of sockets per node against the Query (N1QL) service.</span></span><br><span class="line">spring.couchbase.env.endpoints.view=1 <span class="comment"># Number of sockets per node against the view service.</span></span><br><span class="line">spring.couchbase.env.ssl.enabled= <span class="comment"># Enable SSL support. Enabled automatically if a "keyStore" is provided unless specified otherwise.</span></span><br><span class="line">spring.couchbase.env.ssl.key-store= <span class="comment"># Path to the JVM key store that holds the certificates.</span></span><br><span class="line">spring.couchbase.env.ssl.key-store-password= <span class="comment"># Password used to access the key store.</span></span><br><span class="line">spring.couchbase.env.timeouts.connect=5000 <span class="comment"># Bucket connections timeout in milliseconds.</span></span><br><span class="line">spring.couchbase.env.timeouts.key-value=2500 <span class="comment"># Blocking operations performed on a specific key timeout in milliseconds.</span></span><br><span class="line">spring.couchbase.env.timeouts.query=7500 <span class="comment"># N1QL query operations timeout in milliseconds.</span></span><br><span class="line">spring.couchbase.env.timeouts.socket-connect=1000 <span class="comment"># Socket connect connections timeout in milliseconds.</span></span><br><span class="line">spring.couchbase.env.timeouts.view=7500 <span class="comment"># Regular and geospatial view operations timeout in milliseconds.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># DAO (PersistenceExceptionTranslationAutoConfiguration)</span></span><br><span class="line">spring.dao.exceptiontranslation.enabled=<span class="literal">true</span> <span class="comment"># Enable the PersistenceExceptionTranslationPostProcessor.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CASSANDRA (CassandraProperties)</span></span><br><span class="line">spring.data.cassandra.cluster-name= <span class="comment"># Name of the Cassandra cluster.</span></span><br><span class="line">spring.data.cassandra.compression=none <span class="comment"># Compression supported by the Cassandra binary protocol.</span></span><br><span class="line">spring.data.cassandra.connect-timeout-millis= <span class="comment"># Socket option: connection time out.</span></span><br><span class="line">spring.data.cassandra.consistency-level= <span class="comment"># Queries consistency level.</span></span><br><span class="line">spring.data.cassandra.contact-points=localhost <span class="comment"># Comma-separated list of cluster node addresses.</span></span><br><span class="line">spring.data.cassandra.fetch-size= <span class="comment"># Queries default fetch size.</span></span><br><span class="line">spring.data.cassandra.keyspace-name= <span class="comment"># Keyspace name to use.</span></span><br><span class="line">spring.data.cassandra.load-balancing-policy= <span class="comment"># Class name of the load balancing policy.</span></span><br><span class="line">spring.data.cassandra.port= <span class="comment"># Port of the Cassandra server.</span></span><br><span class="line">spring.data.cassandra.password= <span class="comment"># Login password of the server.</span></span><br><span class="line">spring.data.cassandra.read-timeout-millis= <span class="comment"># Socket option: read time out.</span></span><br><span class="line">spring.data.cassandra.reconnection-policy= <span class="comment"># Reconnection policy class.</span></span><br><span class="line">spring.data.cassandra.repositories.enabled= <span class="comment"># Enable Cassandra repositories.</span></span><br><span class="line">spring.data.cassandra.retry-policy= <span class="comment"># Class name of the retry policy.</span></span><br><span class="line">spring.data.cassandra.serial-consistency-level= <span class="comment"># Queries serial consistency level.</span></span><br><span class="line">spring.data.cassandra.schema-action=none <span class="comment"># Schema action to take at startup.</span></span><br><span class="line">spring.data.cassandra.ssl=<span class="literal">false</span> <span class="comment"># Enable SSL support.</span></span><br><span class="line">spring.data.cassandra.username= <span class="comment"># Login user of the server.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># DATA COUCHBASE (CouchbaseDataProperties)</span></span><br><span class="line">spring.data.couchbase.auto-index=<span class="literal">false</span> <span class="comment"># Automatically create views and indexes.</span></span><br><span class="line">spring.data.couchbase.consistency=<span class="built_in">read</span>-your-own-writes <span class="comment"># Consistency to apply by default on generated queries.</span></span><br><span class="line">spring.data.couchbase.repositories.enabled=<span class="literal">true</span> <span class="comment"># Enable Couchbase repositories.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ELASTICSEARCH (ElasticsearchProperties)</span></span><br><span class="line">spring.data.elasticsearch.cluster-name=elasticsearch <span class="comment"># Elasticsearch cluster name.</span></span><br><span class="line">spring.data.elasticsearch.cluster-nodes= <span class="comment"># Comma-separated list of cluster node addresses. If not specified, starts a client node.</span></span><br><span class="line">spring.data.elasticsearch.properties.*= <span class="comment"># Additional properties used to configure the client.</span></span><br><span class="line">spring.data.elasticsearch.repositories.enabled=<span class="literal">true</span> <span class="comment"># Enable Elasticsearch repositories.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># DATA LDAP</span></span><br><span class="line">spring.data.ldap.repositories.enabled=<span class="literal">true</span> <span class="comment"># Enable LDAP repositories.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MONGODB (MongoProperties)</span></span><br><span class="line">spring.data.mongodb.authentication-database= <span class="comment"># Authentication database name.</span></span><br><span class="line">spring.data.mongodb.database=<span class="built_in">test</span> <span class="comment"># Database name.</span></span><br><span class="line">spring.data.mongodb.field-naming-strategy= <span class="comment"># Fully qualified name of the FieldNamingStrategy to use.</span></span><br><span class="line">spring.data.mongodb.grid-fs-database= <span class="comment"># GridFS database name.</span></span><br><span class="line">spring.data.mongodb.host=localhost <span class="comment"># Mongo server host. Cannot be set with uri.</span></span><br><span class="line">spring.data.mongodb.password= <span class="comment"># Login password of the mongo server. Cannot be set with uri.</span></span><br><span class="line">spring.data.mongodb.port=27017 <span class="comment"># Mongo server port. Cannot be set with uri.</span></span><br><span class="line">spring.data.mongodb.repositories.enabled=<span class="literal">true</span> <span class="comment"># Enable Mongo repositories.</span></span><br><span class="line">spring.data.mongodb.uri=mongodb://localhost/<span class="built_in">test</span> <span class="comment"># Mongo database URI. Cannot be set with host, port and credentials.</span></span><br><span class="line">spring.data.mongodb.username= <span class="comment"># Login user of the mongo server. Cannot be set with uri.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># DATA REDIS</span></span><br><span class="line">spring.data.redis.repositories.enabled=<span class="literal">true</span> <span class="comment"># Enable Redis repositories.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># NEO4J (Neo4jProperties)</span></span><br><span class="line">spring.data.neo4j.compiler= <span class="comment"># Compiler to use.</span></span><br><span class="line">spring.data.neo4j.embedded.enabled=<span class="literal">true</span> <span class="comment"># Enable embedded mode if the embedded driver is available.</span></span><br><span class="line">spring.data.neo4j.open-in-view=<span class="literal">true</span> <span class="comment"># Register OpenSessionInViewInterceptor. Binds a Neo4j Session to the thread for the entire processing of the request.</span></span><br><span class="line">spring.data.neo4j.password= <span class="comment"># Login password of the server.</span></span><br><span class="line">spring.data.neo4j.repositories.enabled=<span class="literal">true</span> <span class="comment"># Enable Neo4j repositories.</span></span><br><span class="line">spring.data.neo4j.uri= <span class="comment"># URI used by the driver. Auto-detected by default.</span></span><br><span class="line">spring.data.neo4j.username= <span class="comment"># Login user of the server.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># DATA REST (RepositoryRestProperties)</span></span><br><span class="line">spring.data.rest.base-path= <span class="comment"># Base path to be used by Spring Data REST to expose repository resources.</span></span><br><span class="line">spring.data.rest.default-page-size= <span class="comment"># Default size of pages.</span></span><br><span class="line">spring.data.rest.detection-strategy=default <span class="comment"># Strategy to use to determine which repositories get exposed.</span></span><br><span class="line">spring.data.rest.enable-enum-translation= <span class="comment"># Enable enum value translation via the Spring Data REST default resource bundle.</span></span><br><span class="line">spring.data.rest.limit-param-name= <span class="comment"># Name of the URL query string parameter that indicates how many results to return at once.</span></span><br><span class="line">spring.data.rest.max-page-size= <span class="comment"># Maximum size of pages.</span></span><br><span class="line">spring.data.rest.page-param-name= <span class="comment"># Name of the URL query string parameter that indicates what page to return.</span></span><br><span class="line">spring.data.rest.return-body-on-create= <span class="comment"># Return a response body after creating an entity.</span></span><br><span class="line">spring.data.rest.return-body-on-update= <span class="comment"># Return a response body after updating an entity.</span></span><br><span class="line">spring.data.rest.sort-param-name= <span class="comment"># Name of the URL query string parameter that indicates what direction to sort results.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SOLR (SolrProperties)</span></span><br><span class="line">spring.data.solr.host=http://127.0.0.1:8983/solr <span class="comment"># Solr host. Ignored if "zk-host" is set.</span></span><br><span class="line">spring.data.solr.repositories.enabled=<span class="literal">true</span> <span class="comment"># Enable Solr repositories.</span></span><br><span class="line">spring.data.solr.zk-host= <span class="comment"># ZooKeeper host address in the form HOST:PORT.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># DATASOURCE (DataSourceAutoConfiguration &amp; DataSourceProperties)</span></span><br><span class="line">spring.datasource.continue-on-error=<span class="literal">false</span> <span class="comment"># Do not stop if an error occurs while initializing the database.</span></span><br><span class="line">spring.datasource.data= <span class="comment"># Data (DML) script resource references.</span></span><br><span class="line">spring.datasource.data-username= <span class="comment"># User of the database to execute DML scripts (if different).</span></span><br><span class="line">spring.datasource.data-password= <span class="comment"># Password of the database to execute DML scripts (if different).</span></span><br><span class="line">spring.datasource.dbcp2.*= <span class="comment"># Commons DBCP2 specific settings</span></span><br><span class="line">spring.datasource.driver-class-name= <span class="comment"># Fully qualified name of the JDBC driver. Auto-detected based on the URL by default.</span></span><br><span class="line">spring.datasource.generate-unique-name=<span class="literal">false</span> <span class="comment"># Generate a random datasource name.</span></span><br><span class="line">spring.datasource.hikari.*= <span class="comment"># Hikari specific settings</span></span><br><span class="line">spring.datasource.initialize=<span class="literal">true</span> <span class="comment"># Populate the database using 'data.sql'.</span></span><br><span class="line">spring.datasource.jmx-enabled=<span class="literal">false</span> <span class="comment"># Enable JMX support (if provided by the underlying pool).</span></span><br><span class="line">spring.datasource.jndi-name= <span class="comment"># JNDI location of the datasource. Class, url, username &amp; password are ignored when set.</span></span><br><span class="line">spring.datasource.name=testdb <span class="comment"># Name of the datasource.</span></span><br><span class="line">spring.datasource.password= <span class="comment"># Login password of the database.</span></span><br><span class="line">spring.datasource.platform=all <span class="comment"># Platform to use in the DDL or DML scripts (e.g. schema-$&#123;platform&#125;.sql or data-$&#123;platform&#125;.sql).</span></span><br><span class="line">spring.datasource.schema= <span class="comment"># Schema (DDL) script resource references.</span></span><br><span class="line">spring.datasource.schema-username= <span class="comment"># User of the database to execute DDL scripts (if different).</span></span><br><span class="line">spring.datasource.schema-password= <span class="comment"># Password of the database to execute DDL scripts (if different).</span></span><br><span class="line">spring.datasource.separator=; <span class="comment"># Statement separator in SQL initialization scripts.</span></span><br><span class="line">spring.datasource.sql-script-encoding= <span class="comment"># SQL scripts encoding.</span></span><br><span class="line">spring.datasource.tomcat.*= <span class="comment"># Tomcat datasource specific settings</span></span><br><span class="line">spring.datasource.type= <span class="comment"># Fully qualified name of the connection pool implementation to use. By default, it is auto-detected from the classpath.</span></span><br><span class="line">spring.datasource.url= <span class="comment"># JDBC url of the database.</span></span><br><span class="line">spring.datasource.username= <span class="comment"># Login user of the database.</span></span><br><span class="line">spring.datasource.xa.data-source-class-name= <span class="comment"># XA datasource fully qualified name.</span></span><br><span class="line">spring.datasource.xa.properties= <span class="comment"># Properties to pass to the XA data source.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># JEST (Elasticsearch HTTP client) (JestProperties)</span></span><br><span class="line">spring.elasticsearch.jest.connection-timeout=3000 <span class="comment"># Connection timeout in milliseconds.</span></span><br><span class="line">spring.elasticsearch.jest.multi-threaded=<span class="literal">true</span> <span class="comment"># Enable connection requests from multiple execution threads.</span></span><br><span class="line">spring.elasticsearch.jest.password= <span class="comment"># Login password.</span></span><br><span class="line">spring.elasticsearch.jest.proxy.host= <span class="comment"># Proxy host the HTTP client should use.</span></span><br><span class="line">spring.elasticsearch.jest.proxy.port= <span class="comment"># Proxy port the HTTP client should use.</span></span><br><span class="line">spring.elasticsearch.jest.read-timeout=3000 <span class="comment"># Read timeout in milliseconds.</span></span><br><span class="line">spring.elasticsearch.jest.uris=http://localhost:9200 <span class="comment"># Comma-separated list of the Elasticsearch instances to use.</span></span><br><span class="line">spring.elasticsearch.jest.username= <span class="comment"># Login user.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># H2 Web Console (H2ConsoleProperties)</span></span><br><span class="line">spring.h2.console.enabled=<span class="literal">false</span> <span class="comment"># Enable the console.</span></span><br><span class="line">spring.h2.console.path=/h2-console <span class="comment"># Path at which the console will be available.</span></span><br><span class="line">spring.h2.console.settings.trace=<span class="literal">false</span> <span class="comment"># Enable trace output.</span></span><br><span class="line">spring.h2.console.settings.web-allow-others=<span class="literal">false</span> <span class="comment"># Enable remote access.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># JOOQ (JooqAutoConfiguration)</span></span><br><span class="line">spring.jooq.sql-dialect= <span class="comment"># SQLDialect JOOQ used when communicating with the configured datasource. For instance `POSTGRES`</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration)</span></span><br><span class="line">spring.data.jpa.repositories.enabled=<span class="literal">true</span> <span class="comment"># Enable JPA repositories.</span></span><br><span class="line">spring.jpa.database= <span class="comment"># Target database to operate on, auto-detected by default. Can be alternatively set using the "databasePlatform" property.</span></span><br><span class="line">spring.jpa.database-platform= <span class="comment"># Name of the target database to operate on, auto-detected by default. Can be alternatively set using the "Database" enum.</span></span><br><span class="line">spring.jpa.generate-ddl=<span class="literal">false</span> <span class="comment"># Initialize the schema on startup.</span></span><br><span class="line">spring.jpa.hibernate.ddl-auto= <span class="comment"># DDL mode. This is actually a shortcut for the "hibernate.hbm2ddl.auto" property. Default to "create-drop" when using an embedded database, "none" otherwise.</span></span><br><span class="line">spring.jpa.hibernate.naming.implicit-strategy= <span class="comment"># Hibernate 5 implicit naming strategy fully qualified name.</span></span><br><span class="line">spring.jpa.hibernate.naming.physical-strategy= <span class="comment"># Hibernate 5 physical naming strategy fully qualified name.</span></span><br><span class="line">spring.jpa.hibernate.naming.strategy= <span class="comment"># Hibernate 4 naming strategy fully qualified name. Not supported with Hibernate 5.</span></span><br><span class="line">spring.jpa.hibernate.use-new-id-generator-mappings= <span class="comment"># Use Hibernate's newer IdentifierGenerator for AUTO, TABLE and SEQUENCE.</span></span><br><span class="line">spring.jpa.open-in-view=<span class="literal">true</span> <span class="comment"># Register OpenEntityManagerInViewInterceptor. Binds a JPA EntityManager to the thread for the entire processing of the request.</span></span><br><span class="line">spring.jpa.properties.*= <span class="comment"># Additional native properties to set on the JPA provider.</span></span><br><span class="line">spring.jpa.show-sql=<span class="literal">false</span> <span class="comment"># Enable logging of SQL statements.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># JTA (JtaAutoConfiguration)</span></span><br><span class="line">spring.jta.enabled=<span class="literal">true</span> <span class="comment"># Enable JTA support.</span></span><br><span class="line">spring.jta.log-dir= <span class="comment"># Transaction logs directory.</span></span><br><span class="line">spring.jta.transaction-manager-id= <span class="comment"># Transaction manager unique identifier.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ATOMIKOS (AtomikosProperties)</span></span><br><span class="line">spring.jta.atomikos.connectionfactory.borrow-connection-timeout=30 <span class="comment"># Timeout, in seconds, for borrowing connections from the pool.</span></span><br><span class="line">spring.jta.atomikos.connectionfactory.ignore-session-transacted-flag=<span class="literal">true</span> <span class="comment"># Whether or not to ignore the transacted flag when creating session.</span></span><br><span class="line">spring.jta.atomikos.connectionfactory.local-transaction-mode=<span class="literal">false</span> <span class="comment"># Whether or not local transactions are desired.</span></span><br><span class="line">spring.jta.atomikos.connectionfactory.maintenance-interval=60 <span class="comment"># The time, in seconds, between runs of the pool's maintenance thread.</span></span><br><span class="line">spring.jta.atomikos.connectionfactory.max-idle-time=60 <span class="comment"># The time, in seconds, after which connections are cleaned up from the pool.</span></span><br><span class="line">spring.jta.atomikos.connectionfactory.max-lifetime=0 <span class="comment"># The time, in seconds, that a connection can be pooled for before being destroyed. 0 denotes no limit.</span></span><br><span class="line">spring.jta.atomikos.connectionfactory.max-pool-size=1 <span class="comment"># The maximum size of the pool.</span></span><br><span class="line">spring.jta.atomikos.connectionfactory.min-pool-size=1 <span class="comment"># The minimum size of the pool.</span></span><br><span class="line">spring.jta.atomikos.connectionfactory.reap-timeout=0 <span class="comment"># The reap timeout, in seconds, for borrowed connections. 0 denotes no limit.</span></span><br><span class="line">spring.jta.atomikos.connectionfactory.unique-resource-name=jmsConnectionFactory <span class="comment"># The unique name used to identify the resource during recovery.</span></span><br><span class="line">spring.jta.atomikos.datasource.borrow-connection-timeout=30 <span class="comment"># Timeout, in seconds, for borrowing connections from the pool.</span></span><br><span class="line">spring.jta.atomikos.datasource.default-isolation-level= <span class="comment"># Default isolation level of connections provided by the pool.</span></span><br><span class="line">spring.jta.atomikos.datasource.login-timeout= <span class="comment"># Timeout, in seconds, for establishing a database connection.</span></span><br><span class="line">spring.jta.atomikos.datasource.maintenance-interval=60 <span class="comment"># The time, in seconds, between runs of the pool's maintenance thread.</span></span><br><span class="line">spring.jta.atomikos.datasource.max-idle-time=60 <span class="comment"># The time, in seconds, after which connections are cleaned up from the pool.</span></span><br><span class="line">spring.jta.atomikos.datasource.max-lifetime=0 <span class="comment"># The time, in seconds, that a connection can be pooled for before being destroyed. 0 denotes no limit.</span></span><br><span class="line">spring.jta.atomikos.datasource.max-pool-size=1 <span class="comment"># The maximum size of the pool.</span></span><br><span class="line">spring.jta.atomikos.datasource.min-pool-size=1 <span class="comment"># The minimum size of the pool.</span></span><br><span class="line">spring.jta.atomikos.datasource.reap-timeout=0 <span class="comment"># The reap timeout, in seconds, for borrowed connections. 0 denotes no limit.</span></span><br><span class="line">spring.jta.atomikos.datasource.test-query= <span class="comment"># SQL query or statement used to validate a connection before returning it.</span></span><br><span class="line">spring.jta.atomikos.datasource.unique-resource-name=dataSource <span class="comment"># The unique name used to identify the resource during recovery.</span></span><br><span class="line">spring.jta.atomikos.properties.checkpoint-interval=500 <span class="comment"># Interval between checkpoints.</span></span><br><span class="line">spring.jta.atomikos.properties.default-jta-timeout=10000 <span class="comment"># Default timeout for JTA transactions.</span></span><br><span class="line">spring.jta.atomikos.properties.enable-logging=<span class="literal">true</span> <span class="comment"># Enable disk logging.</span></span><br><span class="line">spring.jta.atomikos.properties.force-shutdown-on-vm-exit=<span class="literal">false</span> <span class="comment"># Specify if a VM shutdown should trigger forced shutdown of the transaction core.</span></span><br><span class="line">spring.jta.atomikos.properties.log-base-dir= <span class="comment"># Directory in which the log files should be stored.</span></span><br><span class="line">spring.jta.atomikos.properties.log-base-name=tmlog <span class="comment"># Transactions log file base name.</span></span><br><span class="line">spring.jta.atomikos.properties.max-actives=50 <span class="comment"># Maximum number of active transactions.</span></span><br><span class="line">spring.jta.atomikos.properties.max-timeout=300000 <span class="comment"># Maximum timeout (in milliseconds) that can be allowed for transactions.</span></span><br><span class="line">spring.jta.atomikos.properties.serial-jta-transactions=<span class="literal">true</span> <span class="comment"># Specify if sub-transactions should be joined when possible.</span></span><br><span class="line">spring.jta.atomikos.properties.service= <span class="comment"># Transaction manager implementation that should be started.</span></span><br><span class="line">spring.jta.atomikos.properties.threaded-two-phase-commit=<span class="literal">false</span> <span class="comment"># Use different (and concurrent) threads for two-phase commit on the participating resources.</span></span><br><span class="line">spring.jta.atomikos.properties.transaction-manager-unique-name= <span class="comment"># Transaction manager's unique name.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># BITRONIX</span></span><br><span class="line">spring.jta.bitronix.connectionfactory.acquire-increment=1 <span class="comment"># Number of connections to create when growing the pool.</span></span><br><span class="line">spring.jta.bitronix.connectionfactory.acquisition-interval=1 <span class="comment"># Time, in seconds, to wait before trying to acquire a connection again after an invalid connection was acquired.</span></span><br><span class="line">spring.jta.bitronix.connectionfactory.acquisition-timeout=30 <span class="comment"># Timeout, in seconds, for acquiring connections from the pool.</span></span><br><span class="line">spring.jta.bitronix.connectionfactory.allow-local-transactions=<span class="literal">true</span> <span class="comment"># Whether or not the transaction manager should allow mixing XA and non-XA transactions.</span></span><br><span class="line">spring.jta.bitronix.connectionfactory.apply-transaction-timeout=<span class="literal">false</span> <span class="comment"># Whether or not the transaction timeout should be set on the XAResource when it is enlisted.</span></span><br><span class="line">spring.jta.bitronix.connectionfactory.automatic-enlisting-enabled=<span class="literal">true</span> <span class="comment"># Whether or not resources should be enlisted and delisted automatically.</span></span><br><span class="line">spring.jta.bitronix.connectionfactory.cache-producers-consumers=<span class="literal">true</span> <span class="comment"># Whether or not produces and consumers should be cached.</span></span><br><span class="line">spring.jta.bitronix.connectionfactory.defer-connection-release=<span class="literal">true</span> <span class="comment"># Whether or not the provider can run many transactions on the same connection and supports transaction interleaving.</span></span><br><span class="line">spring.jta.bitronix.connectionfactory.ignore-recovery-failures=<span class="literal">false</span> <span class="comment"># Whether or not recovery failures should be ignored.</span></span><br><span class="line">spring.jta.bitronix.connectionfactory.max-idle-time=60 <span class="comment"># The time, in seconds, after which connections are cleaned up from the pool.</span></span><br><span class="line">spring.jta.bitronix.connectionfactory.max-pool-size=10 <span class="comment"># The maximum size of the pool. 0 denotes no limit.</span></span><br><span class="line">spring.jta.bitronix.connectionfactory.min-pool-size=0 <span class="comment"># The minimum size of the pool.</span></span><br><span class="line">spring.jta.bitronix.connectionfactory.password= <span class="comment"># The password to use to connect to the JMS provider.</span></span><br><span class="line">spring.jta.bitronix.connectionfactory.share-transaction-connections=<span class="literal">false</span> <span class="comment">#  Whether or not connections in the ACCESSIBLE state can be shared within the context of a transaction.</span></span><br><span class="line">spring.jta.bitronix.connectionfactory.test-connections=<span class="literal">true</span> <span class="comment"># Whether or not connections should be tested when acquired from the pool.</span></span><br><span class="line">spring.jta.bitronix.connectionfactory.two-pc-ordering-position=1 <span class="comment"># The position that this resource should take during two-phase commit (always first is Integer.MIN_VALUE, always last is Integer.MAX_VALUE).</span></span><br><span class="line">spring.jta.bitronix.connectionfactory.unique-name=jmsConnectionFactory <span class="comment"># The unique name used to identify the resource during recovery.</span></span><br><span class="line">spring.jta.bitronix.connectionfactory.use-tm-join=<span class="literal">true</span> Whether or not TMJOIN should be used when starting XAResources.</span><br><span class="line">spring.jta.bitronix.connectionfactory.user= <span class="comment"># The user to use to connect to the JMS provider.</span></span><br><span class="line">spring.jta.bitronix.datasource.acquire-increment=1 <span class="comment"># Number of connections to create when growing the pool.</span></span><br><span class="line">spring.jta.bitronix.datasource.acquisition-interval=1 <span class="comment"># Time, in seconds, to wait before trying to acquire a connection again after an invalid connection was acquired.</span></span><br><span class="line">spring.jta.bitronix.datasource.acquisition-timeout=30 <span class="comment"># Timeout, in seconds, for acquiring connections from the pool.</span></span><br><span class="line">spring.jta.bitronix.datasource.allow-local-transactions=<span class="literal">true</span> <span class="comment"># Whether or not the transaction manager should allow mixing XA and non-XA transactions.</span></span><br><span class="line">spring.jta.bitronix.datasource.apply-transaction-timeout=<span class="literal">false</span> <span class="comment"># Whether or not the transaction timeout should be set on the XAResource when it is enlisted.</span></span><br><span class="line">spring.jta.bitronix.datasource.automatic-enlisting-enabled=<span class="literal">true</span> <span class="comment"># Whether or not resources should be enlisted and delisted automatically.</span></span><br><span class="line">spring.jta.bitronix.datasource.cursor-holdability= <span class="comment"># The default cursor holdability for connections.</span></span><br><span class="line">spring.jta.bitronix.datasource.defer-connection-release=<span class="literal">true</span> <span class="comment"># Whether or not the database can run many transactions on the same connection and supports transaction interleaving.</span></span><br><span class="line">spring.jta.bitronix.datasource.enable-jdbc4-connection-test= <span class="comment"># Whether or not Connection.isValid() is called when acquiring a connection from the pool.</span></span><br><span class="line">spring.jta.bitronix.datasource.ignore-recovery-failures=<span class="literal">false</span> <span class="comment"># Whether or not recovery failures should be ignored.</span></span><br><span class="line">spring.jta.bitronix.datasource.isolation-level= <span class="comment"># The default isolation level for connections.</span></span><br><span class="line">spring.jta.bitronix.datasource.local-auto-commit= <span class="comment"># The default auto-commit mode for local transactions.</span></span><br><span class="line">spring.jta.bitronix.datasource.login-timeout= <span class="comment"># Timeout, in seconds, for establishing a database connection.</span></span><br><span class="line">spring.jta.bitronix.datasource.max-idle-time=60 <span class="comment"># The time, in seconds, after which connections are cleaned up from the pool.</span></span><br><span class="line">spring.jta.bitronix.datasource.max-pool-size=10 <span class="comment"># The maximum size of the pool. 0 denotes no limit.</span></span><br><span class="line">spring.jta.bitronix.datasource.min-pool-size=0 <span class="comment"># The minimum size of the pool.</span></span><br><span class="line">spring.jta.bitronix.datasource.prepared-statement-cache-size=0 <span class="comment"># The target size of the prepared statement cache. 0 disables the cache.</span></span><br><span class="line">spring.jta.bitronix.datasource.share-transaction-connections=<span class="literal">false</span> <span class="comment">#  Whether or not connections in the ACCESSIBLE state can be shared within the context of a transaction.</span></span><br><span class="line">spring.jta.bitronix.datasource.test-query= <span class="comment"># SQL query or statement used to validate a connection before returning it.</span></span><br><span class="line">spring.jta.bitronix.datasource.two-pc-ordering-position=1 <span class="comment"># The position that this resource should take during two-phase commit (always first is Integer.MIN_VALUE, always last is Integer.MAX_VALUE).</span></span><br><span class="line">spring.jta.bitronix.datasource.unique-name=dataSource <span class="comment"># The unique name used to identify the resource during recovery.</span></span><br><span class="line">spring.jta.bitronix.datasource.use-tm-join=<span class="literal">true</span> Whether or not TMJOIN should be used when starting XAResources.</span><br><span class="line">spring.jta.bitronix.properties.allow-multiple-lrc=<span class="literal">false</span> <span class="comment"># Allow multiple LRC resources to be enlisted into the same transaction.</span></span><br><span class="line">spring.jta.bitronix.properties.asynchronous2-pc=<span class="literal">false</span> <span class="comment"># Enable asynchronously execution of two phase commit.</span></span><br><span class="line">spring.jta.bitronix.properties.background-recovery-interval-seconds=60 <span class="comment"># Interval in seconds at which to run the recovery process in the background.</span></span><br><span class="line">spring.jta.bitronix.properties.current-node-only-recovery=<span class="literal">true</span> <span class="comment"># Recover only the current node.</span></span><br><span class="line">spring.jta.bitronix.properties.debug-zero-resource-transaction=<span class="literal">false</span> <span class="comment"># Log the creation and commit call stacks of transactions executed without a single enlisted resource.</span></span><br><span class="line">spring.jta.bitronix.properties.default-transaction-timeout=60 <span class="comment"># Default transaction timeout in seconds.</span></span><br><span class="line">spring.jta.bitronix.properties.disable-jmx=<span class="literal">false</span> <span class="comment"># Enable JMX support.</span></span><br><span class="line">spring.jta.bitronix.properties.exception-analyzer= <span class="comment"># Set the fully qualified name of the exception analyzer implementation to use.</span></span><br><span class="line">spring.jta.bitronix.properties.filter-log-status=<span class="literal">false</span> <span class="comment"># Enable filtering of logs so that only mandatory logs are written.</span></span><br><span class="line">spring.jta.bitronix.properties.force-batching-enabled=<span class="literal">true</span> <span class="comment">#  Set if disk forces are batched.</span></span><br><span class="line">spring.jta.bitronix.properties.forced-write-enabled=<span class="literal">true</span> <span class="comment"># Set if logs are forced to disk.</span></span><br><span class="line">spring.jta.bitronix.properties.graceful-shutdown-interval=60 <span class="comment"># Maximum amount of seconds the TM will wait for transactions to get done before aborting them at shutdown time.</span></span><br><span class="line">spring.jta.bitronix.properties.jndi-transaction-synchronization-registry-name= <span class="comment"># JNDI name of the TransactionSynchronizationRegistry.</span></span><br><span class="line">spring.jta.bitronix.properties.jndi-user-transaction-name= <span class="comment"># JNDI name of the UserTransaction.</span></span><br><span class="line">spring.jta.bitronix.properties.journal=disk <span class="comment"># Name of the journal. Can be 'disk', 'null' or a class name.</span></span><br><span class="line">spring.jta.bitronix.properties.log-part1-filename=btm1.tlog <span class="comment"># Name of the first fragment of the journal.</span></span><br><span class="line">spring.jta.bitronix.properties.log-part2-filename=btm2.tlog <span class="comment"># Name of the second fragment of the journal.</span></span><br><span class="line">spring.jta.bitronix.properties.max-log-size-in-mb=2 <span class="comment"># Maximum size in megabytes of the journal fragments.</span></span><br><span class="line">spring.jta.bitronix.properties.resource-configuration-filename= <span class="comment"># ResourceLoader configuration file name.</span></span><br><span class="line">spring.jta.bitronix.properties.server-id= <span class="comment"># ASCII ID that must uniquely identify this TM instance. Default to the machine's IP address.</span></span><br><span class="line">spring.jta.bitronix.properties.skip-corrupted-logs=<span class="literal">false</span> <span class="comment"># Skip corrupted transactions log entries.</span></span><br><span class="line">spring.jta.bitronix.properties.warn-about-zero-resource-transaction=<span class="literal">true</span> <span class="comment"># Log a warning for transactions executed without a single enlisted resource.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># NARAYANA (NarayanaProperties)</span></span><br><span class="line">spring.jta.narayana.default-timeout=60 <span class="comment"># Transaction timeout in seconds.</span></span><br><span class="line">spring.jta.narayana.expiry-scanners=com.arjuna.ats.internal.arjuna.recovery.ExpiredTransactionStatusManagerScanner <span class="comment"># Comma-separated list of expiry scanners.</span></span><br><span class="line">spring.jta.narayana.log-dir= <span class="comment"># Transaction object store directory.</span></span><br><span class="line">spring.jta.narayana.one-phase-commit=<span class="literal">true</span> <span class="comment"># Enable one phase commit optimisation.</span></span><br><span class="line">spring.jta.narayana.periodic-recovery-period=120 <span class="comment"># Interval in which periodic recovery scans are performed in seconds.</span></span><br><span class="line">spring.jta.narayana.recovery-backoff-period=10 <span class="comment"># Back off period between first and second phases of the recovery scan in seconds.</span></span><br><span class="line">spring.jta.narayana.recovery-db-pass= <span class="comment"># Database password to be used by recovery manager.</span></span><br><span class="line">spring.jta.narayana.recovery-db-user= <span class="comment"># Database username to be used by recovery manager.</span></span><br><span class="line">spring.jta.narayana.recovery-jms-pass= <span class="comment"># JMS password to be used by recovery manager.</span></span><br><span class="line">spring.jta.narayana.recovery-jms-user= <span class="comment"># JMS username to be used by recovery manager.</span></span><br><span class="line">spring.jta.narayana.recovery-modules= <span class="comment"># Comma-separated list of recovery modules.</span></span><br><span class="line">spring.jta.narayana.transaction-manager-id=1 <span class="comment"># Unique transaction manager id.</span></span><br><span class="line">spring.jta.narayana.xa-resource-orphan-filters= <span class="comment"># Comma-separated list of orphan filters.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># EMBEDDED MONGODB (EmbeddedMongoProperties)</span></span><br><span class="line">spring.mongodb.embedded.features=SYNC_DELAY <span class="comment"># Comma-separated list of features to enable.</span></span><br><span class="line">spring.mongodb.embedded.storage.database-dir= <span class="comment"># Directory used for data storage.</span></span><br><span class="line">spring.mongodb.embedded.storage.oplog-size= <span class="comment"># Maximum size of the oplog in megabytes.</span></span><br><span class="line">spring.mongodb.embedded.storage.repl-set-name= <span class="comment"># Name of the replica set.</span></span><br><span class="line">spring.mongodb.embedded.version=2.6.10 <span class="comment"># Version of Mongo to use.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># REDIS (RedisProperties)</span></span><br><span class="line">spring.redis.cluster.max-redirects= <span class="comment"># Maximum number of redirects to follow when executing commands across the cluster.</span></span><br><span class="line">spring.redis.cluster.nodes= <span class="comment"># Comma-separated list of "host:port" pairs to bootstrap from.</span></span><br><span class="line">spring.redis.database=0 <span class="comment"># Database index used by the connection factory.</span></span><br><span class="line">spring.redis.url= <span class="comment"># Connection URL, will override host, port and password (user will be ignored), e.g. redis://user:password@example.com:6379</span></span><br><span class="line">spring.redis.host=localhost <span class="comment"># Redis server host.</span></span><br><span class="line">spring.redis.password= <span class="comment"># Login password of the redis server.</span></span><br><span class="line">spring.redis.ssl=<span class="literal">false</span> <span class="comment"># Enable SSL support.</span></span><br><span class="line">spring.redis.pool.max-active=8 <span class="comment"># Max number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.</span></span><br><span class="line">spring.redis.pool.max-idle=8 <span class="comment"># Max number of "idle" connections in the pool. Use a negative value to indicate an unlimited number of idle connections.</span></span><br><span class="line">spring.redis.pool.max-wait=-1 <span class="comment"># Maximum amount of time (in milliseconds) a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.</span></span><br><span class="line">spring.redis.pool.min-idle=0 <span class="comment"># Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.</span></span><br><span class="line">spring.redis.port=6379 <span class="comment"># Redis server port.</span></span><br><span class="line">spring.redis.sentinel.master= <span class="comment"># Name of Redis server.</span></span><br><span class="line">spring.redis.sentinel.nodes= <span class="comment"># Comma-separated list of host:port pairs.</span></span><br><span class="line">spring.redis.timeout=0 <span class="comment"># Connection timeout in milliseconds.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># TRANSACTION (TransactionProperties)</span></span><br><span class="line">spring.transaction.default-timeout= <span class="comment"># Default transaction timeout in seconds.</span></span><br><span class="line">spring.transaction.rollback-on-commit-failure= <span class="comment"># Perform the rollback on commit failures.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------------------</span></span><br><span class="line"><span class="comment"># INTEGRATION PROPERTIES</span></span><br><span class="line"><span class="comment"># ----------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ACTIVEMQ (ActiveMQProperties)</span></span><br><span class="line">spring.activemq.broker-url= <span class="comment"># URL of the ActiveMQ broker. Auto-generated by default.</span></span><br><span class="line">spring.activemq.close-timeout=15000 <span class="comment"># Time to wait, in milliseconds, before considering a close complete.</span></span><br><span class="line">spring.activemq.in-memory=<span class="literal">true</span> <span class="comment"># Specify if the default broker URL should be in memory. Ignored if an explicit broker has been specified.</span></span><br><span class="line">spring.activemq.non-blocking-redelivery=<span class="literal">false</span> <span class="comment"># Do not stop message delivery before re-delivering messages from a rolled back transaction. This implies that message order will not be preserved when this is enabled.</span></span><br><span class="line">spring.activemq.password= <span class="comment"># Login password of the broker.</span></span><br><span class="line">spring.activemq.send-timeout=0 <span class="comment"># Time to wait, in milliseconds, on Message sends for a response. Set it to 0 to indicate to wait forever.</span></span><br><span class="line">spring.activemq.user= <span class="comment"># Login user of the broker.</span></span><br><span class="line">spring.activemq.packages.trust-all= <span class="comment"># Trust all packages.</span></span><br><span class="line">spring.activemq.packages.trusted= <span class="comment"># Comma-separated list of specific packages to trust (when not trusting all packages).</span></span><br><span class="line">spring.activemq.pool.block-if-full=<span class="literal">true</span> <span class="comment"># Block when a connection is requested and the pool is full. Set it to false to throw a "JMSException" instead.</span></span><br><span class="line">spring.activemq.pool.block-if-full-timeout=-1 <span class="comment"># Blocking period, in milliseconds, before throwing an exception if the pool is still full.</span></span><br><span class="line">spring.activemq.pool.create-connection-on-startup=<span class="literal">true</span> <span class="comment"># Create a connection on startup. Can be used to warm-up the pool on startup.</span></span><br><span class="line">spring.activemq.pool.enabled=<span class="literal">false</span> <span class="comment"># Whether a PooledConnectionFactory should be created instead of a regular ConnectionFactory.</span></span><br><span class="line">spring.activemq.pool.expiry-timeout=0 <span class="comment"># Connection expiration timeout in milliseconds.</span></span><br><span class="line">spring.activemq.pool.idle-timeout=30000 <span class="comment"># Connection idle timeout in milliseconds.</span></span><br><span class="line">spring.activemq.pool.max-connections=1 <span class="comment"># Maximum number of pooled connections.</span></span><br><span class="line">spring.activemq.pool.maximum-active-session-per-connection=500 <span class="comment"># Maximum number of active sessions per connection.</span></span><br><span class="line">spring.activemq.pool.reconnect-on-exception=<span class="literal">true</span> <span class="comment"># Reset the connection when a "JMXException" occurs.</span></span><br><span class="line">spring.activemq.pool.time-between-expiration-check=-1 <span class="comment"># Time to sleep, in milliseconds, between runs of the idle connection eviction thread. When negative, no idle connection eviction thread runs.</span></span><br><span class="line">spring.activemq.pool.use-anonymous-producers=<span class="literal">true</span> <span class="comment"># Use only one anonymous "MessageProducer" instance. Set it to false to create one "MessageProducer" every time one is required.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ARTEMIS (ArtemisProperties)</span></span><br><span class="line">spring.artemis.embedded.cluster-password= <span class="comment"># Cluster password. Randomly generated on startup by default.</span></span><br><span class="line">spring.artemis.embedded.data-directory= <span class="comment"># Journal file directory. Not necessary if persistence is turned off.</span></span><br><span class="line">spring.artemis.embedded.enabled=<span class="literal">true</span> <span class="comment"># Enable embedded mode if the Artemis server APIs are available.</span></span><br><span class="line">spring.artemis.embedded.persistent=<span class="literal">false</span> <span class="comment"># Enable persistent store.</span></span><br><span class="line">spring.artemis.embedded.queues= <span class="comment"># Comma-separated list of queues to create on startup.</span></span><br><span class="line">spring.artemis.embedded.server-id= <span class="comment"># Server id. By default, an auto-incremented counter is used.</span></span><br><span class="line">spring.artemis.embedded.topics= <span class="comment"># Comma-separated list of topics to create on startup.</span></span><br><span class="line">spring.artemis.host=localhost <span class="comment"># Artemis broker host.</span></span><br><span class="line">spring.artemis.mode= <span class="comment"># Artemis deployment mode, auto-detected by default.</span></span><br><span class="line">spring.artemis.password= <span class="comment"># Login password of the broker.</span></span><br><span class="line">spring.artemis.port=61616 <span class="comment"># Artemis broker port.</span></span><br><span class="line">spring.artemis.user= <span class="comment"># Login user of the broker.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SPRING BATCH (BatchProperties)</span></span><br><span class="line">spring.batch.initializer.enabled= <span class="comment"># Create the required batch tables on startup if necessary. Enabled automatically if no custom table prefix is set or if a custom schema is configured.</span></span><br><span class="line">spring.batch.job.enabled=<span class="literal">true</span> <span class="comment"># Execute all Spring Batch jobs in the context on startup.</span></span><br><span class="line">spring.batch.job.names= <span class="comment"># Comma-separated list of job names to execute on startup (For instance `job1,job2`). By default, all Jobs found in the context are executed.</span></span><br><span class="line">spring.batch.schema=classpath:org/springframework/batch/core/schema-@@platform@@.sql <span class="comment"># Path to the SQL file to use to initialize the database schema.</span></span><br><span class="line">spring.batch.table-prefix= <span class="comment"># Table prefix for all the batch meta-data tables.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># JMS (JmsProperties)</span></span><br><span class="line">spring.jms.jndi-name= <span class="comment"># Connection factory JNDI name. When set, takes precedence to others connection factory auto-configurations.</span></span><br><span class="line">spring.jms.listener.acknowledge-mode= <span class="comment"># Acknowledge mode of the container. By default, the listener is transacted with automatic acknowledgment.</span></span><br><span class="line">spring.jms.listener.auto-startup=<span class="literal">true</span> <span class="comment"># Start the container automatically on startup.</span></span><br><span class="line">spring.jms.listener.concurrency= <span class="comment"># Minimum number of concurrent consumers.</span></span><br><span class="line">spring.jms.listener.max-concurrency= <span class="comment"># Maximum number of concurrent consumers.</span></span><br><span class="line">spring.jms.pub-sub-domain=<span class="literal">false</span> <span class="comment"># Specify if the default destination type is topic.</span></span><br><span class="line">spring.jms.template.default-destination= <span class="comment"># Default destination to use on send/receive operations that do not have a destination parameter.</span></span><br><span class="line">spring.jms.template.delivery-delay= <span class="comment"># Delivery delay to use for send calls in milliseconds.</span></span><br><span class="line">spring.jms.template.delivery-mode= <span class="comment"># Delivery mode. Enable QoS when set.</span></span><br><span class="line">spring.jms.template.priority= <span class="comment"># Priority of a message when sending. Enable QoS when set.</span></span><br><span class="line">spring.jms.template.qos-enabled= <span class="comment"># Enable explicit QoS when sending a message.</span></span><br><span class="line">spring.jms.template.receive-timeout= <span class="comment"># Timeout to use for receive calls in milliseconds.</span></span><br><span class="line">spring.jms.template.time-to-live= <span class="comment"># Time-to-live of a message when sending in milliseconds. Enable QoS when set.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># APACHE KAFKA (KafkaProperties)</span></span><br><span class="line">spring.kafka.bootstrap-servers= <span class="comment"># Comma-delimited list of host:port pairs to use for establishing the initial connection to the Kafka cluster.</span></span><br><span class="line">spring.kafka.client-id= <span class="comment"># Id to pass to the server when making requests; used for server-side logging.</span></span><br><span class="line">spring.kafka.consumer.auto-commit-interval= <span class="comment"># Frequency in milliseconds that the consumer offsets are auto-committed to Kafka if 'enable.auto.commit' true.</span></span><br><span class="line">spring.kafka.consumer.auto-offset-reset= <span class="comment"># What to do when there is no initial offset in Kafka or if the current offset does not exist any more on the server.</span></span><br><span class="line">spring.kafka.consumer.bootstrap-servers= <span class="comment"># Comma-delimited list of host:port pairs to use for establishing the initial connection to the Kafka cluster.</span></span><br><span class="line">spring.kafka.consumer.client-id= <span class="comment"># Id to pass to the server when making requests; used for server-side logging.</span></span><br><span class="line">spring.kafka.consumer.enable-auto-commit= <span class="comment"># If true the consumer's offset will be periodically committed in the background.</span></span><br><span class="line">spring.kafka.consumer.fetch-max-wait= <span class="comment"># Maximum amount of time in milliseconds the server will block before answering the fetch request if there isn't sufficient data to immediately satisfy the requirement given by "fetch.min.bytes".</span></span><br><span class="line">spring.kafka.consumer.fetch-min-size= <span class="comment"># Minimum amount of data the server should return for a fetch request in bytes.</span></span><br><span class="line">spring.kafka.consumer.group-id= <span class="comment"># Unique string that identifies the consumer group this consumer belongs to.</span></span><br><span class="line">spring.kafka.consumer.heartbeat-interval= <span class="comment"># Expected time in milliseconds between heartbeats to the consumer coordinator.</span></span><br><span class="line">spring.kafka.consumer.key-deserializer= <span class="comment"># Deserializer class for keys.</span></span><br><span class="line">spring.kafka.consumer.max-poll-records= <span class="comment"># Maximum number of records returned in a single call to poll().</span></span><br><span class="line">spring.kafka.consumer.value-deserializer= <span class="comment"># Deserializer class for values.</span></span><br><span class="line">spring.kafka.listener.ack-count= <span class="comment"># Number of records between offset commits when ackMode is "COUNT" or "COUNT_TIME".</span></span><br><span class="line">spring.kafka.listener.ack-mode= <span class="comment"># Listener AckMode; see the spring-kafka documentation.</span></span><br><span class="line">spring.kafka.listener.ack-time= <span class="comment"># Time in milliseconds between offset commits when ackMode is "TIME" or "COUNT_TIME".</span></span><br><span class="line">spring.kafka.listener.concurrency= <span class="comment"># Number of threads to run in the listener containers.</span></span><br><span class="line">spring.kafka.listener.poll-timeout= <span class="comment"># Timeout in milliseconds to use when polling the consumer.</span></span><br><span class="line">spring.kafka.producer.acks= <span class="comment"># Number of acknowledgments the producer requires the leader to have received before considering a request complete.</span></span><br><span class="line">spring.kafka.producer.batch-size= <span class="comment"># Number of records to batch before sending.</span></span><br><span class="line">spring.kafka.producer.bootstrap-servers= <span class="comment"># Comma-delimited list of host:port pairs to use for establishing the initial connection to the Kafka cluster.</span></span><br><span class="line">spring.kafka.producer.buffer-memory= <span class="comment"># Total bytes of memory the producer can use to buffer records waiting to be sent to the server.</span></span><br><span class="line">spring.kafka.producer.client-id= <span class="comment"># Id to pass to the server when making requests; used for server-side logging.</span></span><br><span class="line">spring.kafka.producer.compression-type= <span class="comment"># Compression type for all data generated by the producer.</span></span><br><span class="line">spring.kafka.producer.key-serializer= <span class="comment"># Serializer class for keys.</span></span><br><span class="line">spring.kafka.producer.retries= <span class="comment"># When greater than zero, enables retrying of failed sends.</span></span><br><span class="line">spring.kafka.producer.value-serializer= <span class="comment"># Serializer class for values.</span></span><br><span class="line">spring.kafka.properties.*= <span class="comment"># Additional properties used to configure the client.</span></span><br><span class="line">spring.kafka.ssl.key-password= <span class="comment"># Password of the private key in the key store file.</span></span><br><span class="line">spring.kafka.ssl.keystore-location= <span class="comment"># Location of the key store file.</span></span><br><span class="line">spring.kafka.ssl.keystore-password= <span class="comment"># Store password for the key store file.</span></span><br><span class="line">spring.kafka.ssl.truststore-location= <span class="comment"># Location of the trust store file.</span></span><br><span class="line">spring.kafka.ssl.truststore-password= <span class="comment"># Store password for the trust store file.</span></span><br><span class="line">spring.kafka.template.default-topic= <span class="comment"># Default topic to which messages will be sent.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># RABBIT (RabbitProperties)</span></span><br><span class="line">spring.rabbitmq.addresses= <span class="comment"># Comma-separated list of addresses to which the client should connect.</span></span><br><span class="line">spring.rabbitmq.cache.channel.checkout-timeout= <span class="comment"># Number of milliseconds to wait to obtain a channel if the cache size has been reached.</span></span><br><span class="line">spring.rabbitmq.cache.channel.size= <span class="comment"># Number of channels to retain in the cache.</span></span><br><span class="line">spring.rabbitmq.cache.connection.mode=channel <span class="comment"># Connection factory cache mode.</span></span><br><span class="line">spring.rabbitmq.cache.connection.size= <span class="comment"># Number of connections to cache.</span></span><br><span class="line">spring.rabbitmq.connection-timeout= <span class="comment"># Connection timeout, in milliseconds; zero for infinite.</span></span><br><span class="line">spring.rabbitmq.dynamic=<span class="literal">true</span> <span class="comment"># Create an AmqpAdmin bean.</span></span><br><span class="line">spring.rabbitmq.host=localhost <span class="comment"># RabbitMQ host.</span></span><br><span class="line">spring.rabbitmq.listener.simple.acknowledge-mode= <span class="comment"># Acknowledge mode of container.</span></span><br><span class="line">spring.rabbitmq.listener.simple.auto-startup=<span class="literal">true</span> <span class="comment"># Start the container automatically on startup.</span></span><br><span class="line">spring.rabbitmq.listener.simple.concurrency= <span class="comment"># Minimum number of consumers.</span></span><br><span class="line">spring.rabbitmq.listener.simple.default-requeue-rejected= <span class="comment"># Whether or not to requeue delivery failures; default `true`.</span></span><br><span class="line">spring.rabbitmq.listener.simple.idle-event-interval= <span class="comment"># How often idle container events should be published in milliseconds.</span></span><br><span class="line">spring.rabbitmq.listener.simple.max-concurrency= <span class="comment"># Maximum number of consumers.</span></span><br><span class="line">spring.rabbitmq.listener.simple.prefetch= <span class="comment"># Number of messages to be handled in a single request. It should be greater than or equal to the transaction size (if used).</span></span><br><span class="line">spring.rabbitmq.listener.simple.retry.enabled=<span class="literal">false</span> <span class="comment"># Whether or not publishing retries are enabled.</span></span><br><span class="line">spring.rabbitmq.listener.simple.retry.initial-interval=1000 <span class="comment"># Interval between the first and second attempt to deliver a message.</span></span><br><span class="line">spring.rabbitmq.listener.simple.retry.max-attempts=3 <span class="comment"># Maximum number of attempts to deliver a message.</span></span><br><span class="line">spring.rabbitmq.listener.simple.retry.max-interval=10000 <span class="comment"># Maximum interval between attempts.</span></span><br><span class="line">spring.rabbitmq.listener.simple.retry.multiplier=1.0 <span class="comment"># A multiplier to apply to the previous delivery retry interval.</span></span><br><span class="line">spring.rabbitmq.listener.simple.retry.stateless=<span class="literal">true</span> <span class="comment"># Whether or not retry is stateless or stateful.</span></span><br><span class="line">spring.rabbitmq.listener.simple.transaction-size= <span class="comment"># Number of messages to be processed in a transaction. For best results it should be less than or equal to the prefetch count.</span></span><br><span class="line">spring.rabbitmq.password= <span class="comment"># Login to authenticate against the broker.</span></span><br><span class="line">spring.rabbitmq.port=5672 <span class="comment"># RabbitMQ port.</span></span><br><span class="line">spring.rabbitmq.publisher-confirms=<span class="literal">false</span> <span class="comment"># Enable publisher confirms.</span></span><br><span class="line">spring.rabbitmq.publisher-returns=<span class="literal">false</span> <span class="comment"># Enable publisher returns.</span></span><br><span class="line">spring.rabbitmq.requested-heartbeat= <span class="comment"># Requested heartbeat timeout, in seconds; zero for none.</span></span><br><span class="line">spring.rabbitmq.ssl.enabled=<span class="literal">false</span> <span class="comment"># Enable SSL support.</span></span><br><span class="line">spring.rabbitmq.ssl.key-store= <span class="comment"># Path to the key store that holds the SSL certificate.</span></span><br><span class="line">spring.rabbitmq.ssl.key-store-password= <span class="comment"># Password used to access the key store.</span></span><br><span class="line">spring.rabbitmq.ssl.trust-store= <span class="comment"># Trust store that holds SSL certificates.</span></span><br><span class="line">spring.rabbitmq.ssl.trust-store-password= <span class="comment"># Password used to access the trust store.</span></span><br><span class="line">spring.rabbitmq.ssl.algorithm= <span class="comment"># SSL algorithm to use. By default configure by the rabbit client library.</span></span><br><span class="line">spring.rabbitmq.template.mandatory=<span class="literal">false</span> <span class="comment"># Enable mandatory messages.</span></span><br><span class="line">spring.rabbitmq.template.receive-timeout=0 <span class="comment"># Timeout for `receive()` methods.</span></span><br><span class="line">spring.rabbitmq.template.reply-timeout=5000 <span class="comment"># Timeout for `sendAndReceive()` methods.</span></span><br><span class="line">spring.rabbitmq.template.retry.enabled=<span class="literal">false</span> <span class="comment"># Set to true to enable retries in the `RabbitTemplate`.</span></span><br><span class="line">spring.rabbitmq.template.retry.initial-interval=1000 <span class="comment"># Interval between the first and second attempt to publish a message.</span></span><br><span class="line">spring.rabbitmq.template.retry.max-attempts=3 <span class="comment"># Maximum number of attempts to publish a message.</span></span><br><span class="line">spring.rabbitmq.template.retry.max-interval=10000 <span class="comment"># Maximum number of attempts to publish a message.</span></span><br><span class="line">spring.rabbitmq.template.retry.multiplier=1.0 <span class="comment"># A multiplier to apply to the previous publishing retry interval.</span></span><br><span class="line">spring.rabbitmq.username= <span class="comment"># Login user to authenticate to the broker.</span></span><br><span class="line">spring.rabbitmq.virtual-host= <span class="comment"># Virtual host to use when connecting to the broker.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------------------</span></span><br><span class="line"><span class="comment"># ACTUATOR PROPERTIES</span></span><br><span class="line"><span class="comment"># ----------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ENDPOINTS (AbstractEndpoint subclasses)</span></span><br><span class="line">endpoints.enabled=<span class="literal">true</span> <span class="comment"># Enable endpoints.</span></span><br><span class="line">endpoints.sensitive= <span class="comment"># Default endpoint sensitive setting.</span></span><br><span class="line">endpoints.actuator.enabled=<span class="literal">true</span> <span class="comment"># Enable the endpoint.</span></span><br><span class="line">endpoints.actuator.path= <span class="comment"># Endpoint URL path.</span></span><br><span class="line">endpoints.actuator.sensitive=<span class="literal">false</span> <span class="comment"># Enable security on the endpoint.</span></span><br><span class="line">endpoints.auditevents.enabled= <span class="comment"># Enable the endpoint.</span></span><br><span class="line">endpoints.auditevents.path= <span class="comment"># Endpoint path.</span></span><br><span class="line">endpoints.auditevents.sensitive=<span class="literal">false</span> <span class="comment"># Enable security on the endpoint.</span></span><br><span class="line">endpoints.autoconfig.enabled= <span class="comment"># Enable the endpoint.</span></span><br><span class="line">endpoints.autoconfig.id= <span class="comment"># Endpoint identifier.</span></span><br><span class="line">endpoints.autoconfig.path= <span class="comment"># Endpoint path.</span></span><br><span class="line">endpoints.autoconfig.sensitive= <span class="comment"># Mark if the endpoint exposes sensitive information.</span></span><br><span class="line">endpoints.beans.enabled= <span class="comment"># Enable the endpoint.</span></span><br><span class="line">endpoints.beans.id= <span class="comment"># Endpoint identifier.</span></span><br><span class="line">endpoints.beans.path= <span class="comment"># Endpoint path.</span></span><br><span class="line">endpoints.beans.sensitive= <span class="comment"># Mark if the endpoint exposes sensitive information.</span></span><br><span class="line">endpoints.configprops.enabled= <span class="comment"># Enable the endpoint.</span></span><br><span class="line">endpoints.configprops.id= <span class="comment"># Endpoint identifier.</span></span><br><span class="line">endpoints.configprops.keys-to-sanitize=password,secret,key,token,.*credentials.*,vcap_services <span class="comment"># Keys that should be sanitized. Keys can be simple strings that the property ends with or regex expressions.</span></span><br><span class="line">endpoints.configprops.path= <span class="comment"># Endpoint path.</span></span><br><span class="line">endpoints.configprops.sensitive= <span class="comment"># Mark if the endpoint exposes sensitive information.</span></span><br><span class="line">endpoints.docs.curies.enabled=<span class="literal">false</span> <span class="comment"># Enable the curie generation.</span></span><br><span class="line">endpoints.docs.enabled=<span class="literal">true</span> <span class="comment"># Enable actuator docs endpoint.</span></span><br><span class="line">endpoints.docs.path=/docs <span class="comment">#</span></span><br><span class="line">endpoints.docs.sensitive=<span class="literal">false</span> <span class="comment">#</span></span><br><span class="line">endpoints.dump.enabled= <span class="comment"># Enable the endpoint.</span></span><br><span class="line">endpoints.dump.id= <span class="comment"># Endpoint identifier.</span></span><br><span class="line">endpoints.dump.path= <span class="comment"># Endpoint path.</span></span><br><span class="line">endpoints.dump.sensitive= <span class="comment"># Mark if the endpoint exposes sensitive information.</span></span><br><span class="line">endpoints.env.enabled= <span class="comment"># Enable the endpoint.</span></span><br><span class="line">endpoints.env.id= <span class="comment"># Endpoint identifier.</span></span><br><span class="line">endpoints.env.keys-to-sanitize=password,secret,key,token,.*credentials.*,vcap_services <span class="comment"># Keys that should be sanitized. Keys can be simple strings that the property ends with or regex expressions.</span></span><br><span class="line">endpoints.env.path= <span class="comment"># Endpoint path.</span></span><br><span class="line">endpoints.env.sensitive= <span class="comment"># Mark if the endpoint exposes sensitive information.</span></span><br><span class="line">endpoints.flyway.enabled= <span class="comment"># Enable the endpoint.</span></span><br><span class="line">endpoints.flyway.id= <span class="comment"># Endpoint identifier.</span></span><br><span class="line">endpoints.flyway.sensitive= <span class="comment"># Mark if the endpoint exposes sensitive information.</span></span><br><span class="line">endpoints.health.enabled= <span class="comment"># Enable the endpoint.</span></span><br><span class="line">endpoints.health.id= <span class="comment"># Endpoint identifier.</span></span><br><span class="line">endpoints.health.mapping.*= <span class="comment"># Mapping of health statuses to HTTP status codes. By default, registered health statuses map to sensible defaults (i.e. UP maps to 200).</span></span><br><span class="line">endpoints.health.path= <span class="comment"># Endpoint path.</span></span><br><span class="line">endpoints.health.sensitive= <span class="comment"># Mark if the endpoint exposes sensitive information.</span></span><br><span class="line">endpoints.health.time-to-live=1000 <span class="comment"># Time to live for cached result, in milliseconds.</span></span><br><span class="line">endpoints.heapdump.enabled= <span class="comment"># Enable the endpoint.</span></span><br><span class="line">endpoints.heapdump.path= <span class="comment"># Endpoint path.</span></span><br><span class="line">endpoints.heapdump.sensitive= <span class="comment"># Mark if the endpoint exposes sensitive information.</span></span><br><span class="line">endpoints.hypermedia.enabled=<span class="literal">false</span> <span class="comment"># Enable hypermedia support for endpoints.</span></span><br><span class="line">endpoints.info.enabled= <span class="comment"># Enable the endpoint.</span></span><br><span class="line">endpoints.info.id= <span class="comment"># Endpoint identifier.</span></span><br><span class="line">endpoints.info.path= <span class="comment"># Endpoint path.</span></span><br><span class="line">endpoints.info.sensitive= <span class="comment"># Mark if the endpoint exposes sensitive information.</span></span><br><span class="line">endpoints.jolokia.enabled=<span class="literal">true</span> <span class="comment"># Enable Jolokia endpoint.</span></span><br><span class="line">endpoints.jolokia.path=/jolokia <span class="comment"># Endpoint URL path.</span></span><br><span class="line">endpoints.jolokia.sensitive=<span class="literal">true</span> <span class="comment"># Enable security on the endpoint.</span></span><br><span class="line">endpoints.liquibase.enabled= <span class="comment"># Enable the endpoint.</span></span><br><span class="line">endpoints.liquibase.id= <span class="comment"># Endpoint identifier.</span></span><br><span class="line">endpoints.liquibase.sensitive= <span class="comment"># Mark if the endpoint exposes sensitive information.</span></span><br><span class="line">endpoints.logfile.enabled=<span class="literal">true</span> <span class="comment"># Enable the endpoint.</span></span><br><span class="line">endpoints.logfile.external-file= <span class="comment"># External Logfile to be accessed.</span></span><br><span class="line">endpoints.logfile.path=/logfile <span class="comment"># Endpoint URL path.</span></span><br><span class="line">endpoints.logfile.sensitive=<span class="literal">true</span> <span class="comment"># Enable security on the endpoint.</span></span><br><span class="line">endpoints.loggers.enabled=<span class="literal">true</span> <span class="comment"># Enable the endpoint.</span></span><br><span class="line">endpoints.loggers.id= <span class="comment"># Endpoint identifier.</span></span><br><span class="line">endpoints.loggers.path=/logfile <span class="comment"># Endpoint path.</span></span><br><span class="line">endpoints.loggers.sensitive=<span class="literal">true</span> <span class="comment"># Mark if the endpoint exposes sensitive information.</span></span><br><span class="line">endpoints.mappings.enabled= <span class="comment"># Enable the endpoint.</span></span><br><span class="line">endpoints.mappings.id= <span class="comment"># Endpoint identifier.</span></span><br><span class="line">endpoints.mappings.path= <span class="comment"># Endpoint path.</span></span><br><span class="line">endpoints.mappings.sensitive= <span class="comment"># Mark if the endpoint exposes sensitive information.</span></span><br><span class="line">endpoints.metrics.enabled= <span class="comment"># Enable the endpoint.</span></span><br><span class="line">endpoints.metrics.filter.enabled=<span class="literal">true</span> <span class="comment"># Enable the metrics servlet filter.</span></span><br><span class="line">endpoints.metrics.filter.gauge-submissions=merged <span class="comment"># Http filter gauge submissions (merged, per-http-method)</span></span><br><span class="line">endpoints.metrics.filter.counter-submissions=merged <span class="comment"># Http filter counter submissions (merged, per-http-method)</span></span><br><span class="line">endpoints.metrics.id= <span class="comment"># Endpoint identifier.</span></span><br><span class="line">endpoints.metrics.path= <span class="comment"># Endpoint path.</span></span><br><span class="line">endpoints.metrics.sensitive= <span class="comment"># Mark if the endpoint exposes sensitive information.</span></span><br><span class="line">endpoints.shutdown.enabled= <span class="comment"># Enable the endpoint.</span></span><br><span class="line">endpoints.shutdown.id= <span class="comment"># Endpoint identifier.</span></span><br><span class="line">endpoints.shutdown.path= <span class="comment"># Endpoint path.</span></span><br><span class="line">endpoints.shutdown.sensitive= <span class="comment"># Mark if the endpoint exposes sensitive information.</span></span><br><span class="line">endpoints.trace.enabled= <span class="comment"># Enable the endpoint.</span></span><br><span class="line">endpoints.trace.filter.enabled=<span class="literal">true</span> <span class="comment"># Enable the trace servlet filter.</span></span><br><span class="line">endpoints.trace.id= <span class="comment"># Endpoint identifier.</span></span><br><span class="line">endpoints.trace.path= <span class="comment"># Endpoint path.</span></span><br><span class="line">endpoints.trace.sensitive= <span class="comment"># Mark if the endpoint exposes sensitive information.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ENDPOINTS CORS CONFIGURATION (EndpointCorsProperties)</span></span><br><span class="line">endpoints.cors.allow-credentials= <span class="comment"># Set whether credentials are supported. When not set, credentials are not supported.</span></span><br><span class="line">endpoints.cors.allowed-headers= <span class="comment"># Comma-separated list of headers to allow in a request. '*' allows all headers.</span></span><br><span class="line">endpoints.cors.allowed-methods=GET <span class="comment"># Comma-separated list of methods to allow. '*' allows all methods.</span></span><br><span class="line">endpoints.cors.allowed-origins= <span class="comment"># Comma-separated list of origins to allow. '*' allows all origins. When not set, CORS support is disabled.</span></span><br><span class="line">endpoints.cors.exposed-headers= <span class="comment"># Comma-separated list of headers to include in a response.</span></span><br><span class="line">endpoints.cors.max-age=1800 <span class="comment"># How long, in seconds, the response from a pre-flight request can be cached by clients.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># JMX ENDPOINT (EndpointMBeanExportProperties)</span></span><br><span class="line">endpoints.jmx.domain= <span class="comment"># JMX domain name. Initialized with the value of 'spring.jmx.default-domain' if set.</span></span><br><span class="line">endpoints.jmx.enabled=<span class="literal">true</span> <span class="comment"># Enable JMX export of all endpoints.</span></span><br><span class="line">endpoints.jmx.static-names= <span class="comment"># Additional static properties to append to all ObjectNames of MBeans representing Endpoints.</span></span><br><span class="line">endpoints.jmx.unique-names=<span class="literal">false</span> <span class="comment"># Ensure that ObjectNames are modified in case of conflict.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># JOLOKIA (JolokiaProperties)</span></span><br><span class="line">jolokia.config.*= <span class="comment"># See Jolokia manual</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MANAGEMENT HTTP SERVER (ManagementServerProperties)</span></span><br><span class="line">management.add-application-context-header=<span class="literal">true</span> <span class="comment"># Add the "X-Application-Context" HTTP header in each response.</span></span><br><span class="line">management.address= <span class="comment"># Network address that the management endpoints should bind to.</span></span><br><span class="line">management.context-path= <span class="comment"># Management endpoint context-path. For instance `/actuator`</span></span><br><span class="line">management.cloudfoundry.enabled= <span class="comment"># Enable extended Cloud Foundry actuator endpoints</span></span><br><span class="line">management.cloudfoundry.skip-ssl-validation= <span class="comment"># Skip SSL verification for Cloud Foundry actuator endpoint security calls</span></span><br><span class="line">management.port= <span class="comment"># Management endpoint HTTP port. Uses the same port as the application by default. Configure a different port to use management-specific SSL.</span></span><br><span class="line">management.security.enabled=<span class="literal">true</span> <span class="comment"># Enable security.</span></span><br><span class="line">management.security.roles=ACTUATOR <span class="comment"># Comma-separated list of roles that can access the management endpoint.</span></span><br><span class="line">management.security.sessions=stateless <span class="comment"># Session creating policy to use (always, never, if_required, stateless).</span></span><br><span class="line">management.ssl.ciphers= <span class="comment"># Supported SSL ciphers. Requires a custom management.port.</span></span><br><span class="line">management.ssl.client-auth= <span class="comment"># Whether client authentication is wanted ("want") or needed ("need"). Requires a trust store. Requires a custom management.port.</span></span><br><span class="line">management.ssl.enabled= <span class="comment"># Enable SSL support. Requires a custom management.port.</span></span><br><span class="line">management.ssl.enabled-protocols= <span class="comment"># Enabled SSL protocols. Requires a custom management.port.</span></span><br><span class="line">management.ssl.key-alias= <span class="comment"># Alias that identifies the key in the key store. Requires a custom management.port.</span></span><br><span class="line">management.ssl.key-password= <span class="comment"># Password used to access the key in the key store. Requires a custom management.port.</span></span><br><span class="line">management.ssl.key-store= <span class="comment"># Path to the key store that holds the SSL certificate (typically a jks file). Requires a custom management.port.</span></span><br><span class="line">management.ssl.key-store-password= <span class="comment"># Password used to access the key store. Requires a custom management.port.</span></span><br><span class="line">management.ssl.key-store-provider= <span class="comment"># Provider for the key store. Requires a custom management.port.</span></span><br><span class="line">management.ssl.key-store-type= <span class="comment"># Type of the key store. Requires a custom management.port.</span></span><br><span class="line">management.ssl.protocol=TLS <span class="comment"># SSL protocol to use. Requires a custom management.port.</span></span><br><span class="line">management.ssl.trust-store= <span class="comment"># Trust store that holds SSL certificates. Requires a custom management.port.</span></span><br><span class="line">management.ssl.trust-store-password= <span class="comment"># Password used to access the trust store. Requires a custom management.port.</span></span><br><span class="line">management.ssl.trust-store-provider= <span class="comment"># Provider for the trust store. Requires a custom management.port.</span></span><br><span class="line">management.ssl.trust-store-type= <span class="comment"># Type of the trust store. Requires a custom management.port.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># HEALTH INDICATORS</span></span><br><span class="line">management.health.db.enabled=<span class="literal">true</span> <span class="comment"># Enable database health check.</span></span><br><span class="line">management.health.cassandra.enabled=<span class="literal">true</span> <span class="comment"># Enable cassandra health check.</span></span><br><span class="line">management.health.couchbase.enabled=<span class="literal">true</span> <span class="comment"># Enable couchbase health check.</span></span><br><span class="line">management.health.defaults.enabled=<span class="literal">true</span> <span class="comment"># Enable default health indicators.</span></span><br><span class="line">management.health.diskspace.enabled=<span class="literal">true</span> <span class="comment"># Enable disk space health check.</span></span><br><span class="line">management.health.diskspace.path= <span class="comment"># Path used to compute the available disk space.</span></span><br><span class="line">management.health.diskspace.threshold=0 <span class="comment"># Minimum disk space that should be available, in bytes.</span></span><br><span class="line">management.health.elasticsearch.enabled=<span class="literal">true</span> <span class="comment"># Enable elasticsearch health check.</span></span><br><span class="line">management.health.elasticsearch.indices= <span class="comment"># Comma-separated index names.</span></span><br><span class="line">management.health.elasticsearch.response-timeout=100 <span class="comment"># The time, in milliseconds, to wait for a response from the cluster.</span></span><br><span class="line">management.health.jms.enabled=<span class="literal">true</span> <span class="comment"># Enable JMS health check.</span></span><br><span class="line">management.health.ldap.enabled=<span class="literal">true</span> <span class="comment"># Enable LDAP health check.</span></span><br><span class="line">management.health.mail.enabled=<span class="literal">true</span> <span class="comment"># Enable Mail health check.</span></span><br><span class="line">management.health.mongo.enabled=<span class="literal">true</span> <span class="comment"># Enable MongoDB health check.</span></span><br><span class="line">management.health.rabbit.enabled=<span class="literal">true</span> <span class="comment"># Enable RabbitMQ health check.</span></span><br><span class="line">management.health.redis.enabled=<span class="literal">true</span> <span class="comment"># Enable Redis health check.</span></span><br><span class="line">management.health.solr.enabled=<span class="literal">true</span> <span class="comment"># Enable Solr health check.</span></span><br><span class="line">management.health.status.order=DOWN, OUT_OF_SERVICE, UP, UNKNOWN <span class="comment"># Comma-separated list of health statuses in order of severity.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># INFO CONTRIBUTORS (InfoContributorProperties)</span></span><br><span class="line">management.info.build.enabled=<span class="literal">true</span> <span class="comment"># Enable build info.</span></span><br><span class="line">management.info.defaults.enabled=<span class="literal">true</span> <span class="comment"># Enable default info contributors.</span></span><br><span class="line">management.info.env.enabled=<span class="literal">true</span> <span class="comment"># Enable environment info.</span></span><br><span class="line">management.info.git.enabled=<span class="literal">true</span> <span class="comment"># Enable git info.</span></span><br><span class="line">management.info.git.mode=simple <span class="comment"># Mode to use to expose git information.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># REMOTE SHELL (ShellProperties)</span></span><br><span class="line">management.shell.auth.type=simple <span class="comment"># Authentication type. Auto-detected according to the environment.</span></span><br><span class="line">management.shell.auth.jaas.domain=my-domain <span class="comment"># JAAS domain.</span></span><br><span class="line">management.shell.auth.key.path= <span class="comment"># Path to the authentication key. This should point to a valid ".pem" file.</span></span><br><span class="line">management.shell.auth.simple.user.name=user <span class="comment"># Login user.</span></span><br><span class="line">management.shell.auth.simple.user.password= <span class="comment"># Login password.</span></span><br><span class="line">management.shell.auth.spring.roles=ACTUATOR <span class="comment"># Comma-separated list of required roles to login to the CRaSH console.</span></span><br><span class="line">management.shell.command-path-patterns=classpath*:/commands/**,classpath*:/crash/commands/** <span class="comment"># Patterns to use to look for commands.</span></span><br><span class="line">management.shell.command-refresh-interval=-1 <span class="comment"># Scan for changes and update the command if necessary (in seconds).</span></span><br><span class="line">management.shell.config-path-patterns=classpath*:/crash/* <span class="comment"># Patterns to use to look for configurations.</span></span><br><span class="line">management.shell.disabled-commands=jpa*,jdbc*,jndi* <span class="comment"># Comma-separated list of commands to disable.</span></span><br><span class="line">management.shell.disabled-plugins= <span class="comment"># Comma-separated list of plugins to disable. Certain plugins are disabled by default based on the environment.</span></span><br><span class="line">management.shell.ssh.auth-timeout = <span class="comment"># Number of milliseconds after user will be prompted to login again.</span></span><br><span class="line">management.shell.ssh.enabled=<span class="literal">true</span> <span class="comment"># Enable CRaSH SSH support.</span></span><br><span class="line">management.shell.ssh.idle-timeout = <span class="comment"># Number of milliseconds after which unused connections are closed.</span></span><br><span class="line">management.shell.ssh.key-path= <span class="comment"># Path to the SSH server key.</span></span><br><span class="line">management.shell.ssh.port=2000 <span class="comment"># SSH port.</span></span><br><span class="line">management.shell.telnet.enabled=<span class="literal">false</span> <span class="comment"># Enable CRaSH telnet support. Enabled by default if the TelnetPlugin is available.</span></span><br><span class="line">management.shell.telnet.port=5000 <span class="comment"># Telnet port.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># TRACING (TraceProperties)</span></span><br><span class="line">management.trace.include=request-headers,response-headers,cookies,errors <span class="comment"># Items to be included in the trace.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># METRICS EXPORT (MetricExportProperties)</span></span><br><span class="line">spring.metrics.export.aggregate.key-pattern= <span class="comment"># Pattern that tells the aggregator what to do with the keys from the source repository.</span></span><br><span class="line">spring.metrics.export.aggregate.prefix= <span class="comment"># Prefix for global repository if active.</span></span><br><span class="line">spring.metrics.export.delay-millis=5000 <span class="comment"># Delay in milliseconds between export ticks. Metrics are exported to external sources on a schedule with this delay.</span></span><br><span class="line">spring.metrics.export.enabled=<span class="literal">true</span> <span class="comment"># Flag to enable metric export (assuming a MetricWriter is available).</span></span><br><span class="line">spring.metrics.export.excludes= <span class="comment"># List of patterns for metric names to exclude. Applied after the includes.</span></span><br><span class="line">spring.metrics.export.includes= <span class="comment"># List of patterns for metric names to include.</span></span><br><span class="line">spring.metrics.export.redis.key=keys.spring.metrics <span class="comment"># Key for redis repository export (if active).</span></span><br><span class="line">spring.metrics.export.redis.prefix=spring.metrics <span class="comment"># Prefix for redis repository if active.</span></span><br><span class="line">spring.metrics.export.send-latest= <span class="comment"># Flag to switch off any available optimizations based on not exporting unchanged metric values.</span></span><br><span class="line">spring.metrics.export.statsd.host= <span class="comment"># Host of a statsd server to receive exported metrics.</span></span><br><span class="line">spring.metrics.export.statsd.port=8125 <span class="comment"># Port of a statsd server to receive exported metrics.</span></span><br><span class="line">spring.metrics.export.statsd.prefix= <span class="comment"># Prefix for statsd exported metrics.</span></span><br><span class="line">spring.metrics.export.triggers.*= <span class="comment"># Specific trigger properties per MetricWriter bean name.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------------------</span></span><br><span class="line"><span class="comment"># DEVTOOLS PROPERTIES</span></span><br><span class="line"><span class="comment"># ----------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># DEVTOOLS (DevToolsProperties)</span></span><br><span class="line">spring.devtools.livereload.enabled=<span class="literal">true</span> <span class="comment"># Enable a livereload.com compatible server.</span></span><br><span class="line">spring.devtools.livereload.port=35729 <span class="comment"># Server port.</span></span><br><span class="line">spring.devtools.restart.additional-exclude= <span class="comment"># Additional patterns that should be excluded from triggering a full restart.</span></span><br><span class="line">spring.devtools.restart.additional-paths= <span class="comment"># Additional paths to watch for changes.</span></span><br><span class="line">spring.devtools.restart.enabled=<span class="literal">true</span> <span class="comment"># Enable automatic restart.</span></span><br><span class="line">spring.devtools.restart.exclude=META-INF/maven/**,META-INF/resources/**,resources/**,static/**,public/**,templates/**,**/*Test.class,**/*Tests.class,git.properties <span class="comment"># Patterns that should be excluded from triggering a full restart.</span></span><br><span class="line">spring.devtools.restart.poll-interval=1000 <span class="comment"># Amount of time (in milliseconds) to wait between polling for classpath changes.</span></span><br><span class="line">spring.devtools.restart.quiet-period=400 <span class="comment"># Amount of quiet time (in milliseconds) required without any classpath changes before a restart is triggered.</span></span><br><span class="line">spring.devtools.restart.trigger-file= <span class="comment"># Name of a specific file that when changed will trigger the restart check. If not specified any classpath file change will trigger the restart.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># REMOTE DEVTOOLS (RemoteDevToolsProperties)</span></span><br><span class="line">spring.devtools.remote.context-path=/.~~spring-boot!~ <span class="comment"># Context path used to handle the remote connection.</span></span><br><span class="line">spring.devtools.remote.debug.enabled=<span class="literal">true</span> <span class="comment"># Enable remote debug support.</span></span><br><span class="line">spring.devtools.remote.debug.local-port=8000 <span class="comment"># Local remote debug server port.</span></span><br><span class="line">spring.devtools.remote.proxy.host= <span class="comment"># The host of the proxy to use to connect to the remote application.</span></span><br><span class="line">spring.devtools.remote.proxy.port= <span class="comment"># The port of the proxy to use to connect to the remote application.</span></span><br><span class="line">spring.devtools.remote.restart.enabled=<span class="literal">true</span> <span class="comment"># Enable remote restart.</span></span><br><span class="line">spring.devtools.remote.secret= <span class="comment"># A shared secret required to establish a connection (required to enable remote support).</span></span><br><span class="line">spring.devtools.remote.secret-header-name=X-AUTH-TOKEN <span class="comment"># HTTP header used to transfer the shared secret.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------------------</span></span><br><span class="line"><span class="comment"># TESTING PROPERTIES</span></span><br><span class="line"><span class="comment"># ----------------------------------------</span></span><br><span class="line"></span><br><span class="line">spring.test.database.replace=any <span class="comment"># Type of existing DataSource to replace.</span></span><br><span class="line">spring.test.mockmvc.print=default <span class="comment"># MVC Print option.</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习Spring Boot：（六） 集成Swagger2]]></title>
      <url>/springboot-6.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Swagger是用来描述和文档化RESTful API的一个项目。Swagger Spec是一套规范，定义了该如何去描述一个RESTful API。类似的项目还有RAML、API Blueprint。 根据Swagger Spec来描述RESTful API的文件称之为Swagger specification file，它使用JSON来表述，也支持作为JSON支持的YAML。</p><p>Swagger specification file可以用来给swagger-ui生成一个Web的可交互的文档页面，以可以用swagger2markup生成静态文档，也可用使用swagger-codegen生成客户端代码。总之有了有个描述API的JSON文档之后，可以做各种扩展。</p><p>Swagger specification file可以手动编写，swagger-editor为了手动编写的工具提供了预览的功能。但是实际写起来也是非常麻烦的，同时还得保持代码和文档的两边同步。于是针对各种语言的各种框架都有一些开源的实现来辅助自动生成这个`Swagger specification file。</p><p>swagger-core是一个Java的实现，现在支持JAX-RS。swagger-annotation定义了一套注解给用户用来描述API。<br>spring-fox也是一个Java的实现，它支持Spring MVC， 它也支持swagger-annotation定义的部分注解。</p><a id="more"></a><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><p>在pom文件添加：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">swagger.version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">swagger.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;swagger.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;swagger.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h4 id="配置docket"><a href="#配置docket" class="headerlink" title="配置docket"></a>配置docket</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SpringBoot默认已经将classpath:/META-INF/resources/和classpath:/META-INF/resources/webjars/映射</span></span><br><span class="line"><span class="comment">     * 所以该方法不需要重写，如果在SpringMVC中，可能需要重写定义（我没有尝试）</span></span><br><span class="line"><span class="comment">     * 重写该方法需要 extends WebMvcConfigurerAdapter</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public void addResourceHandlers(ResourceHandlerRegistry registry) &#123;</span></span><br><span class="line"><span class="comment">//        registry.addResourceHandler("swagger-ui.html")</span></span><br><span class="line"><span class="comment">//                .addResourceLocations("classpath:/META-INF/resources/");</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        registry.addResourceHandler("/webjars/**")</span></span><br><span class="line"><span class="comment">//                .addResourceLocations("classpath:/META-INF/resources/webjars/");</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.wuwii"</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"Spring Boot中使用Swagger2构建RESTful APIs"</span>)</span><br><span class="line">                .description(<span class="string">"rest api 文档构建利器"</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">"https://blog.wuwii.com/"</span>)</span><br><span class="line">                .contact(<span class="string">"KronChan"</span>)</span><br><span class="line">                .version(<span class="string">"1.0"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="builder说明"><a href="#builder说明" class="headerlink" title="builder说明"></a>builder说明</h5><p>根据网上一位前辈的文章：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Docket <span class="title">petApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">        .select() <span class="comment">//1</span></span><br><span class="line">          .apis(RequestHandlerSelectors.any())</span><br><span class="line">          .paths(PathSelectors.any())</span><br><span class="line">          .build()</span><br><span class="line">        .pathMapping(<span class="string">"/"</span>) <span class="comment">//2</span></span><br><span class="line">        .directModelSubstitute(LocalDate.class, <span class="comment">//3</span></span><br><span class="line">            String.class)</span><br><span class="line">        .genericModelSubstitutes(ResponseEntity.class) <span class="comment">//4</span></span><br><span class="line">        .alternateTypeRules( <span class="comment">//5</span></span><br><span class="line">            newRule(typeResolver.resolve(DeferredResult.class,</span><br><span class="line">                    typeResolver.resolve(ResponseEntity.class, WildcardType.class)),</span><br><span class="line">                typeResolver.resolve(WildcardType.class)))</span><br><span class="line">        .useDefaultResponseMessages(<span class="keyword">false</span>) <span class="comment">//6</span></span><br><span class="line">        .globalResponseMessage(RequestMethod.GET, <span class="comment">//7</span></span><br><span class="line">            newArrayList(<span class="keyword">new</span> ResponseMessageBuilder()</span><br><span class="line">                .code(<span class="number">500</span>)</span><br><span class="line">                .message(<span class="string">"500 message"</span>)</span><br><span class="line">                .responseModel(<span class="keyword">new</span> ModelRef(<span class="string">"Error"</span>))</span><br><span class="line">                .build()))</span><br><span class="line">        .securitySchemes(newArrayList(apiKey())) <span class="comment">//8</span></span><br><span class="line">        .securityContexts(newArrayList(securityContext())) <span class="comment">//9</span></span><br><span class="line">        ;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p></p><p>方法说明：</p><ol><li>定义了需要生成API文档的endpoint，<code>api()</code>方法可以通过RequestHandlerSelectors的各种选择器来选择，比如说选择所有注解了@RsestController的类中的所有API e.g. <code>.apis(RequestHandlerSelectors.withClassAnnotation(RestController.class))</code>。<code>path()</code>方法可以通过PathSelectors的来匹配路径，提供了regex匹配或者ant匹配</li><li>定义了API的根路径</li><li>输出模型定义时的替换，比如遇到所有LocalDate的字段时，输出成String</li><li>遇到对应泛型类型的外围类，直接解析成泛型类型，比如说<code>ResponseEntity&lt;T&gt;</code>，应该直接输出成类型T</li><li>提供了自定义性更强的针对泛型的处理，示例中的代码的意思是将类型DeferredResult直接解析成类型T</li><li>是否使用默认的ResponseMessage， 框架默认定义了一些针对各个HTTP方法时各种不同响应值对应的message</li><li>全局的定义ResponseMessage，示例代码定义GET方法的500错误的消息以及错误模型。注意这里GET方法的所有ResponseMessage都会被这里的定义覆盖</li><li>定义API支持的SecurityScheme，指的是认证方式，支持<code>OAuth</code>、<code>APIkey</code>。 P.S. 要让swagger-ui的oauth正常工作，需要定义个SecurityConfiguration的Bean</li><li>定义具体上下文路径对应的认证方式</li><li>还有一些接口可以定义API的名称等一些基本信息，定义API支持的数据格式等等。</li></ol><h4 id="接口上添加文档"><a href="#接口上添加文档" class="headerlink" title="接口上添加文档"></a>接口上添加文档</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Api</span>(description = <span class="string">"这是一个控制器的描述 "</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PetController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * logger</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(PetController.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String no;</span><br><span class="line">    <span class="keyword">private</span> String kind;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"测试接口"</span>, notes=<span class="string">"测试接口描述"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParams</span>(&#123;</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Long"</span>, paramType = <span class="string">"path"</span>),</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"pet"</span>, value = <span class="string">"宠物"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"PetController"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="meta">@ApiResponses</span>(&#123;</span><br><span class="line">            <span class="meta">@ApiResponse</span>(code = <span class="number">200</span>, message = <span class="string">"请求完成"</span>),</span><br><span class="line">            <span class="meta">@ApiResponse</span>(code = <span class="number">400</span>, message = <span class="string">"请求参数错误"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(path = <span class="string">"/index/&#123;id&#125;"</span>, method = RequestMethod.PUT)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PetController <span class="title">index1</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> String id, @RequestBody PetController pet) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pet;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//…… get  / set</span></span><br></pre></td></tr></table></figure><h5 id="常用的注解说明"><a href="#常用的注解说明" class="headerlink" title="常用的注解说明"></a>常用的注解说明</h5><p><img src="https://i.loli.net/2018/01/25/5a69955bf2645.png" alt="springboot-6-1.png"></p><h4 id="查看API文档"><a href="#查看API文档" class="headerlink" title="查看API文档"></a>查看API文档</h4><p>启动Spring Boot程序，访问：<a href="http://host:port/swagger-ui.html" rel="external nofollow noopener noreferrer" target="_blank">http://host:port/swagger-ui.html</a><br>。就能看到RESTful API的页面。打开我们的测试接口的API ，可以查看这个接口的描述，以及参数等信息：<br><img src="https://i.loli.net/2018/01/25/5a6996ac5b3e6.png" alt="springboot-6-2.png"><br>点击上图中右侧的Model Schema（黄色区域：它指明了这个requestBody的数据结构），此时pet中就有了pet对象的模板，修改上测试数据，点击下方<code>Try it out！</code>按钮，即可完成了一次请求调用！<br><img src="https://i.loli.net/2018/01/25/5a6997c3a1ce9.png" alt="springboot-6-4.png"></p><p>调用完后，我们可以查看接口的返回信息：</p><p><img src="https://i.loli.net/2018/01/25/5a6996f6ab34d.png" alt="springboot-6-3.png"></p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a rel="external nofollow noopener noreferrer" target="_blank" href="http://blog.didispace.com/springbootswagger2/">Spring Boot中使用Swagger2构建强大的RESTful API文档档</a></li><li><a rel="external nofollow noopener noreferrer" target="_blank" href="https://gumutianqi1.gitbooks.io/specification-doc/content/tools-doc/spring-boot-swagger2-guide.html">spring-boot-swagger2 使用手册</a></li><li><a rel="external nofollow noopener noreferrer" target="_blank" href="http://yukinami.github.io/2015/07/07/%E4%BD%BF%E7%94%A8springfox%E7%94%9F%E6%88%90springmvc%E9%A1%B9%E7%9B%AE%E7%9A%84swagger%E7%9A%84%E6%96%87%E6%A1%A3/">使用springfox生成springmvc项目的swagger的文档</a></li></ul><h3 id="例外补充点"><a href="#例外补充点" class="headerlink" title="例外补充点"></a>例外补充点</h3><h4 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h4><p>我使用的是 <code>com.github.axet.kaptcha</code> 的验证码<br>虽然按照别人的方法使用 <code>HttpServletResponse</code> 输出流，这种是暴露 <code>Servlet</code> 的接口。但是发现了一个问题了，在 swagger 的获取验证码接上测试的时候不能得到验证码图片，但是在 <code>img</code> 标签中是没问题，发现 swagger 还是把我的返回结果作为 <code>json</code> 处理。所以我还是想到使用下载中二进制流的方法，将 <code>BufferedImage</code> 转换成二进制流数组，总算是解决。</p><p>上最后解决的办法：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取验证码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/captcha.jpg"</span>, produces = MediaType.IMAGE_JPEG_VALUE)</span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; captcha()<span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//生成文字验证码</span></span><br><span class="line">        String text = producer.createText();</span><br><span class="line">        <span class="comment">//生成图片验证码</span></span><br><span class="line">        BufferedImage image = producer.createImage(text);</span><br><span class="line">        ByteArrayOutputStream out = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ImageIO.write(image, <span class="string">"jpg"</span>, out);</span><br><span class="line">        <span class="comment">// 文字验证码保存到 shiro session</span></span><br><span class="line">        ShiroUtils.setSessionAttribute(Constants.KAPTCHA_SESSION_KEY, text);</span><br><span class="line">        HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">        headers.setCacheControl(<span class="string">"no-store, no-cache"</span>);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity</span><br><span class="line">                .status(HttpStatus.OK)</span><br><span class="line">                .headers(headers)</span><br><span class="line">                .body(out.toByteArray());</span><br></pre></td></tr></table></figure><p></p><p>我是采用 <code>ImageIO</code> 工具类的将 <code>BufferedImage</code> 转换成 输出流，从输出流中获取二进制流数组。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ImageIO.write(BufferedImage image,String format,OutputStream out)</span><br></pre></td></tr></table></figure><p></p><p>再补充一个 将二进制流数组 <code>byte[]</code> 转换成 <code>BufferedImage</code><br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将二进制流数组转换成输入流</span></span><br><span class="line">ByteArrayInputStream in = <span class="keyword">new</span> ByteArrayInputStream(<span class="keyword">byte</span>[] byets);    </span><br><span class="line"><span class="comment">// 读取输入流</span></span><br><span class="line">BufferedImage image = ImageIO.read(InputStream in);</span><br></pre></td></tr></table></figure><p></p><p>在 <code>swagger</code> 上是这样的了：</p><p><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/springboot-swagger/1.png" alt=""></p><h4 id="配置不同环境中是否启动"><a href="#配置不同环境中是否启动" class="headerlink" title="配置不同环境中是否启动"></a>配置不同环境中是否启动</h4><p>在不同环境种配置是否启用规则：<br></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">swagger:</span><br><span class="line">  enable: true  # or false</span><br></pre></td></tr></table></figure><p></p><p>在 swagger 配置类中加入<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;swagger.enable&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> enable;</span><br><span class="line"></span><br><span class="line">…… set / get</span><br></pre></td></tr></table></figure><p></p><p>配置 Docket 中<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">            .apiInfo(apiInfo())</span><br><span class="line">            <span class="comment">// 加入 enable</span></span><br><span class="line">            .enable(enable)</span><br><span class="line">            .select()</span><br><span class="line">            .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.wuwii"</span>))</span><br><span class="line">            .paths(PathSelectors.any())</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id="SpringMVC-中配置-Swagger2"><a href="#SpringMVC-中配置-Swagger2" class="headerlink" title="SpringMVC 中配置 Swagger2"></a>SpringMVC 中配置 Swagger2</h4><p>Swagger 的配置文件：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.devframe.controller"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态文件过滤</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">"swagger-ui.html"</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">"classpath:/META-INF/resources/"</span>);</span><br><span class="line"></span><br><span class="line">        registry.addResourceHandler(<span class="string">"/webjars/**"</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">"classpath:/META-INF/resources/webjars/"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.devframe"</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"RESTful APIs"</span>)</span><br><span class="line">                .description(<span class="string">"rest api 文档构建利器"</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">"https://blog.wuwii.com/"</span>)</span><br><span class="line">                .version(<span class="string">"1.0"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>额外需要在 <code>web.xml</code> 配置：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Springmvc前端控制器扫描路径增加“/v2/api-docs”，用于扫描Swagger的 /v2/api-docs，否则 /v2/api-docs无法生效。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/v2/api-docs<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h4 id="单元测试中会出现的错误"><a href="#单元测试中会出现的错误" class="headerlink" title="单元测试中会出现的错误"></a>单元测试中会出现的错误</h4><p>发现加入 <code>Swagger</code> 后，以前的单元测试再运行的时候，会抛出一个异常，参考 <a href="https://github.com/springfox/springfox/issues/654" rel="external nofollow noopener noreferrer" target="_blank">How to run integration tests with spring and springfox?</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &apos;documentationPluginsBootstrapper&apos; defined in URL [jar:file:/C:/Users/test/.m2/repository/io/springfox/springfox-spring-web/2.0.0-SNAPSHOT/springfox-spring-web-2.0.0-SNAPSHOT.jar!/springfox/documentation/spring/web/plugins/DocumentationPluginsBootstrapper.class]: Unsatisfied dependency expressed through constructor argument with index 1 of type [java.util.List]: : No qualifying bean of type [org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping] found for dependency [collection of org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping]: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: &#123;&#125;; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping] found for dependency [collection of org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping]: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: &#123;&#125;</span><br></pre></td></tr></table></figure><p>解决，单元测试上加入 <code>@EnableWebMvc</code></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习Spring Boot：（八）Mybatis使用分页插件PageHelper]]></title>
      <url>/springboot-8.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><p>首先Mybqtis可以通过SQL 的方式实现分页很简单，只要在查询SQL 后面加上<code>limit #{currIndex} , #{pageSize}</code>就可以了。</p><p>本文主要介绍使用<strong>拦截器</strong>的方式实现分页。</p><a id="more"></a><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>拦截器实现了拦截所有查询需要分页的方法，并且利用获取到的分页相关参数统一在sql语句后面加上limit分页的相关语句，从而达到SQL 分页的目的，它的好处不用多说了，代码也写的很少，对SQL 的侵入较少，推荐使用。</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pagehelper.version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">pagehelper.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;pagehelper.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>在系统配置文件中加入pagehelper的配置信息：<br></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pagehelper:</span></span><br><span class="line"><span class="attr">  helper-dialect:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">  reasonable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  supportMethodsArguments:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  params:</span> <span class="string">count=countSql</span></span><br></pre></td></tr></table></figure><p></p><p>针对<code>pagehelper</code>的配置参数，查询了一下：</p><ol><li><p><code>helperDialect</code>：分页插件会自动检测当前的数据库链接，自动选择合适的分页方式。<br>你可以配置<code>helperDialect</code>属性来指定分页插件使用哪种方言。配置时，可以使用下面的缩写值：<br><code>oracle</code>,<code>mysql</code>,<code>mariadb</code>,<code>sqlite</code>,<code>hsqldb</code>,<code>postgresql</code>,<code>db2</code>,<code>sqlserver</code>,<code>informix</code>,<code>h2</code>,<code>sqlserver2012</code>,<code>derby</code><br><b>特别注意：</b>使用 SqlServer2012 数据库时，需要手动指定为 <code>sqlserver2012</code>，否则会使用 SqlServer2005 的方式进行分页。<br>你也可以实现 <code>AbstractHelperDialect</code>，然后配置该属性为实现类的全限定名称即可使用自定义的实现方法。</p></li><li><p><code>offsetAsPageNum</code>：默认值为 <code>false</code>，该参数对使用 <code>RowBounds</code> 作为分页参数时有效。<br>当该参数设置为 <code>true</code> 时，会将 <code>RowBounds</code> 中的 <code>offset</code> 参数当成 <code>pageNum</code> 使用，可以用页码和页面大小两个参数进行分页。</p></li><li><p><code>rowBoundsWithCount</code>：默认值为<code>false</code>，该参数对使用 <code>RowBounds</code> 作为分页参数时有效。<br>当该参数设置为<code>true</code>时，使用 <code>RowBounds</code> 分页会进行 count 查询。</p></li><li><p><code>pageSizeZero</code>：默认值为 <code>false</code>，当该参数设置为 <code>true</code> 时，如果 <code>pageSize=0</code> 或者 <code>RowBounds.limit = 0</code> 就会查询出全部的结果（相当于没有执行分页查询，但是返回结果仍然是 <code>Page</code> 类型）。</p></li><li><p><code>reasonable</code>：分页合理化参数，默认值为<code>false</code>。当该参数设置为 <code>true</code> 时，<code>pageNum&lt;=0</code> 时会查询第一页，<br><code>pageNum&gt;pages</code>（超过总数时），会查询最后一页。默认<code>false</code> 时，直接根据参数进行查询。</p></li><li><p><code>params</code>：为了支持<code>startPage(Object params)</code>方法，增加了该参数来配置参数映射，用于从对象中根据属性名取值，<br>可以配置 <code>pageNum,pageSize,count,pageSizeZero,reasonable</code>，不配置映射的用默认值，<br>默认值为<code>pageNum=pageNum;pageSize=pageSize;count=countSql;reasonable=reasonable;pageSizeZero=pageSizeZero</code>。</p></li><li><p><code>supportMethodsArguments</code>：支持通过 Mapper 接口参数来传递分页参数，默认值<code>false</code>，分页插件会从查询方法的参数值中，自动根据上面 <code>params</code> 配置的字段中取值，查找到合适的值时就会自动分页。<br>使用方法可以参考测试代码中的 <code>com.github.pagehelper.test.basic</code> 包下的 <code>ArgumentsMapTest</code> 和 <code>ArgumentsObjTest</code>。</p></li><li><p><code>autoRuntimeDialect</code>：默认值为 <code>false</code>。设置为 <code>true</code> 时，允许在运行时根据多数据源自动识别对应方言的分页<br>（不支持自动选择<code>sqlserver2012</code>，只能使用<code>sqlserver</code>），用法和注意事项参考下面的<strong>场景五</strong>。</p></li><li><p><code>closeConn</code>：默认值为 <code>true</code>。当使用运行时动态数据源或没有设置 <code>helperDialect</code> 属性自动获取数据库类型时，会自动获取一个数据库连接，<br>通过该属性来设置是否关闭获取的这个连接，默认<code>true</code>关闭，设置为 <code>false</code> 后，不会关闭获取的连接，这个参数的设置要根据自己选择的数据源来决定。</p></li></ol><p><strong>重要提示：</strong></p><p>当 <code>offsetAsPageNum=false</code> 的时候，由于 <code>PageNum</code> 问题，<code>RowBounds</code>查询的时候 <code>reasonable</code> 会强制为 <code>false</code>。使用 <code>PageHelper.startPage</code> 方法不受影响。<br><strong>注：</strong> <code>PageRowBounds</code> 想要查询总数也需要配置该属性为 <code>true</code>。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>在业务查询 的时候加上<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PageHelper.startPage(pageIndex, pageSize);</span><br></pre></td></tr></table></figure><p></p><p>例如：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;SysUserEntity&gt; <span class="title">query</span><span class="params">(SysUserEntity user)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 查询第一页的两条数据</span></span><br><span class="line">        PageHelper.startPage(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> sysUserDao.query(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><p>测试一下返回结果：</p><p><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/springboot-pagehelper/1.png" alt="image"></p><p>我们来看下它执行的SQL :<br></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Preparing: <span class="keyword">SELECT</span> <span class="keyword">count</span>(<span class="number">0</span>) <span class="keyword">FROM</span> sys_user </span><br><span class="line"><span class="keyword">Parameters</span>: </span><br><span class="line">     Total: <span class="number">1</span></span><br><span class="line">Preparing: <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> sys_user <span class="keyword">LIMIT</span> ? </span><br><span class="line"><span class="keyword">Parameters</span>: <span class="number">2</span>(<span class="built_in">Integer</span>)</span><br><span class="line">     Total: <span class="number">2</span></span><br></pre></td></tr></table></figure><p></p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p><strong>使用的时候，需要仔细阅读作者的文章<a href="https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md" rel="external nofollow noopener noreferrer" target="_blank"><br>pagehelper/Mybatis-PageHelper</a></strong></p><p>主要是阅读使用方法，以及各个场景中使用什么方法解决问题，注意事项。</p><h4 id="分页排序"><a href="#分页排序" class="headerlink" title="分页排序"></a>分页排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PageHelper.startPage(pageIndex, pageSize, orderBy);</span><br></pre></td></tr></table></figure><h4 id="支持返回PageInfo"><a href="#支持返回PageInfo" class="headerlink" title="支持返回PageInfo"></a>支持返回PageInfo</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PageInfo <span class="title">queryByPageInfo</span><span class="params">(SysUserEntity user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> PageHelper.startPage(<span class="number">1</span>,<span class="number">2</span>).doSelectPageInfo(() -&gt; sysUserDao.query(user));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用Swagger测试返回数据：<br></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"pageNum"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"pageSize"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"size"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"startRow"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"endRow"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"total"</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="attr">"pages"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"list"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"username"</span>: <span class="string">"def"</span>,</span><br><span class="line">      <span class="attr">"password"</span>: <span class="string">"123"</span>,</span><br><span class="line">      <span class="attr">"mobile"</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">"email"</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">"createUserId"</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">"createDate"</span>: <span class="literal">null</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="number">7</span>,</span><br><span class="line">      <span class="attr">"username"</span>: <span class="string">"wuwii"</span>,</span><br><span class="line">      <span class="attr">"password"</span>: <span class="string">"123"</span>,</span><br><span class="line">      <span class="attr">"mobile"</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">"email"</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">"createUserId"</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">"createDate"</span>: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"prePage"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"nextPage"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"isFirstPage"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"isLastPage"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"hasPreviousPage"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"hasNextPage"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"navigatePages"</span>: <span class="number">8</span>,</span><br><span class="line">  <span class="attr">"navigatepageNums"</span>: [</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    <span class="number">2</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"navigateFirstPage"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"navigateLastPage"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"firstPage"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"lastPage"</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习Spring Boot：（三）配置文件]]></title>
      <url>/springboot-3.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Spring Boot使用<code>习惯优于配置</code>（项目中存在大量的配置，此外还内置了一个习惯性的配置，让你无需手动进行配置）的理念让你的项目快速运行起来。</p><a id="more"></a><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="使用配置文件注入属性"><a href="#使用配置文件注入属性" class="headerlink" title="使用配置文件注入属性"></a>使用配置文件注入属性</h4><p>Spring Boot 默认的配置文件<code>src/main/java/resources/application.properties</code>或者<code>src/main/java/resources/application.yml</code>，在这里我们可以配置一些常量。<br>首先我们使用配置文件给一个类注入相关的属性：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.wuwii.controller.pet.no=$&#123;random.uuid&#125;</span><br><span class="line">com.wuwii.controller.pet.name=Tom</span><br></pre></td></tr></table></figure><p></p><p>通过注解<code>@Value(value=”${config.name}”)</code>就可以绑定到你想要的属性上面。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/pet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PetController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;com.wuwii.controller.pet.no&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String no;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;com.wuwii.controller.pet.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/d"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">detail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"no: "</span> + no + <span class="string">", name: "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>启动<br><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fno1evzf6sj20fv04n0sp.jpg" alt=""></p><p>一个个绑定数据还是很不方便，可以新建一个Bean，专门用来绑定注入的属性使用注解@ConfigurationProperties(prefix = “prefix”)，不过需要注意的是先要引入相关依赖<br></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;  </span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  </span><br><span class="line">     &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;  </span><br><span class="line">     &lt;optional&gt;true&lt;/optional&gt;  </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p></p><p>通过使用spring-boot-configuration-processor jar， 你可以从被@ConfigurationProperties注解的节点轻松的产生自己的配置元数据文件。</p><p>这里我新建一个PetBean用来注入属性。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"com.wuwii.controller.pet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PetBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String no;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNo</span><span class="params">(String no)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.no = no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><p>注意在启动类上加上注解<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableConfigurationProperties</span>(&#123;PetBean.class&#125;)，</span><br></pre></td></tr></table></figure><p></p><p>根据字面意思不难理解，就是开启配置属性。</p><p>新建一个controller，注入我们创建的PetBean，<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/v2/pet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PetController1</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PetBean pet;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/d"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">detail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"no: "</span> + pet.getNo() + <span class="string">", name: "</span> + pet.getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>重启Spring Boot，访问新地址：<br><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fno25n0o60j20hi043weg.jpg" alt=""></p><h4 id="使用自定义的配置文件"><a href="#使用自定义的配置文件" class="headerlink" title="使用自定义的配置文件"></a>使用自定义的配置文件</h4><p>我们在resouce目录下面创建一个<code>bean/pet.properties</code>，加入<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.wuwii.name=Tom</span><br><span class="line">com.wuwii.no=123456</span><br></pre></td></tr></table></figure><p></p><p>新建一个PetBean1.java：<br><code>@PropertySource</code> 这个注解可以指定具体的属性配置文件，优先级比较低。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"com.wuwii"</span>)</span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:bean/pet.properties"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PetBean1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String no;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNo</span><span class="params">(String no)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.no = no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><p>在controller中加入PetBean1的注入<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PetBean1 pet1;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/d2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">detail2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"no: "</span> + pet1.getNo() + <span class="string">", name: "</span> + pet1.getName();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><h4 id="应用配置文件（-properties或-yml）"><a href="#应用配置文件（-properties或-yml）" class="headerlink" title="应用配置文件（.properties或.yml）"></a>应用配置文件（.properties或.yml）</h4><p>在配置文件中直接写：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port=8080</span><br></pre></td></tr></table></figure><p></p><p><code>.yml</code>格式的配置文件如：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">    port: 8080</span><br></pre></td></tr></table></figure><p></p><p>tips: .yml中冒号后面一定要加一个空格。</p><h4 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h4><p>配置文件中${random} 可以用来生成各种不同类型的随机值，<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">my.secret=$&#123;random.value&#125;</span><br><span class="line">my.number=$&#123;random.int&#125;</span><br><span class="line">my.bignumber=$&#123;random.long&#125;</span><br><span class="line">my.number.less.than.ten=$&#123;random.int(10)&#125;</span><br><span class="line">my.number.in.range=$&#123;random.int[1024,65536]&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id="属性占位符"><a href="#属性占位符" class="headerlink" title="属性占位符"></a>属性占位符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.name=MyApp</span><br><span class="line">app.description=$&#123;app.name&#125; is a Spring Boot application</span><br></pre></td></tr></table></figure><p>可以在配置文件中引用前面配置过的属性（优先级前面配置过的这里都能用）。<br>通过如${app.name:默认名称}方法还可以设置默认值，当找不到引用的属性时，会使用默认的属性。</p><h4 id="属性名匹配规则"><a href="#属性名匹配规则" class="headerlink" title="属性名匹配规则"></a>属性名匹配规则</h4><p>例如有如下配置对象：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix=<span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionSettings</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String firstName;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>firstName</code>可以使用的属性名如下：</p><ul><li><code>person.firstName</code>，标准的驼峰式命名</li><li><code>person.first-name</code>，虚线（-）分割方式，推荐在.properties和.yml配置文件中使用</li><li><code>PERSON_FIRST_NAME</code>，大写下划线形式，建议在系统环境变量中使用</li></ul><h4 id="属性验证"><a href="#属性验证" class="headerlink" title="属性验证"></a>属性验证</h4><p>可以使用<code>JSR-303</code>注解进行验证，例如：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix=<span class="string">"connection"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionSettings</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> InetAddress remoteAddress;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ... getters and setters</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id="配置文件的优先级"><a href="#配置文件的优先级" class="headerlink" title="配置文件的优先级"></a>配置文件的优先级</h4><p>Spring Boot 支持多种外部配置方式，这些方式优先级如下：</p><ol><li>命令行参数</li><li>来自<code>java:comp/env</code>的JNDI属性</li><li>Java系统属性（<code>System.getProperties()</code>）</li><li>操作系统环境变量</li><li>RandomValuePropertySource配置的<code>random.*</code>属性值</li><li>jar包外部的<code>application-{profile}.properties</code>或<code>application.yml(带spring.profile)</code>配置文件</li><li>jar包内部的<code>application-{profile}.properties</code>或<code>application.yml(带spring.profile)</code>配置文件</li><li>jar包外部的<code>application.properties</code>或<code>application.yml(不带spring.profile)</code>配置文件</li><li>jar包内部的<code>application.properties</code>或<code>application.yml(不带spring.profile)</code>配置文件</li><li><code>@Configuration</code>注解类上<code>的@PropertySource</code></li><li>通过<code>SpringApplication.setDefaultProperties</code>指定的默认属性</li></ol><p>同样，这个列表按照优先级排序，也就是说，src/main/resources/config下application.properties覆盖src/main/resources下application.properties中相同的属性，此外，如果你在相同优先级位置同时有application.properties和application.yml，那么application.properties里的属性里面的属性就会覆盖application.yml。</p><h4 id="Profile-多环境配置"><a href="#Profile-多环境配置" class="headerlink" title="Profile-多环境配置"></a>Profile-多环境配置</h4><p>当应用程序需要部署到不同运行环境时，一些配置细节通常会有所不同，最简单的比如日志，生产日志会将日志级别设置为WARN或更高级别，并将日志写入日志文件，而开发的时候需要日志级别为DEBUG，日志输出到控制台即可。<br>如果按照以前的做法，就是每次发布的时候替换掉配置文件，这样太麻烦了，Spring Boot的Profile就给我们提供了解决方案，命令带上参数就搞定。</p><p>这里我们来模拟一下，只是简单的修改端口来测试<br>在Spring Boot中多环境配置文件名需要满足application-{profile}.properties的格式，其中{profile}对应你的环境标识，比如：</p><ul><li>application-dev.properties：开发环境</li><li>application-prod.properties：生产环境</li></ul><p>然后在application.properties中加入<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.profiles.active=dev</span><br></pre></td></tr></table></figure><p></p><p>或application.yml中加入<br></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="comment"># 环境 dev|test|pro</span></span><br><span class="line"><span class="attr">    profiles:</span></span><br><span class="line"><span class="attr">        active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><p></p><p>或启动命令：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar xxx.jar --spring.profiles.active=dev</span><br></pre></td></tr></table></figure><p></p><p>参数用–xxx=xxx的形式传递。意思就是表示在application.properties文件中配置了属性。<br>可以通过SpringApplication.setAddCommandLineProperties(false)禁用命令行配置。</p><h3 id="附：Appendix-A-Common-application-properties"><a href="#附：Appendix-A-Common-application-properties" class="headerlink" title="附：Appendix A. Common application properties"></a>附：Appendix A. Common application properties</h3><p><a rel="external nofollow noopener noreferrer" target="_blank" href="https://docs.spring.io/spring-boot/docs/current/reference/html/common-application-properties.html">Appendix A. Common application properties</a></p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li>《SpringBoot揭秘 快速构建微服务体系》</li><li><a rel="external nofollow noopener noreferrer" target="_blank" href="http://tengj.top/2017/02/28/springboot2/">Spring Boot干货系列：（二）配置文件解析</a></li><li><a rel="external nofollow noopener noreferrer" target="_blank" href="http://blog.csdn.net/clementad/article/details/51970962">spring boot 读取配置文件（application.yml）中的属性值</a></li></ul><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习Spring Boot：（二）启动原理]]></title>
      <url>/springboot-2.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>主要了解前面的程序入口 <code>@@SpringBootApplication</code> 这个注解的结构。</p><a id="more"></a><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>参考《SpringBoot揭秘 快速构建微服务体系》第三章的学习，总结下。</p><h4 id="SpringBootApplication背后的秘密"><a href="#SpringBootApplication背后的秘密" class="headerlink" title="SpringBootApplication背后的秘密"></a>SpringBootApplication背后的秘密</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123;</span><br><span class="line">        <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span><br><span class="line">        <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然定义使用了多个Annotation进行了原信息标注，但实际上重要的只有三个Annotation：</p><ul><li>@Configuration（@SpringBootConfiguration点开查看发现里面还是应用了@Configuration）</li><li>@EnableAutoConfiguration</li><li>@ComponentScan</li></ul><p>所以，如果我们使用如下的SpringBoot启动类，整个SpringBoot应用依然可以与之前的启动类功能对等：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>但每次都写三个Annotation显然过于繁琐，所以写一个@SpringBoot-Application这样的一站式复合Annotation显然更方便些。</p><h4 id="Configuration创世纪"><a href="#Configuration创世纪" class="headerlink" title="@Configuration创世纪"></a>@Configuration创世纪</h4><blockquote><p>这里的@Configuration对我们来说并不陌生，它就是JavaConfig形式的Spring IoC容器的配置类使用的那个@Configuration，既然SpringBoot应用骨子里就是一个Spring应用，那么，自然也需要加载某个IoC容器的配置，而SpringBoot社区推荐使用基于JavaConfig的配置形式，所以，很明显，这里的启动类标注了@Configuration之后，本身其实也是一个IoC容器的配置类！<br>很多SpringBoot的代码示例都喜欢在启动类上直接标注@Configuration或者@SpringBootApplication，对于初接触SpringBoot的开发者来说，其实这种做法不便于理解，如果我们将上面的SpringBoot启动类拆分为两个独立的Java类，整个形势就明朗了：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Controller <span class="title">controller</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Controller();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoConfiguration.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p></blockquote><blockquote><p>所以，启动类DemoApplication其实就是一个标准的Standalone类型Java程序的main函数启动类，没有什么特殊的。<br>而@Configuration标注的DemoConfiguration定义其实也是一个普通的JavaConfig形式的IoC容器配置类，没啥新东西，全是Spring框架里的概念！</p></blockquote><p>不要被这个长篇大论弄模糊了，这个其实在以前学习Spring中也有这些注解，Spring容器中为了简化XMl配置，允许使用JavaConfig注册一个Bean。就是使用的是<code>@Configuration</code>，每个拥有注解<code>@Bean</code>的函数的返回值，都将会在SPring启动时候注册到容器中，可以使用自动装配，如下一个JavaConfig的注册Bean：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class Configs &#123;</span><br><span class="line">    @Value(&quot;classpath:data.json&quot;)</span><br><span class="line">    protected File configFile;</span><br><span class="line">    @Bean</span><br><span class="line">    public PersonCfg readServerConfig() throws IOException &#123;</span><br><span class="line">        return new ObjectMapper().readValue(configFile, PersonCfg.class);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><h4 id="EnableAutoConfiguration的功效"><a href="#EnableAutoConfiguration的功效" class="headerlink" title="@EnableAutoConfiguration的功效"></a>@EnableAutoConfiguration的功效</h4><blockquote><p>@EnableAutoConfiguration其实也没啥“创意”，各位是否还记得Spring框架提供的各种名字为@Enable开头的Annotation定义？比如@EnableScheduling、@EnableCaching、@EnableMBeanExport等，@EnableAutoConfiguration的理念和“做事方式”其实一脉相承，简单概括一下就是，借助@Import的支持，收集和注册特定场景相关的bean定义：</p><ul><li>@Enable Scheduling是通过@Import将Spring调度框架相关的bean定义都加载到IoC容器。</li><li>@Enable M Bean Export是通过@Import将JMX相关的bean定义加载到IoC容器。</li></ul><p>而@EnableAutoConfiguration也是借助@Import的帮助，将所有符合自动配置条件的bean定义加载到IoC容器，仅此而已！<br>@EnableAutoConfiguration作为一个复合Annotation，其自身定义关键信息如下：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(EnableAutoConfigurationImportSelector.class)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p></blockquote><p>其中，最关键的要属<code>@Import(EnableAutoConfigurationImportSelector.class)</code>，借 助<code>EnableAutoConfigurationImportSelector</code>, <code>@EnableAutoConfiguration可以帮助SpringBoot</code>应用将所有符合条件的@Configuration配置都加载到当前SpringBoot创建并使用的IoC容器，就跟一只“八爪鱼”一样。<br>借助于Spring框架原有的一个工具类：SpringFactoriesLoader的支持，@EnableAutoConfiguration可以“智能”地自动配置功效才得以大功告成！<br><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fnoe3ayl8oj20qd0pf0vs.jpg" alt=""></p><h5 id="自动配置幕后英雄：SpringFactoriesLoader详解"><a href="#自动配置幕后英雄：SpringFactoriesLoader详解" class="headerlink" title="自动配置幕后英雄：SpringFactoriesLoader详解"></a>自动配置幕后英雄：SpringFactoriesLoader详解</h5><p>SpringFactoriesLoader属于Spring框架私有的一种扩展方案，其主要功能就是从指定的配置文件META-INF/spring.factories加载配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringFactoriesLoader</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">loadFactories</span><span class="params">(Class&lt;T&gt; factoryClass, ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">loadFactoryNames</span><span class="params">(Class&lt;?&gt; factoryClass, ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配合@EnableAutoConfiguration使用的话，它更多是提供一种配置查找的功能支持，即根据@EnableAutoConfiguration的完整类名org.springframework.boot.autoconfigure.EnableAutoConfiguration作为查找的Key,获取对应的一组@Configuration类：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"># PropertySource Loaders</span><br><span class="line">org.springframework.boot.env.PropertySourceLoader=\</span><br><span class="line">org.springframework.boot.env.PropertiesPropertySourceLoader,\</span><br><span class="line">org.springframework.boot.env.YamlPropertySourceLoader</span><br><span class="line"></span><br><span class="line"># Run Listeners</span><br><span class="line">org.springframework.boot.SpringApplicationRunListener=\</span><br><span class="line">org.springframework.boot.context.event.EventPublishingRunListener</span><br><span class="line"></span><br><span class="line"># Application Context Initializers</span><br><span class="line">org.springframework.context.ApplicationContextInitializer=\</span><br><span class="line">org.springframework.boot.context.ConfigurationWarningsApplicationContextInitializer,\</span><br><span class="line">org.springframework.boot.context.ContextIdApplicationContextInitializer,\</span><br><span class="line">org.springframework.boot.context.config.DelegatingApplicationContextInitializer,\</span><br><span class="line">org.springframework.boot.context.embedded.ServerPortInfoApplicationContextInitializer</span><br><span class="line"></span><br><span class="line"># Application Listeners</span><br><span class="line">org.springframework.context.ApplicationListener=\</span><br><span class="line">org.springframework.boot.ClearCachesApplicationListener,\</span><br><span class="line">org.springframework.boot.builder.ParentContextCloserApplicationListener,\</span><br><span class="line">org.springframework.boot.context.FileEncodingApplicationListener,\</span><br><span class="line">org.springframework.boot.context.config.AnsiOutputApplicationListener,\</span><br><span class="line">org.springframework.boot.context.config.ConfigFileApplicationListener,\</span><br><span class="line">org.springframework.boot.context.config.DelegatingApplicationListener,\</span><br><span class="line">org.springframework.boot.liquibase.LiquibaseServiceLocatorApplicationListener,\</span><br><span class="line">org.springframework.boot.logging.ClasspathLoggingApplicationListener,\</span><br><span class="line">org.springframework.boot.logging.LoggingApplicationListener</span><br><span class="line"></span><br><span class="line"># Environment Post Processors</span><br><span class="line">org.springframework.boot.env.EnvironmentPostProcessor=\</span><br><span class="line">org.springframework.boot.cloud.CloudFoundryVcapEnvironmentPostProcessor,\</span><br><span class="line">org.springframework.boot.env.SpringApplicationJsonEnvironmentPostProcessor</span><br><span class="line"></span><br><span class="line"># Failure Analyzers</span><br><span class="line">org.springframework.boot.diagnostics.FailureAnalyzer=\</span><br><span class="line">org.springframework.boot.diagnostics.analyzer.BeanCurrentlyInCreationFailureAnalyzer,\</span><br><span class="line">org.springframework.boot.diagnostics.analyzer.BeanNotOfRequiredTypeFailureAnalyzer,\</span><br><span class="line">org.springframework.boot.diagnostics.analyzer.BindFailureAnalyzer,\</span><br><span class="line">org.springframework.boot.diagnostics.analyzer.ConnectorStartFailureAnalyzer,\</span><br><span class="line">org.springframework.boot.diagnostics.analyzer.NoUniqueBeanDefinitionFailureAnalyzer,\</span><br><span class="line">org.springframework.boot.diagnostics.analyzer.PortInUseFailureAnalyzer,\</span><br><span class="line">org.springframework.boot.diagnostics.analyzer.ValidationExceptionFailureAnalyzer</span><br><span class="line"></span><br><span class="line"># FailureAnalysisReporters</span><br><span class="line">org.springframework.boot.diagnostics.FailureAnalysisReporter=\</span><br><span class="line">org.springframework.boot.diagnostics.LoggingFailureAnalysisReporter</span><br></pre></td></tr></table></figure><p></p><blockquote><p>以上是从SpringBoot的autoconfigure依赖包中的META-INF/spring.factories配置文件中摘录的一段内容，可以很好地说明问题。<br>以，@EnableAutoConfiguration自动配置的魔法其实就变成了：<strong>从classpath中搜寻所有META-INF/spring.factories配置文件，并将其中org.spring-framework.boot.autoconfigure.EnableAutoConfiguration对应的配置项通过反射（Java Reflection）实例化为对应的标注了@Configuration的JavaConfig形式的IoC容器配置类，然后汇总为一个并加载到IoC容器。</strong></p></blockquote><h4 id="可有可无的-Configuration"><a href="#可有可无的-Configuration" class="headerlink" title="可有可无的@Configuration"></a>可有可无的@Configuration</h4><blockquote><p>@Component Scan的功能其实就是自动扫描并加载符合条件的组件或bean定义，最终将这些bean定义加载到容器中。加载bean定义到Spring的IoC容器，我们可以手工单个注册，不一定非要通过批量的自动扫描完成，所以说@Component Scan是可有可无的。</p></blockquote><h4 id="深入探索SpringApplication执行流程"><a href="#深入探索SpringApplication执行流程" class="headerlink" title="深入探索SpringApplication执行流程"></a>深入探索SpringApplication执行流程</h4><p>SpringApplication的run方法的实现是我们本次旅程的主要线路， 该方法的主要流程大体可以归纳如下：</p><ol><li>如果我们使用的是SpringApplication的静态run方法，那么，这个方法里面首先需要创建一个SpringApplication对象实例，然后调用这个创建好的SpringApplication的实例run方法。在SpringApplication实例初始化的时候，它会提前做几件事情：</li></ol><ul><li>根据classpath里面是否存在某个特征类（org.springframework.web.context.ConfigurableWebApplicationContext）来决定是否应该创建一个为Web应用使用的ApplicationContext类型，还是应该创建一个标准Standalone应用使用的ApplicationContext类型。</li><li>使用SpringFactoriesLoader在应用的classpath中查找并加载所有可用的ApplicationContextInitializer。</li><li>使用SpringFactoriesLoader在应用的classpath中查找并加载所有可用的ApplicationListener。</li><li>推断并设置main方法的定义类。</li></ul><ol start="2"><li>SpringApplication实例初始化完成并且完成设置后，就开始执行run方法的逻辑了，方法执行伊始，首先遍历执行所有通过SpringFactoriesLoader可以查找到并加载的SpringApplicationRunListener，调用它们的started()方法，告诉这些SpringApplicationRunListener，“嘿，SpringBoot应用要开始执行咯！”。</li><li>创建并配置当前SpringBoot应用将要使用的Environment（包括配置要使用的PropertySource以及Profile）。</li><li>遍历调用所有SpringApplicationRunListener的environmentPrepared()的方法，告诉它们：“当前SpringBoot应用使用的Environment准备好咯！”。</li><li>如果SpringApplication的showBanner属性被设置为true，则打印banner（SpringBoot 1.3.x版本，这里应该是基于Banner.Mode决定banner的打印行为）。这一步的逻辑其实可以不关心，我认为唯一的用途就是“好玩”（Just For Fun）。</li><li>根据用户是否明确设置了applicationContextClass类型以及初始化阶段的推断结果，决定该为当前SpringBoot应用创建什么类型的ApplicationContext并创建完成，然后根据条件决定是否添加ShutdownHook，决定是否使用自定义的BeanNameGenerator，决定是否使用自定义的ResourceLoader，当然，最重要的，将之前准备好的Environment设置给创建好的ApplicationContext使用。</li><li>ApplicationContext创建好之后，SpringApplication会再次借助Spring-FactoriesLoader，查找并加载classpath中所有可用的ApplicationContext-Initializer，然后遍历调用这些ApplicationContextInitializer的initialize (applicationContext)方法来对已经创建好的ApplicationContext进行进一步的处理。</li><li>遍历调用所有SpringApplicationRunListener的contextPrepared()方法， 通知它们：“SpringBoot应用使用的ApplicationContext准备好啦！”</li><li>最核心的一步，将之前通过@EnableAutoConfiguration获取的所有配置以及其他形式的IoC容器配置加载到已经准备完毕的ApplicationContext。</li><li>遍历调用所有SpringApplicationRunListener的contextLoaded()方法，告知所有SpringApplicationRunListener，ApplicationContext”装填完毕”!</li><li>调用ApplicationContext的refresh()方法，完成IoC容器可用的最后一道工序。</li><li>查找当前ApplicationContext中是否注册有CommandLineRunner，如果有，则遍历执行它们。</li><li>正常情况下，遍历执行SpringApplicationRunListener的finished()方法，告知它们：“搞定！”。（如果整个过程出现异常，则依然调用所有SpringApplicationRunListener的finished()方法，只不过这种情况下会将异常信息一并传入处理）。</li></ol><p>至此，一个完整的SpringBoot应用启动完毕！</p><p>整个过程看起来冗长无比，但其实很多都是一些事件通知的扩展点，如果我们将这些逻辑暂时忽略，那么，其实整个SpringBoot应用启动的逻辑就可以压缩到极其精简的几步。<br><img src="https://i.loli.net/2018/01/21/5a646ee77ff52.jpg" alt="springboot.jpg"></p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li>《SpringBoot揭秘 快速构建微服务体系》 第三章</li></ul><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习Spring Boot：（一）入门]]></title>
      <url>/springboot-1.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h2 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h2><p>现在微服务越来越火了，Spring Boot热度蹭蹭直升，自学下。</p><blockquote><p>微服务其实是服务化思路的一种最佳实践方向，遵循SOA（面向服务的架构）的思路，各个企业在服务化治理上面的道路已经走得很远了，整个软件交付链上各个环节的基础设施逐渐成熟了，微服务就诞生了。</p></blockquote><blockquote><p>微服务给我们也带来了很多挑战，服务“微”化之后，一个显著的特征就是服务的数量增多了。如果将软件开发和交付也作为一种生产模式的看待，那么数量众多的微服务实际上就类似于传统生产线上的产品，而在传统生产模式下，为了能够高效地生产大量产品，通常采用的就是标准化生产。</p></blockquote><a id="more"></a><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><blockquote><p>Spring Boot只是简化了spring 全家桶的配置，它使用“习惯优于配置”（Convention Over Configuration 项目中存在大量的配置，此外还内置了一个习惯性的配置，让你无需手动进行配置）的理念让你的项目快速运行起来。使用Spring Boot很容易创建一个独立运行（运行jar,内嵌Servlet容器）、准生产级别的基于Spring框架的项目，使用Spring Boot你可以不用或者只需要很少的Spring配置。</p></blockquote><h2 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h2><ul><li>自动配置：针对很多Spring应用程序常见的应用功能，Spring Boot能自动提供相关配置。</li><li>起步依赖：告诉Spring Boot需要什么功能，它就能引入需要的库。</li><li>命令行界面：这是Spring Boot的可选特性，借此你只需写代码就能完成完整的应用程序，无需传统项目构建。</li><li>Actuator：让你能够深入运行中的Spring Boot应用程序，一探究竟。</li></ul><h2 id="入门：搭建一个Spring-Boot-Web"><a href="#入门：搭建一个Spring-Boot-Web" class="headerlink" title="入门：搭建一个Spring Boot Web"></a>入门：搭建一个Spring Boot Web</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>我是使用的IDEA，它已经集成了Spring Boot。<br>选择file - 新建一个项目，选择Spring Initializr<br>注意我选择的jdk 是1.8 ，推荐使用1.8 ，好像低版本的1.5 、1.6有限制，还有就是现在最新版本1.5.9的Spring Boot还不支持jdk9。<br><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fniu4p558oj20vr0p13zo.jpg" alt=""></p><p>next -》 next<br>选择Spring Boot 版本，选择需要的模块，我们开始学习就使用默认的Web模块。<br><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fniu5731p7j20vr0p1t9v.jpg" alt=""></p><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>初始化完成后，会生成几个文件，项目结构：<br><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fnnhm0jydbj20da0cv0t6.jpg" alt="image"></p><ul><li>pom.xml：Maven构建说明文件。</li><li>*Application：带有main()方法的类，用于启动应用程序。</li><li>*ApplicationTests：一个空的Junit测试类，它加载了一个使用Spring Boot字典配置功能的Spring应用程序上下文。</li><li>application.properties：一个空的properties文件，用于配置项目的相关属性。</li><li>static存放相关静态文件；</li><li>template 存放模板渲染文件。</li></ul><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wuwii<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>learn-spring-boot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>learn-spring-boot<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="使用的是Spring-Boot父级依赖"><a href="#使用的是Spring-Boot父级依赖" class="headerlink" title="使用的是Spring Boot父级依赖"></a>使用的是Spring Boot父级依赖</h5><p>，spring-boot-starter-parent是一个特殊的starter,它用来提供相关的Maven默认依赖，使用它之后，常用的包依赖可以省去version标签。</p><h5 id="起步依赖-spring-boot-starter-xx"><a href="#起步依赖-spring-boot-starter-xx" class="headerlink" title="起步依赖 spring-boot-starter-xx"></a>起步依赖 spring-boot-starter-xx</h5><p>Spring Boot提供了很多”开箱即用“的依赖模块，都是以spring-boot-starter-xx作为命名的。举个例子来说明一下这个起步依赖的好处，比如组装台式机和品牌机，自己组装的话需要自己去选择不同的零件，最后还要组装起来，期间有可能会遇到零件不匹配的问题。耗时又消力，而品牌机就好一点，买来就能直接用的，后续想换零件也是可以的。相比较之下，后者带来的效果更好点（这里就不讨论价格问题哈），起步依赖就像这里的品牌机，自动给你封装好了你想要实现的功能的依赖。就比如我们之前要实现web功能，引入了spring-boot-starter-web这个起步依赖。</p><p>起步依赖本质上是一个Maven项目对象模型（Project Object Model，POM），定义了对其他库的传递依赖，这些东西加在一起即支持某项功能。很多起步依赖的命名都暗示了它们提供的某种或者某类功能。</p><h5 id="Spring-Boot-Maven插件"><a href="#Spring-Boot-Maven插件" class="headerlink" title="Spring Boot Maven插件"></a>Spring Boot Maven插件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>把项目打包成一个可执行的超级JAR（uber-JAR）,包括把应用程序的所有依赖打入JAR文件内，并为JAR添加一个描述文件，其中的内容能让你用java -jar来运行应用程序。</li><li>搜索public static void main()方法来标记为可运行类。</li></ul><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>现在添加一个接口，来启动项目运行：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuwii.learnspringboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LearnSpringBootApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"Hello World"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(LearnSpringBootApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id="启动方式"><a href="#启动方式" class="headerlink" title="启动方式"></a>启动方式</h4><ul><li>@SpringBootApplication是Sprnig Boot项目的核心注解，主要目的是开启自动配置。后续讲解原理的时候再深入介绍。main方法这是一个标准的Java应用的main的方法，主要作用是作为项目启动的入口，直接运行它的main() 函数。</li><li>使用命令 mvn spring-boot:run”在命令行启动该应用，IDEA中该命令在如下位置：<br><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fniutggip4j20h50gcwg2.jpg" alt=""><ul><li>运行“mvn package”进行打包时，会打包成一个可以直接运行的 JAR 文件，使用“java -jar”命令就可以直接运行。<br><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fnivaegtkuj20fn0dxwev.jpg" alt=""></li></ul></li></ul><p><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fnivck4591j20kp0b5my6.jpg" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>了解Spring Boot 的基本结构和相关属性的概念；</li><li>启动和运行方式。</li></ul><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Spring Boot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[理解 HTTP 幂等性]]></title>
      <url>/http-power.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><p><a href="https://www.cnblogs.com/weidagang2046/archive/2011/06/04/idempotence.html" rel="external nofollow noopener noreferrer" target="_blank">原文链接</a></p><p>基于HTTP协议的Web API是时下最为流行的一种分布式服务提供方式。无论是在大型互联网应用还是企业级架构中，我们都见到了越来越多的SOA或RESTful的Web API。为什么Web API如此流行呢？我认为很大程度上应归功于简单有效的HTTP协议。HTTP协议是一种分布式的面向资源的网络应用层协议，无论是服务器端提供Web服务，还是客户端消费Web服务都非常简单。再加上浏览器、Javascript、AJAX、JSON以及HTML5等技术和工具的发展，互联网应用架构设计表现出了从传统的PHP、JSP、ASP.NET等服务器端动态网页向Web API + RIA（富互联网应用）过渡的趋势。Web API专注于提供业务服务，RIA专注于用户界面和交互设计，从此两个领域的分工更加明晰。在这种趋势下，Web API设计将成为服务器端程序员的必修课。然而，正如简单的Java语言并不意味着高质量的Java程序，简单的HTTP协议也不意味着高质量的Web API。要想设计出高质量的Web API，还需要深入理解分布式系统及HTTP协议的特性。</p><a id="more"></a><h3 id="幂等性定义"><a href="#幂等性定义" class="headerlink" title="幂等性定义"></a>幂等性定义</h3><p>本文所要探讨的正是HTTP协议涉及到的一种重要性质：幂等性(Idempotence)。在HTTP/1.1规范中幂等性的定义是：</p><blockquote><p>Methods can also have the property of “idempotence” in that (aside from error or expiration issues) the side-effects of N &gt; 0 identical requests is the same as for a single request.</p></blockquote><p>从定义上看，HTTP方法的幂等性是指一次和多次请求某一个资源应该具有同样的副作用。幂等性属于语义范畴，正如编译器只能帮助检查语法错误一样，HTTP规范也没有办法通过消息格式等语法手段来定义它，这可能是它不太受到重视的原因之一。但实际上，幂等性是分布式系统设计中十分重要的概念，而HTTP的分布式本质也决定了它在HTTP中具有重要地位。</p><h3 id="分布式事务-vs-幂等设计"><a href="#分布式事务-vs-幂等设计" class="headerlink" title="分布式事务 vs 幂等设计"></a>分布式事务 vs 幂等设计</h3><p>为什么需要幂等性呢？我们先从一个例子说起，假设有一个从账户取钱的远程API（可以是HTTP的，也可以不是），我们暂时用类函数的方式记为：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bool withdraw(account_id, amount)</span><br></pre></td></tr></table></figure><p></p><p>withdraw的语义是从account_id对应的账户中扣除amount数额的钱；如果扣除成功则返回true，账户余额减少amount；如果扣除失败则返回false，账户余额不变。值得注意的是：和本地环境相比，我们不能轻易假设分布式环境的可靠性。一种典型的情况是withdraw请求已经被服务器端正确处理，但服务器端的返回结果由于网络等原因被掉丢了，导致客户端无法得知处理结果。如果是在网页上，一些不恰当的设计可能会使用户认为上一次操作失败了，然后刷新页面，这就导致了withdraw被调用两次，账户也被多扣了一次钱。如图1所示：<br><img src="http://zqnight.gitee.io/kaimz.github.io/image/hexo/http-power/http-power-1.png" alt="image"></p><p>这个问题的解决方案一是采用分布式事务，通过引入支持分布式事务的中间件来保证withdraw功能的事务性。分布式事务的优点是对于调用者很简单，复杂性都交给了中间件来管理。缺点则是一方面架构太重量级，容易被绑在特定的中间件上，不利于异构系统的集成；另一方面分布式事务虽然能保证事务的ACID性质，而但却无法提供性能和可用性的保证。</p><p>另一种更轻量级的解决方案是幂等设计。我们可以通过一些技巧把withdraw变成幂等的，比如：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int create_ticket() </span><br><span class="line">bool idempotent_withdraw(ticket_id, account_id, amount)</span><br></pre></td></tr></table></figure><p></p><p><code>create_ticket</code>的语义是获取一个服务器端生成的唯一的处理号<code>ticket_id</code>，它将用于标识后续的操作。<code>idempotent_withdraw</code>和<code>withdraw</code>的区别在于关联了一个<code>ticket_id</code>，一个<code>ticket_id</code>表示的操作至多只会被处理一次，每次调用都将返回第一次调用时的处理结果。这样，<code>idempotent_withdraw</code>就符合幂等性了，客户端就可以放心地多次调用。</p><p>基于幂等性的解决方案中一个完整的取钱流程被分解成了两个步骤：</p><ol><li>调用<code>create_ticket()</code>获取<code>ticket_id</code>；</li><li>调用<code>idempotent_withdraw(ticket_id, account_id, amount)</code>。虽然<code>create_ticket</code>不是幂等的，但在这种设计下，它对系统状态的影响可以忽略，加上<code>idempotent_withdraw</code>是幂等的，所以任何一步由于网络等原因失败或超时，客户端都可以重试，直到获得结果。如图2所示：<br><img src="http://zqnight.gitee.io/kaimz.github.io/image/hexo/http-power/http-power-2.png" alt="image"></li></ol><p>和分布式事务相比，幂等设计的优势在于它的轻量级，容易适应异构环境，以及性能和可用性方面。在某些性能要求比较高的应用，幂等设计往往是唯一的选择。</p><h3 id="HTTP的幂等性"><a href="#HTTP的幂等性" class="headerlink" title="HTTP的幂等性"></a>HTTP的幂等性</h3><p>HTTP协议本身是一种面向资源的应用层协议，但对HTTP协议的使用实际上存在着两种不同的方式：一种是RESTful的，它把HTTP当成应用层协议，比较忠实地遵守了HTTP协议的各种规定；另一种是SOA的，它并没有完全把HTTP当成应用层协议，而是把HTTP协议作为了传输层协议，然后在HTTP之上建立了自己的应用层协议。本文所讨论的HTTP幂等性主要针对RESTful风格的，不过正如上一节所看到的那样，幂等性并不属于特定的协议，它是分布式系统的一种特性；所以，不论是SOA还是RESTful的Web API设计都应该考虑幂等性。下面将介绍HTTP GET、DELETE、PUT、POST四种主要方法的语义和幂等性。</p><p>HTTP GET方法用于获取资源，不应有副作用，所以是幂等的。比如：GET <code>http://www.bank.com/account/123456</code>，不会改变资源的状态，不论调用一次还是N次都没有副作用。请注意，这里强调的是一次和N次具有相同的副作用，而不是每次GET的结果相同。GET <code>http://www.news.com/latest-news</code> 这个HTTP请求可能会每次得到不同的结果，但它本身并没有产生任何副作用，因而是满足幂等性的。</p><p>HTTP DELETE方法用于删除资源，有副作用，但它应该满足幂等性。比如：DELETE <code>http://www.forum.com/article/4231</code>，调用一次和N次对系统产生的副作用是相同的，即删掉id为4231的帖子；因此，调用者可以多次调用或刷新页面而不必担心引起错误。</p><p>比较容易混淆的是HTTP POST和PUT。POST和PUT的区别容易被简单地误认为“POST表示创建资源，PUT表示更新资源”；而实际上，二者均可用于创建资源，更为本质的差别是在幂等性方面。在HTTP规范中对POST和PUT是这样定义的：</p><blockquote><p>The POST method is used to request that the origin server accept the entity enclosed in the request as a new subordinate of the resource identified by the Request-URI in the Request-Line …… If a resource has been created on the origin server, the response SHOULD be 201 (Created) and contain an entity which describes the status of the request and refers to the new resource, and a Location header.</p><p>The PUT method requests that the enclosed entity be stored under the supplied Request-URI. If the Request-URI refers to an already existing resource, the enclosed entity SHOULD be considered as a modified version of the one residing on the origin server. If the Request-URI does not point to an existing resource, and that URI is capable of being defined as a new resource by the requesting user agent, the origin server can create the resource with that URI.</p></blockquote><p>POST所对应的URI并非创建的资源本身，而是资源的接收者。比如：POST <a href="http://www.forum.com/articles的语义是在http://www.forum.com/articles下创建一篇帖子，HTTP响应中应包含帖子的创建状态以及帖子的URI。两次相同的POST请求会在服务器端创建两份资源，它们具有不同的URI；所以，POST方法不具备幂等性。而PUT所对应的URI是要创建或更新的资源本身。比如：PUT" rel="external nofollow noopener noreferrer" target="_blank">http://www.forum.com/articles的语义是在http://www.forum.com/articles下创建一篇帖子，HTTP响应中应包含帖子的创建状态以及帖子的URI。两次相同的POST请求会在服务器端创建两份资源，它们具有不同的URI；所以，POST方法不具备幂等性。而PUT所对应的URI是要创建或更新的资源本身。比如：PUT</a> <a href="http://www.forum/articles/4231的语义是创建或更新ID为4231的帖子。对同一URI进行多次PUT的副作用和一次PUT是相同的；因此，PUT方法具有幂等性。" rel="external nofollow noopener noreferrer" target="_blank">http://www.forum/articles/4231的语义是创建或更新ID为4231的帖子。对同一URI进行多次PUT的副作用和一次PUT是相同的；因此，PUT方法具有幂等性。</a></p><p>在介绍了几种操作的语义和幂等性之后，我们来看看如何通过Web API的形式实现前面所提到的取款功能。很简单，<code>用POST /tickets来实现create_ticket</code>；<code>用PUT /accounts/account_id/ticket_id&amp;amount=xxx来实现idempotent_withdraw</code>。<strong>值得注意的是严格来讲amount参数不应该作为URI的一部分，真正的URI应该是<code>/accounts/account_id/ticket_id</code>，而amount应该放在请求的body中</strong>。这种模式可以应用于很多场合，比如：论坛网站中防止意外的重复发帖。</p><h3 id="区分PATCH与PUT、POST方法"><a href="#区分PATCH与PUT、POST方法" class="headerlink" title="区分PATCH与PUT、POST方法"></a>区分PATCH与PUT、POST方法</h3><p>在HTTP原本的定义中<a rel="external nofollow noopener noreferrer" target="_blank" href="http://tools.ietf.org/html/rfc2616">[RFC2616]</a>，用于上传数据的方法只有POST和PUT。后来鉴于POST和PUT语义和功能上的不足，又加入了PATCH方法<a rel="external nofollow noopener noreferrer" target="_blank" href="http://tools.ietf.org/html/rfc5789">[RFC5789]</a>。POST与PUT方法的差异是显而易见的，而PUT与PATCH方法就比较相似，但它们的用法却完全不同。</p><p>PUT方法和PATCH方法所请求的目标地址都是直接指向资源的，而POST方法请求的目标是一个行为处理器，这点很容易区分。但PUT和PATCH呢？根据规范中所介绍的PUT用于替换资源，而PATCH用于更新部分资源。仅凭这个描述，我无法理解他们的区别，直到看到后面介绍PATCH是非幂等的时候才恍然大悟。</p><p>从这里开始要考虑一个问题，PATCH为什么是非幂等的呢？POST方法非幂等可以理解，因为它请求服务器执行一个动作，多次发起请求可能导致动作多次执行。而像PATCH这样请求的目标是一个资源的，如果它只是更新一个资源，不执行其它动作，又何来不幂等呢？其实是我忽略了一个问题，PATCH方法和POST方法有个很相似的地方，它们的实体部分都是结构化的数据。POST方法的实体结构一般是 <code>multipart/form-data</code> 或 <code>application/x-www-form-urlencoded</code> 而PATCH方法的实体结构则随其它规范定义。这和PUT方法的无结构实体相比就是最大的区别。</p><p>PUT方法的实体无结构的，它直接把实体部分的数据替换到服务器的资源上。而PATCH提供的实体则需要根据程序或其它协议的定义，解析后在服务器上执行，以此来修改服务器上的数据。也就是说，PATCH请求是会执行某个程序的，如果重复提交，程序可能执行多次，对服务器上的资源就可能造成额外的影响，这就可以解释它为什么是不幂等的了。</p><p>举个例子，如果服务器上有个资源<code>/abc.int</code>，里面存放一个整数，值为 <strong>1</strong>。也就是说，GET这个资源的话，服务器响应的实体只包含了 <strong>1</strong> 这个数字。现在在自己的框架中定义当提交PATCH请求，实体匹配<code>^\+\d+$</code>的格式时就对服务器资源中的数字执行一个加法操作。于是当客户端向<code>/abc.int</code>地址发起PATCH请求，实体部分为<code>+3</code>之后，服务器的<code>/abc.int</code>资源中的数据就变成 <strong>4</strong>，也就是说，GET它会得到 <strong>4</strong>。如果客户端不小心重复提交了PATCH请求，那么<code>+3</code>就会被再执行一次，这个资源的数据就变成 <strong>7</strong>。<br><code>PUT</code>方法必须对服务器资源进行完整的替换，而<code>patch</code>方法可以对服务器资源进行逻辑判断增量修改，所以它们之间的区别就很明显。</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a rel="external nofollow noopener noreferrer" target="_blank" href="http://www.cnblogs.com/weidagang2046/archive/2011/06/04/idempotence.html">理解HTTP幂等性</a></li><li><a rel="external nofollow noopener noreferrer" target="_blank" href="https://www.web-tinker.com/article/20707.html">区分PATCH与PUT、POST方法</a></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>幂等性(Idempotence)的定义：HTTP方法的幂等性是指一次和多次请求某一个资源应该具有同样的副作用。无论调用多少次都不会有不同结果的 HTTP 方法。</li><li><p>GET 方法，用于获取资源，无论你调用多少次，获得到的结果都是不变的。<br>2.1 查询数据，不影响服务端的资源，我们认为它是等幂的方法。<br>tips: 相同的GET 请求多次请求，可能返回不同的数据结果，因为数据时时常更新的，但是GET 方法不影响数据资源，还是满足等幂特性的。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET     /pets       # 获pet列表</span><br><span class="line">GET     /pets/12    # 查看某个具体的pet</span><br></pre></td></tr></table></figure></li><li><p>POST 方法，用于创建，不等幂，多次访问，创建不同的资源。</p></li><li>PUT 方法，用于修改，值得注意的是PUT 方法每次去访问的时候，是去替换掉服务端的资源，所以，多次访问也不会影响最终的结果。因此它是等幂的。</li><li>PATCH 方法，这个也是用于修改，根据上面的文章了解到，它是更新一个资源的部分属性，但是，有时候我们的更新是做这种类似累加操作，每次请求，都会更改最终结果，所以它是不等幂的。</li><li>DELETE 方法，用于删除资源，批量删除的时候需要注意，不建议将requet 数据放在body 里面，在部分环境里会剔除 delete Body的。<br>6.1. 200 (OK) - 删除成功，同时返回已经删除的资源<br>6.2. 202 (Accepted) - 删除请求已经接受，但没有被立即执行（资源也许已经被转移到了待删除区域）<br>6.3. 204 (No Content) - 删除请求已经被执行，但是没有返回资源（也许是请求删除不存在的资源造成的）</li><li>RESTFUL API 是一种规范，有时候批量操作的时候，例如，多条件查询的时候，批量删除，还是需要折中使用 POST 救救火，但是由于 POST 请求没有缓存，如果需要缓存就需要重新设计了，可以采取分组查询的方法，先用POST 带上条件去服务端请求分组，再用分组的结果使用GET 方法去查询，多了很多麻烦事。</li></ol><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> http </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RESTful API 设计指南]]></title>
      <url>/restful-api.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><p>API与用户的通信协议，总是使用HTTPs协议。</p><h3 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h3><p>应该尽量将API部署在专用域名之下。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.example.com</span><br></pre></td></tr></table></figure><p></p><p>如果确定API很简单，不会有进一步扩展，可以考虑放在主域名下。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://example.org/api/</span><br></pre></td></tr></table></figure><p></p><a id="more"></a><h3 id="版本（Versioning）"><a href="#版本（Versioning）" class="headerlink" title="版本（Versioning）"></a>版本（Versioning）</h3><p>应该将API的版本号放入URL。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.example.com/v1/</span><br></pre></td></tr></table></figure><p></p><p>另一种做法是，将版本号放在HTTP头信息中，但不如放入URL方便和直观。Github采用这种做法。</p><h3 id="路径（Endpoint）"><a href="#路径（Endpoint）" class="headerlink" title="路径（Endpoint）"></a>路径（Endpoint）</h3><p>路径又称”终点”（endpoint），表示API的具体网址。</p><p>在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的”集合”（collection），所以API中的名词也应该使用复数。</p><p>举例来说，有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://api.example.com/v1/zoos</span><br><span class="line">https://api.example.com/v1/animals</span><br><span class="line">https://api.example.com/v1/employees</span><br></pre></td></tr></table></figure><h3 id="HTTP动词"><a href="#HTTP动词" class="headerlink" title="HTTP动词"></a>HTTP动词</h3><p>对于资源的具体操作类型，由HTTP动词表示。</p><p>常用的HTTP动词有下面五个（括号里是对应的SQL命令）。</p><ul><li>GET（SELECT）：从服务器取出资源（一项或多项）。</li><li>POST（CREATE）：在服务器新建一个资源。</li><li>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。</li><li>PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。</li><li>DELETE（DELETE）：从服务器删除资源。</li></ul><p>还有两个不常用的HTTP动词。</p><ul><li>HEAD：获取资源的元数据。</li><li>OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。</li></ul><p>下面是一些例子。</p><ul><li>GET /zoos：列出所有动物园</li><li>POST /zoos：新建一个动物园</li><li>GET /zoos/ID：获取某个指定动物园的信息</li><li>PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）</li><li>PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）</li><li>DELETE /zoos/ID：删除某个动物园</li><li>GET /zoos/ID/animals：列出某个指定动物园的所有动物</li><li>DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物</li></ul><h3 id="过滤信息（Filtering）"><a href="#过滤信息（Filtering）" class="headerlink" title="过滤信息（Filtering）"></a>过滤信息（Filtering）</h3><p>如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果。</p><p>下面是一些常见的参数。</p><ul><li><code>?limit=10</code>：指定返回记录的数量</li><li><code>?offset=10</code>：指定返回记录的开始位置。</li><li><code>?page=2&amp;per_page=100</code>：指定第几页，以及每页的记录数。</li><li><code>?sortby=name&amp;order=asc</code>：指定返回结果按照哪个属性排序，以及排序顺序。</li><li><code>?animal_type_id=1</code>：指定筛选条件。</li></ul><p>参数的设计允许存在冗余，即允许API路径和URL参数偶尔有重复。比如，<code>GET /zoo/ID/animals 与 GET /animals?zoo_id=ID</code> 的含义是相同的。</p><h3 id="状态码（Status-Codes）"><a href="#状态码（Status-Codes）" class="headerlink" title="状态码（Status Codes）"></a>状态码（Status Codes）</h3><p>服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的HTTP动词）。</p><ul><li>200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</li><li>201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。</li><li>202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</li><li>204 NO CONTENT - [DELETE]：用户删除数据成功。</li><li>400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</li><li>401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</li><li>403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</li><li>404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</li><li>406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</li><li>410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</li><li>422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。</li><li>500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</li></ul><h3 id="错误处理（Error-handling）"><a href="#错误处理（Error-handling）" class="headerlink" title="错误处理（Error handling）"></a>错误处理（Error handling）</h3><p>如果状态码是4xx，就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名，出错信息作为键值即可。<br></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    error: "Invalid API key"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a>返回结果</h3><p>针对不同操作，服务器向用户返回的结果应该符合以下规范。</p><ul><li>GET /collection：返回资源对象的列表（数组）</li><li>GET /collection/resource：返回单个资源对象</li><li>POST /collection：返回新生成的资源对象</li><li>PUT /collection/resource：返回完整的资源对象</li><li>PATCH /collection/resource：返回完整的资源对象</li><li>DELETE /collection/resource：返回一个空文档</li></ul><h3 id="Hypermedia-API"><a href="#Hypermedia-API" class="headerlink" title="Hypermedia API"></a>Hypermedia API</h3><p>RESTful API最好做到Hypermedia，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。</p><p>比如，当用户向api.example.com的根目录发出请求，会得到这样一个文档。<br></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"link"</span>: &#123;</span><br><span class="line">  <span class="attr">"rel"</span>:   <span class="string">"collection https: //www.example.com/zoos"</span>,</span><br><span class="line">  <span class="attr">"href"</span>:  <span class="string">"https://api.example.com/zoos"</span>,</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"List of zoos"</span>,</span><br><span class="line">  <span class="attr">"type"</span>:  <span class="string">"application/vnd.yourformat+json"</span></span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面代码表示，文档中有一个link属性，用户读取这个属性就知道下一步该调用什么API了。rel表示这个API与当前网址的关系（collection关系，并给出该collection的网址），href表示API的路径，title表示API的标题，type表示返回类型。</p><p>Hypermedia API的设计被称为HATEOAS。Github的API就是这种设计，访问<code>api.github.com</code>会得到一个所有可用API的网址列表。<br>从上面可以看到，如果想获取当前用户的信息，应该去访问<code>api.github.com/user</code>，然后就得到了下面结果。<br></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"message"</span>: <span class="string">"Requires authentication"</span>,</span><br><span class="line">  <span class="attr">"documentation_url"</span>: <span class="string">"https://developer.github.com/v3"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面代码表示，服务器给出了提示信息，以及文档的网址。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol><li>API的身份认证应该使用OAuth2.0框架。</li><li>服务器返回的数据格式，应该尽量使用JSON，避免使用XML。</li></ol><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a rel="external nofollow noopener noreferrer" target="_blank" href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html">RESTful API 设计指南</a></li></ul><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Restful API </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[初探Java 9 的的模块化]]></title>
      <url>/java-module.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><p>Java 9中最重要的功能，毫无疑问就是模块化（Module），它将自己长期依赖JRE的结构，转变成以Module为基础的组件，当然这在使用Java 9 开发也和以前有着很大的不同。</p><a id="more"></a><h3 id="Java8或更加早期的系统的问题"><a href="#Java8或更加早期的系统的问题" class="headerlink" title="Java8或更加早期的系统的问题"></a>Java8或更加早期的系统的问题</h3><ol><li>Jar文件，像rt.jar等jar文件太大的以至于不能使用在小设备和应用中。</li><li>因为JDK是太大的，我们的应用或设备不能支持更好的平台.</li><li>由于修饰符是public的缘故，每个人都可以通过此来进行访问，所以在当前Java系统的封闭性不是很强。</li><li>由于JDK,Jre过于庞大，以至于很难进行测试和维护应用。</li><li>由于public的关系，Java比较开放。不可避免的能访问象sun.， .internal.*等的一些内部不重要的APIs。</li></ol><h3 id="Java9模块系统的特性"><a href="#Java9模块系统的特性" class="headerlink" title="Java9模块系统的特性"></a>Java9模块系统的特性</h3><ol><li>在Java SE 9中分离了JDK， JRE，jar等为更小的模。因此我们可以方便的使用任何我们想要的模块。因此缩减Java应用程序到小设备是非常容易的。</li><li>更加容易的测试和维护。</li><li>支持更好的平台。</li><li>public不再仅仅是public。现在已经支持非常强的封闭性(不用担心，后边我们会用几个例子来解释)。</li><li>我们不能再访问内部非关键性APIs了。</li><li>模块可以非常安全地帮助我们掩藏那些我们不想暴露的内部细节，我们可以得到更好的Security。</li><li>应用会变的非常小，因为我们可以只使用我们要用的模块。</li><li>组件间的松耦合变得非常容易。</li><li>更容易支持唯一责任原则(SRP)。</li></ol><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>以前的jre中有一个很大的架包，jdk8 中rt.jar有62M，即便运行一个最简单的HelloWorld，都必须带上它。</p><p><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fmxpyk5k96j20fo0gt40g.jpg" alt="image"></p><p>jdk9 的目录<br><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fmxq22lqipj20fh06i0t1.jpg" alt="image"></p><p>我们发现，jdk9 中没有Jre 文件，也没有rt.jar等这种很大的架包，但是它有了一个新的文件jmods，模块都是放在jmods文件夹中。</p><p><em>目前共有98个模块。</em></p><h3 id="Module的相关属性"><a href="#Module的相关属性" class="headerlink" title="Module的相关属性"></a>Module的相关属性</h3><p>在主目录的/main/java/下新建<code>module-info.java</code>文件，可以管理这个项目的module。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> M &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id="模块命名"><a href="#模块命名" class="headerlink" title="模块命名"></a>模块命名</h4><p>又称模块描述文件<br>模块命名需要保证单一，可以使用反向域名模式，如<code>com.wuwii.xxx.xxx</code>，这个模块会导出包<code>com.wuwii</code>。</p><p>在JDK 9中， open, module, requires, transitive, exports, opens, to, uses, provides 和 with是受限关键字。只有当具体位置出现在模块声明中时，它们才具有特殊意义。 可以将它们用作程序中其他地方的标识符。</p><p>例如：可以在程序中声明一个module变量。</p><h4 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h4><p>模块之间的关系被称作readability（可读性），代表一个模块是否可以找到这个模块文件，并且读入系统中（注意：并非代表可以访问其中的类型）。在实际的代码，一个类型对于另外一个类型的调用，我们称之为可访问性(Accessible)，这意味着可以使用这个类型； 可访问性的前提是可读性，换句话说，现有模块可读，然后再进一步检测可访问性（安全）。<br>导出语句将模块的指定包导出到所有模块或编译时和运行时的命名模块列表。 它的两种形式如下：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">exports</span> &lt;<span class="keyword">package</span>&gt;;</span><br><span class="line"><span class="keyword">exports</span> &lt;<span class="keyword">package</span>&gt; to &lt;module1&gt;, &lt;module2&gt;...;</span><br></pre></td></tr></table></figure><p></p><p>以下是使用了导出语句的模块示例：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> java.xml.ws &#123;</span><br><span class="line">……</span><br><span class="line">    <span class="keyword">exports</span> com.oracle.webservices.internal.api.databinding to</span><br><span class="line">        jdk.xml.ws;</span><br><span class="line">    <span class="keyword">exports</span> com.sun.xml.internal.ws.addressing to</span><br><span class="line">        jdk.xml.ws,</span><br><span class="line">        java.xml.bind;</span><br><span class="line">……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>开放语句允许对所有模块的反射访问指定的包或运行时指定的模块列表。 其他模块可以使用反射访问指定包中的所有类型以及这些类型的所有成员（私有和公共）。 开放语句采用以下形式：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">opens &lt;<span class="keyword">package</span>&gt;;</span><br><span class="line">opens &lt;<span class="keyword">package</span>&gt; to &lt;module1&gt;, &lt;module2&gt;...;</span><br></pre></td></tr></table></figure><p></p><blockquote><p>Tips<br>对比导出和打开语句。 导出语句允许仅在编译时和运行时访问指定包的公共API，而打开语句允许在运行时使用反射访问指定包中的所有类型的公共和私有成员。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> N &#123;</span><br><span class="line">    <span class="keyword">exports</span> M;</span><br><span class="line">    opens M;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>阅读有关模块的时候会遇到三个短语：</p><ul><li>模块M导出包P</li><li>模块M打开包Q</li><li>模块M包含包R</li></ul><p>前两个短语对应于模块中导出语句和开放语句。 第三个短语意味着该模块包含的包R既不导出也不开放。 在模块系统的早期设计中，第三种情况被称为“模块M隐藏包R”。</p><h4 id="声明依赖关系"><a href="#声明依赖关系" class="headerlink" title="声明依赖关系"></a>声明依赖关系</h4><p>需要（require）语句声明当前模块与另一个模块的依赖关系。 一个名为M的模块中的“需要N”语句表示模块M取决于（或读取）模块N。语句有以下形式：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">requires</span> &lt;<span class="keyword">module</span>&gt;;</span><br><span class="line"><span class="keyword">requires</span> transitive &lt;<span class="keyword">module</span>&gt;;</span><br><span class="line"><span class="keyword">requires</span> <span class="keyword">static</span> &lt;<span class="keyword">module</span>&gt;;</span><br><span class="line"><span class="keyword">requires</span> transitive <span class="keyword">static</span> &lt;<span class="keyword">module</span>&gt;;</span><br></pre></td></tr></table></figure><p></p><ul><li>require语句中的静态修饰符表示在编译时的依赖是强制的，但在运行时是可选的。</li><li>requires static N语句意味着模块M取决于模块N，模块N必须在编译时出现才能编译模块M，而在运行时存在模块N是可选的。</li><li>require语句中的transitive修饰符会导致依赖于当前模块的其他模块具有隐式依赖性。</li><li>假设有三个模块P，Q和R，假设模块Q包含requires transitive R语句，如果如果模块P包含包含requires Q语句，这意味着模块P隐含地取决于模块R。</li></ul><h4 id="配置服务"><a href="#配置服务" class="headerlink" title="配置服务"></a>配置服务</h4><p>Java允许使用服务提供者和服务使用者分离的服务提供者机制。 JDK 9允许使用语句（uses statement）和提供语句（provides statement）实现其服务。</p><p>使用语句可以指定服务接口的名字，当前模块就会发现它，使用 java.util.ServiceLoader类进行加载。格式如下：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uses &lt;service-<span class="class"><span class="keyword">interface</span>&gt;</span>;</span><br></pre></td></tr></table></figure><p></p><p>使用语句的实例如下：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> M &#123;</span><br><span class="line">    uses com.jdojo.prime.PrimeChecker;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>com.jdojo.PrimeChecker是一个服务接口，其实现类将由其他模块提供。 模块M将使用java.util.ServiceLoader类来发现和加载此接口的实现。</p><p>提供语句指定服务接口的一个或多个服务提供程序实现类。 它采取以下形式：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">provides &lt;service-<span class="class"><span class="keyword">interface</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">with</span> &lt;<span class="title">service</span>-<span class="title">impl</span>-<span class="title">class1</span>&gt;, &lt;<span class="title">service</span>-<span class="title">impl</span>-<span class="title">class2</span>&gt;...</span>;</span><br></pre></td></tr></table></figure><p></p><p>相同的模块可以提供服务实现，可以发现和加载服务。 模块还可以发现和加载一种服务，并为另一种服务提供实现。 以下是例子：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> P &#123;</span><br><span class="line">    uses com.jdojo.CsvParser;</span><br><span class="line">    provides com.jdojo.CsvParser</span><br><span class="line">        with com.jdojo.CsvParserImpl;</span><br><span class="line">    provides com.jdojo.prime.PrimeChecker</span><br><span class="line">        with com.jdojo.prime.generic.FasterPrimeChecker;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>需要注意的是，不只是jdk中内置的98种模块，引用maven的第三方架包，也需要module，<br>如用的比较多的日志<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * logger</span><br><span class="line"> */</span><br><span class="line">private static final Logger LOGGER = LoggerFactory.getLogger(LearnSoap.class);</span><br></pre></td></tr></table></figure><p></p><p>配置<br>需要在<code>module-info.java</code>配置：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requires slf4j.api;</span><br></pre></td></tr></table></figure><p></p><p>Java中的包已被用作类型的容器。 应用程序由放置在类路径上的几个JAR组成。 软件包作为类型的容器，不强制执行任何可访问性边界。 类型的可访问性内置在使用修饰符的类型声明中。 如果包中包含内部实现，则无法阻止程序的其他部分访问内部实现。 类路径机制在使用类型时线性搜索类型。 这导致在部署的JAR中缺少类型时，在运行时接收错误的另一个问题 —— 有时在部署应用程序后很长时间。 这些问题可以分为两种类型：封装和配置。</p><p>JDK 9引入了模块系统。 它提供了一种组织Java程序的方法。 它有两个主要目标：强大的封装和可靠的配置。 使用模块系统，应用程序由模块组成，这些模块被命名为代码和数据的集合。 模块通过其声明来控制模块的其他模块可以访问的部分。 访问另一个模块的部分的模块必须声明对第二个模块的依赖。 控制访问和声明依赖的是达成强封装的基础。 在应用程序启动时解决了一个模块的依赖关系。 在JDK 9中，如果一个模块依赖于另一个模块，并且运行应用程序时第二个模块丢失，则在启动时将会收到一个错误，而不是应用程序运行后的某个时间。 这是一个可靠的基础配置。</p><p>使用模块声明定义模块。 模块的源代码通常存储在名为module-info.java的文件中。 一个模块被编译成一个类文件，通常命名为module-info.class。 编译后的模块声明称为模块描述符。 模块声明不允许指定模块版本。 但诸如将模块打包到JAR中的jar工具的可以将模块版本添加到模块描述符中。</p><p>使用module关键字声明模块，后跟模块名称。 模块声明可以使用五种类型的模块语句：exports，opens，require，uses和provide。 导出语句将模块的指定包导出到所有模块或编译时和运行时的命名模块列表。 开放语句允许对所有模块的反射访问指定的包或运行时指定的模块列表， 其他模块可以使用反射访问指定包中的所有类型以及这些类型的所有成员（私有和公共）。 使用语句和提供模块语句用于配置模块以发现服务实现并提供特定服务接口的服务实现。</p><p>从JDK 9开始，open， module， requires， transitive, exports，opens，to，uses，provides和with都是受限关键字。 只有当具体位置出现在模块声明中时，它们才具有特殊意义。</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a rel="external nofollow noopener noreferrer" target="_blank" href="http://www.cnblogs.com/IcanFixIt/p/6947763.html">Java 9 揭秘（2. 模块化系统）</a></li><li><a rel="external nofollow noopener noreferrer" target="_blank" href="https://www.jianshu.com/p/053a5ca89bbb">Java 9 新特性来临——模块化</a></li></ul><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用IDEA远程部署tomcat和调试]]></title>
      <url>/idea-remote-tomcat.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><p>环境：</p><ul><li>CentOS 7</li><li>Tomcat 9.0.1</li><li>jdk-9.0.1</li><li>IntelliJ IDEA 2017.3</li></ul><a id="more"></a><h3 id="Tomcat中的配置"><a href="#Tomcat中的配置" class="headerlink" title="Tomcat中的配置"></a>Tomcat中的配置</h3><ol><li>在<code>catalina.sh</code>文件中加入以下的配置<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CATALINA_OPTS=<span class="string">"-Dcom.sun.management.jmxremote </span></span><br><span class="line"><span class="string">-Dcom.sun.management.jmxremote.port=1099 </span></span><br><span class="line"><span class="string">-Dcom.sun.management.jmxremote.ssl=false </span></span><br><span class="line"><span class="string">-Dcom.sun.management.jmxremote.authenticate=false </span></span><br><span class="line"><span class="string">-Djava.rmi.server.hostname=192.168.19.200</span></span><br><span class="line"><span class="string">-agentlib:jdwp=transport=dt_socket,address=15833,suspend=n,server=y"</span></span><br><span class="line"><span class="built_in">export</span> CATALINA_OPTS</span><br></pre></td></tr></table></figure></li></ol><ul><li>以上端口可以随意改动，但是必要的是后续的设置必须保持一致，并且务必保证端口没有被占用，这些设置的端口在防火墙中是开放状态；</li><li>其中1099的是tomcat远程部署连接端口；</li><li>15833 是远程调试的端口；</li><li>192.168.19.200是远程的服务器的Ip。</li></ul><ol start="2"><li>启动tomcat<br>使用命令启动<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/catalina.sh run &amp;</span><br></pre></td></tr></table></figure></li></ol><h3 id="IDEA中的配置"><a href="#IDEA中的配置" class="headerlink" title="IDEA中的配置"></a>IDEA中的配置</h3><h4 id="新建远程tomcat"><a href="#新建远程tomcat" class="headerlink" title="新建远程tomcat"></a>新建远程tomcat</h4><p><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fmwy19cp08j20d10fwt9i.jpg" alt="img"></p><h4 id="配置远程服务"><a href="#配置远程服务" class="headerlink" title="配置远程服务"></a>配置远程服务</h4><p><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fmwy1n90ssj20kf0jodgc.jpg" alt="img"></p><p><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fmwy1utpsnj20be069q2y.jpg" alt="img"></p><p><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fmwy21y3y9j20mo0ix0th.jpg" alt="img"></p><h4 id="配置连接tomcat的一些属性"><a href="#配置连接tomcat的一些属性" class="headerlink" title="配置连接tomcat的一些属性"></a>配置连接tomcat的一些属性</h4><p><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fmwy27lmh3j20uc0nlmyl.jpg" alt="img"></p><p><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fmwy2en68yj20uc0nlgmg.jpg" alt="img"></p><p><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fmwy2kn4vzj20uc0nlab2.jpg" alt="img"></p><h4 id="debug启动测试"><a href="#debug启动测试" class="headerlink" title="debug启动测试"></a>debug启动测试</h4><p>连接：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[2017-12-23 08:47:03,592] Artifact devframe-server:war exploded: Artifact is not deployed. Press &apos;Deploy&apos; to start deployment</span><br><span class="line">[2017-12-23 08:47:03,650] Artifact devframe-server:war exploded: Artifact is being deployed, please wait...</span><br><span class="line">Connected to server</span><br><span class="line">Connected to the target VM, address: &apos;192.168.19.200:15833&apos;, transport: &apos;socket&apos;</span><br><span class="line">[2017-12-23 08:47:11,434] Artifact devframe-server:war exploded: Error during artifact deployment. See server log for details.</span><br></pre></td></tr></table></figure><p></p><p>文件传输：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2017/12/23 20:47] Uploading to 192.168.19.200 completed in less than a minute: 357 files transferred (8 Mbit/s)</span><br></pre></td></tr></table></figure><p></p><p>这样就能够成功远程部署并且调试了。</p><p>使用的技巧：<br><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fmwy2rv1g0j20dc071dgc.jpg" alt="img"><br>这样每次修改完，点一下就可以热部署，是不是很方便。</p><h3 id="容易出现的问题"><a href="#容易出现的问题" class="headerlink" title="容易出现的问题"></a>容易出现的问题</h3><ul><li>如果远程没有连接上，两个端口被占用或者防火墙屏蔽。除了JMX server指定的监听端口号外，JMXserver还会监听一到两个随机端口号，这个如果防火墙关闭了的话就不用考虑，如果使用了防火墙，还需要查看它监听的端口。</li><li>账号的相应的读写权限一定要有；</li></ul><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> idea </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vim命令合集]]></title>
      <url>/linux-vim.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><p>开始学习使用<strong>IDEA-VIM</strong>，记录学习下VIM 的命令。</p><p><a rel="external nofollow noopener noreferrer" target="_blank" href="https://www.cnblogs.com/softwaretesting/archive/2011/07/12/2104435.html">原文链接</a></p><p>做了一点补充。</p><h4 id="键位命令"><a href="#键位命令" class="headerlink" title="键位命令"></a>键位命令</h4><p><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/vim/vi-vim-cheat-sheet-sch.gif" alt="img"></p><h4 id="命令历史"><a href="#命令历史" class="headerlink" title="命令历史"></a>命令历史</h4><p>以:和/开头的命令都有历史纪录，可以首先键入:或/然后按上下箭头来选择某个历史命令。</p><h4 id="启动vim"><a href="#启动vim" class="headerlink" title="启动vim"></a>启动vim</h4><p>在命令行窗口中输入以下命令即可</p><ul><li>vim 直接启动vim</li><li><code>vim &lt;filename&gt;</code> ， 打开vim并创建名为filename的文件，filename 为文件相对路径活着绝对路径。</li></ul><a id="more"></a><h4 id="文件命令"><a href="#文件命令" class="headerlink" title="文件命令"></a>文件命令</h4><ul><li>打开单个文件：<code>vim &lt;file&gt;</code></li><li>同时打开多个文件：<code>vim &lt;file1&gt; &lt;file2&gt; &lt;file3&gt; ...</code></li><li>在vim窗口中打开一个新文件：<code></code>:e[dit]<file>`<br><a href="https://harttle.land/2015/11/17/vim-buffer.html" rel="external nofollow noopener noreferrer" target="_blank">Vim 多文件编辑：缓冲区</a></file></li><li>在新窗口中打开文件：<code>:sp[lit] &lt;file&gt;</code><br>在多窗口模式下 使用快捷键可以切换到窗口： <code>ctr w &lt;方向键&gt;</code> 方向键为 <code>hjkl</code><br>参考文章<a href="https://harttle.land/2015/11/14/vim-window.html" rel="external nofollow noopener noreferrer" target="_blank">Vim 多文件编辑：窗口</a></li><li>查看打开的buffer （文件） <code>:buffers</code> 或者 <code>:ls</code>。</li><li>切换到下一个文件<code>:bn</code></li><li>切换到上一个文件<code>:bp</code></li><li>切换到指定的文件 <code>:b &lt;number&gt;</code>，number 为 <code>:buffers</code> 或者 <code>:ls</code> 中文件所对应的数字。</li><li>查看当前打开的文件列表，当前正在编辑的文件会用[]括起来。<code>:args</code></li><li>打开远程文件，比如ftp或者share folder<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:e ftp://192.168.10.76/abc.txt</span><br><span class="line"></span><br><span class="line">:e \\qadrive\<span class="built_in">test</span>\1.txt</span><br></pre></td></tr></table></figure></li></ul><h4 id="vim的模式"><a href="#vim的模式" class="headerlink" title="vim的模式"></a>vim的模式</h4><ul><li>正常模式（按Esc或Ctrl+[进入） 左下角显示文件名或为空</li><li>插入模式（按iaos键进入） 左下角显示<code>--INSERT--</code></li><li>可视模式（正常模式下 按v进入） 左下角显示<code>--VISUAL--</code></li></ul><h4 id="导航命令"><a href="#导航命令" class="headerlink" title="导航命令"></a>导航命令</h4><ul><li>% 括号匹配</li><li></li></ul><h4 id="插入命令"><a href="#插入命令" class="headerlink" title="插入命令"></a>插入命令</h4><ul><li><p>i 在当前位置生前插入</p></li><li><p>I 在当前行首插入</p></li><li><p>a 在当前位置后插入</p></li><li><p>A 在当前行尾插入</p></li><li><p>o 在当前行之后插入一行</p></li><li><p>O 在当前行之前插入一行</p></li></ul><h4 id="查找命令"><a href="#查找命令" class="headerlink" title="查找命令"></a>查找命令</h4><ul><li><code>#</code> prev ident</li><li><code>*</code> next ident</li><li><p><code>n</code> 查找下一处，<code>N</code> 查找下一处。</p></li><li><p><code>/text</code>　　查找text，按n健查找下一个，按N健查找前一个。</p></li><li><p><code>?text</code>　　查找text，反向查找，按n健查找下一个，按N健查找前一个。</p></li><li><p>vim中有一些特殊字符在查找时需要转义　　.*[]^%/?~$</p></li><li><p>:set ignorecase　　忽略大小写的查找</p></li><li><p>:set noignorecase　　不忽略大小写的查找</p></li><li><p>查找很长的词，如果一个词很长，键入麻烦，可以将光标移动到该词上，按*或#键即可以该单词进行搜索，相当于/搜索。而#命令相当于?搜索。</p></li><li><p>:set hlsearch　　高亮搜索结果，所有结果都高亮显示，而不是只显示一个匹配。</p></li><li><p>:set nohlsearch　　关闭高亮搜索显示</p></li><li><p>:nohlsearch　　关闭当前的高亮显示，如果再次搜索或者按下n或N键，则会再次高亮。</p></li><li><p>:set incsearch　　逐步搜索模式，对当前键入的字符进行搜索而不必等待键入完成。</p></li><li><p>:set wrapscan　　重新搜索，在搜索到文件头或尾时，返回继续搜索，默认开启。</p></li></ul><h4 id="替换命令"><a href="#替换命令" class="headerlink" title="替换命令"></a>替换命令</h4><ul><li>ra 将当前字符替换为a，当期字符即光标所在字符。</li><li><code>:s/old/new/</code> 用old替换new，替换当前行的第一个匹配</li><li><code>:s/old/new/g</code> 用old替换new，替换当前行的所有匹配</li><li><code>:%s/old/new/</code> 用old替换new，替换所有行的第一个匹配</li><li><code>:%s/old/new/g</code> 用old替换new，替换整个文件的所有匹配</li><li><code>:10,20 s/^/ /g</code> 在第10行知第20行每行前面加四个空格，用于缩进。</li><li>ddp 交换光标所在行和其下紧邻的一行。</li><li><code>R</code> 进入替换模式，每次键入都会替换当前光标的字符；使用 <code>ESC</code> 退出。</li></ul><h4 id="移动命令"><a href="#移动命令" class="headerlink" title="移动命令"></a>移动命令</h4><ul><li>h 左移一个字符</li><li>l 右移一个字符，这个命令很少用，一般用w代替。</li><li>k 上移一个字符</li><li>j 下移一个字符<br>以上四个命令可以配合数字使用，比如20j就是向下移动20行，5h就是向左移动5个字符，在Vim中，很多命令都可以配合数字使用，比如删除10个字符10x，在当前位置后插入3个！，3a！<esc>，这里的Esc是必须的，否则命令不生效。</esc></li><li>w 向前移动一个单词（光标停在单词首部），如果已到行尾，则转至下一行行首。此命令快，可以代替l命令。</li><li>b 向后移动一个单词 2b 向后移动2个单词</li><li>e，同w，只不过是光标停在单词尾部</li><li>ge，同b，光标停在单词尾部。</li><li>gd，跳转到变量声明的位置。</li><li>^ 移动到本行第一个非空白字符上。</li><li>0（数字0）移动到本行第一个字符上，</li><li><code>&lt;HOME&gt;</code>移动到本行第一个字符。同0健。</li><li>$ 移动到行尾 3$ 移动到下面3行的行尾</li><li><code>gg</code> 移动到文件头。 = [[</li><li>G（shift + g） 移动到文件尾。 = ]]</li><li>f（find）命令也可以用于移动，fx将找到光标后第一个为x的字符，3fd将找到第三个为d的字符。</li><li>F 同f，反向查找。</li><li>跳到指定行，冒号+行号，回车，比如跳到240行就是 :240回车。另一个方法是行号+G，比如230G跳到230行。</li><li>Ctrl + e 向下滚动一行</li><li>Ctrl + y 向上滚动一行</li><li>Ctrl + d 向下滚动半屏</li><li>Ctrl + u 向上滚动半屏</li><li>Ctrl + f 向下滚动一屏</li><li>Ctrl + b 向上滚动一屏</li><li>Ctrl + o 回到光标上一次的位置</li><li>Ctrl + i ：Ctrl + o 操作的回退</li><li>z-return 将当前行置为屏幕的顶行</li><li>z. 将当前行置为屏幕的中央</li><li>nz. 将当前行上的第n行置为屏幕的中央</li><li>z- 将当前行置为屏幕的底行</li><li>nz- 将当前行上的第n行置为屏幕的底行</li></ul><h4 id="撤销和重做"><a href="#撤销和重做" class="headerlink" title="撤销和重做"></a>撤销和重做</h4><ul><li>u 撤销（Undo）</li><li>U 撤销对整行的操作</li><li>Ctrl + r 重做（Redo），即撤销的撤销。</li></ul><h4 id="删除命令"><a href="#删除命令" class="headerlink" title="删除命令"></a>删除命令</h4><ul><li><p>x 删除当前字符</p></li><li><p>3x 删除当前光标开始向后三个字符</p></li><li><p>X 删除当前字符的前一个字符。X=dh</p></li><li><p>dl 删除当前字符， dl=x</p></li><li><p>dh 删除前一个字符</p></li><li><p>dd 删除当前行</p></li><li><p>dj 删除本行及下一行</p></li><li><p>dk 删除本行及上一行</p></li><li><p>10d 删除当前行开始的10行。</p></li><li><p>D 删除当前字符至行尾。D=d$</p></li><li><p>d$ 删除当前字符之后的所有字符（本行）</p></li><li><p>kdgg 删除当前行之前所有行（不包括当前行）</p></li><li><p>jdG（jd shift + g） 删除当前行之后所有行（不包括当前行）</p></li><li><p>:1,10d 删除1-10行</p></li><li><p>:11,$d 删除11行及以后所有的行</p></li><li><p>:1,$d 删除所有行</p></li><li><p><code>J(shift + j)</code>　　删除两行之间的空行，实际上是合并两行。</p></li></ul><h4 id="拷贝和粘贴"><a href="#拷贝和粘贴" class="headerlink" title="拷贝和粘贴"></a>拷贝和粘贴</h4><ul><li>yy 拷贝当前行</li><li><p>nyy 拷贝当前后开始的n行，比如2yy拷贝当前行及其下一行。</p></li><li><p>p 在当前光标后粘贴,如果之前使用了yy命令来复制一行，那么就在当前行的下一行粘贴。</p></li><li><p>shift+p 在当前行前粘贴</p></li><li><p><code>:1,10 co 20</code> 将1-10行插入到第20行之后。</p></li><li><p><code>:1,$ co $</code> 将整个文件复制一份并添加到文件尾部。</p></li><li><p>正常模式下按v（逐字）或V（逐行）进入可视模式，然后用jklh命令移动即可选择某些行或字符，再按y即可复制</p></li><li><p>ddp交换当前行和其下一行</p></li><li>xp交换当前字符和其后一个字符</li></ul><h4 id="剪切命令"><a href="#剪切命令" class="headerlink" title="剪切命令"></a>剪切命令</h4><ul><li><p>正常模式下按v（逐字）或V（逐行）进入可视模式，然后用jklh命令移动即可选择某些行或字符，再按d即可剪切</p></li><li><p>ndd 剪切当前行之后的n行。利用p命令可以对剪切的内容进行粘贴</p></li><li><p>:1,10d 将1-10行剪切。利用p命令可将剪切后的内容进行粘贴。</p></li><li><p>:1, 10 m 20 将第1-10行移动到第20行之后。</p></li></ul><h4 id="退出命令"><a href="#退出命令" class="headerlink" title="退出命令"></a>退出命令</h4><ul><li><p>:wq 保存并退出</p></li><li><p>ZZ 保存并退出</p></li><li><p>:q! 强制退出并忽略所有更改</p></li><li><p>:e! 放弃所有修改，并打开原来文件。</p></li></ul><h4 id="窗口命令"><a href="#窗口命令" class="headerlink" title="窗口命令"></a>窗口命令</h4><ul><li><p>:split或new 打开一个新窗口，光标停在顶层的窗口上</p></li><li><p>:split file或:new file 用新窗口打开文件</p></li><li><p>split打开的窗口都是横向的，使用vsplit可以纵向打开窗口。</p></li><li><p>Ctrl+ww 移动到下一个窗口</p></li><li><p>Ctrl+wj 移动到下方的窗口</p></li><li><p>Ctrl+wk 移动到上方的窗口</p></li></ul><h5 id="关闭窗口"><a href="#关闭窗口" class="headerlink" title="关闭窗口"></a>关闭窗口</h5><ul><li><p>:close 最后一个窗口不能使用此命令，可以防止意外退出vim。</p></li><li><p>:q 如果是最后一个被关闭的窗口，那么将退出vim。</p></li><li><p>ZZ 保存并退出。</p></li><li><p>:only 关闭所有窗口，只保留当前窗口</p><h5 id="录制宏"><a href="#录制宏" class="headerlink" title="录制宏"></a>录制宏</h5></li><li>录制宏：按q键加任意字母开始录制，再按q键结束录制（这意味着vim中的宏不可嵌套），使用的时候@加宏名，比如qa。。。q录制名为a的宏，@a使用这个宏。</li></ul><h4 id="执行shell命令"><a href="#执行shell命令" class="headerlink" title="执行shell命令"></a>执行shell命令</h4><ul><li><p><code>:!command</code></p></li><li><p><code>:!ls</code> 列出当前目录下文件</p></li><li><p><code>:!perl -c script.pl</code> 检查perl脚本语法，可以不用退出vim，非常方便。</p></li><li><p><code>:!perl script.pl</code> 执行perl脚本，可以不用退出vim，非常方便。</p></li><li><p><code>:suspend或Ctrl - Z</code> 挂起vim，回到shell，按fg可以返回vim。</p></li></ul><h4 id="注释命令"><a href="#注释命令" class="headerlink" title="注释命令"></a>注释命令</h4><ul><li><p>perl程序中#开始的行为注释，所以要注释某些行，只需在行首加入#</p></li><li><p><code>3,5 s/^/#/g</code> 注释第3-5行</p></li><li><p><code>3,5 s/^#//g</code> 解除3-5行的注释</p></li><li><p><code>1,$ s/^/#/g</code> 注释整个文档。</p></li><li><p><code>:%s/^/#/g</code>注释整个文档，此法更快。</p></li></ul><h4 id="其他非编辑命令"><a href="#其他非编辑命令" class="headerlink" title="其他非编辑命令"></a>其他非编辑命令</h4><ul><li><p>. 重复前一次命令</p></li><li><p><code>:set ruler?</code>　　查看是否设置了ruler，在.vimrc中，使用set命令设制的选项都可以通过这个命令查看</p></li><li><p>:scriptnames　　查看vim脚本文件的位置，比如.vimrc文件，语法文件及plugin等。</p></li><li><p>:set list 显示非打印字符，如tab，空格，行尾等。如果tab无法显示，请确定用<code>set lcs=tab:&gt;-</code>命令设置了.vimrc文件，并确保你的文件中的确有tab，如果开启了expandtab，那么tab将被扩展为空格。</p></li></ul><h5 id="Vim教程"><a href="#Vim教程" class="headerlink" title="Vim教程"></a>Vim教程</h5><ul><li>在Unix系统上 <code>$ vimtutor</code></li><li>在Windows系统上 <code>:help tutor</code></li><li>:syntax 列出已经定义的语法项</li><li>:syntax clear 清除已定义的语法规则</li><li>:syntax case match 大小写敏感，int和Int将视为不同的语法元素</li><li>:syntax case ignore 大小写无关，int和Int将视为相同的语法元素，并使用同样的配色方案</li></ul><p><img src="https://zqnight.gitee.io/kaimz.github.io/image/hexo/vim/vim-command.png" alt="vim"></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[并发容器ConcurrentHashMap]]></title>
      <url>/java-concurrenthashmap.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><blockquote><p>原文出处：<a rel="external nofollow noopener noreferrer" target="_blank" href="http://pettyandydog.com/2017/07/27/concurrentHashMap/">pettyandydog</a></p></blockquote><p>HashMap在put的时候，插入的元素超过了容量（由负载因子决定）的范围就会触发扩容操作，就是rehash，这个会重新将原数组的内容重新hash到新的扩容数组中，在多线程的环境下，存在同时其他的元素也在进行put操作，如果hash值相同，可能出现同时在同一数组下用链表表示，造成闭环，导致在get时会出现死循环，所以HashMap是线程不安全的。<br>我们来了解另一个键值存储集合HashTable，它是线程安全的，它在所有涉及到多线程操作的都加上了synchronized关键字来锁住整个table，这就意味着所有的线程都在竞争一把锁，在多线程的环境下，它是安全的，但是无疑是效率低下的。<br>其实HashTable有很多的优化空间，锁住整个table这么粗暴的方法可以变相的柔和点，比如在多线程的环境下，对不同的数据集进行操作时其实根本就不需要去竞争一个锁，因为他们不同hash值，不会因为rehash造成线程不安全，所以互不影响，这就是锁分离技术，将锁的粒度降低，利用多个锁来控制多个小的table，这就是这篇文章的主角ConcurrentHashMap JDK1.7版本的核心思想。</p><p>ConcurrentHashMap可以做到读取数据不加锁，并且其内部的结构可以让其在进行写操作的时候能够将锁的粒度保持地尽量地小，不用对整个ConcurrentHashMap加锁。</p><a id="more"></a><p></p><h3 id="JDK1-7的实现"><a href="#JDK1-7的实现" class="headerlink" title="JDK1.7的实现"></a>JDK1.7的实现</h3><p>在java 8 以前ConcurrentHashMap使用分段锁技术，将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问，能够实现真正的并发访问。</p><p>java 8 中。实现线程安全的思想已经完全变了，它摒弃了Segment（锁段）的概念，而是启用了一种全新的方式实现,利用CAS算法。它沿用了与它同时期的HashMap版本的思想，底层依然由“数组”+链表+红黑树的方式思想，但是为了做到并发，又增加了很多辅助的类，例如TreeBin，Traverser等对象内部类。</p><p>ConcurrentHashMap为了提高本身的并发能力，在内部采用了一个叫做Segment的结构，一个Segment其实就是一个类Hash Table的结构，Segment内部维护了一个链表数组，我们用下面这一幅图来看下ConcurrentHashMap的内部结构：<br><br><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fmwxtwyrhaj20lb0br74k.jpg" alt="image"><br><br>从图中可以看到，ConcurrentHashMap内部分为很多个Segment，每一个Segment拥有一把锁，然后每个Segment（继承ReentrantLock）下面包含很多个HashEntry列表数组。对于一个key，需要经过三次（为什么要hash三次下文会详细讲解）hash操作，才能最终定位这个元素的位置，这三次hash分别为：</p><ol><li>对于一个key，先进行一次hash操作，得到hash值h1，也即h1 = hash1(key)；</li><li>将得到的h1的高几位进行第二次hash，得到hash值h2，也即h2 = hash2(h1高几位)，通过h2能够确定该元素的放在哪个Segment；</li><li>将得到的h1进行第三次hash，得到hash值h3，也即h3 = hash3(h1)，通过h3能够确定该元素放置在哪个HashEntry。</li></ol><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>ConcurrentHashMap的初始化是会通过位与运算来初始化Segment的大小，用ssize来表示，如下所示<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sshift = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ssize = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (ssize &lt; concurrencyLevel) &#123;</span><br><span class="line">    ++sshift;</span><br><span class="line">    ssize &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>如上所示，因为ssize用位于运算来计算（<code>ssize &lt;&lt;=1</code>），所以Segment的大小取值都是以2的N次方，无关concurrencyLevel的取值，当然concurrencyLevel最大只能用16位的二进制来表示，即65536，换句话说，Segment的大小最多65536个，没有指定concurrencyLevel元素初始化，Segment的大小ssize默认为16</p><p>每一个Segment元素下的HashEntry的初始化也是按照位于运算来计算，用cap来表示，如下所示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int cap = 1;</span><br><span class="line">while (cap &lt; c)</span><br><span class="line">    cap &lt;&lt;= 1;</span><br></pre></td></tr></table></figure><p>如上所示，HashEntry大小的计算也是2的N次方（<code>cap &lt;&lt;=1</code>）， cap的初始值为1，所以HashEntry最小的容量为2</p><h4 id="put操作"><a href="#put操作" class="headerlink" title="put操作"></a>put操作</h4><p>对于ConcurrentHashMap的数据插入，这里要进行两次Hash去定位数据的存储位置<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Segment</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">ReentrantLock</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br></pre></td></tr></table></figure><p></p><p>从上Segment的继承体系可以看出，Segment实现了ReentrantLock,也就带有锁的功能，当执行put操作时，会进行第一次key的hash来定位Segment的位置，如果该Segment还没有初始化，即通过CAS操作进行赋值，然后进行第二次hash操作，找到相应的HashEntry的位置，这里会利用继承过来的锁的特性，在将数据插入指定的HashEntry位置时（链表的尾端），会通过继承ReentrantLock的tryLock（）方法尝试去获取锁，如果获取成功就直接插入相应的位置，如果已经有线程获取该Segment的锁，那当前线程会以自旋的方式去继续的调用tryLock（）方法去获取锁，超过指定次数就挂起，等待唤醒。</p><h4 id="get操作"><a href="#get操作" class="headerlink" title="get操作"></a>get操作</h4><p>ConcurrentHashMap的get操作跟HashMap类似，只是ConcurrentHashMap第一次需要经过一次hash定位到Segment的位置，然后再hash定位到指定的HashEntry，遍历该HashEntry下的链表进行对比，成功就返回，不成功就返回null。</p><h4 id="size操作"><a href="#size操作" class="headerlink" title="size操作"></a>size操作</h4><p>计算ConcurrentHashMap的元素大小是一个有趣的问题，因为他是并发操作的，就是在你计算size的时候，他还在并发的插入数据，可能会导致你计算出来的size和你实际的size有相差（在你return size的时候，插入了多个数据），要解决这个问题，JDK1.7版本用两种方案。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (retries++ == RETRIES_BEFORE_LOCK) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; segments.length; ++j) ensureSegment(j).lock(); <span class="comment">// force creation</span></span><br><span class="line">        &#125;</span><br><span class="line">        sum = <span class="number">0L</span>;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        overflow = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; segments.length; ++j) &#123;</span><br><span class="line">            Segment&lt;K,V&gt; seg = segmentAt(segments, j);</span><br><span class="line">            <span class="keyword">if</span> (seg != <span class="keyword">null</span>) &#123; sum += seg.modCount; <span class="keyword">int</span> c = seg.count; <span class="keyword">if</span> (c &lt; <span class="number">0</span> || (size += c) &lt; <span class="number">0</span>)</span><br><span class="line">               overflow = <span class="keyword">true</span>;</span><br><span class="line">            &#125; &#125;</span><br><span class="line">        <span class="keyword">if</span> (sum == last) <span class="keyword">break</span>;</span><br><span class="line">        last = sum; &#125; &#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (retries &gt; RETRIES_BEFORE_LOCK) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; segments.length; ++j)</span><br><span class="line">            segmentAt(segments, j).unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>第一种方案他会使用不加锁的模式去尝试多次计算ConcurrentHashMap的size，最多三次，比较前后两次计算的结果，结果一致就认为当前没有元素加入，计算的结果是准确的；</li><li>第二种方案是如果第一种方案不符合，他就会给每个Segment加上锁，然后计算ConcurrentHashMap的size返回。</li></ol><h3 id="JDK1-8的实现"><a href="#JDK1-8的实现" class="headerlink" title="JDK1.8的实现"></a>JDK1.8的实现</h3><p>JDK1.8的实现已经摒弃了Segment的概念，而是直接用Node数组+链表+红黑树的数据结构来实现，并发控制使用Synchronized和CAS来操作，整个看起来就像是优化过且线程安全的HashMap，虽然在JDK1.8中还能看到Segment的数据结构，但是已经简化了属性，只是为了兼容旧版本。<br><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fmwxtsvnfxj20lc079weh.jpg" alt="image"></p><p>在深入JDK1.8的put和get实现之前要知道一些常量设计和数据结构，这些是构成ConcurrentHashMap实现结构的基础，下面看一下基本属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// node数组最大容量：2^30=1073741824</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="comment">// 默认初始值，必须是2的幕数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">16</span>;</span><br><span class="line"><span class="comment">//数组可能最大值，需要与toArray（）相关方法关联</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line"><span class="comment">//并发级别，遗留下来的，为兼容以前的版本</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CONCURRENCY_LEVEL = <span class="number">16</span>;</span><br><span class="line"><span class="comment">// 负载因子</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"><span class="comment">// 链表转红黑树阀值,&gt; 8 链表转换为红黑树</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br><span class="line"><span class="comment">//树转链表阀值，小于等于6（tranfer时，lc、hc=0两个计数器分别++记录原bin、新binTreeNode数量，&lt;=UNTREEIFY_THRESHOLD 则untreeify(lo)）</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TRANSFER_STRIDE = <span class="number">16</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> RESIZE_STAMP_BITS = <span class="number">16</span>;</span><br><span class="line"><span class="comment">// 2^15-1，help resize的最大线程数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_RESIZERS = (<span class="number">1</span> &lt;&lt; (<span class="number">32</span> - RESIZE_STAMP_BITS)) - <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 32-16=16，sizeCtl中记录size大小的偏移量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RESIZE_STAMP_SHIFT = <span class="number">32</span> - RESIZE_STAMP_BITS;</span><br><span class="line"><span class="comment">// forwarding nodes的hash值</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MOVED     = -<span class="number">1</span>; </span><br><span class="line"><span class="comment">// 树根节点的hash值</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEBIN   = -<span class="number">2</span>; </span><br><span class="line"><span class="comment">// ReservationNode的hash值</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RESERVED  = -<span class="number">3</span>; </span><br><span class="line"><span class="comment">// 可用处理器数量</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NCPU = Runtime.getRuntime().availableProcessors();</span><br><span class="line"><span class="comment">//存放node的数组</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"><span class="comment">/*控制标识符，用来控制table的初始化和扩容的操作，不同的值有不同的含义</span></span><br><span class="line"><span class="comment"> *当为负数时：-1代表正在初始化，-N代表有N-1个线程正在 进行扩容</span></span><br><span class="line"><span class="comment"> *当为0时：代表当时的table还没有被初始化</span></span><br><span class="line"><span class="comment"> *当为正数时：表示初始化或者下一次进行扩容的大小</span></span><br><span class="line"><span class="comment">private transient volatile int sizeCtl;</span></span><br></pre></td></tr></table></figure><p>基本属性定义了ConcurrentHashMap的一些边界以及操作时的一些控制，下面看一些内部的一些结构组成，这些是整个ConcurrentHashMap整个数据结构的核心。</p><h4 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h4><p>Node是ConcurrentHashMap存储结构的基本单元，继承于HashMap中的Entry，用于存储数据，源代码如下<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//链表的数据结构</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    <span class="comment">//val和next都会在扩容时发生变化，所以加上volatile来保持可见性和禁止重排序</span></span><br><span class="line">    <span class="keyword">volatile</span> V val;</span><br><span class="line">    <span class="keyword">volatile</span> Node&lt;K,V&gt; next;</span><br><span class="line">    Node(<span class="keyword">int</span> hash, K key, V val, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.hash = hash;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span>       </span>&#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span>     </span>&#123; <span class="keyword">return</span> val; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span>   </span>&#123; <span class="keyword">return</span> key.hashCode() ^ val.hashCode(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> key + <span class="string">"="</span> + val; &#125;</span><br><span class="line">    <span class="comment">//不允许更新value  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        Object k, v, u; Map.Entry&lt;?,?&gt; e;</span><br><span class="line">        <span class="keyword">return</span> ((o <span class="keyword">instanceof</span> Map.Entry) &amp;&amp;</span><br><span class="line">                (k = (e = (Map.Entry&lt;?,?&gt;)o).getKey()) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                (v = e.getValue()) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                (k == key || k.equals(key)) &amp;&amp;</span><br><span class="line">                (v == (u = val) || v.equals(u)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//用于map中的get（）方法，子类重写</span></span><br><span class="line">    <span class="function">Node&lt;K,V&gt; <span class="title">find</span><span class="params">(<span class="keyword">int</span> h, Object k)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt; e = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">if</span> (k != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                K ek;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == h &amp;&amp;</span><br><span class="line">                    ((ek = e.key) == k || (ek != <span class="keyword">null</span> &amp;&amp; k.equals(ek))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>Node数据结构很简单，从上可知，就是一个链表，但是只允许对数据进行查找，不允许进行修改。</p><h4 id="TreeNode"><a href="#TreeNode" class="headerlink" title="TreeNode"></a>TreeNode</h4><p>TreeNode继承与Node，但是数据结构换成了二叉树结构，它是红黑树的数据的存储结构，用于红黑树中存储数据，当链表的节点数大于8时会转换成红黑树的结构，他就是通过TreeNode作为存储结构代替Node来转换成黑红树源代码如下:<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//树形结构的属性定义</span></span><br><span class="line">    TreeNode&lt;K,V&gt; parent;  <span class="comment">// red-black tree links</span></span><br><span class="line">    TreeNode&lt;K,V&gt; left;</span><br><span class="line">    TreeNode&lt;K,V&gt; right;</span><br><span class="line">    TreeNode&lt;K,V&gt; prev;    <span class="comment">// needed to unlink next upon deletion</span></span><br><span class="line">    <span class="keyword">boolean</span> red; <span class="comment">//标志红黑树的红节点</span></span><br><span class="line">    TreeNode(<span class="keyword">int</span> hash, K key, V val, Node&lt;K,V&gt; next,</span><br><span class="line">             TreeNode&lt;K,V&gt; parent) &#123;</span><br><span class="line">        <span class="keyword">super</span>(hash, key, val, next);</span><br><span class="line">        <span class="keyword">this</span>.parent = parent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Node&lt;K,V&gt; <span class="title">find</span><span class="params">(<span class="keyword">int</span> h, Object k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> findTreeNode(h, k, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据key查找 从根节点开始找出相应的TreeNode，</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title">findTreeNode</span><span class="params">(<span class="keyword">int</span> h, Object k, Class&lt;?&gt; kc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k != <span class="keyword">null</span>) &#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; p = <span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">do</span>  &#123;</span><br><span class="line">                <span class="keyword">int</span> ph, dir; K pk; TreeNode&lt;K,V&gt; q;</span><br><span class="line">                TreeNode&lt;K,V&gt; pl = p.left, pr = p.right;</span><br><span class="line">                <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">                    p = pl;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">                    p = pr;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((pk = p.key) == k || (pk != <span class="keyword">null</span> &amp;&amp; k.equals(pk)))</span><br><span class="line">                    <span class="keyword">return</span> p;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pl == <span class="keyword">null</span>)</span><br><span class="line">                    p = pr;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pr == <span class="keyword">null</span>)</span><br><span class="line">                    p = pl;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((kc != <span class="keyword">null</span> ||</span><br><span class="line">                          (kc = comparableClassFor(k)) != <span class="keyword">null</span>) &amp;&amp;</span><br><span class="line">                         (dir = compareComparables(kc, k, pk)) != <span class="number">0</span>)</span><br><span class="line">                    p = (dir &lt; <span class="number">0</span>) ? pl : pr;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((q = pr.findTreeNode(h, k, kc)) != <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> q;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    p = pl;</span><br><span class="line">            &#125; <span class="keyword">while</span> (p != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id="TreeBin"><a href="#TreeBin" class="headerlink" title="TreeBin"></a>TreeBin</h4><p>TreeBin从字面含义中可以理解为存储树形结构的容器，而树形结构就是指TreeNode，所以TreeBin就是封装TreeNode的容器，它提供转换黑红树的一些条件和锁的控制，部分源码结构如下。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeBin</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//指向TreeNode列表和根节点</span></span><br><span class="line">    TreeNode&lt;K,V&gt; root;</span><br><span class="line">    <span class="keyword">volatile</span> TreeNode&lt;K,V&gt; first;</span><br><span class="line">    <span class="keyword">volatile</span> Thread waiter;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">int</span> lockState;</span><br><span class="line">    <span class="comment">// 读写锁状态</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WRITER = <span class="number">1</span>; <span class="comment">// 获取写锁的状态</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WAITER = <span class="number">2</span>; <span class="comment">// 等待写锁的状态</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> READER = <span class="number">4</span>; <span class="comment">// 增加数据时读锁的状态</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化红黑树</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TreeBin(TreeNode&lt;K,V&gt; b) &#123;</span><br><span class="line">        <span class="keyword">super</span>(TREEBIN, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">this</span>.first = b;</span><br><span class="line">        TreeNode&lt;K,V&gt; r = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (TreeNode&lt;K,V&gt; x = b, next; x != <span class="keyword">null</span>; x = next) &#123;</span><br><span class="line">            next = (TreeNode&lt;K,V&gt;)x.next;</span><br><span class="line">            x.left = x.right = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (r == <span class="keyword">null</span>) &#123;</span><br><span class="line">                x.parent = <span class="keyword">null</span>;</span><br><span class="line">                x.red = <span class="keyword">false</span>;</span><br><span class="line">                r = x;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                K k = x.key;</span><br><span class="line">                <span class="keyword">int</span> h = x.hash;</span><br><span class="line">                Class&lt;?&gt; kc = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">for</span> (TreeNode&lt;K,V&gt; p = r;;) &#123;</span><br><span class="line">                    <span class="keyword">int</span> dir, ph;</span><br><span class="line">                    K pk = p.key;</span><br><span class="line">                    <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">                        dir = -<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">                        dir = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                              (kc = comparableClassFor(k)) == <span class="keyword">null</span>) ||</span><br><span class="line">                             (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>)</span><br><span class="line">                        dir = tieBreakOrder(k, pk);</span><br><span class="line">                        TreeNode&lt;K,V&gt; xp = p;</span><br><span class="line">                    <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        x.parent = xp;</span><br><span class="line">                        <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)</span><br><span class="line">                            xp.left = x;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            xp.right = x;</span><br><span class="line">                        r = balanceInsertion(r, x);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.root = r;</span><br><span class="line">        <span class="function"><span class="keyword">assert</span> <span class="title">checkInvariants</span><span class="params">(root)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h4><p>通过一个简单的例子以debug的视角看看ConcurrentHashMap的具体操作细节。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConcurrentHashMap</span></span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ConcurrentHashMap&lt;String,String&gt; map = <span class="keyword">new</span> ConcurrentHashMap(); <span class="comment">//初始化ConcurrentHashMap</span></span><br><span class="line">        <span class="comment">//新增个人信息</span></span><br><span class="line">        map.put(<span class="string">"id"</span>,<span class="string">"1"</span>);</span><br><span class="line">        map.put(<span class="string">"name"</span>,<span class="string">"andy"</span>);</span><br><span class="line">        map.put(<span class="string">"sex"</span>,<span class="string">"男"</span>);</span><br><span class="line">        <span class="comment">//获取姓名</span></span><br><span class="line">        String name = map.get(<span class="string">"name"</span>);</span><br><span class="line">        Assert.assertEquals(name,<span class="string">"andy"</span>);</span><br><span class="line">        <span class="comment">//计算大小</span></span><br><span class="line">        <span class="keyword">int</span> size = map.size();</span><br><span class="line">        Assert.assertEquals(size,<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>通过new ConcurrentHashMap()来进行初始化：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>由上你会发现ConcurrentHashMap的初始化其实是一个空实现，并没有做任何事，这里后面会讲到，这也是和其他的集合类有区别的地方，初始化操作并不是在构造函数实现的，而是在put操作中实现，当然ConcurrentHashMap还提供了其他的构造函数，有指定容量大小或者指定负载因子，跟HashMap一样，这里就不做介绍了。</p><h4 id="put操作-1"><a href="#put操作-1" class="headerlink" title="put操作"></a>put操作</h4><p>在上面的例子中我们新增个人信息会调用put方法，我们来看下它的实现：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(key, value, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** Implementation for put and putIfAbsent */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(K key, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span> || value == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">int</span> hash = spread(key.hashCode()); <span class="comment">//两次hash，减少hash冲突，可以均匀分布</span></span><br><span class="line">    <span class="keyword">int</span> binCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123; <span class="comment">//对这个table进行迭代</span></span><br><span class="line">        Node&lt;K,V&gt; f; <span class="keyword">int</span> n, i, fh;</span><br><span class="line">        <span class="comment">//这里就是上面构造方法没有进行初始化，在这里进行判断，为null就调用initTable进行初始化，属于懒汉模式初始化</span></span><br><span class="line">        <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            tab = initTable();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="keyword">null</span>) &#123;<span class="comment">//如果i位置没有数据，就直接无锁插入</span></span><br><span class="line">            <span class="keyword">if</span> (casTabAt(tab, i, <span class="keyword">null</span>,</span><br><span class="line">                         <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>)))</span><br><span class="line">                <span class="keyword">break</span>;                   <span class="comment">// no lock when adding to empty bin</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)<span class="comment">//如果在进行扩容，则先进行扩容操作</span></span><br><span class="line">            tab = helpTransfer(tab, f);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            V oldVal = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//如果以上条件都不满足，那就要进行加锁操作，也就是存在hash冲突，锁住链表或者红黑树的头结点</span></span><br><span class="line">            <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123; <span class="comment">//表示该节点是链表结构</span></span><br><span class="line">                        binCount = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class="line">                            K ek;</span><br><span class="line">                            <span class="comment">//这里涉及到相同的key进行put就会覆盖原先的value</span></span><br><span class="line">                            <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                                ((ek = e.key) == key ||</span><br><span class="line">                                 (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                                oldVal = e.val;</span><br><span class="line">                                <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                    e.val = value;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            Node&lt;K,V&gt; pred = e;</span><br><span class="line">                            <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>) &#123;  <span class="comment">//插入链表尾部</span></span><br><span class="line">                                pred.next = <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key,</span><br><span class="line">                                                          value, <span class="keyword">null</span>);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;<span class="comment">//红黑树结构</span></span><br><span class="line">                        Node&lt;K,V&gt; p;</span><br><span class="line">                        binCount = <span class="number">2</span>;</span><br><span class="line">                        <span class="comment">//红黑树结构旋转插入</span></span><br><span class="line">                        <span class="keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class="line">                                                       value)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            oldVal = p.val;</span><br><span class="line">                            <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                p.val = value;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123; </span><br><span class="line">            <span class="comment">// 如果链表的长度大于8时就会进行红黑树的转换</span></span><br><span class="line">                <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">                    treeifyBin(tab, i);</span><br><span class="line">                <span class="keyword">if</span> (oldVal != <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> oldVal;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    addCount(<span class="number">1L</span>, binCount);<span class="comment">//统计size，并且检查是否需要扩容</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这个put的过程很清晰，对当前的table进行无条件自循环直到put成功，可以分成以下六步流程来概述。</p><ol><li>如果没有初始化就先调用initTable（）方法来进行初始化过程</li><li>如果没有hash冲突就直接CAS插入</li><li>如果还在进行扩容操作就先进行扩容</li><li>如果存在hash冲突，就加锁来保证线程安全，这里有两种情况，一种是链表形式就直接遍历到尾端插入，一种是红黑树就按照红黑树结构插入，</li><li>最后一个如果该链表的数量大于阈值8，就要先转换成黑红树的结构，break再一次进入循环</li><li>如果添加成功就调用addCount（）方法统计size，并且检查是否需要扩容</li></ol><h5 id="第一步-initTable（）"><a href="#第一步-initTable（）" class="headerlink" title="第一步 initTable（）"></a>第一步 initTable（）</h5><p>现在我们来对每一步的细节进行源码分析，在第一步中，符合条件会进行初始化操作，我们来看看initTable（）方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initializes table, using the size recorded in sizeCtl.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Node&lt;K,V&gt;[] initTable() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; <span class="keyword">int</span> sc;</span><br><span class="line">    <span class="keyword">while</span> ((tab = table) == <span class="keyword">null</span> || tab.length == <span class="number">0</span>) &#123;<span class="comment">//空的table才能进入初始化操作</span></span><br><span class="line">        <span class="keyword">if</span> ((sc = sizeCtl) &lt; <span class="number">0</span>) <span class="comment">//sizeCtl&lt;0表示其他线程已经在初始化了或者扩容了，挂起当前线程 </span></span><br><span class="line">            Thread.yield(); <span class="comment">// lost initialization race; just spin</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, -<span class="number">1</span>)) &#123;<span class="comment">//CAS操作SIZECTL为-1，表示初始化状态</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || tab.length == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">int</span> n = (sc &gt; <span class="number">0</span>) ? sc : DEFAULT_CAPACITY;</span><br><span class="line">                    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                    Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n];<span class="comment">//初始化</span></span><br><span class="line">                    table = tab = nt;</span><br><span class="line">                    sc = n - (n &gt;&gt;&gt; <span class="number">2</span>);<span class="comment">//记录下次扩容的大小</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                sizeCtl = sc;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="第二步-Unsafe"><a href="#第二步-Unsafe" class="headerlink" title="第二步 Unsafe"></a>第二步 Unsafe</h5><p>在第二步中没有hash冲突就直接调用Unsafe的方法CAS插入该元素，进入第三步如果容器正在扩容，则会调用helpTransfer（）方法帮助扩容，现在我们跟进helpTransfer（）方法看看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *帮助从旧的table的元素复制到新的table中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] helpTransfer(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt; f) &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] nextTab; <span class="keyword">int</span> sc;</span><br><span class="line">    <span class="keyword">if</span> (tab != <span class="keyword">null</span> &amp;&amp; (f <span class="keyword">instanceof</span> ForwardingNode) &amp;&amp;</span><br><span class="line">        (nextTab = ((ForwardingNode&lt;K,V&gt;)f).nextTable) != <span class="keyword">null</span>) &#123; <span class="comment">//新的table nextTba已经存在前提下才能帮助扩容</span></span><br><span class="line">        <span class="keyword">int</span> rs = resizeStamp(tab.length);</span><br><span class="line">        <span class="keyword">while</span> (nextTab == nextTable &amp;&amp; table == tab &amp;&amp;</span><br><span class="line">               (sc = sizeCtl) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> ||</span><br><span class="line">                sc == rs + MAX_RESIZERS || transferIndex &lt;= <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, sc + <span class="number">1</span>)) &#123;</span><br><span class="line">                transfer(tab, nextTab);<span class="comment">//调用扩容方法</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nextTab;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> table;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实helpTransfer（）方法的目的就是调用多个工作线程一起帮助进行扩容，这样的效率就会更高，而不是只有检查到要扩容的那个线程进行扩容操作，其他线程就要等待扩容操作完成才能工作。</p><h5 id="第三步-扩容transfer（）"><a href="#第三步-扩容transfer（）" class="headerlink" title="第三步 扩容transfer（）"></a>第三步 扩容transfer（）</h5><p>既然这里涉及到扩容的操作，我们也一起来看看扩容方法transfer（）：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt;[] nextTab)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = tab.length, stride;</span><br><span class="line">        <span class="comment">// 每核处理的量小于16，则强制赋值16</span></span><br><span class="line">        <span class="keyword">if</span> ((stride = (NCPU &gt; <span class="number">1</span>) ? (n &gt;&gt;&gt; <span class="number">3</span>) / NCPU : n) &lt; MIN_TRANSFER_STRIDE)</span><br><span class="line">            stride = MIN_TRANSFER_STRIDE; <span class="comment">// subdivide range</span></span><br><span class="line">        <span class="keyword">if</span> (nextTab == <span class="keyword">null</span>) &#123;            <span class="comment">// initiating</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n &lt;&lt; <span class="number">1</span>];        <span class="comment">//构建一个nextTable对象，其容量为原来容量的两倍</span></span><br><span class="line">                nextTab = nt;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable ex) &#123;      <span class="comment">// try to cope with OOME</span></span><br><span class="line">                sizeCtl = Integer.MAX_VALUE;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            nextTable = nextTab;</span><br><span class="line">            transferIndex = n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> nextn = nextTab.length;</span><br><span class="line">        <span class="comment">// 连接点指针，用于标志位（fwd的hash值为-1，fwd.nextTable=nextTab）</span></span><br><span class="line">        ForwardingNode&lt;K,V&gt; fwd = <span class="keyword">new</span> ForwardingNode&lt;K,V&gt;(nextTab);</span><br><span class="line">        <span class="comment">// 当advance == true时，表明该节点已经处理过了</span></span><br><span class="line">        <span class="keyword">boolean</span> advance = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">boolean</span> finishing = <span class="keyword">false</span>; <span class="comment">// to ensure sweep before committing nextTab</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, bound = <span class="number">0</span>;;) &#123;</span><br><span class="line">            Node&lt;K,V&gt; f; <span class="keyword">int</span> fh;</span><br><span class="line">            <span class="comment">// 控制 --i ,遍历原hash表中的节点</span></span><br><span class="line">            <span class="keyword">while</span> (advance) &#123;</span><br><span class="line">                <span class="keyword">int</span> nextIndex, nextBound;</span><br><span class="line">                <span class="keyword">if</span> (--i &gt;= bound || finishing)</span><br><span class="line">                    advance = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((nextIndex = transferIndex) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    i = -<span class="number">1</span>;</span><br><span class="line">                    advance = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 用CAS计算得到的transferIndex</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt</span><br><span class="line">                        (<span class="keyword">this</span>, TRANSFERINDEX, nextIndex,</span><br><span class="line">                                nextBound = (nextIndex &gt; stride ?</span><br><span class="line">                                        nextIndex - stride : <span class="number">0</span>))) &#123;</span><br><span class="line">                    bound = nextBound;</span><br><span class="line">                    i = nextIndex - <span class="number">1</span>;</span><br><span class="line">                    advance = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= n || i + n &gt;= nextn) &#123;</span><br><span class="line">                <span class="keyword">int</span> sc;</span><br><span class="line">                <span class="comment">// 已经完成所有节点复制了</span></span><br><span class="line">                <span class="keyword">if</span> (finishing) &#123;</span><br><span class="line">                    nextTable = <span class="keyword">null</span>;</span><br><span class="line">                    table = nextTab;        <span class="comment">// table 指向nextTable</span></span><br><span class="line">                    sizeCtl = (n &lt;&lt; <span class="number">1</span>) - (n &gt;&gt;&gt; <span class="number">1</span>);     <span class="comment">// sizeCtl阈值为原来的1.5倍</span></span><br><span class="line">                    <span class="keyword">return</span>;     <span class="comment">// 跳出死循环，</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// CAS 更扩容阈值，在这里面sizectl值减一，说明新加入一个线程参与到扩容操作</span></span><br><span class="line">                <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc = sizeCtl, sc - <span class="number">1</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((sc - <span class="number">2</span>) != resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT)</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    finishing = advance = <span class="keyword">true</span>;</span><br><span class="line">                    i = n; <span class="comment">// recheck before commit</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 遍历的节点为null，则放入到ForwardingNode 指针节点</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i)) == <span class="keyword">null</span>)</span><br><span class="line">                advance = casTabAt(tab, i, <span class="keyword">null</span>, fwd);</span><br><span class="line">            <span class="comment">// f.hash == -1 表示遍历到了ForwardingNode节点，意味着该节点已经处理过了</span></span><br><span class="line">            <span class="comment">// 这里是控制并发扩容的核心</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">                advance = <span class="keyword">true</span>; <span class="comment">// already processed</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 节点加锁</span></span><br><span class="line">                <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                    <span class="comment">// 节点复制工作</span></span><br><span class="line">                    <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                        Node&lt;K,V&gt; ln, hn;</span><br><span class="line">                        <span class="comment">// fh &gt;= 0 ,表示为链表节点</span></span><br><span class="line">                        <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="comment">// 构造两个链表  一个是原链表  另一个是原链表的反序排列</span></span><br><span class="line">                            <span class="keyword">int</span> runBit = fh &amp; n;</span><br><span class="line">                            Node&lt;K,V&gt; lastRun = f;</span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; p = f.next; p != <span class="keyword">null</span>; p = p.next) &#123;</span><br><span class="line">                                <span class="keyword">int</span> b = p.hash &amp; n;</span><br><span class="line">                                <span class="keyword">if</span> (b != runBit) &#123;</span><br><span class="line">                                    runBit = b;</span><br><span class="line">                                    lastRun = p;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (runBit == <span class="number">0</span>) &#123;</span><br><span class="line">                                ln = lastRun;</span><br><span class="line">                                hn = <span class="keyword">null</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                hn = lastRun;</span><br><span class="line">                                ln = <span class="keyword">null</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; p = f; p != lastRun; p = p.next) &#123;</span><br><span class="line">                                <span class="keyword">int</span> ph = p.hash; K pk = p.key; V pv = p.val;</span><br><span class="line">                                <span class="keyword">if</span> ((ph &amp; n) == <span class="number">0</span>)</span><br><span class="line">                                    ln = <span class="keyword">new</span> Node&lt;K,V&gt;(ph, pk, pv, ln);</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    hn = <span class="keyword">new</span> Node&lt;K,V&gt;(ph, pk, pv, hn);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">// 在nextTable i 位置处插上链表</span></span><br><span class="line">                            setTabAt(nextTab, i, ln);</span><br><span class="line">                            <span class="comment">// 在nextTable i + n 位置处插上链表</span></span><br><span class="line">                            setTabAt(nextTab, i + n, hn);</span><br><span class="line">                            <span class="comment">// 在table i 位置处插上ForwardingNode 表示该节点已经处理过了</span></span><br><span class="line">                            setTabAt(tab, i, fwd);</span><br><span class="line">                            <span class="comment">// advance = true 可以执行--i动作，遍历节点</span></span><br><span class="line">                            advance = <span class="keyword">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 如果是TreeBin，则按照红黑树进行处理，处理逻辑与上面一致</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                            TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;</span><br><span class="line">                            TreeNode&lt;K,V&gt; lo = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                            TreeNode&lt;K,V&gt; hi = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                            <span class="keyword">int</span> lc = <span class="number">0</span>, hc = <span class="number">0</span>;</span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; e = t.first; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">                                <span class="keyword">int</span> h = e.hash;</span><br><span class="line">                                TreeNode&lt;K,V&gt; p = <span class="keyword">new</span> TreeNode&lt;K,V&gt;</span><br><span class="line">                                        (h, e.key, e.val, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                                <span class="keyword">if</span> ((h &amp; n) == <span class="number">0</span>) &#123;</span><br><span class="line">                                    <span class="keyword">if</span> ((p.prev = loTail) == <span class="keyword">null</span>)</span><br><span class="line">                                        lo = p;</span><br><span class="line">                                    <span class="keyword">else</span></span><br><span class="line">                                        loTail.next = p;</span><br><span class="line">                                    loTail = p;</span><br><span class="line">                                    ++lc;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">else</span> &#123;</span><br><span class="line">                                    <span class="keyword">if</span> ((p.prev = hiTail) == <span class="keyword">null</span>)</span><br><span class="line">                                        hi = p;</span><br><span class="line">                                    <span class="keyword">else</span></span><br><span class="line">                                        hiTail.next = p;</span><br><span class="line">                                    hiTail = p;</span><br><span class="line">                                    ++hc;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">// 扩容后树节点个数若&lt;=6，将树转链表</span></span><br><span class="line">                            ln = (lc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(lo) :</span><br><span class="line">                                    (hc != <span class="number">0</span>) ? <span class="keyword">new</span> TreeBin&lt;K,V&gt;(lo) : t;</span><br><span class="line">                            hn = (hc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(hi) :</span><br><span class="line">                                    (lc != <span class="number">0</span>) ? <span class="keyword">new</span> TreeBin&lt;K,V&gt;(hi) : t;</span><br><span class="line">                            setTabAt(nextTab, i, ln);</span><br><span class="line">                            setTabAt(nextTab, i + n, hn);</span><br><span class="line">                            setTabAt(tab, i, fwd);</span><br><span class="line">                            advance = <span class="keyword">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><p>扩容过程有点复杂，这里主要涉及到多线程并发扩容,ForwardingNode的作用就是支持扩容操作，将已处理的节点和空节点置为ForwardingNode，并发处理时多个线程经过ForwardingNode就表示已经遍历了，就往后遍历，下图是多线程合作扩容的过程：<br><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fmwxyeog6hj20ec0bcweu.jpg" alt="image"></p><h5 id="第四步-加入"><a href="#第四步-加入" class="headerlink" title="第四步 加入"></a>第四步 加入</h5><p>向链表或者红黑树里加节点</p><h5 id="第五步-链表转红黑树"><a href="#第五步-链表转红黑树" class="headerlink" title="第五步 链表转红黑树"></a>第五步 链表转红黑树</h5><p>介绍完扩容过程，我们再次回到put流程，在第四步中是向链表或者红黑树里加节点，到第五步，会调用treeifyBin（）方法进行链表转红黑树的过程。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">    Node&lt;K,V&gt; b; <span class="keyword">int</span> n, sc;</span><br><span class="line">    <span class="keyword">if</span> (tab != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//如果整个table的数量小于64，就扩容至原来的一倍，不转红黑树了</span></span><br><span class="line">        <span class="comment">//因为这个阈值扩容可以减少hash冲突，不必要去转红黑树</span></span><br><span class="line">        <span class="keyword">if</span> ((n = tab.length) &lt; MIN_TREEIFY_CAPACITY) </span><br><span class="line">            tryPresize(n &lt;&lt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((b = tabAt(tab, index)) != <span class="keyword">null</span> &amp;&amp; b.hash &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (b) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tabAt(tab, index) == b) &#123;</span><br><span class="line">                    TreeNode&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">for</span> (Node&lt;K,V&gt; e = b; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">                        <span class="comment">//封装成TreeNode</span></span><br><span class="line">                        TreeNode&lt;K,V&gt; p =</span><br><span class="line">                            <span class="keyword">new</span> TreeNode&lt;K,V&gt;(e.hash, e.key, e.val,</span><br><span class="line">                                              <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> ((p.prev = tl) == <span class="keyword">null</span>)</span><br><span class="line">                            hd = p;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            tl.next = p;</span><br><span class="line">                        tl = p;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//通过TreeBin对象对TreeNode转换成红黑树</span></span><br><span class="line">                    setTabAt(tab, index, <span class="keyword">new</span> TreeBin&lt;K,V&gt;(hd));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h5 id="第六步-添加成功addCount（）"><a href="#第六步-添加成功addCount（）" class="headerlink" title="第六步 添加成功addCount（）"></a>第六步 添加成功addCount（）</h5><p>到第六步表示已经数据加入成功了，现在调用addCount()方法计算ConcurrentHashMap的size，在原来的基础上加一，现在来看看addCount()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">addCount</span><span class="params">(<span class="keyword">long</span> x, <span class="keyword">int</span> check)</span> </span>&#123;</span><br><span class="line">    CounterCell[] as; <span class="keyword">long</span> b, s;</span><br><span class="line">    <span class="comment">//更新baseCount，table的数量，counterCells表示元素个数的变化</span></span><br><span class="line">    <span class="keyword">if</span> ((as = counterCells) != <span class="keyword">null</span> ||</span><br><span class="line">        !U.compareAndSwapLong(<span class="keyword">this</span>, BASECOUNT, b = baseCount, s = b + x)) &#123;</span><br><span class="line">        CounterCell a; <span class="keyword">long</span> v; <span class="keyword">int</span> m;</span><br><span class="line">        <span class="keyword">boolean</span> uncontended = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//如果多个线程都在执行，则CAS失败，执行fullAddCount，全部加入count</span></span><br><span class="line">        <span class="keyword">if</span> (as == <span class="keyword">null</span> || (m = as.length - <span class="number">1</span>) &lt; <span class="number">0</span> || </span><br><span class="line">            (a = as[ThreadLocalRandom.getProbe() &amp; m]) == <span class="keyword">null</span> ||</span><br><span class="line">            !(uncontended =</span><br><span class="line">              U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) &#123;</span><br><span class="line">            fullAddCount(x, uncontended);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (check &lt;= <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        s = sumCount();</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">//check&gt;=0表示需要进行扩容操作</span></span><br><span class="line">    <span class="keyword">if</span> (check &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab, nt; <span class="keyword">int</span> n, sc;</span><br><span class="line">        <span class="keyword">while</span> (s &gt;= (<span class="keyword">long</span>)(sc = sizeCtl) &amp;&amp; (tab = table) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">               (n = tab.length) &lt; MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            <span class="keyword">int</span> rs = resizeStamp(n);</span><br><span class="line">            <span class="keyword">if</span> (sc &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> ||</span><br><span class="line">                    sc == rs + MAX_RESIZERS || (nt = nextTable) == <span class="keyword">null</span> ||</span><br><span class="line">                    transferIndex &lt;= <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, sc + <span class="number">1</span>))</span><br><span class="line">                    transfer(tab, nt);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//当前线程发起库哦哦让操作，nextTable=null</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc,</span><br><span class="line">                                         (rs &lt;&lt; RESIZE_STAMP_SHIFT) + <span class="number">2</span>))</span><br><span class="line">                transfer(tab, <span class="keyword">null</span>);</span><br><span class="line">            s = sumCount();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>put的流程现在已经分析完了，你可以从中发现，他在并发处理中使用的是乐观锁，当有冲突的时候才进行并发处理，而且流程步骤很清晰，但是细节设计的很复杂，毕竟多线程的场景也复杂。</p><h4 id="get操作-1"><a href="#get操作-1" class="headerlink" title="get操作"></a>get操作</h4><p>我们现在要回到开始的例子中，我们对个人信息进行了新增之后，我们要获取所新增的信息，使用String name = map.get(“name”)获取新增的name信息，现在我们依旧用debug的方式来分析下ConcurrentHashMap的获取方法get()：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; e, p; <span class="keyword">int</span> n, eh; K ek;</span><br><span class="line">    <span class="keyword">int</span> h = spread(key.hashCode()); <span class="comment">//计算两次hash</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (e = tabAt(tab, (n - <span class="number">1</span>) &amp; h)) != <span class="keyword">null</span>) &#123;<span class="comment">//读取首节点的Node元素</span></span><br><span class="line">        <span class="keyword">if</span> ((eh = e.hash) == h) &#123; <span class="comment">//如果该节点就是首节点就返回</span></span><br><span class="line">            <span class="keyword">if</span> ((ek = e.key) == key || (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))</span><br><span class="line">                <span class="keyword">return</span> e.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//hash值为负值表示正在扩容，这个时候查的是ForwardingNode的find方法来定位到nextTable来</span></span><br><span class="line">        <span class="comment">//查找，查找到就返回</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (eh &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> (p = e.find(h, key)) != <span class="keyword">null</span> ? p.val : <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>) &#123;<span class="comment">//既不是首节点也不是ForwardingNode，那就往下遍历</span></span><br><span class="line">            <span class="keyword">if</span> (e.hash == h &amp;&amp;</span><br><span class="line">                ((ek = e.key) == key || (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek))))</span><br><span class="line">                <span class="keyword">return</span> e.val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>ConcurrentHashMap的get操作的流程很简单，也很清晰，可以分为三个步骤来描述</p><ol><li>计算hash值，定位到该table索引位置，如果是首节点符合就返回；</li><li>如果遇到扩容的时候，会调用标志正在扩容节点ForwardingNode的find方法，查找该节点，匹配就返回；</li><li>以上都不符合的话，就往下遍历节点，匹配就返回，否则最后就返回null。</li></ol><h4 id="size操作-1"><a href="#size操作-1" class="headerlink" title="size操作"></a>size操作</h4><p>最后我们来看下例子中最后获取size的方式<code>int size = map.size()</code>;，现在让我们看下size()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> n = sumCount();</span><br><span class="line">    <span class="keyword">return</span> ((n &lt; <span class="number">0L</span>) ? <span class="number">0</span> :</span><br><span class="line">            (n &gt; (<span class="keyword">long</span>)Integer.MAX_VALUE) ? Integer.MAX_VALUE :</span><br><span class="line">            (<span class="keyword">int</span>)n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">long</span> <span class="title">sumCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    CounterCell[] as = counterCells; CounterCell a; <span class="comment">//变化的数量</span></span><br><span class="line">    <span class="keyword">long</span> sum = baseCount;</span><br><span class="line">    <span class="keyword">if</span> (as != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; as.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((a = as[i]) != <span class="keyword">null</span>)</span><br><span class="line">                sum += a.value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在JDK1.8版本中，对于size的计算，在扩容和addCount()方法就已经有处理了，JDK1.7是在调用size()方法才去计算，其实在并发集合中去计算size是没有多大的意义的，因为size是实时在变的，只能计算某一刻的大小，但是某一刻太快了，人的感知是一个时间段，所以并不是很精确。</p><h3 id="总结与思考"><a href="#总结与思考" class="headerlink" title="总结与思考"></a>总结与思考</h3><p>其实可以看出JDK1.8版本的ConcurrentHashMap的数据结构已经接近HashMap，相对而言，ConcurrentHashMap只是增加了同步的操作来控制并发，从JDK1.7版本的ReentrantLock+Segment+HashEntry，到JDK1.8版本中synchronized+CAS+HashEntry+红黑树,相对而言，总结如下思考：</p><ol><li>JDK1.8的实现降低锁的粒度，JDK1.7版本锁的粒度是基于Segment的，包含多个HashEntry，而JDK1.8锁的粒度就是HashEntry（首节点）</li><li>JDK1.8版本的数据结构变得更加简单，使得操作也更加清晰流畅，因为已经使用synchronized来进行同步，所以不需要分段锁的概念，也就不需要Segment这种数据结构了，由于粒度的降低，实现的复杂度也增加了</li><li>JDK1.8使用红黑树来优化链表，基于长度很长的链表的遍历是一个很漫长的过程，而红黑树的遍历效率是很快的，代替一定阈值的链表，这样形成一个最佳拍档</li><li>JDK1.8为什么使用内置锁synchronized来代替重入锁ReentrantLock，我觉得有以下几点：</li></ol><ul><li>因为粒度降低了，在相对而言的低粒度加锁方式，synchronized并不比ReentrantLock差，在粗粒度加锁中ReentrantLock可能通过Condition来控制各个低粒度的边界，更加的灵活，而在低粒度中，Condition的优势就没有了;</li><li>JVM的开发团队从来都没有放弃synchronized，而且基于JVM的synchronized优化空间更大，使用内嵌的关键字比使用API更加自然</li><li>在大量的数据操作下，对于JVM的内存压力，基于API的ReentrantLock会开销更多的内存，虽然不是瓶颈，但是也是一个选择依据</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a rel="external nofollow noopener noreferrer" target="_blank" href="http://blog.csdn.net/u010412719/article/details/52145145">http://blog.csdn.net/u010412719/article/details/52145145</a></li><li><a rel="external nofollow noopener noreferrer" target="_blank" href="http://www.jianshu.com/p/e694f1e868ec">http://www.jianshu.com/p/e694f1e868ec</a></li><li><a rel="external nofollow noopener noreferrer" target="_blank" href="https://my.oschina.net/liuxiaomian/blog/880088">https://my.oschina.net/liuxiaomian/blog/880088</a></li><li><a rel="external nofollow noopener noreferrer" target="_blank" href="https://bentang.me/tech/2016/12/01/jdk8-concurrenthashmap-1/">https://bentang.me/tech/2016/12/01/jdk8-concurrenthashmap-1/</a></li><li><a rel="external nofollow noopener noreferrer" target="_blank" href="http://cmsblogs.com/?p=2283">http://cmsblogs.com/?p=2283</a></li></ul><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java并发编程：线程间协作的两种方式：wait、notify、notifyAll和Condition]]></title>
      <url>/java-thread-cooperation.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><p>原文链接 <a rel="external nofollow noopener noreferrer" target="_blank" href="http://www.cnblogs.com/dolphin0520/p/3920385.html">Java并发编程：线程间协作的两种方式：wait、notify、notifyAll和Condition</a></p><p>在前面我们将了很多关于同步的问题，然而在现实中，需要线程之间的协作。比如说最经典的生产者-消费者模型：当队列满时，生产者需要等待队列有空间才能继续往里面放入商品，而在等待的期间内，生产者必须释放对临界资源（即队列）的占用权。因为生产者如果不释放对临界资源的占用权，那么消费者就无法消费队列中的商品，就不会让队列有空间，那么生产者就会一直无限等待下去。因此，一般情况下，当队列满时，会让生产者交出对临界资源的占用权，并进入挂起状态。然后等待消费者消费了商品，然后消费者通知生产者队列有空间了。同样地，当队列空时，消费者也必须等待，等待生产者通知它队列中有商品了。这种互相通信的过程就是线程间的协作。</p><a id="more"></a><p>今天我们就来探讨一下Java中线程协作的最常见的两种方式：利用Object.wait()、Object.notify()和使用Condition。</p><h3 id="wait-、notify-和notifyAll"><a href="#wait-、notify-和notifyAll" class="headerlink" title="wait()、notify()和notifyAll()"></a>wait()、notify()和notifyAll()</h3><p>wait()、notify()和notifyAll()是Object类中的方法：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Wakes up a single thread that is waiting on this object's</span></span><br><span class="line"><span class="comment"> * monitor. If any threads are waiting on this object, one of them</span></span><br><span class="line"><span class="comment"> * is chosen to be awakened. The choice is arbitrary and occurs at</span></span><br><span class="line"><span class="comment"> * the discretion of the implementation. A thread waits on an object's</span></span><br><span class="line"><span class="comment"> * monitor by calling one of the wait methods</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Wakes up all threads that are waiting on this object's monitor. A</span></span><br><span class="line"><span class="comment"> * thread waits on an object's monitor by calling one of the</span></span><br><span class="line"><span class="comment"> * wait methods.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notifyAll</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Causes the current thread to wait until either another thread invokes the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> java.lang.Object#notify()&#125; method or the</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> java.lang.Object#notifyAll()&#125; method for this object, or a</span></span><br><span class="line"><span class="comment"> * specified amount of time has elapsed.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The current thread must own this object's monitor.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br></pre></td></tr></table></figure><p></p><p>从这三个方法的文字描述可以知道以下几点信息：</p><p>1. wait()、notify()和notifyAll()方法是本地方法，并且为final方法，无法被重写。</p><p>2. 调用某个对象的wait()方法能让当前线程阻塞，并且当前线程必须拥有此对象的monitor（即锁）</p><p>3. 调用某个对象的notify()方法能够唤醒一个正在等待这个对象的monitor的线程，如果有多个线程都在等待这个对象的monitor，则只能唤醒其中一个线程；</p><p>4. 调用notifyAll()方法能够唤醒所有正在等待这个对象的monitor的线程；</p><p>有朋友可能会有疑问：为何这三个不是Thread类声明中的方法，而是Object类中声明的方法（当然由于Thread类继承了Object类，所以Thread也可以调用者三个方法）？其实这个问题很简单，由于每个对象都拥有monitor（即锁），所以让当前线程等待某个对象的锁，当然应该通过这个对象来操作了。而不是用当前线程来操作，因为当前线程可能会等待多个线程的锁，如果通过线程来操作，就非常复杂了。</p><p>上面已经提到，如果调用某个对象的wait()方法，当前线程必须拥有这个对象的monitor（即锁），因此调用wait()方法必须在同步块或者同步方法中进行（synchronized块或者synchronized方法）。</p><p>调用某个对象的wait()方法，相当于让当前线程交出此对象的monitor，然后进入等待状态，等待后续再次获得此对象的锁（Thread类中的sleep方法使当前线程暂停执行一段时间，从而让其他线程有机会继续执行，但它并不释放对象锁）；</p><p>notify()方法能够唤醒一个正在等待该对象的monitor的线程，当有多个线程都在等待该对象的monitor的话，则只能唤醒其中一个线程，具体唤醒哪个线程则不得而知。</p><p>同样地，调用某个对象的notify()方法，当前线程也必须拥有这个对象的monitor，因此调用notify()方法必须在同步块或者同步方法中进行（synchronized块或者synchronized方法）。</p><p>nofityAll()方法能够唤醒所有正在等待该对象的monitor的线程，这一点与notify()方法是不同的。</p><p>这里要注意一点：notify()和notifyAll()方法只是唤醒等待该对象的monitor的线程，并不决定哪个线程能够获取到monitor。</p><p>举个简单的例子：假如有三个线程Thread1、Thread2和Thread3都在等待对象objectA的monitor，此时Thread4拥有对象objectA的monitor，当在Thread4中调用objectA.notify()方法之后，Thread1、Thread2和Thread3只有一个能被唤醒。注意，被唤醒不等于立刻就获取了objectA的monitor。假若在Thread4中调用objectA.notifyAll()方法，则Thread1、Thread2和Thread3三个线程都会被唤醒，至于哪个线程接下来能够获取到objectA的monitor就具体依赖于操作系统的调度了。</p><p>上面尤其要注意一点，一个线程被唤醒不代表立即获取了对象的monitor，只有等调用完notify()或者notifyAll()并退出synchronized块，释放对象锁后，其余线程才可获得锁执行。</p><p>下面看一个例子就明白了：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object object = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread1 thread1 = <span class="keyword">new</span> Thread1();</span><br><span class="line">        Thread2 thread2 = <span class="keyword">new</span> Thread2();</span><br><span class="line">         </span><br><span class="line">        thread1.start();</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">200</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (object) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    object.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">"线程"</span>+Thread.currentThread().getName()+<span class="string">"获取到了锁"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread2</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (object) &#123;</span><br><span class="line">                object.notify();</span><br><span class="line">                System.out.println(<span class="string">"线程"</span>+Thread.currentThread().getName()+<span class="string">"调用了object.notify()"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"线程"</span>+Thread.currentThread().getName()+<span class="string">"释放了锁"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>无论运行多少次，运行结果必定是：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">线程Thread-1调用了object.notify()</span><br><span class="line">线程Thread-1释放了锁</span><br><span class="line">线程Thread-0获取到了锁</span><br></pre></td></tr></table></figure><p></p><h3 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h3><p>Condition是在java 1.5中才出现的，它用来替代传统的Object的wait()、notify()实现线程间的协作，相比使用Object的wait()、notify()，使用Condition1的await()、signal()这种方式实现线程间协作更加安全和高效。因此通常来说比较推荐使用Condition，在阻塞队列那一篇博文中就讲述到了，阻塞队列实际上是使用了Condition来模拟线程间协作。</p><ul><li>Condition是个接口，基本的方法就是await()和signal()方法；</li><li>Condition依赖于Lock接口，生成一个Condition的基本代码是lock.newCondition()；</li><li>调用Condition的await()和signal()方法，都必须在lock保护之内，就是说必须在lock.lock()和lock.unlock之间才可以使用。</li></ul><p>Conditon中的await()对应Object的wait()；</p><p>Condition中的signal()对应Object的notify()；</p><p>Condition中的signalAll()对应Object的notifyAll()。</p><h3 id="生产者-消费者模型的实现"><a href="#生产者-消费者模型的实现" class="headerlink" title="生产者-消费者模型的实现"></a>生产者-消费者模型的实现</h3><h4 id="使用Object的wait-和notify-实现"><a href="#使用Object的wait-和notify-实现" class="headerlink" title="使用Object的wait()和notify()实现"></a>使用Object的wait()和notify()实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> queueSize = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> PriorityQueue&lt;Integer&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;Integer&gt;(queueSize);</span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        Producer producer = test.new Producer();</span><br><span class="line">        Consumer consumer = test.new Consumer();</span><br><span class="line">          </span><br><span class="line">        producer.start();</span><br><span class="line">        consumer.start();</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">          </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            consume();</span><br><span class="line">        &#125;</span><br><span class="line">          </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (queue) &#123;</span><br><span class="line">                    <span class="keyword">while</span>(queue.size() == <span class="number">0</span>)&#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            System.out.println(<span class="string">"队列空，等待数据"</span>);</span><br><span class="line">                            queue.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                            queue.notify();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    queue.poll();          <span class="comment">//每次移走队首元素</span></span><br><span class="line">                    queue.notify();</span><br><span class="line">                    System.out.println(<span class="string">"从队列取走一个元素，队列剩余"</span>+queue.size()+<span class="string">"个元素"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">          </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            produce();</span><br><span class="line">        &#125;</span><br><span class="line">          </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (queue) &#123;</span><br><span class="line">                    <span class="keyword">while</span>(queue.size() == queueSize)&#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            System.out.println(<span class="string">"队列满，等待有空余空间"</span>);</span><br><span class="line">                            queue.wait();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                            queue.notify();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    queue.offer(<span class="number">1</span>);        <span class="comment">//每次插入一个元素</span></span><br><span class="line">                    queue.notify();</span><br><span class="line">                    System.out.println(<span class="string">"向队列取中插入一个元素，队列剩余空间："</span>+(queueSize-queue.size()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用Condition实现"><a href="#使用Condition实现" class="headerlink" title="使用Condition实现"></a>使用Condition实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> queueSize = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> PriorityQueue&lt;Integer&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;Integer&gt;(queueSize);</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> Condition notFull = lock.newCondition();</span><br><span class="line">    <span class="keyword">private</span> Condition notEmpty = lock.newCondition();</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        Producer producer = test.new Producer();</span><br><span class="line">        Consumer consumer = test.new Consumer();</span><br><span class="line">          </span><br><span class="line">        producer.start();</span><br><span class="line">        consumer.start();</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">          </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            consume();</span><br><span class="line">        &#125;</span><br><span class="line">          </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">while</span>(queue.size() == <span class="number">0</span>)&#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            System.out.println(<span class="string">"队列空，等待数据"</span>);</span><br><span class="line">                            notEmpty.await();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    queue.poll();                <span class="comment">//每次移走队首元素</span></span><br><span class="line">                    notFull.signal();</span><br><span class="line">                    System.out.println(<span class="string">"从队列取走一个元素，队列剩余"</span>+queue.size()+<span class="string">"个元素"</span>);</span><br><span class="line">                &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">                    lock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">          </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            produce();</span><br><span class="line">        &#125;</span><br><span class="line">          </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">while</span>(queue.size() == queueSize)&#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            System.out.println(<span class="string">"队列满，等待有空余空间"</span>);</span><br><span class="line">                            notFull.await();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    queue.offer(<span class="number">1</span>);        <span class="comment">//每次插入一个元素</span></span><br><span class="line">                    notEmpty.signal();</span><br><span class="line">                    System.out.println(<span class="string">"向队列取中插入一个元素，队列剩余空间："</span>+(queueSize-queue.size()));</span><br><span class="line">                &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">                    lock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li>《Java编程思想》</li><li><a rel="external nofollow noopener noreferrer" target="_blank" href="http://blog.csdn.net/ns_code/article/details/17225469">http://blog.csdn.net/ns_code/article/details/17225469</a></li><li><a rel="external nofollow noopener noreferrer" target="_blank" href="http://blog.csdn.net/ghsau/article/details/7481142">http://blog.csdn.net/ghsau/article/details/7481142</a></li></ul><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[事务的特性和@Transactional注解的使用]]></title>
      <url>/java-transactional.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="Transactional如何工作"><a href="#Transactional如何工作" class="headerlink" title="@Transactional如何工作"></a>@Transactional如何工作</h3><p>实现了EntityManager接口的持久化上下文代理并不是声明式事务管理的唯一部分，事实上包含三个组成部分：</p><ol><li>事务的切面</li><li>事务管理器</li><li>EntityManager Proxy本身</li></ol><a id="more"></a><h4 id="事务切面"><a href="#事务切面" class="headerlink" title="事务切面"></a>事务切面</h4><p>事务的切面是一个“around（环绕）”切面，在注解的业务方法前后都可以被调用。实现切面的具体类是<code>TransactionInterceptor</code>。</p><p>事务的切面的主要职责：<br>在’before’时，切面提供一个调用点，来决定被调用业务方法应该在正在进行事务的范围内运行，还是开始一个新的独立事务。<br>在’after’时，切面需要确定事务被提交，回滚或者继续运行。<br>在’before’时，事务切面自身不包含任何决策逻辑，是否开始新事务的决策委派给事务管理器完成。</p><ul><li>新的Entity Manager是否应该被创建？</li><li>是否应该开始新的事务？</li></ul><p><strong>这些需要事务切面’before’逻辑被调用时决定。事务管理器的决策基于以下两点：</strong></p><ol><li>事务是否正在进行；</li><li>事务方法的propagation属性（比如REQUIRES_NEW总要开始新事务）。</li></ol><h4 id="事务管理器"><a href="#事务管理器" class="headerlink" title="事务管理器"></a>事务管理器</h4><p>如果事务管理器确定要创建新事务，那么将：</p><p>创建一个新的entity manager<br>entity manager绑定到当前线程<br>从数据库连接池中获取连接<br>将连接绑定到当前线程<br>使用ThreadLocal变量将entity manager和数据库连接都绑定到当前线程。</p><p>事务运行时他们存储在线程中，当它们不再被使用时，事务管理器决定是否将他们清除。</p><p>程序的任何部分如果需要当前的entity manager和数据库连接都可以从线程中获取。</p><h4 id="EntityManager-proxy"><a href="#EntityManager-proxy" class="headerlink" title="EntityManager proxy"></a>EntityManager proxy</h4><p>当业务方法调用entityManager.persist()时，这不是由entity manager直接调用的。<br>而是业务方法调用代理，代理从线程获取当前的entity manager事务管理器将entity manager绑定到线程。</p><h3 id="spring-中配置JPA事务"><a href="#spring-中配置JPA事务" class="headerlink" title="spring 中配置JPA事务"></a>spring 中配置JPA事务</h3><p>在spring 的配置文件中配置jpa的事务：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Jpa 事务管理器 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.jpa.JpaTransactionManager"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"entityManagerFactory"</span> <span class="attr">ref</span>=<span class="string">"entityManagerFactory"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 打开事务注解 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>当然可以使用aop配置事务：<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Jpa 事务管理器 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.jpa.JpaTransactionManager"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"entityManagerFactory"</span> <span class="attr">ref</span>=<span class="string">"entityManagerFactory"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 声明式事务配置 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">propagation</span>=<span class="string">"NOT_SUPPORTED"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"count*"</span> <span class="attr">propagation</span>=<span class="string">"NOT_SUPPORTED"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">propagation</span>=<span class="string">"NOT_SUPPORTED"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"query*"</span> <span class="attr">propagation</span>=<span class="string">"NOT_SUPPORTED"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">rollback-for</span>=<span class="string">"Exception"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 只对业务逻辑层实施事务--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"txPointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.devframe.service.impl.*.*(..))"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"txPointcut"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h3 id="spring中事务的几个特性"><a href="#spring中事务的几个特性" class="headerlink" title="spring中事务的几个特性"></a>spring中事务的几个特性</h3><p><strong>补充下，数据库中的事务的四大特性：</strong></p><ul><li><code>原子性（Atomicity）</code>：原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，这和前面两篇博客介绍事务的功能是一样的概念，因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。</li><li><code>一致性（Consistency）</code>：一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。</li><li><code>隔离性（Isolation）</code>：隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。</li><li><code>持久性（Durability）</code>：持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</li></ul><h4 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h4><p>隔离级别是指若干个并发的事务之间的隔离程度。<code>TransactionDefinition</code> 接口中定义了五个表示隔离级别的常量：</p><ul><li><code>TransactionDefinition.ISOLATION_DEFAULT</code>：这是默认值，表示使用底层数据库的默认隔离级别。对大部分数据库而言，通常这值就是TransactionDefinition.ISOLATION_READ_COMMITTED。</li><li><code>TransactionDefinition.ISOLATION_READ_UNCOMMITTED</code>：该隔离级别表示一个事务可以读取另一个事务修改但还没有提交的数据。该级别不能防止脏读，不可重复读和幻读，因此很少使用该隔离级别。比如PostgreSQL实际上并没有此级别。</li><li><code>TransactionDefinition.ISOLATION_READ_COMMITTED</code>：该隔离级别表示一个事务只能读取另一个事务已经提交的数据。该级别可以防止脏读，这也是大多数情况下的推荐值。</li><li><code>TransactionDefinition.ISOLATION_REPEATABLE_READ</code>：该隔离级别表示一个事务在整个过程中可以多次重复执行某个查询，并且每次返回的记录都相同。该级别可以防止脏读和不可重复读。</li><li><code>TransactionDefinition.ISOLATION_SERIALIZABLE</code>：所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。</li></ul><p><strong>补充下数据库中，如果不考虑事务的隔离性，会发生的几种问题：</strong></p><ul><li><code>脏读</code>：脏读是指在一个事务处理过程里读取了另一个未提交的事务中的数据。<br>当一个事务正在多次修改某个数据，而在这个事务中这多次的修改都还未提交，这时一个并发的事务来访问该数据，就会造成两个事务得到的数据不一致。</li><li><code>不可重复读</code>：不可重复读是指在对于数据库中的某个数据，一个事务范围内多次查询却返回了不同的数据值，这是由于在查询间隔，被另一个事务修改并提交了。<br>例如事务T1在读取某一数据，而事务T2立马修改了这个数据并且提交事务给数据库，事务T1再次读取该数据就得到了不同的结果，发送了不可重复读。<br>不可重复读和脏读的区别是，脏读是某一事务读取了另一个事务未提交的脏数据，而不可重复读则是读取了前一事务提交的数据。<br>在某些情况下，不可重复读并不是问题，比如我们多次查询某个数据当然以最后查询得到的结果为主。但在另一些情况下就有可能发生问题，例如对于同一个数据A和B依次查询就可能不同，A和B就可能打起来了……</li><li><code>虚读(幻读)</code>：幻读是事务非独立执行时发生的一种现象。例如事务T1对一个表中所有的行的某个数据项做了从“1”修改为“2”的操作，这时事务T2又对这个表中插入了一行数据项，而这个数据项的数值还是为“1”并且提交给数据库。而操作事务T1的用户如果再查看刚刚修改的数据，会发现还有一行没有修改，其实这行是从事务T2中添加的，就好像产生幻觉一样，这就是发生了幻读。幻读和不可重复读都是读取了另一条已经提交的事务（这点就脏读不同），所不同的是不可重复读查询的都是同一个数据项，而幻读针对的是一批数据整体（比如数据的个数）。</li></ul><h4 id="事务传播行为"><a href="#事务传播行为" class="headerlink" title="事务传播行为"></a>事务传播行为</h4><p>所谓事务的传播行为是指，如果在开始当前事务之前，一个事务上下文已经存在，此时有若干选项可以指定一个事务性方法的执行行为。在<code>TransactionDefinition</code>定义中包括了如下几个表示传播行为的常量：</p><ul><li><code>TransactionDefinition.PROPAGATION_REQUIRED</code>：如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。这是默认值。</li><li><code>TransactionDefinition.PROPAGATION_REQUIRES_NEW</code>：创建一个新的事务，如果当前存在事务，则把当前事务挂起。</li><li><code>TransactionDefinition.PROPAGATION_SUPPORTS</code>：如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</li><li><code>TransactionDefinition.PROPAGATION_NOT_SUPPORTED</code>：以非事务方式运行，如果当前存在事务，则把当前事务挂起。</li><li><code>TransactionDefinition.PROPAGATION_NEVER</code>：以非事务方式运行，如果当前存在事务，则抛出异常。</li><li><code>TransactionDefinition.PROPAGATION_MANDATORY</code>：如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。</li><li><code>TransactionDefinition.PROPAGATION_NESTED</code>：如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。</li></ul><p>选择默认的，即<code>PROPAGATION_REQUIRED</code>，事务具有传播机制，多个事务，对于已经存在的事务，下一个事务会加入当前事务。</p><h4 id="事务超时"><a href="#事务超时" class="headerlink" title="事务超时"></a>事务超时</h4><p>所谓事务超时，就是指一个事务所允许执行的最长时间，如果超过该时间限制但事务还没有完成，则自动回滚事务。在 TransactionDefinition 中以 int 的值来表示超时时间，其单位是秒。</p><p>默认设置为底层事务系统的超时值，如果底层数据库事务系统没有设置超时值，那么就是none，没有超时限制。</p><h4 id="事务只读属性"><a href="#事务只读属性" class="headerlink" title="事务只读属性"></a>事务只读属性</h4><p>只读事务用于客户代码只读但不修改数据的情形，只读事务用于特定情景下的优化，比如使用Hibernate的时候。 默认为读写事务。</p><p><strong>只读事务</strong>并不是一个强制选项，它只是一个“暗示”，提示数据库驱动程序和数据库系统，这个事务并不包含更改数据的操作，那么JDBC驱动程序和数据库就有可能根据这种情况对该事务进行一些特定的优化，比方说不安排相应的数据库锁，以减轻事务对数据库的压力，毕竟事务也是要消耗数据库的资源的。<br>但是你非要在“只读事务”里面修改数据，也并非不可以，只不过对于数据一致性的保护不像“读写事务”那样保险而已。<br>因此，“只读事务”仅仅是一个性能优化的推荐配置而已，并非强制你要这样做不可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.我认为单条sql执行的时候是没有事务的，在数据库层面已经保证了该sql的原子性，再加事务只会浪费性能。而且spring的事务是面向切面的，你没有做相关配置，它肯定不会多此一举给你加上事务。</span><br><span class="line">2.在执行多条查询语句时加上事务是为了保证数据前后一致性，只要加上Transactional就能解决这个问题。</span><br><span class="line">3.事务由多个级别，级别越高数据库为了提供相关支持肯定也会占用更多资源，而且数据库也考虑到了事务中只做查询的这个问题，所以它提供了read-only这个状态，相应数据做的支持也会少很多，占用的资源就自然少了。</span><br></pre></td></tr></table></figure><h4 id="spring事务回滚规则"><a href="#spring事务回滚规则" class="headerlink" title="spring事务回滚规则"></a>spring事务回滚规则</h4><p>指示spring事务管理器回滚一个事务的推荐方法是在当前事务的上下文内抛出异常。spring事务管理器会捕捉任何未处理的异常，然后依据规则决定是否回滚抛出异常的事务。</p><p>默认配置下，spring只有在抛出的异常为运行时unchecked异常时才回滚该事务，也就是抛出的异常为RuntimeException的子类(Errors也会导致事务回滚)，而抛出checked异常则不会导致事务回滚。可以明确的配置在抛出那些异常时回滚事务，包括checked异常。也可以明确定义那些异常抛出时不回滚事务。还可以编程性的通过setRollbackOnly()方法来指示一个事务必须回滚，在调用完setRollbackOnly()后你所能执行的唯一操作就是回滚。</p><h3 id="Transactional注解"><a href="#Transactional注解" class="headerlink" title="@Transactional注解"></a>@Transactional注解</h3><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>String</td><td>可选的限定描述符，指定使用的事务管理器</td></tr><tr><td>propagation</td><td>enum: Propagation</td><td>可选的事务传播行为设置</td></tr><tr><td>isolation</td><td>enum: Isolation</td><td>可选的事务隔离级别设置</td></tr><tr><td>readOnly</td><td>boolean</td><td>读写或只读事务，默认读写</td></tr><tr><td>timeout</td><td>int (in seconds granularity)</td><td>事务超时时间设置</td></tr><tr><td>rollbackFor</td><td>Class对象数组，必须继承自Throwable</td><td>导致事务回滚的异常类数组</td></tr><tr><td>rollbackForClassName</td><td>类名数组，必须继承自Throwable</td><td>导致事务回滚的异常类名字数组</td></tr><tr><td>noRollbackFor</td><td>Class对象数组，必须继承自Throwable</td><td>不会导致事务回滚的异常类数组</td></tr><tr><td>noRollbackForClassName</td><td>类名数组，必须继承自Throwable</td><td>不会导致事务回滚的异常类名字数组</td></tr></tbody></table><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p>@Transactional 可以作用于接口、接口方法、类以及类方法上。当作用于类上时，该类的所有 public 方法将都具有该类型的事务属性，同时，我们也可以在方法级别使用该标注来覆盖类级别的定义。</p><p>虽然 @Transactional 注解可以作用于接口、接口方法、类以及类方法上，但是 Spring 建议不要在接口或者接口方法上使用该注解，因为这只有在使用基于接口的代理时它才会生效。另外， @Transactional 注解应该只被应用到 public 方法上，这是由 Spring AOP 的本质决定的。如果你在 protected、private 或者默认可见性的方法上使用 @Transactional 注解，这将被忽略，也不会抛出任何异常。</p><p>默认情况下，只有来自外部的方法调用才会被AOP代理捕获，也就是，类内部方法调用本类内部的其他方法并不会引起事务行为。</p><p>只要方法内部抛出<code>rollbackFor</code>设置的异常，就会回滚。</p><p>例如：<br>在方法上加上<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(value=<span class="string">"transactionManager"</span>, rollbackFor = Exception.class)</span><br></pre></td></tr></table></figure><p></p><p>方法内部只要抛出指定的异常或者错误，就全部回滚。</p><p>补充，回滚异常是自己定义的异常类，最好按照要求继承<code>RuntimeException</code>。<br>如果非常有必要在事务中捕捉异常，而且需要回滚事务，那么直接再将这个异常抛出就可以了，但是不建议这么使用。</p><p><strong>参考文章：</strong></p><ul><li><a rel="external nofollow noopener noreferrer" target="_blank" href="http://blog.csdn.net/bao19901210/article/details/41724355">spring事物配置，声明式事务管理和基于@Transactional注解的使用</a></li><li><a rel="external nofollow noopener noreferrer" target="_blank" href="https://www.cnblogs.com/wangyonglong/p/5178450.html">JPA和事务管理</a></li><li><a rel="external nofollow noopener noreferrer" target="_blank" href="http://blog.csdn.net/hy6688_/article/details/44763869">Spring事务传播特性的浅析——事务方法嵌套调用的迷茫</a></li><li><a rel="external nofollow noopener noreferrer" target="_blank" href="https://www.cnblogs.com/fjdingsd/p/5273008.html">数据库事务的四大特性以及事务的隔离级别</a></li></ul><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java并发编程中ThreadLocal]]></title>
      <url>/java-threadlocal.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><hr><p>ThreadLocal，很多地方叫做线程本地变量，也有些地方叫做线程本地存储。ThreadLocal为变量在每个线程中都创建了一个副本，那么每个线程可以访问自己内部的副本变量。</p><p>但是要注意，虽然ThreadLocal能够解决上面说的问题，但是由于在每个线程中都创建了副本，所以要考虑它对资源的消耗，比如内存的占用会比不使用ThreadLocal要大。<br><a id="more"></a></p><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><h4 id="拥有方法"><a href="#拥有方法" class="headerlink" title="拥有方法"></a>拥有方法</h4><p><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fmwxoarlbuj20f60g5ab2.jpg" alt="image"><br>下面看下几个怎么设计实现ThreadLocal的方法：</p><h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the value in the current thread's copy of this</span></span><br><span class="line"><span class="comment">     * thread-local variable.  If the variable has no value for the</span></span><br><span class="line"><span class="comment">     * current thread, it is first initialized to the value returned</span></span><br><span class="line"><span class="comment">     * by an invocation of the &#123;<span class="doctag">@link</span> #initialValue&#125; method.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the current thread's value of this thread-local</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        ThreadLocalMap map = getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                T result = (T)e.value;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> setInitialValue();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol><li>获取当前线程；</li><li>然后通过getMap 获取Map；</li><li>获取到Map的键值对；</li><li>传入<code>this</code> 当前ThreadLocal获取当前的键值对；</li><li>根据获取到的entry 返回值，为null 的话调用<code>setInitialValue</code>方法；<h4 id="getMap"><a href="#getMap" class="headerlink" title="getMap"></a>getMap</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the map associated with a ThreadLocal. Overridden in</span></span><br><span class="line"><span class="comment">     * InheritableThreadLocal.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  t the current thread</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t.threadLocals;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><p>返回线程中的threadLocals变量，继续看threadLocals的实现；</p><h4 id="threadLocals"><a href="#threadLocals" class="headerlink" title="threadLocals"></a>threadLocals</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ThreadLocal values pertaining to this thread. This map is maintained</span></span><br><span class="line"><span class="comment">     * by the ThreadLocal class. */</span></span><br><span class="line">    ThreadLocal.ThreadLocalMap threadLocals = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><p>它是ThreadLocal中的静态内部类ThreadLocalMap：</p><h4 id="ThreadLocalMap"><a href="#ThreadLocalMap" class="headerlink" title="ThreadLocalMap"></a>ThreadLocalMap</h4><h5 id="Entry"><a href="#Entry" class="headerlink" title="Entry"></a>Entry</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">ThreadLocal</span>&lt;?&gt;&gt; </span>&#123;</span><br><span class="line">            <span class="comment">/** The value associated with this ThreadLocal. */</span></span><br><span class="line">            Object value;</span><br><span class="line"></span><br><span class="line">            Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class="line">                <span class="keyword">super</span>(k);</span><br><span class="line">                value = v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>ThreadLocalMap的Entry继承了WeakReference，并且使用ThreadLocal作为键值。</p><h4 id="setInitialValue"><a href="#setInitialValue" class="headerlink" title="setInitialValue"></a>setInitialValue</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Variant of set() to establish initialValue. Used instead</span></span><br><span class="line"><span class="comment">     * of set() in case user has overridden the set() method.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the initial value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> T <span class="title">setInitialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        T value = initialValue();</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        ThreadLocalMap map = getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">            map.set(<span class="keyword">this</span>, value);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            createMap(t, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果map不为空，就设置键值对，为空，再创建Map，看一下createMap的实现;</p><h4 id="createMap"><a href="#createMap" class="headerlink" title="createMap"></a>createMap</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create the map associated with a ThreadLocal. Overridden in</span></span><br><span class="line"><span class="comment">     * InheritableThreadLocal.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t the current thread</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> firstValue value for the initial entry of the map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createMap</span><span class="params">(Thread t, T firstValue)</span> </span>&#123;</span><br><span class="line">        t.threadLocals = <span class="keyword">new</span> ThreadLocalMap(<span class="keyword">this</span>, firstValue);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这样为当前线程创建副本变量就完毕了。</p><h4 id="怎么创建副本变量"><a href="#怎么创建副本变量" class="headerlink" title="怎么创建副本变量"></a>怎么创建副本变量</h4><p>首先，在每个线程Thread内部有一个ThreadLocal.ThreadLocalMap类型的成员变量threadLocals，这个threadLocals就是用来存储实际的变量副本的，键值为当前ThreadLocal变量，value为变量副本（即T类型的变量）。</p><p>初始时，在Thread里面，threadLocals为空，当通过ThreadLocal变量调用get()方法或者set()方法，就会对Thread类中的threadLocals进行初始化，并且以当前ThreadLocal变量为键值，以ThreadLocal要保存的副本变量为value，存到threadLocals。</p><p>然后在当前线程里面，如果要使用副本变量，就可以通过get方法在threadLocals里面查找。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li>各种连接池获取连接（如，数据库连接，redis连接）；</li><li>session管理。</li></ol><h3 id="学习代码"><a href="#学习代码" class="headerlink" title="学习代码"></a>学习代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuwii.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/11/24 20:32&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThreadLocal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明一个ThreadLocal变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ThreadLocal&lt;String&gt; local1 = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为ThreadLocal赋值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        local1.set(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         Thread thread1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">             <span class="comment">/*</span></span><br><span class="line"><span class="comment">              * 每次调用get方法前，必须要set，不然会抛出NPE</span></span><br><span class="line"><span class="comment">              */</span></span><br><span class="line">            setValue();</span><br><span class="line">            System.out.printf(<span class="string">"线程一的localValue为: %s%n"</span>, local1.get());</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="comment">//先给线程二的threadLocal赋值，然后运行线程一，最后打印线程二的threadLocal</span></span><br><span class="line">            setValue();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * 在线程二中添加运行线程一，证明了每个线程保存的ThreadLocal的副本变量是不同的</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                thread1.start();</span><br><span class="line">                thread1.join();</span><br><span class="line">                <span class="comment">// 运行完线程一，再输出线程二</span></span><br><span class="line">                System.out.printf(<span class="string">"线程二的localValue为: %s%n"</span>, local1.get());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">线程一的localValue为: Thread-0</span><br><span class="line">线程二的localValue为: Thread-1</span><br></pre></td></tr></table></figure><p></p><p>可以看出，线程二并没有被影响。</p><p><strong>参考博客：<a rel="external nofollow noopener noreferrer" target="_blank" href="http://www.cnblogs.com/dolphin0520/p/3920407.html">Java并发编程：深入剖析ThreadLocal</a></strong></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Redis完成分布式锁]]></title>
      <url>/redis-lock.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><blockquote><p>分布式的CAP理论告诉我们“任何一个分布式系统都无法同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance），最多只能同时满足两项。”所以，很多系统在设计之初就要对这三者做出取舍。在互联网领域的绝大多数的场景中，都需要牺牲强一致性来换取系统的高可用性，系统往往只需要保证“最终一致性”，只要这个最终时间是在用户可以接受的范围内即可。</p></blockquote><p>为了保证数据的最终一致性，需要很多的技术方案来支持，比如分布式事务、分布式锁等。</p><h4 id="使用Redis实现锁的原因"><a href="#使用Redis实现锁的原因" class="headerlink" title="使用Redis实现锁的原因"></a>使用Redis实现锁的原因</h4><ol><li>Redis有很高的性能；</li><li>Redis命令对此支持较好，实现起来比较方便。</li></ol><a id="more"></a><h4 id="主要利用到的命令"><a href="#主要利用到的命令" class="headerlink" title="主要利用到的命令"></a>主要利用到的命令</h4><h5 id="SETNX"><a href="#SETNX" class="headerlink" title="SETNX"></a>SETNX</h5><blockquote><p>SETNX key val<br>当且仅当key不存在时，set一个key为val的字符串，返回1；若key存在，则什么都不做，返回0。</p></blockquote><h5 id="expire"><a href="#expire" class="headerlink" title="expire"></a>expire</h5><p>expire key timeout<br>为key设置一个超时时间，单位为second，超过这个时间锁会自动释放，避免死锁。</p><h5 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h5><p>delete key<br>删除key</p><h4 id="实现思想"><a href="#实现思想" class="headerlink" title="实现思想"></a>实现思想</h4><ul><li>获取锁的时候，使用setnx加锁，并使用expire命令为锁添加一个超时时间，超过该时间则自动释放锁，保证key一致，通过此在释放锁的时候进行判断。</li><li>获取锁的时候还设置一个获取的超时时间，若超过这个时间则放弃获取锁。</li><li>释放锁的时候，当前时间小于超时时间，则执行delete进行锁释放。</li></ul><h3 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.devframe.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Condition;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;redis分布式锁的实现&lt;/b&gt;&lt;/br&gt;</span></span><br><span class="line"><span class="comment"> * 还有一些失败机制没处理，以后在使用测试阶段，完善。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/11/20 9:22&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLock</span> <span class="keyword">implements</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(RedisLock.class);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Jedis jedis;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 锁定资源名，锁key，保证唯一。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String lockName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 资源上锁的最长时间，超时自动解锁单位秒，&lt;/br&gt;</span></span><br><span class="line"><span class="comment">     * 建议设置成死的，如果设置不当容易影响效率，严重造成死锁。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> expireTime = Integer.valueOf(PropertyUtil.get(<span class="string">"redisLock.expireTime"</span>));</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程获取不到锁，休眠的时间，单位ms</span></span><br><span class="line"><span class="comment">     * 避免系统资源浪费</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> sleepTime = Long.valueOf(PropertyUtil.get(<span class="string">"redisLock.sleepTime"</span>));</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前锁超时的时间戳，单位毫秒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> expireTimeOut = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取锁状态，锁中断状态&lt;/br&gt;</span></span><br><span class="line"><span class="comment">     * 值为false的时候中断获取锁&lt;/br&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> interrupted = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jedis    redis连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockName 上锁key，唯一标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisLock</span><span class="params">(Jedis jedis, String lockName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lockName == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"lockName is required"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.jedis = jedis;</span><br><span class="line">        <span class="comment">// 重命名的前缀，可以不加，也可以自定义，保证唯一即可。</span></span><br><span class="line">        <span class="keyword">this</span>.lockName = <span class="string">"lock"</span> + lockName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取锁。如果锁已被其他线程获取，则进行等待，直到拿到锁为止。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.lockCheck();</span><br><span class="line">            <span class="keyword">long</span> id = jedis.setnx(lockName, lockName);</span><br><span class="line">            <span class="keyword">if</span> (id == <span class="number">0L</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 没有获取到锁则进行等待睡眠时间，再去重新获取锁&lt;/br&gt;</span></span><br><span class="line"><span class="comment">                     * 这里使用随机时间可能会好一点,可以防止饥饿进程的出现,即,当同时到达多个进程,</span></span><br><span class="line"><span class="comment">                     * 只会有一个进程获得锁,其他的都用同样的频率进行尝试,后面有来了一些进行,</span></span><br><span class="line"><span class="comment">                     * 也以同样的频率申请锁,这将可能导致前面来的锁得不到满足.</span></span><br><span class="line"><span class="comment">                     * 使用随机的等待时间可以一定程度上保证公平性</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    Thread.sleep(<span class="keyword">this</span>.sleepTime);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    logger.error(<span class="string">"Thread is interrupted"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                expireTimeOut = System.currentTimeMillis() + expireTimeOut * <span class="number">1000</span> + <span class="number">1</span>;</span><br><span class="line">                <span class="comment">//设置redis中key的过期时间</span></span><br><span class="line">                jedis.expire(<span class="keyword">this</span>.lockName, expireTime);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中断锁获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException 中断异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.interrupted = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 它表示用来尝试获取锁，会立即返回，如果获取成功，则返回true，如果获取失败（即锁已被其他线程获取），则返回false，&lt;/br&gt;</span></span><br><span class="line"><span class="comment">     * 也就说这个方法无论如何都会立即返回。在拿不到锁时不会一直在那等待。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lockCheck();</span><br><span class="line">        <span class="comment">//尝试获取锁</span></span><br><span class="line">        <span class="keyword">long</span> id = jedis.setnx(lockName, lockName);</span><br><span class="line">        <span class="comment">//返回结果为0 则已经存在key，已经存在锁。</span></span><br><span class="line">        <span class="keyword">if</span> (id == <span class="number">0L</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            expireTimeOut = System.currentTimeMillis() + expireTimeOut * <span class="number">1000</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//设置redis中key的过期时间</span></span><br><span class="line">            jedis.expire(<span class="keyword">this</span>.lockName, expireTime);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 它表示用来尝试获取锁，如果获取成功，则返回true，如果获取失败（即锁已被其他线程获取），则返回false，&lt;/br&gt;</span></span><br><span class="line"><span class="comment">     * 这个方法在拿不到锁时会等待一定的时间，在时间期限之内如果还拿不到锁，就返回false。&lt;/br&gt;</span></span><br><span class="line"><span class="comment">     * 如果如果一开始拿到锁或者在等待期间内拿到了锁，则返回true。&lt;/br&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 等待时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit 时间单位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException 中断异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (time == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (unit == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"TimeUnit is required."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> now = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> timeOutAt = now + calcSeconds(time, unit);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.lockCheck();</span><br><span class="line">            <span class="keyword">long</span> id = jedis.setnx(<span class="keyword">this</span>.lockName, <span class="keyword">this</span>.lockName);</span><br><span class="line">            <span class="comment">// id = 0 表示加锁失败</span></span><br><span class="line">            <span class="keyword">if</span> (id == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 获取锁超时</span></span><br><span class="line">                <span class="keyword">if</span> (System.currentTimeMillis() &gt; timeOutAt) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 休眠一段时间，线程再继续获取锁。</span></span><br><span class="line">                Thread.sleep(<span class="keyword">this</span>.sleepTime);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//获取锁成功，设置锁过期时间戳</span></span><br><span class="line">                expireTimeOut = System.currentTimeMillis() + expireTimeOut * <span class="number">1000</span> + <span class="number">1</span>;</span><br><span class="line">                jedis.expireAt(<span class="keyword">this</span>.lockName, expireTimeOut);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;b&gt;释放锁&lt;b/&gt;</span></span><br><span class="line"><span class="comment">     * 当前时间小于过期时间，则锁未超时，删除锁，&lt;/br&gt;</span></span><br><span class="line"><span class="comment">     * 过了超时时间，redis已经删除了该key。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (System.currentTimeMillis() &lt; expireTimeOut) &#123;</span><br><span class="line">            jedis.del(lockName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Condition <span class="title">newCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//TODO 涉及到 Condition 例外一个重要内容，以后再实现这个方法</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"did not supported."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查当前线程资源redis连接和锁的状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">lockCheck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (jedis == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Jedis is required."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!interrupted) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Thread is interrupted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * TimeUnit单位时间转换成毫秒</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit 时间单位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> long</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">calcSeconds</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (unit == TimeUnit.DAYS) &#123;</span><br><span class="line">            <span class="keyword">return</span> time * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (unit == TimeUnit.HOURS) &#123;</span><br><span class="line">            <span class="keyword">return</span> time * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (unit == TimeUnit.MINUTES) &#123;</span><br><span class="line">            <span class="keyword">return</span> time * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (unit == TimeUnit.SECONDS) &#123;</span><br><span class="line">            <span class="keyword">return</span> time * <span class="number">1000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (unit == TimeUnit.MILLISECONDS) &#123;</span><br><span class="line">            <span class="keyword">return</span> time;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//后面的不实现了，基本上用不到。</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"cannot be resolved."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># redis lock</span><br><span class="line"># s</span><br><span class="line">redisLock.expireTime=1</span><br><span class="line"># ms</span><br><span class="line">redisLock.sleepTime=100</span><br></pre></td></tr></table></figure><p></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>测试就选用最经典的秒杀系统吧，使用分布式锁可以控制资源。</p><p>下面模拟500人秒杀100件商品。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.devframe.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/11/20 14:12&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLockTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 100件物品</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> goodsNum = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 500人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> personNum = <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 不加锁的情况</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; personNum; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (goodsNum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"获取了锁"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"商品剩余："</span> + --goodsNum);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加上分布锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; personNum; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                Jedis jedis = RedisUtil.getJedis();</span><br><span class="line">                <span class="comment">//初始化锁，key保持一致</span></span><br><span class="line">                Lock lock = <span class="keyword">new</span> RedisLock(jedis, <span class="string">"aa"</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    lock.lock();</span><br><span class="line">                    <span class="keyword">if</span> (goodsNum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">"获取了锁"</span>);</span><br><span class="line">                        System.out.println(<span class="string">"商品剩余："</span> + --goodsNum);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">//释放锁，并且释放redis连接</span></span><br><span class="line">                    lock.unlock();</span><br><span class="line">                    RedisUtil.returnResource(jedis);</span><br><span class="line">					</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>不加锁的部分结果：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Thread-100获取了锁</span><br><span class="line">商品剩余：-3</span><br><span class="line">Thread-99获取了锁</span><br><span class="line">商品剩余：5</span><br><span class="line">商品剩余：6</span><br><span class="line">Thread-98获取了锁</span><br><span class="line">商品剩余：-5</span><br><span class="line">商品剩余：7</span><br><span class="line">商品剩余：-4</span><br><span class="line">商品剩余：0</span><br><span class="line">商品剩余：1</span><br><span class="line">Thread-105获取了锁</span><br><span class="line">商品剩余：-6</span><br></pre></td></tr></table></figure><p></p><p>上锁的结果：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Thread-8获取了锁</span><br><span class="line">商品剩余：5</span><br><span class="line">Thread-238获取了锁</span><br><span class="line">商品剩余：4</span><br><span class="line">Thread-72获取了锁</span><br><span class="line">商品剩余：3</span><br><span class="line">Thread-137获取了锁</span><br><span class="line">商品剩余：2</span><br><span class="line">Thread-402获取了锁</span><br><span class="line">商品剩余：1</span><br><span class="line">Thread-337获取了锁</span><br><span class="line">商品剩余：0</span><br></pre></td></tr></table></figure><p></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>并发量大的时候，需要考虑锁时间；</li><li>考虑失败情况，上锁了，但是设置超时时间失败（redis崩溃等各种情况），锁一致都没有释放，导致死锁的情况发生，现在需要做的是，把key的value设置成超时的时间，每次上锁失败都去检查一次，超时的就覆盖，可以避免死锁。</li></ol><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> redis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[volatile关键字解析]]></title>
      <url>/java-volatile.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="内存模型的相关概念"><a href="#内存模型的相关概念" class="headerlink" title="内存模型的相关概念"></a>内存模型的相关概念</h3><p>大家都知道，计算机在执行程序时，每条指令都是在CPU中执行的，而执行指令过程中，势必涉及到数据的读取和写入。由于程序运行过程中的临时数据是存放在主存（物理内存）当中的，这时就存在一个问题，由于CPU执行速度很快，而从内存读取数据和向内存写入数据的过程跟CPU执行指令的速度比起来要慢的多，因此如果任何时候对数据的操作都要通过和内存的交互来进行，会大大降低指令执行的速度。因此在CPU里面就有了高速缓存。</p><a id="more"></a><p>也就是，当程序在运行过程中，会将运算需要的数据从主存复制一份到CPU的高速缓存当中，那么CPU进行计算时就可以直接从它的高速缓存读取数据和向其中写入数据，当运算结束之后，再将高速缓存中的数据刷新到主存当中。举个简单的例子，比如下面的这段代码：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i = i + 1;</span><br></pre></td></tr></table></figure><p></p><p>当线程执行这个语句时，会先从主存当中读取i的值，然后复制一份到高速缓存当中，然后CPU执行指令对i进行加1操作，然后将数据写入高速缓存，最后将高速缓存中i最新的值刷新到主存当中。</p><p>这个代码在单线程中运行是没有任何问题的，但是在多线程中运行就会有问题了。在多核CPU中，每条线程可能运行于不同的CPU中，因此每个线程运行时有自己的高速缓存（对单核CPU来说，其实也会出现这种问题，只不过是以线程调度的形式来分别执行的）。本文我们以多核CPU为例。</p><p>比如同时有2个线程执行这段代码，假如初始时i的值为0，那么我们希望两个线程执行完之后i的值变为2。但是事实会是这样吗？</p><p>可能存在下面一种情况：初始时，两个线程分别读取i的值存入各自所在的CPU的高速缓存当中，然后线程1进行加1操作，然后把i的最新值1写入到内存。此时线程2的高速缓存当中i的值还是0，进行加1操作之后，i的值为1，然后线程2把i的值写入内存。</p><p>最终结果i的值是1，而不是2。这就是著名的缓存一致性问题。通常称这种被多个线程访问的变量为共享变量。</p><p>也就是说，如果一个变量在多个CPU中都存在缓存（一般在多线程编程时才会出现），那么就可能存在缓存不一致的问题。</p><p>为了解决缓存不一致性问题，通常来说有以下2种解决方法：</p><ol><li>通过在总线加LOCK#锁的方式；</li><li>通过缓存一致性协议。</li></ol><p>这2种方式都是硬件层面上提供的方式。</p><p>在早期的CPU当中，是通过在总线上加LOCK#锁的形式来解决缓存不一致的问题。因为CPU和其他部件进行通信都是通过总线来进行的，如果对总线加LOCK#锁的话，也就是说阻塞了其他CPU对其他部件访问（如内存），从而使得只能有一个CPU能使用这个变量的内存。比如上面例子中 如果一个线程在执行 i = i +1，如果在执行这段代码的过程中，在总线上发出了LCOK#锁的信号，那么只有等待这段代码完全执行完毕之后，其他CPU才能从变量i所在的内存读取变量，然后进行相应的操作。这样就解决了缓存不一致的问题。</p><p>但是上面的方式会有一个问题，由于在锁住总线期间，其他CPU无法访问内存，导致效率低下。</p><p>所以就出现了缓存一致性协议。最出名的就是Intel 的MESI协议，MESI协议保证了每个缓存中使用的共享变量的副本是一致的。它核心的思想是：当CPU写数据时，如果发现操作的变量是共享变量，即在其他CPU中也存在该变量的副本，会发出信号通知其他CPU将该变量的缓存行置为无效状态，因此当其他CPU需要读取这个变量时，发现自己缓存中缓存该变量的缓存行是无效的，那么它就会从内存重新读取。</p><p><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fmwxhntv6pj20l909rgme.jpg" alt="image"></p><h3 id="并发编程中的三个概念"><a href="#并发编程中的三个概念" class="headerlink" title="并发编程中的三个概念"></a>并发编程中的三个概念</h3><p>在并发编程中，我们通常会遇到以下三个问题：原子性问题，可见性问题，有序性问题。我们先看具体看一下这三个概念：</p><h4 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h4><p>原子性：即一个操作或者多个操作 要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。</p><p>一个很经典的例子就是银行账户转账问题：</p><p>比如从账户A向账户B转1000元，那么必然包括2个操作：从账户A减去1000元，往账户B加上1000元。</p><p>试想一下，如果这2个操作不具备原子性，会造成什么样的后果。假如从账户A减去1000元之后，操作突然中止。然后又从B取出了500元，取出500元之后，再执行 往账户B加上1000元 的操作。这样就会导致账户A虽然减去了1000元，但是账户B没有收到这个转过来的1000元。</p><p>所以这2个操作必须要具备原子性才能保证不出现一些意外的问题。</p><p>同样地反映到并发编程中会出现什么结果呢？<br>举个最简单的例子，大家想一下假如为一个32位的变量赋值过程不具备原子性的话，会发生什么后果？<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i = 9;</span><br></pre></td></tr></table></figure><p></p><p>假若一个线程执行到这个语句时，我暂且假设为一个32位的变量赋值包括两个过程：为低16位赋值，为高16位赋值。<br>那么就可能发生一种情况：当将低16位数值写入之后，突然被中断，而此时又有一个线程去读取i的值，那么读取到的就是错误的数据。</p><h4 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h4><p>可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。</p><p>举个简单的例子，看下面这段代码：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//线程1执行的代码</span><br><span class="line">int i = 0;</span><br><span class="line">i = 10;</span><br><span class="line"> </span><br><span class="line">//线程2执行的代码</span><br><span class="line">j = i;</span><br></pre></td></tr></table></figure><p></p><p>假若执行线程1的是CPU1，执行线程2的是CPU2。由上面的分析可知，当线程1执行 i =10这句时，会先把i的初始值加载到CPU1的高速缓存中，然后赋值为10，那么在CPU1的高速缓存当中i的值变为10了，却没有立即写入到主存当中。</p><p>此时线程2执行 <code>j = i</code>，它会先去主存读取i的值并加载到CPU2的缓存当中，注意此时内存当中i的值还是0，那么就会使得j的值为0，而不是10.</p><p>这就是可见性问题，线程1对变量i修改了之后，线程2没有立即看到线程1修改的值。</p><h4 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h4><p>有序性：即程序执行的顺序按照代码的先后顺序执行。举个简单的例子，看下面这段代码：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int i = 0;              </span><br><span class="line">boolean flag = false;</span><br><span class="line">i = 1;                //语句1  </span><br><span class="line">flag = true;          //语句2</span><br></pre></td></tr></table></figure><p></p><p>上面代码定义了一个int型变量，定义了一个boolean类型变量，然后分别对两个变量进行赋值操作。从代码顺序上看，语句1是在语句2前面的，那么JVM在真正执行这段代码的时候会保证语句1一定会在语句2前面执行吗？不一定，为什么呢？这里可能会发生指令重排序（Instruction Reorder）。</p><p>下面解释一下什么是指令重排序，一般来说，处理器为了提高程序运行效率，可能会对输入代码进行优化，它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是它会保证程序最终执行结果和代码顺序执行的结果是一致的。</p><p>比如上面的代码中，语句1和语句2谁先执行对最终的程序结果并没有影响，那么就有可能在执行过程中，语句2先执行而语句1后执行。</p><p>但是要注意，虽然处理器会对指令进行重排序，但是它会保证程序最终结果会和代码顺序执行结果相同，那么它靠什么保证的呢？再看下面一个例子：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int a = 10;    //语句1</span><br><span class="line">int r = 2;    //语句2</span><br><span class="line">a = a + 3;    //语句3</span><br><span class="line">r = a*a;     //语句4</span><br></pre></td></tr></table></figure><p></p><p>这段代码有4个语句，那么可能的一个执行顺序是：</p><p><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fmwxhqrf6mj20gu01kq2w.jpg" alt="image"></p><p>那么可不可能是这个执行顺序呢： 语句2 语句1 语句4 语句3</p><p>不可能，因为处理器在进行重排序时是会考虑指令之间的数据依赖性，如果一个指令Instruction 2必须用到Instruction 1的结果，那么处理器会保证Instruction 1会在Instruction 2之前执行。</p><p>虽然重排序不会影响单个线程内程序执行的结果，但是多线程呢？下面看一个例子：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线程1:</span></span><br><span class="line">context = loadContext();   <span class="comment">//语句1</span></span><br><span class="line">inited = <span class="keyword">true</span>;             <span class="comment">//语句2</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//线程2:</span></span><br><span class="line"><span class="keyword">while</span>(!inited )&#123;</span><br><span class="line">  sleep()</span><br><span class="line">&#125;</span><br><span class="line">doSomethingwithconfig(context);</span><br></pre></td></tr></table></figure><p></p><p>上面代码中，由于语句1和语句2没有数据依赖性，因此可能会被重排序。假如发生了重排序，在线程1执行过程中先执行语句2，而此是线程2会以为初始化工作已经完成，那么就会跳出while循环，去执行doSomethingwithconfig(context)方法，而此时context并没有被初始化，就会导致程序出错。</p><p>从上面可以看出，指令重排序不会影响单个线程的执行，但是会影响到线程并发执行的正确性。</p><p>也就是说，要想并发程序正确地执行，必须要保证原子性、可见性以及有序性。只要有一个没有被保证，就有可能会导致程序运行不正确。</p><h3 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h3><p>在前面谈到了一些关于内存模型以及并发编程中可能会出现的一些问题。下面我们来看一下Java内存模型，研究一下Java内存模型为我们提供了哪些保证以及在java中提供了哪些方法和机制来让我们在进行多线程编程时能够保证程序执行的正确性。</p><p>在Java虚拟机规范中试图定义一种Java内存模型（Java Memory Model，JMM）来屏蔽各个硬件平台和操作系统的内存访问差异，以实现让Java程序在各种平台下都能达到一致的内存访问效果。那么Java内存模型规定了哪些东西呢，它定义了程序中变量的访问规则，往大一点说是定义了程序执行的次序。注意，为了获得较好的执行性能，Java内存模型并没有限制执行引擎使用处理器的寄存器或者高速缓存来提升指令执行速度，也没有限制编译器对指令进行重排序。也就是说，在java内存模型中，也会存在缓存一致性问题和指令重排序的问题。</p><p>Java内存模型规定所有的变量都是存在主存当中（类似于前面说的物理内存），每个线程都有自己的工作内存（类似于前面的高速缓存）。线程对变量的所有操作都必须在工作内存中进行，而不能直接对主存进行操作。并且每个线程不能访问其他线程的工作内存。</p><p>举个简单的例子：在java中，执行下面这个语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i  = 10;</span><br></pre></td></tr></table></figure><p>执行线程必须先在自己的工作线程中对变量i所在的缓存行进行赋值操作，然后再写入主存当中。而不是直接将数值10写入主存当中。</p><p>那么Java语言 本身对 原子性、可见性以及有序性提供了哪些保证呢？</p><h4 id="原子性-1"><a href="#原子性-1" class="headerlink" title="原子性"></a>原子性</h4><p>在Java中，对基本数据类型的变量的读取和赋值操作是原子性操作，即这些操作是不可被中断的，要么执行，要么不执行。</p><p>上面一句话虽然看起来简单，但是理解起来并不是那么容易。看下面一个例子i：</p><p>请分析以下哪些操作是原子性操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = 10;         //语句1</span><br><span class="line">y = x;         //语句2</span><br><span class="line">x++;           //语句3</span><br><span class="line">x = x + 1;     //语句4</span><br></pre></td></tr></table></figure><p>咋一看，有些朋友可能会说上面的4个语句中的操作都是原子性操作。其实只有语句1是原子性操作，其他三个语句都不是原子性操作。</p><p>语句1是直接将数值10赋值给x，也就是说线程执行这个语句的会直接将数值10写入到工作内存中。</p><p>语句2实际上包含2个操作，它先要去读取x的值，再将x的值写入工作内存，虽然读取x的值以及 将x的值写入工作内存 这2个操作都是原子性操作，但是合起来就不是原子性操作了。</p><p>同样的，x++和 x = x+1包括3个操作：读取x的值，进行加1操作，写入新的值。</p><p>所以上面4个语句只有语句1的操作具备原子性。</p><p>也就是说，只有简单的读取、赋值（而且必须是将数字赋值给某个变量，变量之间的相互赋值不是原子操作）才是原子操作。</p><p>不过这里有一点需要注意：在32位平台下，对64位数据的读取和赋值是需要通过两个操作来完成的，不能保证其原子性。但是好像在最新的JDK中，JVM已经保证对64位数据的读取和赋值也是原子性操作了。</p><p>从上面可以看出，Java内存模型只保证了基本读取和赋值是原子性操作，如果要实现更大范围操作的原子性，可以通过synchronized和Lock来实现。由于synchronized和Lock能够保证任一时刻只有一个线程执行该代码块，那么自然就不存在原子性问题了，从而保证了原子性。</p><h4 id="可见性-1"><a href="#可见性-1" class="headerlink" title="可见性"></a>可见性</h4><p>对于可见性，Java提供了volatile关键字来保证可见性。</p><p>当一个共享变量被volatile修饰时，它会保证修改的值会立即被更新到主存，当有其他线程需要读取时，它会去内存中读取新值。</p><p>而普通的共享变量不能保证可见性，因为普通共享变量被修改之后，什么时候被写入主存是不确定的，当其他线程去读取时，此时内存中可能还是原来的旧值，因此无法保证可见性。</p><p>另外，通过synchronized和Lock也能够保证可见性，synchronized和Lock能保证同一时刻只有一个线程获取锁然后执行同步代码，并且在释放锁之前会将对变量的修改刷新到主存当中。因此可以保证可见性。</p><h4 id="有序性-1"><a href="#有序性-1" class="headerlink" title="有序性"></a>有序性</h4><p>在Java内存模型中，允许编译器和处理器对指令进行重排序，但是重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性。</p><p>在Java里面，可以通过volatile关键字来保证一定的“有序性”（具体原理在下一节讲述）。另外可以通过synchronized和Lock来保证有序性，很显然，synchronized和Lock保证每个时刻是有一个线程执行同步代码，相当于是让线程顺序执行同步代码，自然就保证了有序性。</p><p><strong>另外，Java内存模型具备一些先天的“有序性”，即不需要通过任何手段就能够得到保证的有序性，这个通常也称为 happens-before 原则。如果两个操作的执行次序无法从happens-before原则推导出来，那么它们就不能保证它们的有序性，虚拟机可以随意地对它们进行重排序。</strong></p><p>下面就来具体介绍下<code>happens-before</code>原则（先行发生原则）：</p><ol><li>程序次序规则：一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作；</li><li>锁定规则：一个unLock操作先行发生于后面对同一个锁额lock操作；</li><li>volatile变量规则：对一个变量的写操作先行发生于后面对这个变量的读操作；</li><li>传递规则：如果操作A先行发生于操作B，而操作B又先行发生于操作C，则可以得出操作A先行发生于操作C；</li><li>线程启动规则：Thread对象的start()方法先行发生于此线程的每个一个动作；</li><li>线程中断规则：对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生；</li><li>线程终结规则：线程中所有的操作都先行发生于线程的终止检测，我们可以通过Thread.join()方法结束、Thread.isAlive()的返回值手段检测到线程已经终止执行；</li><li>对象终结规则：一个对象的初始化完成先行发生于他的finalize()方法的开始。</li></ol><p>这8条原则摘自《深入理解Java虚拟机》。</p><p>这8条规则中，前4条规则是比较重要的，后4条规则都是显而易见的。</p><p>下面我们来解释一下前4条规则：<br>对于程序次序规则来说，我的理解就是一段程序代码的执行在单个线程中看起来是有序的。注意，虽然这条规则中提到“书写在前面的操作先行发生于书写在后面的操作”，这个应该是程序看起来执行的顺序是按照代码顺序执行的，因为虚拟机可能会对程序代码进行指令重排序。虽然进行重排序，但是最终执行的结果是与程序顺序执行的结果一致的，它只会对不存在数据依赖性的指令进行重排序。因此，在单个线程中，程序执行看起来是有序执行的，这一点要注意理解。事实上，这个规则是用来保证程序在单线程中执行结果的正确性，但无法保证程序在多线程中执行的正确性。</p><p>第二条规则也比较容易理解，也就是说无论在单线程中还是多线程中，同一个锁如果出于被锁定的状态，那么必须先对锁进行了释放操作，后面才能继续进行lock操作。</p><p>第三条规则是一条比较重要的规则，也是后文将要重点讲述的内容。直观地解释就是，如果一个线程先去写一个变量，然后一个线程去进行读取，那么写入操作肯定会先行发生于读操作。</p><p>第四条规则实际上就是体现happens-before原则具备传递性。</p><h3 id="深入剖析volatile关键字"><a href="#深入剖析volatile关键字" class="headerlink" title="深入剖析volatile关键字"></a>深入剖析volatile关键字</h3><p>在前面讲述了很多东西，其实都是为讲述volatile关键字作铺垫，那么接下来我们就进入主题。</p><h4 id="volatile关键字的两层语义"><a href="#volatile关键字的两层语义" class="headerlink" title="volatile关键字的两层语义"></a>volatile关键字的两层语义</h4><p>一旦一个共享变量（类的成员变量、类的静态成员变量）被volatile修饰之后，那么就具备了两层语义：</p><ol><li>保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的。</li><li>禁止进行指令重排序。</li></ol><p>先看一段代码，假如线程1先执行，线程2后执行：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线程1</span></span><br><span class="line"><span class="keyword">boolean</span> stop = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">while</span>(!stop)&#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//线程2</span></span><br><span class="line">stop = <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure><p></p><p>这段代码是很典型的一段代码，很多人在中断线程时可能都会采用这种标记办法。但是事实上，这段代码会完全运行正确么？即一定会将线程中断么？不一定，也许在大多数时候，这个代码能够把线程中断，但是也有可能会导致无法中断线程（虽然这个可能性很小，但是只要一旦发生这种情况就会造成死循环了）。</p><p>下面解释一下这段代码为何有可能导致无法中断线程。在前面已经解释过，每个线程在运行过程中都有自己的工作内存，那么线程1在运行的时候，会将stop变量的值拷贝一份放在自己的工作内存当中。</p><p>那么当线程2更改了stop变量的值之后，但是还没来得及写入主存当中，线程2转去做其他事情了，那么线程1由于不知道线程2对stop变量的更改，因此还会一直循环下去。</p><p>但是用volatile修饰之后就变得不一样了：</p><p>第一：使用volatile关键字会强制将修改的值立即写入主存；</p><p>第二：使用volatile关键字的话，当线程2进行修改时，会导致线程1的工作内存中缓存变量stop的缓存行无效（反映到硬件层的话，就是CPU的L1或者L2缓存中对应的缓存行无效）；</p><p>第三：由于线程1的工作内存中缓存变量stop的缓存行无效，所以线程1再次读取变量stop的值时会去主存读取。</p><p>那么在线程2修改stop值时（当然这里包括2个操作，修改线程2工作内存中的值，然后将修改后的值写入内存），会使得线程1的工作内存中缓存变量stop的缓存行无效，然后线程1读取时，发现自己的缓存行无效，它会等待缓存行对应的主存地址被更新之后，然后去对应的主存读取最新的值。</p><p>那么线程1读取到的就是最新的正确的值。</p><h4 id="volatile保证原子性吗？"><a href="#volatile保证原子性吗？" class="headerlink" title="volatile保证原子性吗？"></a>volatile保证原子性吗？</h4><p>从上面知道volatile关键字保证了操作的可见性，但是volatile能保证对变量的操作是原子性吗？<br>下面看一个例子：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="keyword">int</span> inc = <span class="number">0</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        inc++;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000</span>;j++)</span><br><span class="line">                        test.increase();</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;.start();</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">while</span>(Thread.activeCount()&gt;<span class="number">1</span>)  <span class="comment">//保证前面的线程都执行完</span></span><br><span class="line">            Thread.yield();</span><br><span class="line">        System.out.println(test.inc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>大家想一下这段程序的输出结果是多少？也许有些朋友认为是10000。但是事实上运行它会发现每次运行结果都不一致，都是一个小于10000的数字。</p><p>可能有的朋友就会有疑问，不对啊，上面是对变量inc进行自增操作，由于volatile保证了可见性，那么在每个线程中对inc自增完之后，在其他线程中都能看到修改后的值啊，所以有10个线程分别进行了1000次操作，那么最终inc的值应该是1000*10=10000。</p><p>这里面就有一个误区了，volatile关键字能保证可见性没有错，但是上面的程序错在没能保证原子性。可见性只能保证每次读取的是最新的值，但是volatile没办法保证对变量的操作的原子性。</p><p>在前面已经提到过，自增操作是不具备原子性的，它包括读取变量的原始值、进行加1操作、写入工作内存。那么就是说自增操作的三个子操作可能会分割开执行，就有可能导致下面这种情况出现：</p><p>假如某个时刻变量inc的值为10，</p><p>线程1对变量进行自增操作，线程1先读取了变量inc的原始值，然后线程1被阻塞了；</p><p>然后线程2对变量进行自增操作，线程2也去读取变量inc的原始值，由于线程1只是对变量inc进行读取操作，而没有对变量进行修改操作，所以不会导致线程2的工作内存中缓存变量inc的缓存行无效，所以线程2会直接去主存读取inc的值，发现inc的值时10，然后进行加1操作，并把11写入工作内存，最后写入主存。</p><p>然后线程1接着进行加1操作，由于已经读取了inc的值，注意此时在线程1的工作内存中inc的值仍然为10，所以线程1对inc进行加1操作后inc的值为11，然后将11写入工作内存，最后写入主存。</p><p>那么两个线程分别进行了一次自增操作后，inc只增加了1。</p><p>解释到这里，可能有朋友会有疑问，不对啊，前面不是保证一个变量在修改volatile变量时，会让缓存行无效吗？然后其他线程去读就会读到新的值，对，这个没错。这个就是上面的happens-before规则中的volatile变量规则，但是要注意，线程1对变量进行读取操作之后，被阻塞了的话，并没有对inc值进行修改。然后虽然volatile能保证线程2对变量inc的值读取是从内存中读取的，但是线程1没有进行修改，所以线程2根本就不会看到修改的值。</p><p>根源就在这里，自增操作不是原子性操作，而且volatile也无法保证对变量的任何操作都是原子性的。</p><p>把上面的代码改成以下任何一种都可以达到效果：</p><ol><li><p>采用synchronized：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">int</span> inc = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        inc++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000</span>;j++)</span><br><span class="line">                        test.increase();</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;.start();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(Thread.activeCount()&gt;<span class="number">1</span>)  <span class="comment">//保证前面的线程都执行完</span></span><br><span class="line">            Thread.yield();</span><br><span class="line">        System.out.println(test.inc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>采用Lock：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">int</span> inc = <span class="number">0</span>;</span><br><span class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inc++;</span><br><span class="line">        &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000</span>;j++)</span><br><span class="line">                        test.increase();</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;.start();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(Thread.activeCount()&gt;<span class="number">1</span>)  <span class="comment">//保证前面的线程都执行完</span></span><br><span class="line">            Thread.yield();</span><br><span class="line">        System.out.println(test.inc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>采用AtomicInteger：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  AtomicInteger inc = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        inc.getAndIncrement();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">1000</span>;j++)</span><br><span class="line">                        test.increase();</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;.start();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(Thread.activeCount()&gt;<span class="number">1</span>)  <span class="comment">//保证前面的线程都执行完</span></span><br><span class="line">            Thread.yield();</span><br><span class="line">        System.out.println(test.inc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>在java 1.5的<code>java.util.concurrent.atomic</code>包下提供了一些原子操作类，即对基本数据类型的 自增（加1操作），自减（减1操作）、以及加法操作（加一个数），减法操作（减一个数）进行了封装，保证这些操作是原子性操作。atomic是利用CAS来实现原子性操作的（Compare And Swap），CAS实际上是利用处理器提供的CMPXCHG指令实现的，而处理器执行CMPXCHG指令是一个原子性操作。</p><h4 id="volatile能保证有序性吗？"><a href="#volatile能保证有序性吗？" class="headerlink" title="volatile能保证有序性吗？"></a>volatile能保证有序性吗？</h4><p>在前面提到volatile关键字能禁止指令重排序，所以volatile能在一定程度上保证有序性。</p><p>volatile关键字禁止指令重排序有两层意思：</p><ol><li>当程序执行到volatile变量的读操作或者写操作时，在其前面的操作的更改肯定全部已经进行，且结果已经对后面的操作可见；在其后面的操作肯定还没有进行；</li><li>在进行指令优化时，不能将在对volatile变量访问的语句放在其后面执行，也不能把volatile变量后面的语句放到其前面执行。</li></ol><p>可能上面说的比较绕，举个简单的例子：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//x、y为非volatile变量</span><br><span class="line">//flag为volatile变量</span><br><span class="line"> </span><br><span class="line">x = 2;        //语句1</span><br><span class="line">y = 0;        //语句2</span><br><span class="line">flag = true;  //语句3</span><br><span class="line">x = 4;         //语句4</span><br><span class="line">y = -1;       //语句5</span><br></pre></td></tr></table></figure><p></p><p>由于flag变量为volatile变量，那么在进行指令重排序的过程的时候，不会将语句3放到语句1、语句2前面，也不会讲语句3放到语句4、语句5后面。但是要注意语句1和语句2的顺序、语句4和语句5的顺序是不作任何保证的。</p><p>并且volatile关键字能保证，执行到语句3时，语句1和语句2必定是执行完毕了的，且语句1和语句2的执行结果对语句3、语句4、语句5是可见的。</p><p>那么我们回到前面举的一个例子：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//线程1:</span><br><span class="line">context = loadContext();   //语句1</span><br><span class="line">inited = true;             //语句2</span><br><span class="line"> </span><br><span class="line">//线程2:</span><br><span class="line">while(!inited )&#123;</span><br><span class="line">  sleep()</span><br><span class="line">&#125;</span><br><span class="line">doSomethingwithconfig(context);</span><br></pre></td></tr></table></figure><p></p><p>前面举这个例子的时候，提到有可能语句2会在语句1之前执行，那么久可能导致context还没被初始化，而线程2中就使用未初始化的context去进行操作，导致程序出错。</p><p>这里如果用volatile关键字对inited变量进行修饰，就不会出现这种问题了，因为当执行到语句2时，必定能保证context已经初始化完毕。</p><h4 id="volatile的原理和实现机制"><a href="#volatile的原理和实现机制" class="headerlink" title="volatile的原理和实现机制"></a>volatile的原理和实现机制</h4><p>前面讲述了源于volatile关键字的一些使用，下面我们来探讨一下volatile到底如何保证可见性和禁止指令重排序的。</p><p>下面这段话摘自《深入理解Java虚拟机》：</p><blockquote><p>“观察加入volatile关键字和没有加入volatile关键字时所生成的汇编代码发现，加入volatile关键字时，会多出一个lock前缀指令”</p></blockquote><p>lock前缀指令实际上相当于一个内存屏障（也成内存栅栏），内存屏障会提供3个功能：</p><ol><li>它确保指令重排序时不会把其后面的指令排到内存屏障之前的位置，也不会把前面的指令排到内存屏障的后面；即在执行到内存屏障这句指令时，在它前面的操作已经全部完成；</li><li>它会强制将对缓存的修改操作立即写入主存；</li><li>如果是写操作，它会导致其他CPU中对应的缓存行无效。</li></ol><h3 id="使用volatile关键字的场景"><a href="#使用volatile关键字的场景" class="headerlink" title="使用volatile关键字的场景"></a>使用volatile关键字的场景</h3><p>synchronized关键字是防止多个线程同时执行一段代码，那么就会很影响程序执行效率，而volatile关键字在某些情况下性能要优于synchronized，但是要注意volatile关键字是无法替代synchronized关键字的，因为volatile关键字无法保证操作的原子性。通常来说，使用volatile必须具备以下2个条件：</p><ol><li>对变量的写操作不依赖于当前值；</li><li>该变量没有包含在具有其他变量的不变式中。</li></ol><p>实际上，这些条件表明，可以被写入 volatile 变量的这些有效值独立于任何程序的状态，包括变量的当前状态。</p><p>事实上，我的理解就是上面的2个条件需要保证操作是原子性操作，才能保证使用volatile关键字的程序在并发时能够正确执行。</p><p>下面列举几个Java中使用volatile的几个场景。</p><h4 id="状态标记量"><a href="#状态标记量" class="headerlink" title="状态标记量"></a>状态标记量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span>(!flag)&#123;</span><br><span class="line">    doSomething();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    flag = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="keyword">boolean</span> inited = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">//线程1:</span></span><br><span class="line">context = loadContext();  </span><br><span class="line">inited = <span class="keyword">true</span>;            </span><br><span class="line"> </span><br><span class="line"><span class="comment">//线程2:</span></span><br><span class="line"><span class="keyword">while</span>(!inited )&#123;</span><br><span class="line">sleep()</span><br><span class="line">&#125;</span><br><span class="line">doSomethingwithconfig(context);</span><br></pre></td></tr></table></figure><h4 id="double-check"><a href="#double-check" class="headerlink" title="double check"></a>double check</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span>(instance==<span class="keyword">null</span>)</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="独立观察-independent-observation"><a href="#独立观察-independent-observation" class="headerlink" title="独立观察 independent observation"></a>独立观察 independent observation</h4><p>安全使用 volatile 的另一种简单模式是：定期 “发布” 观察结果供程序内部使用。</p><p>例如】假设有一种环境传感器能够感觉环境温度。一个后台线程可能会每隔几秒读取一次该传感器，并更新包含当前文档的 volatile 变量。然后，其他线程可以读取这个变量，从而随时能够看到最新的温度值。</p><h4 id="开销较低的“读－写锁”策略"><a href="#开销较低的“读－写锁”策略" class="headerlink" title="开销较低的“读－写锁”策略"></a>开销较低的“读－写锁”策略</h4><p>如果读操作远远超过写操作，您可以结合使用<strong>内部锁</strong>和 <strong>volatile 变量</strong>来减少公共代码路径的开销。</p><p>使用 <code>synchronized</code> 确保增量操作是原子的，并使用 <code>volatile</code> 保证当前结果的可见性。如果更新不频繁的话，该方法可实现更好的性能，因为读路径的开销仅仅涉及<code>volatile</code> 读操作，这通常要优于一个无竞争的锁获取的开销。</p><p>至于为何需要这么写请参考：<br>《Java 中的双重检查（Double-Check）》<br><a rel="external nofollow noopener noreferrer" target="_blank" href="http://blog.csdn.net/dl88250/article/details/5439024">http://blog.csdn.net/dl88250/article/details/5439024</a><br><a rel="external nofollow noopener noreferrer" target="_blank" href="http://www.iteye.com/topic/652440">http://www.iteye.com/topic/652440</a></p><h3 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h3><p><strong>文章转载<a rel="external nofollow noopener noreferrer" target="_blank" href="http://www.cnblogs.com/dolphin0520/p/3920373.html">Java并发编程：volatile关键字解析</a></strong></p><h3 id="最后附上自己的学习代码"><a href="#最后附上自己的学习代码" class="headerlink" title="最后附上自己的学习代码"></a>最后附上自己的学习代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuwii.test.thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/11/18 9:20&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> inc;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> inc1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> inc2;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 并发中不适用int， 使用jdk1.5的原子操作类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> AtomicInteger inc3 = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自增，不保证原子性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        inc++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用synchronized保证原子性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">increase1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        inc1++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用Lock保证原子性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">increase2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inc2++;</span><br><span class="line">        &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用jdk1.5的原子操作类，保证原子性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">increase3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        inc3.getAndIncrement();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取系统运行默认线程数，理论上只有一条主线程，需要注意的是，但是在idea上中默认多了一个monitor ctrlbreak线程。</span></span><br><span class="line">        <span class="comment">// 可参考 http://blog.csdn.net/xiaolinzi007/article/details/44487851</span></span><br><span class="line">        <span class="keyword">int</span> defaultActiveCount = Thread.activeCount();</span><br><span class="line">        <span class="keyword">int</span> threadCount = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> increaseCount = <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">final</span> VolatileTest test = <span class="keyword">new</span> VolatileTest();</span><br><span class="line">        <span class="comment">// 创建10个线程，分别自增1000次。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadCount; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i1 = <span class="number">0</span>; i1 &lt; increaseCount; i1++) &#123;</span><br><span class="line">                    test.increase();</span><br><span class="line">                    test.increase1();</span><br><span class="line">                    test.increase2();</span><br><span class="line">                    test.increase3();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//保证前面的线程都执行完。</span></span><br><span class="line">        <span class="keyword">while</span> (Thread.activeCount() &gt; defaultActiveCount) &#123;</span><br><span class="line">           Thread.yield();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 打印最终结果，理论结果10 * 1000 = 10000。</span></span><br><span class="line">        System.out.printf(<span class="string">"自增后inc为：%d%n"</span>, test.inc);</span><br><span class="line">        System.out.printf(<span class="string">"自增后inc1为：%d%n"</span>, test.inc1);</span><br><span class="line">        System.out.printf(<span class="string">"自增后inc2为：%d%n"</span>, test.inc2);</span><br><span class="line">        System.out.printf(<span class="string">"自增后inc3为：%d%n"</span>, test.inc3.get());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 状态标记，利用volatile可见性属性，保持线程有序执行</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;写一个线程做完事情后将标记赋值true，线程二一直阻塞标记为true时执行&lt;p/&gt;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">                FlagTest.flag = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt;&#123;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (!FlagTest.flag) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.printf(<span class="string">"%s s后flag改为true%n"</span>, <span class="number">3</span> - i);</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    i++;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.printf(<span class="string">"flag为true 了"</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用volatile场景&lt;/br&gt;</span></span><br><span class="line"><span class="comment"> * 1. 状态标记量: 并发时候保证程序按照有序运行&lt;/br&gt;</span></span><br><span class="line"><span class="comment"> * 2. double check：并发中为了减少同步的开销，于是有了双重检查模式。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlagTest</span> </span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 状态标记量</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 双重检查单例模式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> FlagTest instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">FlagTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 双重检查double check</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;并发情况下为了减少同步的开销，于是有了双重检查模式。&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> FlagTest</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> FlagTest <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (FlagTest.class) &#123;</span><br><span class="line">                <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> FlagTest();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">自增后inc为：9996</span><br><span class="line">自增后inc1为：10000</span><br><span class="line">自增后inc2为：10000</span><br><span class="line">自增后inc3为：10000</span><br><span class="line">3 s后flag改为true</span><br><span class="line">2 s后flag改为true</span><br><span class="line">1 s后flag改为true</span><br><span class="line">flag为true</span><br></pre></td></tr></table></figure><p></p><p>刚才的inc++操作来说，这个操作其实细分为三步，读inc的值给temp，将temp+1，赋值给inc。三步对应的 jvm 指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov    0xc(%r10),%r8d ; Load</span><br><span class="line">inc    %r8d           ; Increment</span><br><span class="line">mov    %r8d,0xc(%r10) ; Store</span><br><span class="line">lock addl $0x0,(%rsp) ; StoreLoad Barrier</span><br></pre></td></tr></table></figure><p>最后一步对应的是字节内存屏障<sup id="fnref:1"><a href="#fn:1" rel="footnote"><span class="hint--top-right hint--error hint--large" aria-label="Memory Barrier">[1]</span></a></sup>。</p><ol><li>当线程1将inc读入内存，然后被阻塞。</li><li>线程2也将inc读入内存中，然后执行过第二步，temp+1，然后被阻塞。</li><li>线程1被唤醒，此时并没有对inc执行写操作，所以线程1不需要重新从内存读，所以执行完+1操作被赋值后重新写入主存中。</li><li>线程2被唤醒，由于inc执行了写操作，导致线程2中的inc缓存失效，所以从内存中重新读进来此时的inc值，由于已经执行过第二步了，此时将最新的temp赋值给inc，然后重新写入内存。就在刚才那一步发生了数据不一致性，此时的inc总共被加了一次。</li></ol><h3 id="内存屏障"><a href="#内存屏障" class="headerlink" title="内存屏障"></a>内存屏障</h3><p>内存屏障（<a href="http://en.wikipedia.org/wiki/Memory_barrier" rel="external nofollow noopener noreferrer" target="_blank">memory barrier</a>）是一个虚拟机的指令，基本上，它是这样一条指令： a) 确保一些特定操作执行的顺序； b) 影响一些数据的可见性(可能是某些指令执行后的结果)。编译器和CPU可以在保证输出结果一样的情况下对指令重排序，使性能得到优化。插入一个内存屏障，相当于告诉CPU和编译器先于这个命令的必须先执行，后于这个命令的必须后执行。内存屏障另一个作用是强制更新一次不同CPU的缓存。例如，一个写屏障会把这个屏障前写入的数据刷新到缓存，这样任何试图读取该数据的线程将得到最新值，而不用考虑到底是被哪个cpu核心或者哪颗CPU执行的。</p><p>内存屏障和volatile什么关系？上面的虚拟机指令里面有提到，如果你的字段是volatile，Java内存模型将在写操作后插入一个写屏障指令，在读操作前插入一个读屏障指令。这意味着如果你对一个volatile字段进行写操作，你必须知道：1、一旦你完成写入，任何访问这个字段的线程将会得到最新的值。2、在你写入前，会保证所有之前发生的事已经发生，并且任何更新过的数据值也是可见的，因为内存屏障会把之前的写入值都刷新到缓存。</p><p>所以从上面的虚拟机字节码中可以了解到，复合操作的 volatile 从 Load 到 store 到内存屏障，一共4步，其中最后一步jvm让这个最新的变量的值在所有线程可见，也就是最后一步让所有的CPU内核都获得了最新的值，但<strong>中间的几步（从Load到Store）</strong>是不安全的，中间如果其他的CPU修改了值将会丢失。</p><h3 id="volatile和synchronized的区别"><a href="#volatile和synchronized的区别" class="headerlink" title="volatile和synchronized的区别"></a>volatile和synchronized的区别</h3><p><a href="https://blog.csdn.net/suifeng3051/article/details/52611233" rel="external nofollow noopener noreferrer" target="_blank">volatile和synchronized的区别</a></p><ol><li>volatile本质是在告诉jvm当前变量在寄存器（工作内存）中的值是不确定的，需要从主存中读取； synchronized则是锁定当前变量，只有当前线程可以访问该变量，其他线程被阻塞住。</li><li>volatile仅能使用在变量级别；synchronized则可以使用在变量、方法、和类级别的</li><li>volatile仅能实现变量的修改可见性，不能保证原子性；而synchronized则可以保证变量的修改可见性和原子性</li><li>volatile不会造成线程的阻塞；synchronized可能会造成线程的阻塞。</li><li>volatile标记的变量不会被编译器优化；synchronized标记的变量可以被编译器优化</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>Java内存模型，原子性，可见性，有序性的理解；</li><li>volatile修饰的变量具有什么样的特性：可见性，禁止重排序；</li><li>并发中的使用方法和运用场景。</li></ol><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none;padding-left:0;margin-left:40px"><li id="fn:1"><span style="display:inline-block;vertical-align:top;padding-right:10px;margin-left:-40px">1.</span><span style="display:inline-block;vertical-align:top;margin-left:10px">Memory Barrier<a href="#fnref:1" rev="footnote"> ↩</a></span></li></ol></div></div><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 8 中HashMap源码分析]]></title>
      <url>/java-hashmap.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="HashMap-文档"><a href="#HashMap-文档" class="headerlink" title="HashMap 文档"></a>HashMap 文档</h3><blockquote><p>HashMap是基于哈希表的Map接口实现的,此实现提供所有可选的映射操作。存储的是<code>&lt;key，value&gt;</code>对的映射，允许多个null值和一个null键。但此类不保证映射的顺序，特别是它不保证该顺序恒久不变。<br>除了HashMap是非同步以及允许使用null外，HashMap 类与 Hashtable大致相同。<br>此实现假定哈希函数将元素适当地分布在各桶之间，可为基本操作（get 和 put）提供稳定的性能。迭代collection 视图所需的时间与 HashMap 实例的“容量”（桶的数量）及其大小（键-值映射关系数）成比例。所以，如果迭代性能很重要，则不要将初始容量设置得太高（或将加载因子设置得太低）。</p><p>HashMap 的实例有两个参数影响其性能：<code>初始容量</code> 和<code>加载因子</code>。容量 是哈希表中桶的数量，初始容量只是哈希表在创建时的容量。<strong>加载因子 是哈希表在其容量自动增加之前可以达到多满的一种尺度。当哈希表中的条目数超出了加载因子与当前容量的乘积时，则要对该哈希表进行 rehash 操作（即重建内部数据结构），从而哈希表将具有大约两倍的桶数。</strong></p><p>通常，默认<code>加载因子</code> (0.75) 在时间和空间成本上寻求一种折衷。加载因子过高虽然减少了空间开销，但同时也增加了查询成本（在大多数 HashMap 类的操作中，包括 get 和 put 操作，都反映了这一点）。<strong>在设置初始容量时应该考虑到映射中所需的条目数及其加载因子，以便最大限度地减少 rehash 操作次数。如果初始容量大于最大条目数除以加载因子，则不会发生 rehash 操作。</strong><br>注意，此实现<code>不是同步</code>的。 如果多个线程同时访问一个HashMap实例，而其中至少一个线程从结构上修改了列表，那么它必须保持外部同步。这通常是通过同步那些用来封装列表的 对象来实现的。但如果没有这样的对象存在，则应该使用{@link Collections#synchronizedMap Collections.synchronizedMap}来进行“包装”，该方法最好是在创建时完成，为了避免对映射进行意外的非同步操作。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map m = Collections.synchronizedMap(<span class="keyword">new</span> HashMap(...));</span><br></pre></td></tr></table></figure><p></p></blockquote><blockquote><p>由所有此类的“collection 视图方法”所返回的迭代器都是快速失败的：在迭代器创建之后，如果从结构上对映射进行修改，除非通过迭代器本身的remove 方法，其他任何时间任何方式的修改，迭代器都将抛出 ConcurrentModificationException。因此，面对并发的修改，迭代器很快就会完全失败，而不会在将来不确定的时间发生任意不确定行为的风险。</p><p>注意，迭代器的<code>快速失败</code>行为不能得到保证，一般来说，存在非同步的并发修改时，不可能作出任何坚决的保证。快速失败迭代器尽最大努力抛出 <code>ConcurrentModificationException</code>。因此，编写依赖于此异常的程序的做法是错误的，正确做法是：迭代器的快速失败行为应该仅用于检测程序错误。</p></blockquote><a id="more"></a><p><strong>jdk版本：jdk1.8.0_144</strong></p><h3 id="HashMap的数据结构"><a href="#HashMap的数据结构" class="headerlink" title="HashMap的数据结构"></a>HashMap的数据结构</h3><p>HashMap实际上是一个“链表的数组”的数据结构，每个元素存放链表头结点的数组，即数组（散列桶）中的每一个元素都是链表。<br><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fmwxdigp23j20qy0kedhk.jpg" alt="image"></p><h4 id="解决Hash冲突"><a href="#解决Hash冲突" class="headerlink" title="解决Hash冲突"></a>解决Hash冲突</h4><p>HashMap就是使用哈希表来存储的。哈希表为解决冲突，可以采用开放地址法和链地址法等来解决问题，Java中HashMap采用了<code>链地址法（拉链法）</code>。链地址法，简单来说，就是数组加链表的结合。在每个数组元素上都一个链表结构，当数据被Hash后，得到数组下标，把数据放在对应下标元素的链表上。<br>有时候计算Hash值的时候，会出现相同的情况，这样两个key就存储到相同的位置上了，这个时候会出现<code>Hash碰撞</code>。</p><h3 id="HashMap的属性"><a href="#HashMap的属性" class="headerlink" title="HashMap的属性"></a>HashMap的属性</h3><h4 id="实现的接口和继承的类"><a href="#实现的接口和继承的类" class="headerlink" title="实现的接口和继承的类"></a>实现的接口和继承的类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure><p>实际上HashMap没有从AbstractMap父亲中继承任何属性，从实现的接口上看，HashMap拥有克隆和序列化的属性。</p><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认初始容量16，必须为2的幂</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//最大容量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认加载因子</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用红黑树而不是链表的阈值</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The bin count threshold for untreeifying a (split) bin during a</span></span><br><span class="line"><span class="comment">     * resize operation. Should be less than TREEIFY_THRESHOLD, and at</span></span><br><span class="line"><span class="comment">     * most 6 to mesh with shrinkage detection under removal.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//table是一个Node&lt;K,V&gt;[]数组类型，而Node&lt;K,V&gt;实际上就是一个元素值为&lt;key,value&gt;对的单向链表。</span></span><br><span class="line">    <span class="comment">//哈希表的"key-value键值对"都是存储在Node&lt;K,V&gt;数组中的。 </span></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用来指向entrySet()返回的set集合</span></span><br><span class="line">    <span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//HashMap的大小,即保存的键值对的数量</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用来实现fail-fast机制的，记录HashMap结构化修改的次数</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下次需扩容的临界值，size&gt;=threshold就会扩容</span></span><br><span class="line">    <span class="comment">//如果table数组没有被分配，则该值为初始容量值16；或若该值为0，也表明该值为初始容量值</span></span><br><span class="line">    <span class="keyword">int</span> threshold;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加载因子</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br></pre></td></tr></table></figure><h5 id="table"><a href="#table" class="headerlink" title="table"></a>table</h5><p>table是一个Node[]数组类型，而Node实际上就是一个单向链表，哈希桶数组。哈希表的”key-value键值对”都是存储在Node数组中的。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现Map.Entry&lt;K,V&gt;接口</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash; <span class="comment">//hash码</span></span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">        Node&lt;K,V&gt; next; <span class="comment">//指向链表中下一个实例</span></span><br><span class="line"></span><br><span class="line">        Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.hash = hash;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span>        </span>&#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span>      </span>&#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> key + <span class="string">"="</span> + value; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回此映射项的哈希值:key值的哈希码与value值的哈希码按位异或的结果</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用指定值替换对应于此项的值,并返回旧值</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">            V oldValue = value;</span><br><span class="line">            value = newValue;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//比较指定对象与此项的相等性</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="keyword">this</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line">                Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line">                <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class="line">                    Objects.equals(value, e.getValue()))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><p>在HashMap中，哈希桶数组table的长度length大小必须为2的n次方，而当链表长度太长（默认超过8）时，链表就转换为红黑树，利用红黑树快速增删改查的特点提高HashMap的性能，其中会用到红黑树的插入、删除、查找等算法。</p><h5 id="loadFactor加载因子"><a href="#loadFactor加载因子" class="headerlink" title="loadFactor加载因子"></a>loadFactor加载因子</h5><p>HashMap的初始化大小length为16（默认值），默认加载因子0.75，threshold是HashMap所能容纳的最大数据量的Node(键值对)个数。threshold = length * Load factor。也就是说，在数组定义好长度之后，负载因子越大，所能容纳的键值对个数越多。</p><p>threshold就是在此Load factor和length(数组长度)对应下允许的最大元素数目，超过这个数目就重新resize(扩容)，扩容后的HashMap容量是之前容量的两倍。默认的负载因子0.75是对空间和时间效率的一个平衡选择，建议大家不要修改，除非在时间和空间比较特殊的情况下，如果内存空间很多而又对时间效率要求很高，可以降低负载因子Load factor的值；相反，如果内存空间紧张而对时间效率要求不高，可以增加负载因子loadFactor的值，这个值可以大于1。</p><h5 id="size大小"><a href="#size大小" class="headerlink" title="size大小"></a>size大小</h5><p>HashMap中实际存在的键值对数量。</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>HashMap提供了四种方式的构造器，可以构造一个带指定初始容量和加载因子的空HashMap，构造一个带指定初始容量和默认加载因子(0.75)的空 HashMap，构造一个默认初始容量为16和默认加载因子为0.75的空HashMap，以及构造一个包含指定Map的元素的HashMap，容量与指定Map容量相同，加载因子为默认的0.75。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//找出“大于Capacity”的最小的2的幂,使Hash表的容量保持为2的次方倍</span></span><br><span class="line">    <span class="comment">//算法的思想：通过使用逻辑运算来替代取余，这里有一个规律，就是当N为2的次方（Power of two），那么X％N==X&amp;(N-1)。</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = cap - <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">1</span>; <span class="comment">//&gt;&gt;&gt; 无符号右移,高位补0</span></span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">2</span>; <span class="comment">//a|=b的意思就是把a和b按位或然后赋值给a</span></span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造一个带指定初始容量和加载因子的空HashMap</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">            initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</span><br><span class="line">                                               loadFactor);</span><br><span class="line">        <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">        <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造一个带指定初始容量和默认加载因子(0.75)的空 HashMap</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造一个具有默认初始容量 (16)和默认加载因子 (0.75)的空 HashMap</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造一个映射关系与指定 Map相同的新 HashMap,容量与指定Map容量相同，加载因子为默认的0.75</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">        putMapEntries(m, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><h4 id="确定哈希桶数组索引位置"><a href="#确定哈希桶数组索引位置" class="headerlink" title="确定哈希桶数组索引位置"></a>确定哈希桶数组索引位置</h4><p>不管增加、删除、查找键值对，定位到哈希桶数组的位置都是很关键的第一步。前面说过HashMap的数据结构是数组和链表的结合，所以我们当然希望这个HashMap里面的元素位置尽量分布均匀些，尽量使得每个位置上的元素数量只有一个，那么当我们用hash算法求得这个位置的时候，马上就可以知道对应位置的元素就是我们要的，不用遍历链表，大大优化了查询的效率。HashMap定位数组索引位置，直接决定了hash方法的离散性能。先看看源码的实现(方法一+方法二):<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">方法一：</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;   <span class="comment">//jdk1.8 &amp; jdk1.7</span></span><br><span class="line">     <span class="keyword">int</span> h;</span><br><span class="line">     <span class="comment">// h = key.hashCode() 为第一步 取hashCode值</span></span><br><span class="line">     <span class="comment">// h ^ (h &gt;&gt;&gt; 16)  为第二步 高位参与运算</span></span><br><span class="line">     <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line">方法二：</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;  <span class="comment">//jdk1.7的源码，jdk1.8没有这个方法，但是实现原理一样的</span></span><br><span class="line">     <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);  <span class="comment">//第三步 取模运算</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这里的Hash算法本质上就是三步：取key的hashCode值、高位运算、取模运算。</p><p>对于任意给定的对象，只要它的hashCode()返回值相同，那么程序调用方法一所计算得到的Hash码值总是相同的。我们首先想到的就是把hash值对数组长度取模运算，这样一来，元素的分布相对来说是比较均匀的。但是，模运算的消耗还是比较大的，在HashMap中是这样做的：调用方法二来计算该对象应该保存在table数组的哪个索引处。</p><p>这个方法非常巧妙，它通过h &amp; (table.length -1)来得到该对象的保存位，而HashMap底层数组的长度总是2的n次方，这是HashMap在速度上的优化。当length总是2的n次方时，h&amp; (length-1)运算等价于对length取模，也就是h%length，但是&amp;比%具有更高的效率。</p><p>在JDK1.8的实现中，优化了高位运算的算法，通过hashCode()的高16位异或低16位实现的：(h = k.hashCode()) ^ (h &gt;&gt;&gt; 16)，主要是从速度、功效、质量来考虑的，这么做可以在数组table的length比较小的时候，也能保证考虑到高低Bit都参与到Hash的计算中，同时不会有太大的开销。<br><img src="http://tech.meituan.com/img/java-hashmap/hashMap%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%E4%BE%8B%E5%9B%BE.png" alt="image"></p><h4 id="HashMap的put方法"><a href="#HashMap的put方法" class="headerlink" title="HashMap的put方法"></a>HashMap的put方法</h4><p>HashMap提供了put(K key, V value)、putAll(Map&lt;? extends K, ? extends V&gt; m)这些添加键值对的方法。<br>HashMap的put方法执行过程可以通过下图来理解，<br><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fmwxdibl3ij21bo11s7cj.jpg" alt="image"></p><ol><li><p>判断键值对数组table[i]是否为空或为null，否则执行resize()进行扩容；</p></li><li><p>根据键值key计算hash值得到插入的数组索引i，如果table[i]==null，直接新建节点添加，转向⑥，如果table[i]不为空，转向③；</p></li><li><p>判断table[i]的首个元素是否和key一样，如果相同直接覆盖value，否则转向④，这里的相同指的是hashCode以及equals；</p></li><li><p>判断table[i] 是否为treeNode，即table[i] 是否是红黑树，如果是红黑树，则直接在树中插入键值对，否则转向⑤；</p></li><li><p>遍历table[i]，判断链表长度是否大于8，大于8的话把链表转换为红黑树，在红黑树中执行插入操作，否则进行链表的插入操作；遍历过程中若发现key已经存在直接覆盖value即可；</p></li><li><p>插入成功后，判断实际存在的键值对数量size是否超多了最大容量threshold，如果超过，进行扩容。</p></li></ol><h5 id="put方法源码"><a href="#put方法源码" class="headerlink" title="put方法源码"></a>put方法源码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在此映射中关联指定值与指定键。如果该映射以前包含了一个该键的映射关系，则旧值被替换。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 指定值将要关联的键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 指定键将要关联的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 与 key关联的旧值；如果 key没有任何映射关系，则返回 null。（返回 null 还可能表示该映射之前将null与 key关联。）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于实现 Map.put()和相关的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hash 键的hash码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> onlyIfAbsent if true, don't change existing value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> evict evict=false：表明该hash表处于初始化创建的过程中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> previous value, or null if none</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">                   <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">        <span class="comment">//步骤 1 ：tab为空则创建  </span></span><br><span class="line">        <span class="comment">//此处分两种情况：1.当table为null时，用默认容量16初始化table数组；2.当table非空时</span></span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>) <span class="comment">//旧hash表为null或旧hash表长度为0</span></span><br><span class="line">            n = (tab = resize()).length;  <span class="comment">//初始化hash表的长度（16）</span></span><br><span class="line">        <span class="comment">//步骤 2</span></span><br><span class="line">        <span class="comment">//此处又分为两种情况：1.key的hash值对应的那个节点为空；2.key的hash值对应的那个节点不为空</span></span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>) <span class="comment">//该key的hash值对应的那个节点为空，即表示还没有元素被散列至此</span></span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="keyword">null</span>); <span class="comment">//则创建一个新的new Node&lt;&gt;(hash, key, value, next);</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="comment">//该key的hash值对应的那个节点不为空，先与链表上的第一个节点p比较</span></span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">            <span class="comment">// 步骤 3：节点key存在，直接覆盖value  </span></span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                e = p;</span><br><span class="line">                <span class="comment">// 步骤 4：判断该链为红黑树  </span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="comment">// 步骤 5：该链为链表 的情况下进行遍历table</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;  </span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                        <span class="comment">//链表长度大于8转换为红黑树进行处理 TREEIFY_THRESHOLD = 8  </span></span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// key已经存在的话</span></span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    p = e;  <span class="comment">//向后查找</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//若该key对应的value已经存在，则用新的value取代旧的value</span></span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                V oldValue = e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">        <span class="comment">// 步骤 6：如果加入该键值对后超过最大阀值，则进行resize操作 ，就扩容  threshold：</span></span><br><span class="line">        <span class="comment">//单词解释--阈(yu)值,不念阀(fa)值！顺便学下语文咯。  </span></span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)  </span><br><span class="line">            resize();</span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将指定映射的所有映射关系复制到此映射中，这些映射关系将替换此映射目前针对指定映射中所有键的所有映射关系。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putAll</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">        putMapEntries(m, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用于帮助实现Map.putAll()方法 和Map构造器，当evict=false时表示构造初始HashMap。</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">putMapEntries</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m, <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> s = m.size(); <span class="comment">//得到指定Map的大小</span></span><br><span class="line">        <span class="keyword">if</span> (s &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (table == <span class="keyword">null</span>) &#123; <span class="comment">// pre-size</span></span><br><span class="line">                <span class="keyword">float</span> ft = ((<span class="keyword">float</span>)s / loadFactor) + <span class="number">1.0F</span>;</span><br><span class="line">                <span class="keyword">int</span> t = ((ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY) ?</span><br><span class="line">                         (<span class="keyword">int</span>)ft : MAXIMUM_CAPACITY);  <span class="comment">//得到按指定Map大小计算出的HashMap所需的容量</span></span><br><span class="line">                <span class="keyword">if</span> (t &gt; threshold)  <span class="comment">//如果容量大于阈值</span></span><br><span class="line">                    threshold = tableSizeFor(t);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s &gt; threshold)  <span class="comment">//指定Map的大小&gt;扩容临界值,扩容  </span></span><br><span class="line">                resize();</span><br><span class="line">            <span class="comment">//通过迭代器，将“m”中的元素逐个添加到HashMap中</span></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;? extends K, ? extends V&gt; e : m.entrySet()) &#123;</span><br><span class="line">                K key = e.getKey();</span><br><span class="line">                V value = e.getValue();</span><br><span class="line">                putVal(hash(key), key, value, <span class="keyword">false</span>, evict);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="HashMap的扩容机制resize"><a href="#HashMap的扩容机制resize" class="headerlink" title="HashMap的扩容机制resize"></a>HashMap的扩容机制resize</h4><p>在HashMap的四种构造函数中并没有对其成员变量Node&lt;K,V&gt;[] table进行任何初始化的工作，那么HashMap是如何构造一个默认初始容量为16的空表的？该初始化的诱发条件是在向HashMap中添加第一对&lt;key,value&gt;时，通过<code>put(K key, V value) -&gt; putVal(hash(key), key, value, false, true) -&gt; resize()</code>方法。故HashMap中尤其重要的resize()方法主要实现了两个功能：</p><ol><li>在table数组为null时，对其进行初始化，默认容量为16；</li><li>当tables数组非空，但需要调整HashMap的容量时，将hash表容量翻倍。</li></ol><p>jdk1.8中的resize：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//resize()方法作用有两种：1.初始化hash表的容量，为16； 2.将hash表容量翻倍</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] oldTab = table;  <span class="comment">//旧hash表</span></span><br><span class="line">        <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length; <span class="comment">//旧hash表容量</span></span><br><span class="line">        <span class="keyword">int</span> oldThr = threshold; <span class="comment">//旧hash表阈值</span></span><br><span class="line">        <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;  <span class="comment">//新hash表容量与扩容临界值</span></span><br><span class="line">        <span class="comment">//2.旧hash表非空，则表容量翻倍</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123; </span><br><span class="line">            <span class="comment">//如果当前的hash表长度已经达到最大值，则不在进行调整</span></span><br><span class="line">            <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">                threshold = Integer.MAX_VALUE;</span><br><span class="line">                <span class="keyword">return</span> oldTab;</span><br><span class="line">            &#125;  <span class="comment">//更新新hash表容量：翻倍</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">                <span class="comment">//更新扩容临界值</span></span><br><span class="line">                newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">            newCap = oldThr; </span><br><span class="line">        <span class="comment">//1. 初始化hash表容量，设为默认值16，并且计算临界值。</span></span><br><span class="line">        <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">            newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">            newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                      (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置下次扩容的临界值</span></span><br><span class="line">        threshold = newThr;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</span><br><span class="line">        <span class="comment">//创建一个初始容量为新hash表长度的newTab数组</span></span><br><span class="line">        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">        table = newTab;</span><br><span class="line">        <span class="comment">//如果旧hash表非空，则按序将旧hash表中的元素重定向到新hash表</span></span><br><span class="line">        <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">                Node&lt;K,V&gt; e;  <span class="comment">//e按序指向oldTab数组中的元素，即每个链表中的头结点</span></span><br><span class="line">                <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">if</span> (e.next == <span class="keyword">null</span>) <span class="comment">//如果链表只有一个头节点</span></span><br><span class="line">                        newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                    <span class="comment">// 如果节点是红黑树</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                        ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                    <span class="comment">//对链表进行秩序维护：因为我们使用的是两倍扩容的方法，所以每个桶里面的元素必须要么待在原来的</span></span><br><span class="line">                    <span class="comment">//索引所对应的位置，要么在新的桶中位置偏移两倍</span></span><br><span class="line">                    <span class="keyword">else</span> &#123; </span><br><span class="line">                        Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K,V&gt; next;</span><br><span class="line">                        <span class="keyword">do</span> &#123;</span><br><span class="line">                            next = e.next;</span><br><span class="line">                            <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                    loHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    loTail.next = e;</span><br><span class="line">                                loTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                    hiHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    hiTail.next = e;</span><br><span class="line">                                hiTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            newTab[j] = loHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            newTab[j + oldCap] = hiHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newTab;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><p>扩容是使用2次幂的扩展(指长度扩为原来2倍)，所以，<br><strong>经过rehash之后，元素的位置要么是在原位置，要么是在原位置再移动2次幂的位置</strong>。</p><p><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fmwxdhq3ooj219c0ce761.jpg" alt="image"></p><p>元素在重新计算hash之后，因为n变为2倍，那么n-1的mask范围在高位多1bit(红色)，因此新的index就会发生这样的变化：</p><p><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fmwxdi5angj20tk05mgmn.jpg" alt="image"></p><p>因此，我们在扩充HashMap的时候，不需要像JDK1.7的实现那样重新计算hash，只需要看看原来的hash值新增的那个bit是1还是0就好了，是0的话索引没变，是1的话索引变成“原索引+oldCap”，可以看看下图为16扩充为32的resize示意图：</p><p><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fmwxghads4j20z80kadlq.jpg" alt="image"></p><p>这个设计确实非常的巧妙，既省去了重新计算hash值的时间，而且同时，由于新增的1bit是0还是1可以认为是随机的，因此resize的过程，均匀的把之前的冲突的节点分散到新的bucket了。这一块就是JDK1.8新增的优化点。有一点注意区别，JDK1.7中rehash的时候，旧链表迁移新链表的时候，如果在新表的数组索引位置相同，则链表元素会倒置，但是从上图可以看出，JDK1.8不会倒置。</p><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><p>HashMap提供了get(Object key)、containsKey(Object key)、containsValue(Object value)这些查找键值对的方法。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回指定key所映射的value；如果对于该键来说，此映射不包含任何映射关系，则返回 null</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt; e;</span><br><span class="line">        <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">            (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123; <span class="comment">//key的哈希值为数组下标</span></span><br><span class="line">            <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">//检查第一个节点</span></span><br><span class="line">                ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                <span class="keyword">return</span> first; </span><br><span class="line">            <span class="comment">//如果第一个节点不对，则向后检查</span></span><br><span class="line">            <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">return</span> e;</span><br><span class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果此映射包含对于指定键的映射关系，则返回 true。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getNode(hash(key), key) != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果此映射将一个或多个键映射到指定值，则返回 true。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsValue</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; V v;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//外层循环搜索数组</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; ++i) &#123;</span><br><span class="line">                <span class="comment">//内层循环搜索链表</span></span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; e = tab[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((v = e.value) == value ||</span><br><span class="line">                        (value != <span class="keyword">null</span> &amp;&amp; value.equals(v)))</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><h4 id="清空与删除"><a href="#清空与删除" class="headerlink" title="清空与删除"></a>清空与删除</h4><p>HashMap提供了remove(Object key)删除键值对、clear()清除所有键值对的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从此映射中移除指定键的映射关系（如果存在）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt; e;</span><br><span class="line">        <span class="keyword">return</span> (e = removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>)) == <span class="keyword">null</span> ?</span><br><span class="line">            <span class="keyword">null</span> : e.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于实现 Map.remove()方法和其他相关的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hash 键的hash值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value the value to match if matchValue, else ignored</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> matchValue if true only remove if value is equal</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> movable if false do not move other nodes while removing</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the node, or null if none</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">removeNode</span><span class="params">(<span class="keyword">int</span> hash, Object key, Object value,</span></span></span><br><span class="line"><span class="function"><span class="params">                               <span class="keyword">boolean</span> matchValue, <span class="keyword">boolean</span> movable)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, index;</span><br><span class="line">        <span class="comment">//table数组非空，键的hash值所指向的数组中的元素非空</span></span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">            (p = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Node&lt;K,V&gt; node = <span class="keyword">null</span>, e; K k; V v;  <span class="comment">//node指向最终的结果结点，e为链表中的遍历指针</span></span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;   <span class="comment">//检查第一个节点，如果匹配成功</span></span><br><span class="line">                ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                node = p;</span><br><span class="line">            <span class="comment">//如果第一个节点匹配不成功，则向后遍历链表查找</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((e = p.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                            ((k = e.key) == key ||</span><br><span class="line">                             (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                            node = e;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        p = e;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node != <span class="keyword">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||</span><br><span class="line">                                 (value != <span class="keyword">null</span> &amp;&amp; value.equals(v)))) &#123;</span><br><span class="line">                <span class="keyword">if</span> (node <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)node).removeTreeNode(<span class="keyword">this</span>, tab, movable);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (node == p)  <span class="comment">//删除node结点</span></span><br><span class="line">                    tab[index] = node.next;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    p.next = node.next;</span><br><span class="line">                ++modCount;</span><br><span class="line">                --size;</span><br><span class="line">                afterNodeRemoval(node);</span><br><span class="line">                <span class="keyword">return</span> node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从此映射中移除所有映射关系</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            size = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; ++i)</span><br><span class="line">                tab[i] = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li><p>Java 8 中HashMap是数组+链表+红黑树；</p></li><li><p>哈希桶数组table的长度length大小必须为2的n次方，也就是我想要创建一个长度为19的HashMap，那么它需要创建的大小为32；HashMap 的 bucket 数组大小一定是2的幂，如果 new 的时候指定了容量且不是2的幂，实际容量会是最接近(大于)指定容量的2的幂，比如 new HashMap&lt;&gt;(19)，比19大且最接近的2的幂是32，实际容量就是32。</p></li><li><p>没有特殊要求，负载因子使用默认值0.75，并且它可以大于1；加载因子是表示Hsah表中元素的填满的程度。若加载因子越大，填满的元素越多，好处是，空间利用率高了，但冲突的机会加大了。反之，加载因子越小，填满的元素越少，好处是，冲突的机会减小了，但空间浪费多了。冲突的机会越大，则查找的成本越高；反之,查找的成本越小，因而,查找时间就越小.</p></li><li><p>HashMap是线程不安全的，不要在并发的环境中同时操作HashMap，建议使用ConcurrentHashMap，HashTable的并发性不如ConcurrentHashMap；</p></li><li><p>扩容特别消耗性能，初始化的时候，尽量控制好HashMap的大小，避免频繁扩容；</p></li><li><p>HashMap 在 new 后并不会立即分配哈希桶数组，而是第一次 put 时初始化，类似 ArrayList 在第一次 add 时分配空间。</p></li><li><p>HashMap 在 put 的元素后，如果数量大于 <code>Capacity * LoadFactor</code>（默认<code>16 * 0.75</code>） 之后会进行扩容。</p></li><li><p>Java 8在哈希碰撞的链表长度达到TREEIFY_THRESHOLD（默认8)后，会把该链表转变成树结构，提高了性能。</p></li><li><p>Java 8在 resize() 的时候，通过巧妙的设计，减少了 rehash 的性能消耗，主要是体现在算法上判断该值需不要移动位置。主要体现在下面一段代码上，判断 hash 的最高位的结果为真的话，就是用原来的索引，否则使用 <code>原索引+oldCap</code> :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">（e.hash &amp; oldCap) == 0</span><br></pre></td></tr></table></figure><p>省去了重新计算hash值的时间。1.7 之前链表元素会进行倒置，1.8的时候没有这种。</p></li><li><p>为什么table长度必须为二次幂，主要是体现在当我们需要 put 元素的时候，使用 hashCode 去判断该元素放在哪一个 table 里，例如，我们初始化一个 MAP，它的大小默认是16，但是 hashCode 是个很长 的 int，并不能确定 key 值放在哪个位置 ，源码中提供了取模运算 <code>(n - 1) &amp; hash</code> ，(16-1) 的二进制 <code>1111</code>，不管和谁做与运算，最后的值都是 <code>0 -15</code> 之间的，就可以当作索引，放进相应的 table 中。加入我们将map 的容量设置成 15 ，它的取模运算就是 <code>14 &amp; hash</code>，但是 14 的二进制是 <code>1110</code> ，当和我们的 hash 值做与运算的时候， hash 的最后以为不管是 0 还是 1 ，最终的结果都是一样的，这样就会造成 Hash 碰撞。所以为二次幂可以降低 hash 碰撞，提高搜索效率，而且计算机中都是采用二进制，这样就可以使用位运算符，提高计算的效率。</p></li><li><p>hashMap 为了减少 hash 碰撞，重新对 key 进行了hash，让 hashCode 的高十六位和低十六做与运算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> h;</span><br><span class="line">        <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>参考文章</strong></p><p><a rel="external nofollow noopener noreferrer" target="_blank" href="http://blog.csdn.net/qq_27093465/article/details/52207135">Java 8系列之重新认识HashMap</a><br><a rel="external nofollow noopener noreferrer" target="_blank" href="http://www.cnblogs.com/CherishFX/p/4739712.html">jdk1.8.0_45源码解读——HashMap的实现</a><br><a rel="external nofollow noopener noreferrer" target="_blank" href="https://www.cnblogs.com/rogerluo1986/p/5851300.html">HashMap数据结构</a><br><a rel="external nofollow noopener noreferrer" target="_blank" href="http://blog.csdn.net/u011411283/article/details/48024999">HashMap的性能提升从之链表到二叉树</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解决Hash碰撞冲突方法总结]]></title>
      <url>/hash-crash.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="Hash碰撞冲突"><a href="#Hash碰撞冲突" class="headerlink" title="Hash碰撞冲突"></a>Hash碰撞冲突</h3><p>我们知道，对象Hash的前提是实现equals()和hashCode()两个方法，那么HashCode()的作用就是保证对象返回唯一hash值，但当两个对象计算值一样时，这就发生了碰撞冲突。如下将介绍如何处理冲突，当然其前提是一致性hash。</p><a id="more"></a><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><h4 id="开放地址法"><a href="#开放地址法" class="headerlink" title="开放地址法"></a>开放地址法</h4><p>开放地执法有一个公式:<code>Hi=(H(key)+di) MOD m i=1,2,…,k(k&lt;=m-1)</code><br>其中，m为哈希表的表长。di 是产生冲突的时候的增量序列。如果di值可能为1,2,3,…m-1，称线性探测再散列。<br>如果di取1，则每次冲突之后，向后移动1个位置.如果di取值可能为1,-1,2,-2,4,-4,9,-9,16,-16,…k<em>k,-k</em>k(k&lt;=m/2)，称二次探测再散列。<br>如果di取值可能为伪随机数列。称伪随机探测再散列。</p><h4 id="再哈希法"><a href="#再哈希法" class="headerlink" title="再哈希法"></a>再哈希法</h4><p>当发生冲突时，使用第二个、第三个、哈希函数计算地址，直到无冲突时。缺点：计算时间增加。<br>比如上面第一次按照姓首字母进行哈希，如果产生冲突可以按照姓字母首字母第二位进行哈希，再冲突，第三位，直到不冲突为止</p><h4 id="链地址法（拉链法）"><a href="#链地址法（拉链法）" class="headerlink" title="链地址法（拉链法）"></a>链地址法（拉链法）</h4><p>将所有关键字为同义词的记录存储在同一<code>线性链表</code>中。如下：</p><p><img src="http://img.blog.csdn.net/20160918154444663?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="image"></p><h4 id="建立一个公共溢出区"><a href="#建立一个公共溢出区" class="headerlink" title="建立一个公共溢出区"></a>建立一个公共溢出区</h4><p>假设哈希函数的值域为<code>[0,m-1]</code>,则设向量<code>HashTable[0..m-1]</code>为基本表，另外设立存储空间向量<code>OverTable[0..v]</code>用以存储发生冲突的记录。</p><h4 id="拉链法的优缺点"><a href="#拉链法的优缺点" class="headerlink" title="拉链法的优缺点"></a>拉链法的优缺点</h4><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ol><li>拉链法处理冲突简单，且无堆积现象，即非同义词决不会发生冲突，因此平均查找长度较短；</li><li>由于拉链法中各链表上的结点空间是动态申请的，故它更适合于造表前无法确定表长的情况；</li><li>开放定址法为减少冲突，要求装填因子α较小，故当结点规模较大时会浪费很多空间。而拉链法中可取α≥1，且结点较大时，拉链法中增加的指针域可忽略不计，因此节省空间；</li><li>在用拉链法构造的散列表中，删除结点的操作易于实现。只要简单地删去链表上相应的结点即可。而对开放地址法构造的散列表，删除结点不能简单地将被删结 点的空间置为空，否则将截断在它之后填人散列表的同义词结点的查找路径。这是因为各种开放地址法中，空地址单元(即开放地址)都是查找失败的条件。因此在 用开放地址法处理冲突的散列表上执行删除操作，只能在被删结点上做删除标记，而不能真正删除结点。</li></ol><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><p>指针需要额外的空间，故当结点规模较小时，开放定址法较为节省空间，而若将节省的指针空间用来扩大散列表的规模，可使装填因子变小，这又减少了开放定址法中的冲突，从而提高平均查找速度。</p><p><strong>文章转载 <a rel="external nofollow noopener noreferrer" target="_blank" href="http://blog.csdn.net/zeb_perfect/article/details/52574915">解决Hash碰撞冲突方法总结</a></strong></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> post </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[理解一致性哈希算法(consistent hashing)]]></title>
      <url>/consistent-hashing.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><p>一致性哈希算法在1997年由麻省理工学院提出的一种分布式哈希（DHT）实现算法，设计目标是为了解决因特网中的热点(Hot spot)问题，初衷和CARP十分类似。一致性哈希修正了CARP使用的简 单哈希算法带来的问题，使得分布式哈希（DHT）可以在P2P环境中真正得到应用。<br>一致性hash算法提出了在动态变化的Cache环境中，判定哈希算法好坏的四个定义：</p><a id="more"></a><ol><li><code>平衡性(Balance)</code>：平衡性是指哈希的结果能够尽可能分布到所有的缓冲中去，这样可以使得所有的缓冲空间都得到利用。很多哈希算法都能够满足这一条件。</li><li><code>单调性(Monotonicity)</code>：单调性是指如果已经有一些内容通过哈希分派到了相应的缓冲中，又有新的缓冲加入到系统中。哈希的结果应能够保证原有已分配的内容可以被映射到原有的或者新的缓冲中去，而不会被映射到旧的缓冲集合中的其他缓冲区。</li><li><code>分散性(Spread)</code>：在分布式环境中，终端有可能看不到所有的缓冲，而是只能看到其中的一部分。当终端希望通过哈希过程将内容映射到缓冲上时，由于不同终端所见的缓冲范围有可能不同，从而导致哈希的结果不一致，最终的结果是相同的内容被不同的终端映射到不同的缓冲区中。这种情况显然是应该避免的，因为它导致相同内容被存储到不同缓冲中去，降低了系统存储的效率。分散性的定义就是上述情况发生的严重程度。好的哈希算法应能够尽量避免不一致的情况发生，也就是尽量降低分散性。</li><li><code>负载(Load)</code>：负载问题实际上是从另一个角度看待分散性问题。既然不同的终端可能将相同的内容映射到不同的缓冲区中，那么对于一个特定的缓冲区而言，也可能被不同的用户映射为不同 的内容。与分散性一样，这种情况也是应当避免的，因此好的哈希算法应能够尽量降低缓冲的负荷。<h3 id="分布式集群中，对机器的添加删除"><a href="#分布式集群中，对机器的添加删除" class="headerlink" title="分布式集群中，对机器的添加删除"></a>分布式集群中，对机器的添加删除</h3>在分布式集群中，对机器的添加删除，或者机器故障后自动脱离集群这些操作是分布式集群管理最基本的功能。如果采用常用的hash(object)%N算法，那么在有机器添加或者删除后，很多原有的数据就无法找到了，这样严重的违反了单调性原则。接下来主要讲解一下一致性哈希算法是如何设计的：</li></ol><h4 id="环形Hash空间"><a href="#环形Hash空间" class="headerlink" title="环形Hash空间"></a>环形Hash空间</h4><p>按照常用的hash算法来将对应的key哈希到一个具有2^32次方个桶的空间中，即0~(2^32)-1的数字空间中。现在我们可以将这些数字头尾相连，想象成一个闭合的环形。如下图：</p><p><img src="http://img.blog.csdn.net/20140411000507734?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY3l3b3Nw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="image"></p><h4 id="把数据通过一定的hash算法处理后映射到环上"><a href="#把数据通过一定的hash算法处理后映射到环上" class="headerlink" title="把数据通过一定的hash算法处理后映射到环上"></a>把数据通过一定的hash算法处理后映射到环上</h4><p>现在我们将object1、object2、object3、object4四个对象通过特定的Hash函数计算出对应的key值，然后散列到Hash环上。如下图：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Hash(object1) = key1；</span><br><span class="line">Hash(object2) = key2；</span><br><span class="line">Hash(object3) = key3；</span><br><span class="line">Hash(object4) = key4；</span><br></pre></td></tr></table></figure><p></p><p><img src="http://img.blog.csdn.net/20140411000620656?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY3l3b3Nw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="image"></p><h4 id="将机器通过hash算法映射到环上"><a href="#将机器通过hash算法映射到环上" class="headerlink" title="将机器通过hash算法映射到环上"></a>将机器通过hash算法映射到环上</h4><p>在采用一致性哈希算法的分布式集群中将新的机器加入，其原理是通过使用与对象存储一样的Hash算法将机器也映射到环中（一般情况下对机器的hash计算是采用机器的IP或者机器唯一的别名作为输入值），然后以顺时针的方向计算，将所有对象存储到离自己最近的机器中。<br>假设现在有NODE1，NODE2，NODE3三台机器，通过Hash算法得到对应的KEY值，映射到环中，其示意图如下：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hash(NODE1) = KEY1;</span><br><span class="line">Hash(NODE2) = KEY2;</span><br><span class="line">Hash(NODE3) = KEY3;</span><br></pre></td></tr></table></figure><p></p><p><img src="http://img.blog.csdn.net/20140411000853609?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY3l3b3Nw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="image"></p><p>通过上图可以看出对象与机器处于同一哈希空间中，这样按顺时针转动object1存储到了NODE1中，object3存储到了NODE2中，object2、object4存储到了NODE3中。在这样的部署环境中，hash环是不会变更的，因此，通过算出对象的hash值就能快速的定位到对应的机器中，这样就能找到对象真正的存储位置了。</p><h4 id="机器的删除与添加"><a href="#机器的删除与添加" class="headerlink" title="机器的删除与添加"></a>机器的删除与添加</h4><p>普通hash求余算法最为不妥的地方就是在有机器的添加或者删除之后会照成大量的对象存储位置失效，这样就大大的不满足单调性了。下面来分析一下一致性哈希算法是如何处理的。</p><h5 id="节点（机器）的删除"><a href="#节点（机器）的删除" class="headerlink" title="节点（机器）的删除"></a>节点（机器）的删除</h5><p>以上面的分布为例，如果NODE2出现故障被删除了，那么按照顺时针迁移的方法，object3将会被迁移到NODE3中，这样仅仅是object3的映射位置发生了变化，其它的对象没有任何的改动。如下图：</p><p><img src="http://img.blog.csdn.net/20140411001033656?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY3l3b3Nw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="image"></p><h5 id="节点（机器）的添加"><a href="#节点（机器）的添加" class="headerlink" title="节点（机器）的添加"></a>节点（机器）的添加</h5><p>如果往集群中添加一个新的节点NODE4，通过对应的哈希算法得到KEY4，并映射到环中，如下图：</p><p><img src="http://img.blog.csdn.net/20140411001211062?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY3l3b3Nw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="image"></p><p>通过按顺时针迁移的规则，那么object2被迁移到了NODE4中，其它对象还保持这原有的存储位置。通过对节点的添加和删除的分析，一致性哈希算法在保持了单调性的同时，还是数据的迁移达到了最小，这样的算法对分布式集群来说是非常合适的，避免了大量数据迁移，减小了服务器的的压力。</p><h4 id="平衡性"><a href="#平衡性" class="headerlink" title="平衡性"></a>平衡性</h4><p>根据上面的图解分析，一致性哈希算法满足了单调性和负载均衡的特性以及一般hash算法的分散性，但这还并不能当做其被广泛应用的原由，因为还缺少了平衡性。下面将分析一致性哈希算法是如何满足平衡性的。hash算法是不保证平衡的，如上面只部署了NODE1和NODE3的情况（NODE2被删除的图），object1存储到了NODE1中，而object2、object3、object4都存储到了NODE3中，这样就照成了非常不平衡的状态。在一致性哈希算法中，为了尽可能的满足平衡性，其引入了虚拟节点。</p><blockquote><p>——“虚拟节点”（ virtual node ）是实际节点（机器）在 hash 空间的复制品（ replica ），一实际个节点（机器）对应了若干个“虚拟节点”，这个对应个数也成为“复制个数”，“虚拟节点”在 hash 空间中以hash值排列。</p></blockquote><p>以上面只部署了NODE1和NODE3的情况（NODE2被删除的图）为例，之前的对象在机器上的分布很不均衡，现在我们以2个副本（复制个数）为例，这样整个hash环中就存在了4个虚拟节点，最后对象映射的关系图如下：</p><p><img src="http://img.blog.csdn.net/20140411001433375?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY3l3b3Nw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="image"></p><p>根据上图可知对象的映射关系：<code>object1-&gt;NODE1-1</code>，<code>object2-&gt;NODE1-2</code>，<code>object3-&gt;NODE3-2</code>，<code>object4-&gt;NODE3-1</code>。通过虚拟节点的引入，对象的分布就比较均衡了。那么在实际操作中，正真的对象查询是如何工作的呢？对象从hash到虚拟节点到实际节点的转换如下图：</p><p><img src="http://img.blog.csdn.net/20140411001540656?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY3l3b3Nw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="image"></p><p><code>虚拟节点</code>的hash计算可以采用对应节点的IP地址加数字后缀的方式。例如假设NODE1的IP地址为192.168.1.100。引入“虚拟节点”前，计算 cache A 的 hash 值：<br><code>Hash(“192.168.1.100”)</code>;<br>引入“虚拟节点”后，计算“虚拟节”点NODE1-1和NODE1-2的hash值：<br><code>Hash(“192.168.1.100#1”); // NODE1-1</code><br><code>Hash(“192.168.1.100#2”); // NODE1-2</code></p><p><strong>文章转载 <a rel="external nofollow noopener noreferrer" target="_blank" href="http://blog.csdn.net/cywosp/article/details/23397179">每天进步一点点——五分钟理解一致性哈希算法(consistent hashing)</a></strong></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 哈希算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 8 Optional类的分析与使用]]></title>
      <url>/java-optional.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><p><code>Optional</code> 类 是<code>jdk 1.8</code>后新添加的特性，阿里巴巴的代码规范也明确说明了使用 Optional 来防止NPE。</p><blockquote><p>Optional 类是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。<br>Optional 是个容器：它可以保存类型T的值，或者仅仅保存null。Optional提供很多有用的方法，这样我们就不用显式进行空值检测。<br>Optional 类的引入很好的解决空指针异常。</p></blockquote><a id="more"></a><p>它拥有的方法：<br><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fmwxaeo6upj20f60g5ab9.jpg" alt="image"></p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @since 1.8</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Optional</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Common instance for &#123;<span class="doctag">@code</span> empty()&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Optional&lt;?&gt; EMPTY = <span class="keyword">new</span> Optional&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * If non-null, the value; if null, indicates no value is present</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> T value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>value 属性就是存储数据的地方。如果为null，表示没有值的存在，取值的时候如果没有默认值，会抛出空指针。</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>它拥有两个构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs an empty instance.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@implNote</span> Generally only one empty instance, &#123;<span class="doctag">@link</span> Optional#EMPTY&#125;,</span></span><br><span class="line"><span class="comment"> * should exist per VM.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Optional</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs an instance with the value present.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value the non-null value to be present</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if value is null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Optional</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = Objects.requireNonNull(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第一个构造一个空的Optional；</li><li>第二个构造一个值为value的Optional，值为null会抛出NPE；</li></ul><h4 id="of"><a href="#of" class="headerlink" title="of"></a>of</h4><blockquote><p>为非null的值创建一个Optional。</p></blockquote><p>of方法通过工厂方法创建Optional类。需要注意的是，创建对象时传入的参数不能为null。如果传入参数为null，则抛出NullPointerException。<br>源码：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Optional&lt;T&gt; <span class="title">of</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Optional&lt;&gt;(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>可以看出它最后调用的是第二个有参的构造函数，所以它传入的参数也为null会抛出空指针。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;String&gt; spring = Optional.of(<span class="string">"SPRING"</span>);</span><br><span class="line">Optional&lt;String&gt; emptyStr = Optional.of(<span class="string">""</span>);</span><br><span class="line">Optional&lt;String&gt; nullValue = Optional.of(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p>最后个创建Optional实例会抛出空指针异常。</p><h4 id="ofNullable"><a href="#ofNullable" class="headerlink" title="ofNullable"></a>ofNullable</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns an &#123;<span class="doctag">@code</span> Optional&#125; describing the specified value, if non-null,</span></span><br><span class="line"><span class="comment"> * otherwise returns an empty &#123;<span class="doctag">@code</span> Optional&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; the class of the value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value the possibly-null value to describe</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> an &#123;<span class="doctag">@code</span> Optional&#125; with a present value if the specified value</span></span><br><span class="line"><span class="comment"> * is non-null, otherwise an empty &#123;<span class="doctag">@code</span> Optional&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Optional&lt;T&gt; <span class="title">ofNullable</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value == <span class="keyword">null</span> ? empty() : of(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为指定的值创建一个Optional，如果指定的值为null，则返回一个空的Optional。<br>相比较of 方法，能够接受 null 参数。</p><h4 id="isPresent"><a href="#isPresent" class="headerlink" title="isPresent"></a>isPresent</h4><p>判断值是否存在。值不为null，返回true。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPresent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value != <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4><p>取出存在Optional 中的值，为Null 抛出<code>NoSuchElementException</code>异常<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">"No value present"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id="ifPresent"><a href="#ifPresent" class="headerlink" title="ifPresent"></a>ifPresent</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * If a value is present, invoke the specified consumer with the value,</span></span><br><span class="line"><span class="comment"> * otherwise do nothing.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> consumer block to be executed if a value is present</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if value is present and &#123;<span class="doctag">@code</span> consumer&#125; is</span></span><br><span class="line"><span class="comment"> * null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ifPresent</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; consumer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value != <span class="keyword">null</span>)</span><br><span class="line">        consumer.accept(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对传入的值使用<code>Consumer</code>接口的accept方法进行处理，<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Performs this operation on the given argument.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> t the input argument</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span></span>;</span><br></pre></td></tr></table></figure><p></p><p>实际上就是可以使用函数式编程了，使用lambda表达式方法了，前提是<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.ifPresent(a -&gt; System.out.println(a.indexOf(&quot;I&quot;)));</span><br></pre></td></tr></table></figure><p></p><p>结果为 <code>3</code>。</p><h4 id="orElse"><a href="#orElse" class="headerlink" title="orElse"></a>orElse</h4><p>如果有值则将其返回，否则返回指定的其它值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.printf(<span class="string">"有值的Optional: %s，没值的Optional：%s%n"</span>,</span><br><span class="line">                spring.orElse(<span class="string">"summer"</span>), nullValue.orElse(<span class="string">"summer"</span>));</span><br></pre></td></tr></table></figure><p>打印结果：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">有值的Optional: SPRING，没值的Optional：summer</span><br></pre></td></tr></table></figure><p></p><h4 id="orElseGet"><a href="#orElseGet" class="headerlink" title="orElseGet"></a>orElseGet</h4><p>orElseGet与orElse方法类似，区别在于得到的默认值。orElse方法将传入的字符串作为默认值，orElseGet方法可以接受Supplier接口的实现用来生成默认值，由于参数是接口形式，直接使用lambda表达式，更方便。<br>能接收函数式返回处理的数据。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.printf(<span class="string">"有值的Optional: %s，没值的Optional：%s%n"</span>,</span><br><span class="line">                spring.orElseGet(() -&gt; <span class="string">"summer"</span>),</span><br><span class="line">                nullValue.orElseGet(() -&gt; <span class="string">"summer"</span>));</span><br></pre></td></tr></table></figure><p></p><p>输出：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">有值的Optional: SPRING，没值的Optional：summer</span><br></pre></td></tr></table></figure><p></p><h4 id="orElseThrow"><a href="#orElseThrow" class="headerlink" title="orElseThrow"></a>orElseThrow</h4><p>如果有值则将其返回，否则抛出supplier接口创建的异常。<br>在上面的 orElseGet 方法中，传入的是Supplier接口的实现，在orElseThrow中传入一个Throwable ，如果值不存在来抛出传入的指定类型异常，源码：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;X extends Throwable&gt; <span class="function">T <span class="title">orElseThrow</span><span class="params">(Supplier&lt;? extends X&gt; exceptionSupplier)</span> <span class="keyword">throws</span> X </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> exceptionSupplier.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>使用方法：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">//orElseThrow</span></span><br><span class="line">        System.out.printf(<span class="string">"orElseThrow有值的Optional: %s，没值的Optional：%s%n"</span>,</span><br><span class="line">                spring.orElseThrow(OptionalThrowable::<span class="keyword">new</span>),</span><br><span class="line">                nullValue.orElseThrow(OptionalThrowable::<span class="keyword">new</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义的Optional异常类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OptionalThrowable</span> <span class="keyword">extends</span> <span class="title">Throwable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OptionalThrowable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OptionalThrowable</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//return super.getMessage();</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"这个Optional 是空值"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>结果符合预期错误抛出结果：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">有值的Optional: SPRING，没值的Optional：summer</span><br><span class="line">Exception in thread &quot;main&quot; com.wuwii.utils.OptionalThrowable: 这个Optional 是空值</span><br><span class="line">	at java.util.Optional.orElseThrow(Optional.java:290)</span><br><span class="line">	at com.wuwii.utils.OptionalTest.main(OptionalTest.java:28)</span><br></pre></td></tr></table></figure><p></p><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><blockquote><p>如果有值，则对其执行调用mapping函数得到返回值。如果返回值不为null，则创建包含mapping返回值的Optional作为map方法返回值，否则返回空Optional。</p></blockquote><p>map就是stream中的方法一样的，是用来操作的，用来对Optional实例的值执行一系列操作，所以我们可以灵活的使用Function包的方法和lamdba表达式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//map</span></span><br><span class="line">        Optional&lt;String&gt; castedOptional = spring.map(String::toLowerCase);</span><br><span class="line">        System.out.printf(<span class="string">"转换过后的值：%s%n"</span>, castedOptional.orElseGet(<span class="keyword">null</span>));</span><br></pre></td></tr></table></figure><p>输出结果：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">转换过后的值：spring</span><br></pre></td></tr></table></figure><p></p><p>可以看出转换成小写的了。</p><h4 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h4><blockquote><p>如果有值，为其执行mapping函数返回Optional类型返回值，否则返回空Optional。flatMap与map（Funtion）方法类似，区别在于flatMap中的mapper返回值必须是Optional。调用结束时，flatMap不会对结果用Optional封装。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//flatMap</span></span><br><span class="line">        Optional&lt;String&gt; upperOptional = castedOptional.flatMap(a -&gt; Optional.of(a.toUpperCase()));</span><br><span class="line">        System.out.printf(<span class="string">"将上面小写的castedOptional 转换成大写：%s%n"</span>, upperOptional.orElseGet(<span class="keyword">null</span>));</span><br></pre></td></tr></table></figure><p>输出结果：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将上面小写的castedOptional 转换成大写：SPRING</span><br></pre></td></tr></table></figure><p></p><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><blockquote><p>如果有值并且满足断言条件返回包含该值的Optional，否则返回空Optional。</p></blockquote><p>过滤，对于filter函数我们应该传入实现了Predicate接口的lambda表达式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/filter</span><br><span class="line">        <span class="comment">//过滤掉长度不大于10的，SPRING长度小于10，故此被过滤了</span></span><br><span class="line">        Optional&lt;String&gt; filterOptional = upperOptional.filter(a -&gt; a.length() &gt; <span class="number">10</span>);</span><br><span class="line">        System.out.printf(<span class="string">"过滤掉长度不大于10的 ：%s%n"</span>, filterOptional.orElse(<span class="string">"Default value"</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出结果：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">过滤掉长度不大于10的结果 ：Default value</span><br></pre></td></tr></table></figure><p></p><h3 id="学习的所有代码"><a href="#学习的所有代码" class="headerlink" title="学习的所有代码"></a>学习的所有代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuwii.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 学习Optional</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Zhang Kai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> : 2017/11/12 20:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OptionalTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//of</span></span><br><span class="line">        Optional&lt;String&gt; spring = Optional.of(<span class="string">"SPRING"</span>);</span><br><span class="line">        Optional&lt;String&gt; emptyStr = Optional.of(<span class="string">""</span>);</span><br><span class="line">		<span class="comment">//会抛出异常NPE</span></span><br><span class="line">        <span class="comment">//Optional&lt;String&gt; nullValue1 = Optional.of(null); </span></span><br><span class="line">		<span class="comment">//不会抛异常，做了判断</span></span><br><span class="line">        Optional&lt;String&gt; nullValue = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//ifPresent</span></span><br><span class="line">        spring.ifPresent(a -&gt; System.out.println(a.indexOf(<span class="string">"I"</span>)));</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//orElse</span></span><br><span class="line">        System.out.printf(<span class="string">"orElse有值的Optional: %s，没值的Optional：%s%n"</span>,</span><br><span class="line">                spring.orElse(<span class="string">"summer"</span>), nullValue.orElse(<span class="string">"summer"</span>));</span><br><span class="line">				</span><br><span class="line">        <span class="comment">//orElseGet</span></span><br><span class="line">        System.out.printf(<span class="string">"orElseGet有值的Optional: %s，没值的Optional：%s%n"</span>,</span><br><span class="line">                spring.orElseGet(() -&gt; <span class="string">"summer"</span>),</span><br><span class="line">                nullValue.orElseGet(() -&gt; <span class="string">"summer"</span>));</span><br><span class="line">				</span><br><span class="line">        <span class="comment">//orElseThrow</span></span><br><span class="line">		<span class="comment">// 这段代码会抛出异常，为了下面能运行，先注释。</span></span><br><span class="line">        <span class="comment">/*try &#123;</span></span><br><span class="line"><span class="comment">            System.out.printf("orElseThrow有值的Optional: %s，没值的Optional：%s%n",</span></span><br><span class="line"><span class="comment">                    spring.orElseThrow(OptionalThrowable::new),</span></span><br><span class="line"><span class="comment">                    nullValue.orElseThrow(OptionalThrowable::new));</span></span><br><span class="line"><span class="comment">        &#125; catch (OptionalThrowable optionalThrowable) &#123;</span></span><br><span class="line"><span class="comment">            optionalThrowable.printStackTrace();</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//map</span></span><br><span class="line">        Optional&lt;String&gt; castedOptional = spring.map(String::toLowerCase);</span><br><span class="line">        System.out.printf(<span class="string">"转换成小写的值：%s%n"</span>, castedOptional.orElseGet(<span class="keyword">null</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//flatMap</span></span><br><span class="line">        Optional&lt;String&gt; upperOptional = castedOptional.flatMap(a -&gt; Optional.of(a.toUpperCase()));</span><br><span class="line">        System.out.printf(<span class="string">"将上面小写的castedOptional 转换成大写：%s%n"</span>, upperOptional.orElseGet(<span class="keyword">null</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//filter</span></span><br><span class="line">        <span class="comment">//过滤掉长度不大于10的，SPRING长度小于10，故此被过滤了</span></span><br><span class="line">        Optional&lt;String&gt; filterOptional = upperOptional.filter(a -&gt; a.length() &gt; <span class="number">10</span>);</span><br><span class="line">        System.out.printf(<span class="string">"过滤掉长度不大于10的结果 ：%s%n"</span>, filterOptional.orElse(<span class="string">"Default value"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义的Optional异常类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OptionalThrowable</span> <span class="keyword">extends</span> <span class="title">Throwable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OptionalThrowable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OptionalThrowable</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//return super.getMessage();</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"这个Optional 是空值"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JPA多表查询的解决办法]]></title>
      <url>/jpa-query-muti.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><p>实际业务中，多表关联查询应用实例很多，怎么使用JPA进行多表查询，可以选择不同的方法优化。<br>记下在JPA中多表查询的有效使用方法。<br><a id="more"></a></p><h3 id="使用关系映射"><a href="#使用关系映射" class="headerlink" title="使用关系映射"></a>使用关系映射</h3><p>就是使用一对多，多对一，一对一这种关系进行关联映射，</p><p>一个一对多迭代Tree的例子：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据组织取得实时轨迹Tree的业务类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/11/9 15:21&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"\"DEV_ORGANIZE\""</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrganizeMappedEntity</span> <span class="keyword">extends</span> <span class="title">BaseEntity</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 名称，为了前面取出数据的key一致性，换个名称。</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"\"NAME\""</span>)</span><br><span class="line">    <span class="keyword">private</span> String no;</span><br><span class="line">    <span class="comment">// 父组织外键</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"\"PARENTID\""</span>)</span><br><span class="line">    <span class="keyword">private</span> String parentid;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToMany</span>(targetEntity = OrganizeMappedEntity.class,</span><br><span class="line">            mappedBy = <span class="string">"parentid"</span>, cascade = &#123;CascadeType.ALL&#125;, fetch = FetchType.EAGER)</span><br><span class="line">    <span class="keyword">private</span> List children;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNo</span><span class="params">(String no)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.no = no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getParentid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> parentid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParentid</span><span class="params">(String parentid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parentid = parentid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">getChildren</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> children;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChildren</span><span class="params">(List children)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.children = children;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>平常使用这种方法最多了，因为方便，少写代码，但是平时不一定需要查询所有，而且在数据比较多的情况下，开销比较大，就得使用下面第二种方法。</p><h3 id="使用JPQL多表查询"><a href="#使用JPQL多表查询" class="headerlink" title="使用JPQL多表查询"></a>使用JPQL多表查询</h3><p><code>JPQL</code>全称<code>Java Presistence Query Language</code>，Java持久化查询语言。和Hibernate的HQL语句差不多。</p><p>现在测试下，从A表和B表各取出一个字段吧。<br>创建一个业务实体DTO：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//学习学习</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestEntity</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">        <span class="comment">//A表字段No</span></span><br><span class="line">	<span class="keyword">private</span> String no;</span><br><span class="line">	<span class="comment">//B表字段tel</span></span><br><span class="line">	<span class="keyword">private</span> String tel;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> Long num;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span>  <span class="title">TestEntity</span><span class="params">(Long num)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.num = num;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> num;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum</span><span class="params">(Long num)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.num = num;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TestEntity</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">//通过构造函数注入值</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TestEntity</span> <span class="params">(String no, String tel)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">this</span>.no = no;</span><br><span class="line">    	<span class="keyword">this</span>.tel = tel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getSerialversionuid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> serialVersionUID;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getNo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> no;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNo</span><span class="params">(String no)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.no = no;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getTel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> tel;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTel</span><span class="params">(String tel)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.tel = tel;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//重写写，</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"TestEntity&#123;"</span> +</span><br><span class="line">				<span class="string">"no='"</span> + no + <span class="string">'\''</span> +</span><br><span class="line">				<span class="string">", tel='"</span> + tel + <span class="string">'\''</span> +</span><br><span class="line">				<span class="string">", num="</span> + num +</span><br><span class="line">				<span class="string">'&#125;'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这样可以使用业务实体类的构造函数就行绑定数据了。</p><p>Dao层查询数据库的JPQL语句：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.devframe.database.BasePagingAndSortingRepository;</span><br><span class="line"><span class="keyword">import</span> com.devframe.entity.DeviceEntity;</span><br><span class="line"><span class="keyword">import</span> com.devframe.entity.TestEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.Query;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeviceDao</span> <span class="keyword">extends</span> <span class="title">PagingAndSortingRepository</span>&lt;<span class="title">DeviceEntity</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 只为学习。。。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> List&lt;TestEntity&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">	<span class="meta">@Query</span>(value = <span class="string">"SELECT new com.devframe.entity.TestEntity(a.no, b.tel) FROM com.devframe.entity.DeviceEntity a, com.devframe.entity.OrganizeEntity b WHERE a.orgid = b.id"</span>)</span><br><span class="line">	<span class="function">List&lt;TestEntity&gt; <span class="title">gettest</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>使用join查询出两个表相关联的所有列。</p><p>单元测试：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.devframe.dao.DeviceDao;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/11/9 17:40&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(locations = &#123;<span class="string">"classpath:spring/applicationContext-base.xml"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeviceDaoTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DeviceDao dao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGettest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(dao.gettest());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>数据有点多<br></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TestEntity&#123;no='N57008', tel='null', num=null&#125;, TestEntity&#123;no='N33505', tel='null', num=null&#125;, TestEntity&#123;no='N88001', tel='null', num=null&#125;,省略...</span><br></pre></td></tr></table></figure><p></p><h3 id="使用Map转换"><a href="#使用Map转换" class="headerlink" title="使用Map转换"></a>使用Map转换</h3><p>JPA 提供查询结果的转换的方法，它提供一种使用SQL查询结果的列明作为键值，查询出来的Map结果转换成<code>JSONArray</code>或者<code>JSONObject</code>，再返回给客户端就可以了。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JSONArray <span class="title">mapBySql</span><span class="params">(String sql)</span> </span>&#123;</span><br><span class="line">    EntityManager em = emf.createEntityManager();</span><br><span class="line">    Query query = em.createNativeQuery(sql);</span><br><span class="line">    <span class="comment">// 注意这一行设置返回格式为查询结果的列名，并且大小写也是保持一致的，如果业务需要的键值即列名和数据库存储的有差别，查询SQL中重新使用 &#123;as&#125; 重新设置列名即可。</span></span><br><span class="line">    query.unwrap(SQLQuery.class).setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP);</span><br><span class="line">    <span class="keyword">return</span> (JSONArray) JSONArray.toJSON(mapBySql(query.getResultList()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>如果没有特殊要求的话也推荐使用这种，开发起来方便很多，如果不想直接返回数据，也可以将查询出来的LIst转换下，迭代取出MAP里的键值对，就是实体类的属性值，进行处理。<br>需要注意的是，在Hibernate3.2版本上才有这个方法，具体JPA哪个版本没仔细查。</p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> jpa </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java多线程中Lock]]></title>
      <url>/java-lock.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><p>如果一个代码块被synchronized修饰了，当一个线程获取了对应的锁，并执行该代码块时，其他线程便只能一直等待，等待获取锁的线程释放锁，而这里获取锁的线程释放锁只会有两种情况：</p><ol><li>获取锁的线程执行完了该代码块，然后线程释放对锁的占有；</li><li>线程执行发生异常，此时JVM会让线程自动释放锁。</li></ol><a id="more"></a><p>那么如果这个获取锁的线程由于要等待IO或者其他原因（比如调用sleep方法）被阻塞了，但是又没有释放锁，其他线程便只能干巴巴地等待，试想一下，这多么影响程序执行效率。</p><p>因此就需要有一种机制可以不让等待的线程一直无期限地等待下去（比如只等待一定的时间或者能够响应中断），通过Lock就可以办到。</p><p>再举个例子：当有多个线程读写文件时，读操作和写操作会发生冲突现象，写操作和写操作会发生冲突现象，但是读操作和读操作不会发生冲突现象。</p><p>但是采用synchronized关键字来实现同步的话，就会导致一个问题：</p><p>如果多个线程都只是进行读操作，所以当一个线程在进行读操作时，其他线程只能等待无法进行读操作。</p><p>因此就需要一种机制来使得多个线程都只是进行读操作时，线程之间不会发生冲突，通过Lock就可以办到。</p><p>另外，通过Lock可以知道线程有没有成功获取到锁。这个是synchronized无法办到的。</p><p>总结一下，也就是说Lock提供了比synchronized更多的功能。但是要注意以下几点：</p><ol><li>Lock不是Java语言内置的，synchronized是Java语言的关键字，因此是内置特性。Lock是一个类，通过这个类可以实现同步访问；</li><li>Lock和synchronized有一点非常大的不同，采用synchronized不需要用户去手动释放锁，当synchronized方法或者synchronized代码块执行完之后，系统会自动让线程释放对锁的占用；而Lock则必须要用户去手动释放锁，如果没有主动释放锁，就有可能导致出现死锁现象。</li></ol><h3 id="java-util-concurrent-locks包下常用的类"><a href="#java-util-concurrent-locks包下常用的类" class="headerlink" title="java.util.concurrent.locks包下常用的类"></a>java.util.concurrent.locks包下常用的类</h3><p>java.util.concurrent.locks包中常用的类和接口。</p><h4 id="Lock接口"><a href="#Lock接口" class="headerlink" title="Lock接口"></a>Lock接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@since</span> <span class="number">1.5</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Condition <span class="title">newCondition</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面来逐个讲述Lock接口中每个方法的使用，lock()、tryLock()、tryLock(long time, TimeUnit unit)和lockInterruptibly()是用来获取锁的。unLock()方法是用来释放锁的。newCondition()这个方法暂且不在此讲述，会在后面的线程协作一文中讲述。</p><p>在Lock中声明了四个方法来获取锁，那么这四个方法有何区别呢？</p><h5 id="lock"><a href="#lock" class="headerlink" title="lock"></a>lock</h5><p>首先lock()方法是平常使用得最多的一个方法，就是用来获取锁。如果锁已被其他线程获取，则进行等待。</p><p>由于在前面讲到如果采用Lock，必须主动去释放锁，并且在发生异常时，不会自动释放锁。因此一般来说，使用Lock必须在try{}catch{}块中进行，并且将释放锁的操作放在finally块中进行，以保证锁一定被被释放，防止死锁的发生。通常使用Lock来进行同步的话，是以下面这种形式去使用的：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Lock lock = ...;</span><br><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//处理任务</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">     </span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    lock.unlock();   <span class="comment">//释放锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h5 id="tryLock"><a href="#tryLock" class="headerlink" title="tryLock"></a>tryLock</h5><p>tryLock()方法是有返回值的，它表示用来尝试获取锁，如果获取成功，则返回true，如果获取失败（即锁已被其他线程获取），则返回false，也就说这个方法无论如何都会立即返回。在拿不到锁时不会一直在那等待。</p><p>tryLock(long time, TimeUnit unit)方法和tryLock()方法是类似的，只不过区别在于这个方法在拿不到锁时会等待一定的时间，在时间期限之内如果还拿不到锁，就返回false。如果如果一开始拿到锁或者在等待期间内拿到了锁，则返回true。</p><p>所以，一般情况下通过tryLock来获取锁时是这样使用的：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Lock lock = ...;</span><br><span class="line"><span class="keyword">if</span>(lock.tryLock()) &#123;</span><br><span class="line">     <span class="keyword">try</span>&#123;</span><br><span class="line">         <span class="comment">//处理任务</span></span><br><span class="line">     &#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">         </span><br><span class="line">     &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">         lock.unlock();   <span class="comment">//释放锁</span></span><br><span class="line">     &#125; </span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//如果不能获取锁，则直接做其他事情</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h5 id="lockInterruptibly"><a href="#lockInterruptibly" class="headerlink" title="lockInterruptibly"></a>lockInterruptibly</h5><p>lockInterruptibly()方法比较特殊，当通过这个方法去获取锁时，如果线程正在等待获取锁，则这个线程能够响应中断，即中断线程的等待状态。也就使说，当两个线程同时通过lock.lockInterruptibly()想获取某个锁时，假若此时线程A获取到了锁，而线程B只有在等待，那么对线程B调用threadB.interrupt()方法能够中断线程B的等待过程。</p><p>由于lockInterruptibly()的声明中抛出了异常，所以lock.lockInterruptibly()必须放在try块中或者在调用lockInterruptibly()的方法外声明抛出InterruptedException。</p><p>因此lockInterruptibly()一般的使用形式如下：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    lock.lockInterruptibly();</span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">     <span class="comment">//.....</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id="ReentrantLock类"><a href="#ReentrantLock类" class="headerlink" title="ReentrantLock类"></a>ReentrantLock类</h4><p>ReentrantLock，意思是“可重入锁”。ReentrantLock是唯一实现了Lock接口的类，并且ReentrantLock提供了更多的方法。下面通过一些实例看具体看一下如何使用ReentrantLock。</p><h5 id="例子1，lock-的正确使用方法"><a href="#例子1，lock-的正确使用方法" class="headerlink" title="例子1，lock()的正确使用方法:"></a>例子1，lock()的正确使用方法:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Test test = <span class="keyword">new</span> Test();</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                test.insert(Thread.currentThread());</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;.start();</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                test.insert(Thread.currentThread());</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;  </span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Thread thread)</span> </span>&#123;</span><br><span class="line">        Lock lock = <span class="keyword">new</span> ReentrantLock();    <span class="comment">//注意这个地方</span></span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(thread.getName()+<span class="string">"得到了锁"</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++) &#123;</span><br><span class="line">                arrayList.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(thread.getName()+<span class="string">"释放了锁"</span>);</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果是什么:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Thread-0得到了锁</span><br><span class="line">Thread-1得到了锁</span><br><span class="line">Thread-0释放了锁</span><br><span class="line">Thread-1释放了锁</span><br></pre></td></tr></table></figure><p></p><p>也许有朋友会问，怎么会输出这个结果？第二个线程怎么会在第一个线程释放锁之前得到了锁？原因在于，在insert方法中的lock变量是局部变量，每个线程执行该方法时都会保存一个副本，那么理所当然每个线程执行到lock.lock()处获取的是不同的锁，所以就不会发生冲突。</p><p>知道了原因改起来就比较容易了，只需要将lock声明为类的属性即可。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();    <span class="comment">//注意这个地方</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Test test = <span class="keyword">new</span> Test();</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                test.insert(Thread.currentThread());</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;.start();</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                test.insert(Thread.currentThread());</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;  </span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Thread thread)</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(thread.getName()+<span class="string">"得到了锁"</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++) &#123;</span><br><span class="line">                arrayList.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(thread.getName()+<span class="string">"释放了锁"</span>);</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h5 id="例子2，tryLock-的使用方法"><a href="#例子2，tryLock-的使用方法" class="headerlink" title="例子2，tryLock()的使用方法"></a>例子2，tryLock()的使用方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();    <span class="comment">//注意这个地方</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Test test = <span class="keyword">new</span> Test();</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                test.insert(Thread.currentThread());</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;.start();</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                test.insert(Thread.currentThread());</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;  </span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Thread thread)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(lock.tryLock()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(thread.getName()+<span class="string">"得到了锁"</span>);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++) &#123;</span><br><span class="line">                    arrayList.add(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                System.out.println(thread.getName()+<span class="string">"释放了锁"</span>);</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(thread.getName()+<span class="string">"获取锁失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Thread-0得到了锁</span><br><span class="line">Thread-1获取锁失败</span><br><span class="line">Thread-0释放了锁</span><br></pre></td></tr></table></figure><p></p><h5 id="例子3，lockInterruptibly"><a href="#例子3，lockInterruptibly" class="headerlink" title="例子3，lockInterruptibly()"></a>例子3，lockInterruptibly()</h5><p>响应中断的使用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        MyThread thread1 = <span class="keyword">new</span> MyThread(test);</span><br><span class="line">        MyThread thread2 = <span class="keyword">new</span> MyThread(test);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        thread2.interrupt();</span><br><span class="line">    &#125;  </span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Thread thread)</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line">        lock.lockInterruptibly();   <span class="comment">//注意，如果需要正确中断等待锁的线程，必须将获取锁放在外面，然后将InterruptedException抛出</span></span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            System.out.println(thread.getName()+<span class="string">"得到了锁"</span>);</span><br><span class="line">            <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">            <span class="keyword">for</span>(    ;     ;) &#123;</span><br><span class="line">                <span class="keyword">if</span>(System.currentTimeMillis() - startTime &gt;= Integer.MAX_VALUE)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">//插入数据</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"执行finally"</span>);</span><br><span class="line">            lock.unlock();</span><br><span class="line">            System.out.println(thread.getName()+<span class="string">"释放了锁"</span>);</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Test test = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(Test test)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.test = test;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            test.insert(Thread.currentThread());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"被中断"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行之后，发现thread2能够被正确中断。</p><h4 id="ReadWriteLock"><a href="#ReadWriteLock" class="headerlink" title="ReadWriteLock"></a>ReadWriteLock</h4><p>ReadWriteLock也是一个接口，在它里面只定义了两个方法：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ReadWriteLock</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the lock used for reading.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the lock used for reading.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Lock <span class="title">readLock</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the lock used for writing.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the lock used for writing.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Lock <span class="title">writeLock</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>一个用来获取读锁，一个用来获取写锁。也就是说将文件的读写操作分开，分成2个锁来分配给线程，从而使得多个线程可以同时进行读操作。下面的ReentrantReadWriteLock实现了ReadWriteLock接口。</p><h4 id="ReentrantReadWriteLock"><a href="#ReentrantReadWriteLock" class="headerlink" title="ReentrantReadWriteLock"></a>ReentrantReadWriteLock</h4><p>ReentrantReadWriteLock里面提供了很多丰富的方法，不过最主要的有两个方法：readLock()和writeLock()用来获取读锁和写锁。</p><p>下面通过几个例子来看一下ReentrantReadWriteLock具体用法。</p><p>假如有多个线程要同时进行读操作的话，先看一下synchronized达到的效果：</p><h5 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ReentrantReadWriteLock rwl = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Test test = <span class="keyword">new</span> Test();</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                test.get(Thread.currentThread());</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;.start();</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                test.get(Thread.currentThread());</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;.start();</span><br><span class="line">         </span><br><span class="line">    &#125;  </span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(Thread thread)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">while</span>(System.currentTimeMillis() - start &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(thread.getName()+<span class="string">"正在进行读操作"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(thread.getName()+<span class="string">"读操作完毕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段程序的输出结果会是，直到thread1执行完读操作之后，才会打印thread2执行读操作的信息。</p><h5 id="改成用读写锁"><a href="#改成用读写锁" class="headerlink" title="改成用读写锁"></a>改成用读写锁</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ReentrantReadWriteLock rwl = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Test test = <span class="keyword">new</span> Test();</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                test.get(Thread.currentThread());</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;.start();</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                test.get(Thread.currentThread());</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;.start();</span><br><span class="line">         </span><br><span class="line">    &#125;  </span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(Thread thread)</span> </span>&#123;</span><br><span class="line">        rwl.readLock().lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">             </span><br><span class="line">            <span class="keyword">while</span>(System.currentTimeMillis() - start &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println(thread.getName()+<span class="string">"正在进行读操作"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(thread.getName()+<span class="string">"读操作完毕"</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            rwl.readLock().unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">Thread-0正在进行读操作</span><br><span class="line">Thread-0正在进行读操作</span><br><span class="line">Thread-1正在进行读操作</span><br><span class="line">Thread-0正在进行读操作</span><br><span class="line">Thread-1正在进行读操作</span><br><span class="line">Thread-0正在进行读操作</span><br><span class="line">Thread-1正在进行读操作</span><br><span class="line">Thread-1正在进行读操作</span><br><span class="line">Thread-1正在进行读操作</span><br><span class="line">Thread-1正在进行读操作</span><br><span class="line">Thread-1正在进行读操作</span><br><span class="line">Thread-1正在进行读操作</span><br><span class="line">Thread-0正在进行读操作</span><br><span class="line">Thread-0正在进行读操作</span><br><span class="line">Thread-0正在进行读操作</span><br><span class="line">Thread-0正在进行读操作</span><br><span class="line">Thread-1正在进行读操作</span><br><span class="line">Thread-1正在进行读操作</span><br><span class="line">Thread-1正在进行读操作</span><br><span class="line">Thread-1正在进行读操作</span><br><span class="line">Thread-0正在进行读操作</span><br><span class="line">Thread-1正在进行读操作</span><br><span class="line">Thread-1正在进行读操作</span><br><span class="line">Thread-0正在进行读操作</span><br><span class="line">Thread-1正在进行读操作</span><br><span class="line">Thread-1正在进行读操作</span><br><span class="line">Thread-0正在进行读操作</span><br><span class="line">Thread-1正在进行读操作</span><br><span class="line">Thread-1正在进行读操作</span><br><span class="line">Thread-1正在进行读操作</span><br><span class="line">Thread-0正在进行读操作</span><br><span class="line">Thread-1正在进行读操作</span><br><span class="line">Thread-1正在进行读操作</span><br><span class="line">Thread-0正在进行读操作</span><br><span class="line">Thread-1正在进行读操作</span><br><span class="line">Thread-0正在进行读操作</span><br><span class="line">Thread-1正在进行读操作</span><br><span class="line">Thread-0正在进行读操作</span><br><span class="line">Thread-1正在进行读操作</span><br><span class="line">Thread-0正在进行读操作</span><br><span class="line">Thread-1正在进行读操作</span><br><span class="line">Thread-0正在进行读操作</span><br><span class="line">Thread-1正在进行读操作</span><br><span class="line">Thread-0正在进行读操作</span><br><span class="line">Thread-1正在进行读操作</span><br><span class="line">Thread-0正在进行读操作</span><br><span class="line">Thread-1正在进行读操作</span><br><span class="line">Thread-0读操作完毕</span><br><span class="line">Thread-1读操作完毕</span><br></pre></td></tr></table></figure><p></p><p>说明thread1和thread2在同时进行读操作。</p><p>这样就大大提升了读操作的效率。</p><p>不过要注意的是，<strong>如果有一个线程已经占用了读锁，则此时其他线程如果要申请写锁，则申请写锁的线程会一直等待释放读锁。</strong></p><p><strong>如果有一个线程已经占用了写锁，则此时其他线程如果申请写锁或者读锁，则申请的线程会一直等待释放写锁。</strong></p><p>关于ReentrantReadWriteLock类中的其他方法感兴趣的朋友可以自行查阅API文档。</p><h4 id="Lock和synchronized的选择"><a href="#Lock和synchronized的选择" class="headerlink" title="Lock和synchronized的选择"></a>Lock和synchronized的选择</h4><p>总结来说，Lock和synchronized有以下几点不同：</p><p>1）Lock是一个接口，而synchronized是Java中的关键字，synchronized是内置的语言实现；</p><p>2）synchronized在发生异常时，会自动释放线程占有的锁，因此不会导致死锁现象发生；而Lock在发生异常时，如果没有主动通过unLock()去释放锁，则很可能造成死锁现象，因此使用Lock时需要在finally块中释放锁；</p><p>3）Lock可以让等待锁的线程响应中断，而synchronized却不行，使用synchronized时，等待的线程会一直等待下去，不能够响应中断；</p><p>4）通过Lock可以知道有没有成功获取锁，而synchronized却无法办到。</p><p>5）Lock可以提高多个线程进行读操作的效率。</p><p>在性能上来说，如果竞争资源不激烈，两者的性能是差不多的，而当竞争资源非常激烈时（即有大量线程同时竞争），此时Lock的性能要远远优于synchronized。所以说，在具体使用时要根据适当情况选择。</p><h3 id="锁的相关概念介绍"><a href="#锁的相关概念介绍" class="headerlink" title="锁的相关概念介绍"></a>锁的相关概念介绍</h3><h4 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h4><p>如果锁具备可重入性，则称作为可重入锁。像synchronized和ReentrantLock都是可重入锁，可重入性在我看来实际上表明了锁的分配机制：基于线程的分配，而不是基于方法调用的分配。举个简单的例子，当一个线程执行到某个synchronized方法时，比如说method1，而在method1中会调用另外一个synchronized方法method2，此时线程不必重新去申请锁，而是可以直接执行方法method2。</p><p>看下面这段代码就明白了：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        method2();</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上述代码中的两个方法method1和method2都用synchronized修饰了，假如某一时刻，线程A执行到了method1，此时线程A获取了这个对象的锁，而由于method2也是synchronized方法，假如synchronized不具备可重入性，此时线程A需要重新申请锁。但是这就会造成一个问题，因为线程A已经持有了该对象的锁，而又在申请获取该对象的锁，这样就会线程A一直等待永远不会获取到的锁。</p><p>而由于synchronized和Lock都具备可重入性，所以不会发生上述现象。</p><h4 id="可中断锁"><a href="#可中断锁" class="headerlink" title="可中断锁"></a>可中断锁</h4><p>可中断锁：顾名思义，就是可以相应中断的锁。</p><p>在Java中，synchronized就不是可中断锁，而Lock是可中断锁。</p><p>如果某一线程A正在执行锁中的代码，另一线程B正在等待获取该锁，可能由于等待时间过长，线程B不想等待了，想先处理其他事情，我们可以让它中断自己或者在别的线程中中断它，这种就是可中断锁。</p><p>在前面演示lockInterruptibly()的用法时已经体现了Lock的可中断性。</p><h4 id="公平锁"><a href="#公平锁" class="headerlink" title="公平锁"></a>公平锁</h4><p>公平锁即尽量以请求锁的顺序来获取锁。比如同是有多个线程在等待一个锁，当这个锁被释放时，等待时间最久的线程（最先请求的线程）会获得该所，这种就是公平锁。</p><p>非公平锁即无法保证锁的获取是按照请求锁的顺序进行的。这样就可能导致某个或者一些线程永远获取不到锁。</p><p>在Java中，synchronized就是非公平锁，它无法保证等待的线程获取锁的顺序。</p><p>而对于ReentrantLock和ReentrantReadWriteLock，它默认情况下是非公平锁，但是可以设置为公平锁。</p><p>看一下这2个类的源代码就清楚了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sync object for non-fair locks</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NonfairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7316153563782823691L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Performs lock.  Try immediate barge, backing up to normal</span></span><br><span class="line"><span class="comment">     * acquire on failure.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">            setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            acquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nonfairTryAcquire(acquires);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Sync object for fair locks</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">3000897897090466540L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        acquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Fair version of tryAcquire.  Don't grant access unless</span></span><br><span class="line"><span class="comment">     * recursive call or no waiters or is first.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">        <span class="keyword">int</span> c = getState();</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;</span><br><span class="line">                compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">                setExclusiveOwnerThread(current);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">            <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">            <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line">            setState(nextc);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在ReentrantLock中定义了2个静态内部类，一个是NotFairSync，一个是FairSync，分别用来实现非公平锁和公平锁。</p><p>我们可以在创建ReentrantLock对象时，通过以下方式来设置锁的公平性：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ReentrantLock lock = <span class="keyword">new</span> ReentrantLock(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p></p><p>如果参数为true表示为公平锁，为fasle为非公平锁。默认情况下，如果使用无参构造器，则是非公平锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates an instance of &#123;<span class="doctag">@code</span> ReentrantLock&#125;.</span></span><br><span class="line"><span class="comment"> * This is equivalent to using &#123;<span class="doctag">@code</span> ReentrantLock(false)&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sync = <span class="keyword">new</span> NonfairSync();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates an instance of &#123;<span class="doctag">@code</span> ReentrantLock&#125; with the</span></span><br><span class="line"><span class="comment"> * given fairness policy.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fair &#123;<span class="doctag">@code</span> true&#125; if this lock should use a fair ordering policy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">(<span class="keyword">boolean</span> fair)</span> </span>&#123;</span><br><span class="line">    sync = fair ? <span class="keyword">new</span> FairSync() : <span class="keyword">new</span> NonfairSync();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外在ReentrantLock类中定义了很多方法，比如：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">　　isFair()        //判断锁是否是公平锁</span><br><span class="line"></span><br><span class="line">　　isLocked()    //判断锁是否被任何线程获取了</span><br><span class="line"></span><br><span class="line">　　isHeldByCurrentThread()   //判断锁是否被当前线程获取了</span><br><span class="line"></span><br><span class="line">　　hasQueuedThreads()   //判断是否有线程在等待该锁</span><br></pre></td></tr></table></figure><p></p><p>在ReentrantReadWriteLock中也有类似的方法，同样也可以设置为公平锁和非公平锁。不过要记住，ReentrantReadWriteLock并未实现Lock接口，它实现的是ReadWriteLock接口。</p><h4 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h4><p>读写锁将对一个资源（比如文件）的访问分成了2个锁，一个读锁和一个写锁。</p><p>正因为有了读写锁，才使得多个线程之间的读操作不会发生冲突。</p><p>ReadWriteLock就是读写锁，它是一个接口，ReentrantReadWriteLock实现了这个接口。</p><p>可以通过readLock()获取读锁，通过writeLock()获取写锁。</p><p>上面已经演示过了读写锁的使用方法，在此不再赘述。</p><p><strong>文章转载：<a rel="external nofollow noopener noreferrer" target="_blank" href="http://www.cnblogs.com/dolphin0520/p/3923167.html">海子</a></strong></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java多线程中synchronized]]></title>
      <url>/java-synchronized.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><p>在多线程中，当多个线程同时访问同一个资源对象的时候，由于线程在处理中是不可控的，导致，执行的结果可能出现不可控的错误。</p><p>例如：两个线程thread-1和thread-2，同时要数据入库，需要判断数据字段a，不重复，所以当插入数据的时候先去检查数据库中a字段，当我们的两个线程中字段a相同的时候，出现thread1先执行查询，在thread2查询，两个线程同时都会得到a字段没重复，这个时候，数据入库，肯定会有问题的。</p><p>有线程安全的问题，这个资源叫做<code>临界资源</code>。</p><a id="more"></a><p>当多个线程同时访问临界资源（一个对象，对象中的属性，一个文件，一个数据库等）时，就可能会产生线程安全问题。</p><p>解决办法有两个，一个是让线程同步synchronized， 一个是lock。</p><h4 id="synchronized关键字"><a href="#synchronized关键字" class="headerlink" title="synchronized关键字"></a>synchronized关键字</h4><p>使用 <code>synchronized</code>关键字来修饰一个方法和方法块，当线程访问这个对象的synchronized修饰的方法的时候，会锁住这个方法，其他线程无法访问，等待这个线程执行完毕，其他线程才排队进来依次执行，<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadData threadData = <span class="keyword">new</span> ThreadData();</span><br><span class="line">        ThreadData threadData1 = <span class="keyword">new</span> ThreadData();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; threadData.data1()).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; ThreadData.data2()).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; threadData.data3()).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; threadData1.data1()).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadData</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">data1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"begin data1"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"end data1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">data2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"data2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">data3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"begin data3"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"end data3"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>打印结果<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">begin data1</span><br><span class="line">data2</span><br><span class="line">begin data1</span><br><span class="line">end data1</span><br><span class="line">begin data3</span><br><span class="line">end data1</span><br><span class="line">end data3</span><br></pre></td></tr></table></figure><p></p><p>首先需要理解线程安全的两个方面：<strong>执行控制</strong>和<strong>内存可见</strong>。</p><p><strong>执行控制</strong>的目的是控制代码执行（顺序）及是否可以并发执行。</p><p><strong>内存可见</strong>控制的是线程执行结果在内存中对其它线程的可见性。根据<a href="http://blog.csdn.net/suifeng3051/article/details/52611310" rel="external nofollow noopener noreferrer" target="_blank">Java内存模型</a>的实现，线程在具体执行时，会先拷贝主存数据到线程本地（CPU缓存），操作完成后再把结果从线程本地刷到主存。</p><p><code>synchronized</code>关键字解决的是执行控制的问题，它会阻止其它线程获取当前对象的监控锁，这样就使得当前对象中被<code>synchronized</code>关键字保护的代码块无法被其它线程访问，也就无法并发执行。更重要的是，<code>synchronized</code>还会创建一个<strong>内存屏障</strong>，内存屏障指令保证了所有CPU操作结果都会直接刷到主存中，从而保证了操作的内存可见性，同时也使得先获得这个锁的线程的所有操作，都<strong>happens-before</strong>于随后获得这个锁的线程的操作。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol><li>当一个线程正在访问一个对象的synchronized方法，那么其他线程不能访问该对象的其他synchronized方法。</li><li>如果一个线程A需要访问对象object1的synchronized方法fun1，另外一个线程B需要访问对象object2的synchronized方法fun1，即使object1和object2是同一类型），也不会产生线程安全问题，因为他们访问的是不同的对象，所以不存在互斥问题。</li><li>如果一个线程执行一个对象的非static synchronized方法，另外一个线程需要执行这个对象所属类的static synchronized方法，此时不会发生互斥现象，因为访问static synchronized方法占用的是类锁，而访问非static synchronized方法占用的是对象锁，所以不存在互斥现象。</li></ol><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 8 中ArrayList源码分析]]></title>
      <url>/java-arraylist.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><p>这次简单看下ArrayList的实现过程，以及它拥有的操作方法。<br>在Java 8 中 ArrayList 的实现 较以前有很大的改变。</p><a id="more"></a><h4 id="ArrayList-拥有的属性"><a href="#ArrayList-拥有的属性" class="headerlink" title="ArrayList 拥有的属性"></a>ArrayList 拥有的属性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8683452581122892189L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Default initial capacity.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Shared empty array instance used for empty instances.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="comment">//被用于空实例的共享空数组实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Shared empty array instance used for default sized empty instances. We</span></span><br><span class="line"><span class="comment">     * distinguish this from EMPTY_ELEMENTDATA to know how much to inflate when</span></span><br><span class="line"><span class="comment">     * first element is added.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="comment">//被用于默认大小的空实例的共享数组实例。其与EMPTY_ELEMENTDATA的区别是：当我们向数组中添加第一个元素时，知道数组该扩充多少。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The array buffer into which the elements of the ArrayList are stored.</span></span><br><span class="line"><span class="comment">     * The capacity of the ArrayList is the length of this array buffer. Any</span></span><br><span class="line"><span class="comment">     * empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span></span><br><span class="line"><span class="comment">     * will be expanded to DEFAULT_CAPACITY when the first element is added.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> Object[] elementData; <span class="comment">// non-private to simplify nested class access</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The size of the ArrayList (the number of elements it contains).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br></pre></td></tr></table></figure><ol><li>实现的接口看出，支持随机访问，克隆，序列化；</li><li>默认大小<code>DEFAULT_CAPACITY</code> 为 10 ；</li><li><code>elementData</code>存储数组数据的，是 Object[] 类型的数组；</li><li><code>size</code> 为当前 ArrayList 的实际大小。<h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4>ArrayList 通过构造方法创建有三种方法：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造一个指定初始容量的空列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  initialCapacity  ArrayList的初始容量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException 如果给定的初始容量为负值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造一个默认初始容量为10的空列表，但是还没分配大小。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造一个包含指定collection的元素的列表，这些元素按照该collection的迭代器返回的顺序排列的</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> c 包含用于去构造ArrayList的元素的collection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException 如果指定的collection为空</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        elementData = c.toArray();</span><br><span class="line">        <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// c.toArray()可能不会正确地返回一个 Object[]数组，那么使用Arrays.copyOf()方法</span></span><br><span class="line">            <span class="keyword">if</span> (elementData.getClass() != Object[].class)</span><br><span class="line">                <span class="comment">//Arrays.copyOf()返回一个 Object[].class类型的，大小为size，元素为elementData[0,...,size-1]</span></span><br><span class="line">                elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// replace with empty array.</span></span><br><span class="line">            <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="添加元素add"><a href="#添加元素add" class="headerlink" title="添加元素add"></a>添加元素add</h4><p>最简单的添加方法，在 ArrayList 尾部添加一个元素，需要去扩容，这个是ArrayList 最重要的一个特点；<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h5 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h5><p>下面是扩容的重要代码：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">transient</span> <span class="keyword">int</span> modCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ensureExplicitCapacity(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>每当向数组中添加元素时，都要去检查添加元素后的个数是否会超出当前数组的长度，如果超出，数组将会进行扩容，都回去调用方法<code>ensureCapacityInternal(int minCapacity)</code><br>在这个方法中看到，那个if语句判断就是，我们使用默认无参的构造函数创建的ArrayList 是在这里去 给大小的，如果第一次 add 的元素长度大于默认长度的话，就是用新的长度，否则给默认大小10；</p><p>给定大小后，就去调用<code>grow</code>方法，进行扩容。<br>看到<code>int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);</code> ArrayList 每次扩容的大小是当前容量的0.5倍，就是默认大小为10，下次扩容后大小为15，下次再扩容后为 <em>15 </em>1.5*；所以ArrayList每次扩容的容量只会越来越大。</p><p><code>modCount</code>用于记录ArrayList的结构性变化的次数，add()、remove()、addall()、removerange()及clear()方法都会让modCount增长。</p><h5 id="其余的add方法，addAll"><a href="#其余的add方法，addAll" class="headerlink" title="其余的add方法，addAll"></a>其余的add方法，addAll</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将指定的元素(E e)添加到此列表的尾部</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">        elementData[size++] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将指定的元素(E e)插入到列表的指定位置(index)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        rangeCheckForAdd(index); <span class="comment">//判断参数index是否IndexOutOfBoundsException</span></span><br><span class="line"></span><br><span class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!  如果数组长度不足，将进行扩容</span></span><br><span class="line">        System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">                         size - index); <span class="comment">//将源数组中从index位置开始后的size-index个元素统一后移一位</span></span><br><span class="line">        elementData[index] = element;</span><br><span class="line">        size++; <span class="comment">//重新指定siez 大小</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按照指定collection的迭代器所返回的元素顺序，将该collection中的所有元素添加到此列表的尾部</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified collection is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        Object[] a = c.toArray();</span><br><span class="line">        <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">        ensureCapacityInternal(size + numNew);  <span class="comment">// Increments modCount</span></span><br><span class="line">        <span class="comment">//将数组a[0,...,numNew-1]复制到数组elementData[size,...,size+numNew-1]</span></span><br><span class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, size, numNew); </span><br><span class="line">        size += numNew; <span class="comment">//重新指定size 大小</span></span><br><span class="line">        <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从指定的位置开始，将指定collection中的所有元素插入到此列表中，新元素的顺序为指定collection的迭代器所返回的元素顺序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified collection is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        rangeCheckForAdd(index); <span class="comment">//判断参数index是否IndexOutOfBoundsException</span></span><br><span class="line"></span><br><span class="line">        Object[] a = c.toArray();</span><br><span class="line">        <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">        ensureCapacityInternal(size + numNew);  <span class="comment">// Increments modCount</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> numMoved = size - index;</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="comment">//先将数组elementData[index,...,index+numMoved-1]复制到elementData[index+numMoved,...,index+2*numMoved-1]</span></span><br><span class="line">            <span class="comment">//即，将源数组中从index位置开始的后numMoved个元素统一后移numNew位</span></span><br><span class="line">            System.arraycopy(elementData, index, elementData, index + numNew,</span><br><span class="line">                             numMoved);</span><br><span class="line">        <span class="comment">//再将数组a[0,...,numNew-1]复制到数组elementData[index,...,index+numNew-1]</span></span><br><span class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, index, numNew);</span><br><span class="line">        size += numNew;</span><br><span class="line">        <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="remove-删除元素"><a href="#remove-删除元素" class="headerlink" title="remove 删除元素"></a>remove 删除元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除此列表中指定位置上的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 需被移除的元素的索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the element 被移除的元素值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);  <span class="comment">//判断index是否 &lt;= size</span></span><br><span class="line"></span><br><span class="line">        modCount++;</span><br><span class="line">        E oldValue = elementData(index);</span><br><span class="line">        <span class="comment">//将数组elementData中index位置之后的所有元素向前移一位</span></span><br><span class="line">        <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">            System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                             numMoved);</span><br><span class="line">        elementData[--size] = <span class="keyword">null</span>; <span class="comment">//将原数组最后一个位置置为null，由GC清理</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//移除ArrayList中首次出现的指定元素(如果存在)，ArrayList中允许存放重复的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 由于ArrayList中允许存放null，因此下面通过两种情况来分别处理。</span></span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">                <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    fastRemove(index); <span class="comment">//私有的移除方法，跳过index参数的边界检查以及不返回任何值</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                    fastRemove(index);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有的删除指定位置元素的方法，跳过index参数的边界检查以及不返回任何值</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">            System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                             numMoved);</span><br><span class="line">        elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清空ArrayList，将全部的元素设为null</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// clear to let GC do its work</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            elementData[i] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除ArrayList中从fromIndex（包含）到toIndex（不包含）之间所有的元素，共移除了toIndex-fromIndex个元素</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">removeRange</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">int</span> numMoved = size - toIndex;  <span class="comment">//需向前移动的元素的个数</span></span><br><span class="line">        System.arraycopy(elementData, toIndex, elementData, fromIndex,</span><br><span class="line">                         numMoved);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// clear to let GC do its work</span></span><br><span class="line">        <span class="keyword">int</span> newSize = size - (toIndex-fromIndex);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = newSize; i &lt; size; i++) &#123;</span><br><span class="line">            elementData[i] = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size = newSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除ArrayList中包含在指定容器c中的所有元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(c);  <span class="comment">//检查指定的对象c是否为空</span></span><br><span class="line">        <span class="keyword">return</span> batchRemove(c, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//移除ArrayList中不包含在指定容器c中的所有元素，与removeAll(Collection&lt;?&gt; c)正好相反</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(c); </span><br><span class="line">        <span class="keyword">return</span> batchRemove(c, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//批量删除</span></span><br><span class="line">    <span class="comment">//complement为true 表示不同的删除，</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">batchRemove</span><span class="params">(Collection&lt;?&gt; c, <span class="keyword">boolean</span> complement)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Object[] elementData = <span class="keyword">this</span>.elementData;</span><br><span class="line">        <span class="keyword">int</span> r = <span class="number">0</span>, w = <span class="number">0</span>;  <span class="comment">//读写双指针</span></span><br><span class="line">        <span class="keyword">boolean</span> modified = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (; r &lt; size; r++)</span><br><span class="line">                <span class="keyword">if</span> (c.contains(elementData[r]) == complement) <span class="comment">//判断指定容器c中是否含有elementData[r]元素</span></span><br><span class="line">                    elementData[w++] = elementData[r];</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// Preserve behavioral compatibility with AbstractCollection,</span></span><br><span class="line">            <span class="comment">// even if c.contains() throws.</span></span><br><span class="line">            <span class="keyword">if</span> (r != size) &#123;</span><br><span class="line">                System.arraycopy(elementData, r,</span><br><span class="line">                                 elementData, w,</span><br><span class="line">                                 size - r);</span><br><span class="line">                w += size - r;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (w != size) &#123;</span><br><span class="line">                <span class="comment">// clear to let GC do its work</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = w; i &lt; size; i++)</span><br><span class="line">                    elementData[i] = <span class="keyword">null</span>;</span><br><span class="line">                modCount += size - w;</span><br><span class="line">                size = w;</span><br><span class="line">                modified = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> modified;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="修改元素-set"><a href="#修改元素-set" class="headerlink" title="修改元素 set"></a>修改元素 set</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将指定索引上的值替换为新值，并返回旧值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        E oldValue = elementData(index);</span><br><span class="line">        elementData[index] = element;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断ArrayList中是否包含Object(o)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> indexOf(o) &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//正向查找，返回ArrayList中元素Object o第一次出现的位置，如果元素不存在，则返回-1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)                 </span><br><span class="line">                <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//逆向查找，返回ArrayList中元素Object o最后一次出现的位置，如果元素不存在，则返回-1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">                <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function">E <span class="title">elementData</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回指定索引处的值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> elementData(index); <span class="comment">//实质上return (E) elementData[index]</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将底层数组的容量调整为当前列表保存的实际元素的大小的功能</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">if</span> (size &lt; elementData.length) &#123;</span><br><span class="line">            elementData = (size == <span class="number">0</span>)</span><br><span class="line">              ? EMPTY_ELEMENTDATA</span><br><span class="line">              : Arrays.copyOf(elementData, size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回ArrayList的大小（元素个数）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//判断ArrayList是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回此 ArrayList实例的浅拷贝</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ArrayList&lt;?&gt; v = (ArrayList&lt;?&gt;) <span class="keyword">super</span>.clone();</span><br><span class="line">            v.elementData = Arrays.copyOf(elementData, size);</span><br><span class="line">            v.modCount = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            <span class="comment">// this shouldn't happen, since we are Cloneable</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回一个包含ArrayList中所有元素的数组</span></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.copyOf(elementData, size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果给定的参数数组长度足够，则将ArrayList中所有元素按序存放于参数数组中，并返回</span></span><br><span class="line">    <span class="comment">//如果给定的参数数组长度小于ArrayList的长度，则返回一个新分配的、长度等于ArrayList长度的、包含ArrayList中所有元素的新数组</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.length &lt; size)</span><br><span class="line">            <span class="comment">// Make a new array of a's runtime type, but my contents:</span></span><br><span class="line">            <span class="keyword">return</span> (T[]) Arrays.copyOf(elementData, size, a.getClass());</span><br><span class="line">        System.arraycopy(elementData, <span class="number">0</span>, a, <span class="number">0</span>, size);</span><br><span class="line">        <span class="keyword">if</span> (a.length &gt; size)</span><br><span class="line">            a[size] = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="遍历方法"><a href="#遍历方法" class="headerlink" title="遍历方法"></a>遍历方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuwii.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/11/4 16:53&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestArrayList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; seasons = <span class="keyword">new</span> ArrayList();<span class="comment">// 创建默认大小ArrayList</span></span><br><span class="line">        seasons.add(<span class="string">"spring"</span>); <span class="comment">//第一次赋值，才有大小</span></span><br><span class="line">        seasons.addAll(Arrays.asList(<span class="string">"summer"</span>, <span class="string">"autumn"</span>, <span class="string">"winter"</span>));</span><br><span class="line">        <span class="comment">//使用迭代器 Iterator</span></span><br><span class="line">        Iterator iterator = seasons.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用迭代器 ListIterator</span></span><br><span class="line">        System.out.println(<span class="string">"使用迭代器 ListIterator"</span>);</span><br><span class="line">        ListIterator listIterator = seasons.listIterator();</span><br><span class="line">        <span class="keyword">while</span> (listIterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(listIterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"使用迭代器 ListIterator，逆向访问"</span>);</span><br><span class="line">        <span class="keyword">while</span> (listIterator.hasPrevious()) &#123;</span><br><span class="line">            System.out.println(listIterator.nextIndex() + <span class="string">" : "</span> + listIterator.previous());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过索引 ，随机访问</span></span><br><span class="line">        System.out.println(<span class="string">"通过索引 ，随机访问"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, len = seasons.size(); i &lt; len; i++) System.out.println(seasons.get(i));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用foreach 遍历</span></span><br><span class="line">        System.out.println(<span class="string">"使用foreach 遍历"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String season : seasons) System.out.println(season);</span><br><span class="line">        <span class="comment">//第二种写法</span></span><br><span class="line">		<span class="comment">//@since 1.8 </span></span><br><span class="line">		<span class="comment">//@see Iterable</span></span><br><span class="line">        seasons.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Iterator与ListIterator的区别：</p><ol><li>Iterator可以应用于所有的集合，Set、List和Map和这些集合的子类型。而ListIterator只能用于List及其子类型；</li><li>Iterator只能实现顺序向后遍历，ListIterator可实现顺序向后遍历和逆向（顺序向前）遍历；</li><li>Iterator只能实现remove操作，ListIterator可以实现remove操作，add操作，set操作。<h4 id="多线程中使用ArrayList"><a href="#多线程中使用ArrayList" class="headerlink" title="多线程中使用ArrayList"></a>多线程中使用ArrayList</h4>当多个线程同时修改一个ArrayList对象的时候，必须要保持外部同步操作，但是ArrayList不是同步的，非线程安全，有一种办法就是可以使用<code>Collections.synchronizedList</code>进行包装：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List list = Collections.synchronizedList(<span class="keyword">new</span> ArrayList(...));</span><br></pre></td></tr></table></figure></li></ol><p>但是在平时开发中，多线程开发中多选择使用<code>Vector</code>或者<code>CopyOnWriteArrayList</code>。</p><h4 id="补充：toArray-方法"><a href="#补充：toArray-方法" class="headerlink" title="补充：toArray 方法"></a>补充：toArray 方法</h4><h5 id="toArray"><a href="#toArray" class="headerlink" title="toArray()"></a>toArray()</h5><p>返回的是java.lang.Object的数组，不建议使用类型强转，可能会存在空指针异常。</p><h5 id="toArray-T"><a href="#toArray-T" class="headerlink" title="toArray(T[])"></a>toArray(<strong>T[]</strong>)</h5><p>源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] var1) &#123;</span><br><span class="line">    <span class="keyword">if</span> (var1.length &lt; <span class="keyword">this</span>.size) &#123;</span><br><span class="line">        <span class="comment">// 如果参数的长度比 list.size()小的话，将数组拷贝到新的数据中，且指定类型强制转换，不会存在空指针异常。</span></span><br><span class="line">        <span class="keyword">return</span> (Object[])Arrays.copyOf(<span class="keyword">this</span>.elementData, <span class="keyword">this</span>.size, var1.getClass());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果长度不小于的话，将list中的元素拷贝到传进来参数 var1 的数据中，起点都为0，长度为size，</span></span><br><span class="line">        System.arraycopy(<span class="keyword">this</span>.elementData, <span class="number">0</span>, var1, <span class="number">0</span>, <span class="keyword">this</span>.size);</span><br><span class="line">        <span class="comment">// 如果长度大于size 则将副本数组中的索引为 size 的元素设置为Null，</span></span><br><span class="line">        <span class="keyword">if</span> (var1.length &gt; <span class="keyword">this</span>.size) &#123;</span><br><span class="line">            var1[<span class="keyword">this</span>.size] = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> var1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以上面就会出现一个现象，索引为 size 的元素，一直会为null ，可以检验下的。</p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring中使用Configuration注入Bean]]></title>
      <url>/spring-config.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><p>在Spring容器中使用<code>applicationContext.xml</code>中来给对应的类注入对应的属性，来完成初始化，最典型的就是配置数据库连接池了。</p><a id="more"></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span></span></span><br><span class="line"><span class="tag">		<span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 基本属性 url、user、password --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;connection.url&#125;"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;connection.username&#125;"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;connection.password&#125;"</span> /&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置初始化大小、最小、最大 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.initialSize&#125;"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.minIdle&#125;"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.maxActive&#125;"</span> /&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置获取连接等待超时的时间 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWait"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.maxWait&#125;"</span> /&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeBetweenEvictionRunsMillis"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.timeBetweenEvictionRunsMillis&#125;"</span> /&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minEvictableIdleTimeMillis"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.minEvictableIdleTimeMillis&#125;"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"removeAbandoned"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.removeAbandoned&#125;"</span> /&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 超时时间；单位为秒。180秒=3分钟 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"removeAbandonedTimeout"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.removeAbandonedTimeoutSeconds&#125;"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validationQuery"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.validationQuery&#125;"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testWhileIdle"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.testWhileIdle&#125;"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.testOnBorrow&#125;"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnReturn"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.testOnReturn&#125;"</span> /&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"poolPreparedStatements"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.poolPreparedStatements&#125;"</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolPreparedStatementPerConnectionSize"</span></span></span><br><span class="line"><span class="tag">			<span class="attr">value</span>=<span class="string">"$&#123;druid.maxPoolPreparedStatementPerConnectionSize&#125;"</span> /&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置监控统计拦截的filters --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filters"</span> <span class="attr">value</span>=<span class="string">"$&#123;druid.filters&#125;"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置参数就不贴出。</p><h2 id="使用-Configuration创建Bean"><a href="#使用-Configuration创建Bean" class="headerlink" title="使用@Configuration创建Bean"></a>使用@Configuration创建Bean</h2><p>Configuration 是 Spring 3.X 后提供的注解，用于取代 XML 来配置 Spring,</p><p><code>@Configuration</code>可理解为用spring的时候xml里面的<code>&lt;beans&gt;</code>标签；</p><p><code>@Bean</code>可理解为用spring的时候xml里面的<code>&lt;bean&gt;</code>标签。</p><p>这样就很好理解了。</p><p>需要注意的时配置<code>spring</code> 扫描的包 <code>&lt;context:component-scan base-package=&quot;com.xxx.xxx&quot; /&gt;</code> 不然注解不起效果（springboot不需要设置）。</p><h3 id="读取json文件的属性注入Bean"><a href="#读取json文件的属性注入Bean" class="headerlink" title="读取json文件的属性注入Bean"></a>读取json文件的属性注入Bean</h3><p>这次使用Json文件来配置bean；</p><p>首先写出实体类，和需要配置的数据；</p><h4 id="编写实体类"><a href="#编写实体类" class="headerlink" title="编写实体类"></a>编写实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.devframe.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/11/2 11:31&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonCfg</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Contact&gt; contacts;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"PersonCfg&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", city='"</span> + city + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", contacts="</span> + contacts +</span><br><span class="line">                <span class="string">", hobby="</span> + hobby +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Contact&gt; <span class="title">getContacts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> contacts;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContacts</span><span class="params">(List&lt;Contact&gt; contacts)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.contacts = contacts;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">getHobby</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hobby;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHobby</span><span class="params">(List hobby)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hobby = hobby;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List hobby;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCity</span><span class="params">(String city)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.city = city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Contact</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhone</span><span class="params">(String phone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Contact&#123;"</span> +</span><br><span class="line">                <span class="string">"phone='"</span> + phone + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", email='"</span> + email + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="需要注入的数据"><a href="#需要注入的数据" class="headerlink" title="需要注入的数据"></a>需要注入的数据</h4><p>创建文件命名<code>data.json</code>，(注意属性名对应):<br></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"wuwii"</span>,</span><br><span class="line">  <span class="attr">"age"</span>: <span class="number">23</span>,</span><br><span class="line">  <span class="attr">"city"</span>: <span class="string">"WuHan"</span>,</span><br><span class="line">  <span class="attr">"hobby"</span>: [<span class="string">"骑行"</span>, <span class="string">"跑步"</span>,<span class="string">"足球"</span>],</span><br><span class="line">  <span class="attr">"contacts"</span>: [&#123;</span><br><span class="line">    <span class="attr">"phone"</span>: <span class="string">"18772383543"</span>,</span><br><span class="line">    <span class="attr">"email"</span>: <span class="string">"k@wuwii.com"</span></span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    <span class="attr">"phone"</span>: <span class="string">"12345678912"</span>,</span><br><span class="line">    <span class="attr">"email"</span>: <span class="string">"1075199251@qq.com"</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id="创建Beans"><a href="#创建Beans" class="headerlink" title="创建Beans"></a>创建Beans</h4><p>spring 容器初始化，自动扫描，去初始化Bean，加载进Environment，后面调用的直接自动装配（Autowired）；<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.devframe.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/11/2 11:23&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Configs</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"classpath:data.json"</span>)</span><br><span class="line">    <span class="keyword">protected</span> File configFile;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PersonCfg <span class="title">readServerConfig</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ObjectMapper().readValue(configFile, PersonCfg.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>@Bean</code> 注解方法的返回值，将注入到容器中，可以使用自动装配。</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>直接使用spring-test 的JUnit4 单元测试;<br>直接装配Bean ，来输出它的属性，查看是否装配成功。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.devframe.util; </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test; </span><br><span class="line"><span class="keyword">import</span> org.junit.Before; </span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* Configs Tester. </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Zhang Kai </span></span><br><span class="line"><span class="comment">* <span class="doctag">@since</span> &lt;pre&gt;11/02/2017&lt;/pre&gt; </span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 1.0 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(locations = &#123;<span class="string">"classpath:spring/applicationContext-base.xml"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigsTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PersonCfg personCfg;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">@After</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* Method: 名字随便起的，不规范。</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConfigBeans</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.printf(<span class="string">"Use '@Configuration' autowired beans : %s%n"</span>, personCfg);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>测试结果：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Use <span class="string">'@Configuration'</span> autowired beans : PersonCfg&#123;name=<span class="string">'wuwii'</span>, age=<span class="number">23</span>, city=<span class="string">'WuHan'</span>, contacts=[Contact&#123;phone=<span class="string">'18772383543'</span>, email=<span class="string">'k@wuwii.com'</span>&#125;, Contact&#123;phone=<span class="string">'12345678912'</span>, email=<span class="string">'1075199251@qq.com'</span>&#125;], hobby=[骑行, 跑步]&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="读取properties-文件的属性注入Bean"><a href="#读取properties-文件的属性注入Bean" class="headerlink" title="读取properties 文件的属性注入Bean"></a>读取properties 文件的属性注入Bean</h3><p>上面的的方法中除了测试类的方法相同而已，为了方便其余都有改动；</p><h4 id="首先实体类，通过构造方法传入值"><a href="#首先实体类，通过构造方法传入值" class="headerlink" title="首先实体类，通过构造方法传入值"></a>首先实体类，通过构造方法传入值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.devframe.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/11/2 11:31&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonCfg</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Contact&gt; contacts;</span><br><span class="line">    <span class="keyword">private</span> List hobby;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PersonCfg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PersonCfg</span><span class="params">(String name, <span class="keyword">int</span> age, String city, List&lt;Contact&gt; contacts, List hobby)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.city = city;</span><br><span class="line">        <span class="keyword">this</span>.contacts = contacts;</span><br><span class="line">        <span class="keyword">this</span>.hobby = hobby;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"PersonCfg&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", city='"</span> + city + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", contacts="</span> + contacts +</span><br><span class="line">                <span class="string">", hobby="</span> + hobby +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Contact&gt; <span class="title">getContacts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> contacts;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContacts</span><span class="params">(List&lt;Contact&gt; contacts)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.contacts = contacts;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">getHobby</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hobby;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHobby</span><span class="params">(List hobby)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hobby = hobby;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCity</span><span class="params">(String city)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.city = city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Contact</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Contact</span><span class="params">(String phone, String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.phone = phone;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhone</span><span class="params">(String phone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Contact&#123;"</span> +</span><br><span class="line">                <span class="string">"phone='"</span> + phone + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", email='"</span> + email + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>由于properties 文件不能写 只能写那些单一属性，数组和对象需要自己设置规则，去后台解析出来使用。<br>创建<code>person.properties</code> 文件：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name=wuwii</span><br><span class="line">age=23</span><br><span class="line">city=WuHan</span><br><span class="line">hobby=football,running</span><br><span class="line">contacts=18772383543,k@wuwii.com;12345678912,1075199251@qq.com</span><br></pre></td></tr></table></figure><p></p><h4 id="创建Bean"><a href="#创建Bean" class="headerlink" title="创建Bean"></a>创建Bean</h4><p>通过@Configuration完成spring 初始化，设置@PropertySource，读取配置文件：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.devframe.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/11/2 11:23&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:person.properties"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Configs</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> Environment env;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PersonCfg <span class="title">getPersonFromProp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PersonCfg(env.getProperty(<span class="string">"name"</span>), Integer.valueOf(env.getProperty(<span class="string">"age"</span>)),</span><br><span class="line">                env.getProperty(<span class="string">"city"</span>), string2contacts(env.getProperty(<span class="string">"contacts"</span>)), string2list(env.getProperty(<span class="string">"hobby"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  按照预先定义规则的列表字符串 转换成列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s 预先定义规则的列表字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.util.List</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List <span class="title">string2list</span> <span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> StringUtil.isNull(s) ? <span class="keyword">null</span> : Arrays.asList(s.split(<span class="string">","</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  &lt;p&gt;按照预先定义规则&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     *  &lt;p&gt;将配置文件 Contact 列表的字符串 转换成 列表对象&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s 读取配置文件 Contact 列表的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.util.List&lt;com.devframe.util.Contact&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;Contact&gt; <span class="title">string2contacts</span> <span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtil.isNull(s)) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        List&lt;String&gt; list1 = Arrays.asList(s.split(<span class="string">";"</span>));</span><br><span class="line">        <span class="keyword">return</span> list1.stream().map(<span class="keyword">this</span>::contactStr2contact).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按照预定义规则转换成 contact对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> contactStr contact类的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> com.devframe.util.Contact</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Contact <span class="title">contactStr2contact</span> <span class="params">(String contactStr)</span> </span>&#123;</span><br><span class="line">        String[] index = contactStr.split(<span class="string">","</span>);</span><br><span class="line">        <span class="comment">// 传入字段数，自己控制，有点蠢了</span></span><br><span class="line">        <span class="keyword">if</span> (index.length != <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Contact(index[<span class="number">0</span>], index[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p>最后JUnit4 测试类没变，重新测试，打印出来结果：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Use &apos;@Configuration&apos; autowired beans : PersonCfg&#123;name=&apos;wuwii&apos;, age=23, city=&apos;WuHan&apos;, contacts=[Contact&#123;phone=&apos;18772383543&apos;, email=&apos;k@wuwii.com&apos;&#125;, Contact&#123;phone=&apos;12345678912&apos;, email=&apos;1075199251@qq.com&apos;&#125;], hobby=[football, running]&#125;</span><br></pre></td></tr></table></figure><p></p><p>成功。</p><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>20171103 早上来看了下源码：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the property value associated with the given key, or &#123;<span class="doctag">@code</span> null&#125;</span></span><br><span class="line"><span class="comment"> * if the key cannot be resolved.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key the property name to resolve</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #getProperty(String, String)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #getProperty(String, Class)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #getRequiredProperty(String)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">String <span class="title">getProperty</span><span class="params">(String key)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the property value associated with the given key, or</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> defaultValue&#125; if the key cannot be resolved.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key the property name to resolve</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> defaultValue the default value to return if no value is found</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #getRequiredProperty(String)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #getProperty(String, Class)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">String <span class="title">getProperty</span><span class="params">(String key, String defaultValue)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the property value associated with the given key, or &#123;<span class="doctag">@code</span> null&#125;</span></span><br><span class="line"><span class="comment"> * if the key cannot be resolved.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key the property name to resolve</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> targetType the expected type of the property value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #getRequiredProperty(String, Class)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&lt;T&gt; <span class="function">T <span class="title">getProperty</span><span class="params">(String key, Class&lt;T&gt; targetType)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the property value associated with the given key, or</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> defaultValue&#125; if the key cannot be resolved.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key the property name to resolve</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> targetType the expected type of the property value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> defaultValue the default value to return if no value is found</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #getRequiredProperty(String, Class)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&lt;T&gt; <span class="function">T <span class="title">getProperty</span><span class="params">(String key, Class&lt;T&gt; targetType, T defaultValue)</span></span>;</span><br></pre></td></tr></table></figure><p></p><p>在<code>PropertyResolver</code>接口中发现：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;T&gt; <span class="function">T <span class="title">getProperty</span><span class="params">(String key, Class&lt;T&gt; targetType)</span></span>;</span><br></pre></td></tr></table></figure><p></p><p>这个方法可以直接读取文件内容转换成我们的需要类型，虽然说很好，调试了半天代码不知道properties文件怎么写对象来让它转换，这个以后再看，list列表很好转，将上面的方法加载hobby属性改成这个：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">env.getProperty((<span class="string">"age"</span>), Integer.class)</span><br><span class="line">env.getProperty((<span class="string">"hobby"</span>), List.class)</span><br></pre></td></tr></table></figure><p></p><p>person文件中hobby属性为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hobby=running,football</span><br></pre></td></tr></table></figure><p>执行结果：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Use &apos;@Configuration&apos; autowired beans : PersonCfg&#123;name=&apos;wuwii&apos;, age=23, city=&apos;WuHan&apos;, contacts=[Contact&#123;phone=&apos;18772383543&apos;, email=&apos;k@wuwii.com&apos;&#125;, Contact&#123;phone=&apos;12345678912&apos;, email=&apos;1075199251@qq.com&apos;&#125;], hobby=[running, football]&#125;</span><br></pre></td></tr></table></figure><p></p><p>没问题</p><h4 id="直接使用-Value占位符注入"><a href="#直接使用-Value占位符注入" class="headerlink" title="直接使用@Value占位符注入"></a>直接使用@Value占位符注入</h4><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>使用<code>@Component</code> 方式注入，需要再applicationContext.xml中引入properties文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 参数占位符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag">	<span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">lazy-init</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"systemPropertiesModeName"</span> <span class="attr">value</span>=<span class="string">"SYSTEM_PROPERTIES_MODE_OVERRIDE"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ignoreResourceNotFound"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:spring/database.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:person.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>改下实体类，直接在属性上注入<code>@Value</code>，占位符符号<code>${ }</code><br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.devframe.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/11/2 11:31&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonCfg</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;age&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;city&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="comment">//这个不会，对象属性不会写</span></span><br><span class="line">    <span class="comment">//@Value("$&#123;contacts1&#125;")</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Contact&gt; contacts;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;hobby&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> List hobby;</span><br><span class="line"></span><br><span class="line"><span class="comment">//省略代码</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>测试结果:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Use &apos;@Configuration&apos; autowired beans : PersonCfg&#123;name=&apos;wuwii&apos;, age=23, city=&apos;WuHan&apos;, contacts=null, hobby=[running,football]&#125;</span><br></pre></td></tr></table></figure><p></p><p>发现数组列表也能直接注入。</p><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>在配置类中设置引入配置文件，还需引入占位符，等价于XML中的<code>&lt;context:property-placeholder/&gt;</code>配置。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:person.properties"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Configs</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(Configs.class);</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment env;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PropertySourcesPlaceholderConfigurer <span class="title">propertySourcesPlaceholderConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PropertySourcesPlaceholderConfigurer();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>就可以在类中的属性上使用@Value占位符 注入了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>还可以读取xml文件进行装配，当然也不使用配置文件，直接在Beans的<code>@Value</code>注解上写出需要注解的值，但是那样后期部署修改起来麻烦。</li><li>常用的应该时这么两个 比较好，properties 可能用的多点吧；因为平时使用这个外部需要修改的参数 的基本都是一些常量，不会存在这么多转换，这个只是我的测试的代码，所以有一些鬼转换。</li><li>还有我使用properties 中为什么没使用中文，因为乱码了。尴尬。这是需要注意的地方，因为电脑默认编码是gbk，但是读的时候，又没有设置编码。解决办法：在读取properties文件的工具类上，加上指定编码格式<code>utf-8</code>:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">URL url = PropertyUtil.class.getResource(<span class="string">"/config.properties"</span>);</span><br><span class="line">FileInputStream in = <span class="keyword">new</span> FileInputStream(url.getPath());</span><br><span class="line"><span class="comment">//这段代码不是 以前的  PROP.load(in);</span></span><br><span class="line">PROP.load(<span class="keyword">new</span> InputStreamReader(in, <span class="string">"utf-8"</span>));</span><br><span class="line">in.close();</span><br></pre></td></tr></table></figure></li></ol><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java中创建线程池的常用方法]]></title>
      <url>/java-create-pool.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="创建线程池"><a href="#创建线程池" class="headerlink" title="创建线程池"></a>创建线程池</h3><p>学习了Java中线程池的工作流程，现在学习一下怎么使用线程池；前面了解到构造一个线程池参数，最简单的线程池构造函数：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                              TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">             Executors.defaultThreadFactory(), defaultHandler);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><p>最少需要设置这么几个参数：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">corePoolSize 核心池大小，</span><br><span class="line">maximumPoolSize 最大线程数量，</span><br><span class="line">keepAliveTime 心跳时间</span><br><span class="line">unit 心跳时间单位，什么时候销毁多余的线程</span><br><span class="line">workQueue 最重要的，阻塞队列，存储等待中的任务</span><br></pre></td></tr></table></figure><p></p><a id="more"></a><p>在前面创建过线程池：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> BlockingQueue queue = <span class="keyword">new</span> ArrayBlockingQueue(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadPoolExecutor executor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">5</span>, <span class="number">10</span>, <span class="number">200</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">            queue);</span><br></pre></td></tr></table></figure><p></p><p>第一步创建一个固定容量的队列来存储等待执行的任务；<br>第二步设置核心池数，最大容量数，心跳时间参数。</p><p>这个executor线程池说明了，核心池数为5，缓存队列最多存储5个任务，最大线程池数为10，当任务数量大于核心数（5）的时候，监控空闲线程，在心跳时间200 MILLISECONDS后，结束任务，直到线程池中线程数不大于核心数 5。</p><h3 id="使用Executors来创建线程池"><a href="#使用Executors来创建线程池" class="headerlink" title="使用Executors来创建线程池"></a>使用Executors来创建线程池</h3><p><del>如果没有特殊的要求，一般都是推荐用Executors工具类来创建线程池，因为它的参数都给我们配置好了，直接拿来用就好。</del><br><code>Executors</code>类提供的方法来创建线程池：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Executors.newCachedThreadPool(); <span class="comment">//创建一个缓冲池，缓冲池容量大小为Integer.MAX_VALUE</span></span><br><span class="line">Executors.newSingleThreadExecutor(); <span class="comment">//创建容量为1的缓冲池</span></span><br><span class="line">Executors.newFixedThreadPool(<span class="keyword">int</span> corePoolSize); <span class="comment">//创建固定容量大小的缓冲池，缓存队列大小为Integer.MAX_VALUE</span></span><br><span class="line">Executors.newScheduledThreadPool(<span class="keyword">int</span> corePoolSize) <span class="comment">//创建一个最大容量为Integer.MAX_VALUE的缓冲池，支持定时及周期性任务执行</span></span><br><span class="line">Executors.newSingleThreadScheduledExcutor <span class="comment">//创建一个单例线程池，定期或延时执行任务。</span></span><br><span class="line">Executors.newWorkStealingPool <span class="comment">//创建持有足够线程的线程池来支持给定的并行级别，并通过使用多个队列，减少竞争，它需要穿一个并行级别的参数，如果不传，则被设定为默认的CPU数量。</span></span><br></pre></td></tr></table></figure><p></p><h4 id="newCachedThreadPool"><a href="#newCachedThreadPool" class="headerlink" title="newCachedThreadPool"></a>newCachedThreadPool</h4><p>newCachedThreadPool 创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。缓冲池容量大小为Integer.MAX_VALUE。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                      <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                      <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><h4 id="newSingleThreadExecutor"><a href="#newSingleThreadExecutor" class="headerlink" title="newSingleThreadExecutor"></a>newSingleThreadExecutor</h4><p>创建容量为1的缓冲池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</span><br><span class="line">            (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                    <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                    <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><h4 id="newFixedThreadPool"><a href="#newFixedThreadPool" class="headerlink" title="newFixedThreadPool"></a>newFixedThreadPool</h4><p>创建固定容量大小的缓冲池，缓存队列大小为Integer.MAX_VALUE:<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                      <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                      <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><p>定长线程池的大小最好根据系统资源进行设置。如<code>Runtime.getRuntime().availableProcessors()</code>。</p><h4 id="newScheduledThreadPool"><a href="#newScheduledThreadPool" class="headerlink" title="newScheduledThreadPool"></a>newScheduledThreadPool</h4><p>创建一个最大容量为Integer.MAX_VALUE的缓冲池，支持定时及周期性任务执行。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title">newScheduledThreadPool</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ScheduledThreadPoolExecutor(corePoolSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ScheduledThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(corePoolSize, Integer.MAX_VALUE, <span class="number">0</span>, NANOSECONDS,</span><br><span class="line">              <span class="keyword">new</span> DelayedWorkQueue());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><p>这里主要主要它的定时任务用法；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuwii.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试newScheduledThreadPool</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/11/1 16:25&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPoolTwo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ScheduledExecutorService scheduleExcutor = Executors.newScheduledThreadPool(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//延迟两秒执行</span></span><br><span class="line">        scheduleExcutor.schedule(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">"Delay 2 seconds."</span>);</span><br><span class="line">        &#125;, <span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//延迟两秒执行，后面每隔五秒执行</span></span><br><span class="line">        scheduleExcutor.scheduleAtFixedRate(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">"Delay 2 seconds."</span>);</span><br><span class="line">        &#125;, <span class="number">2</span>, <span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要注意的有两点：</p><ol><li>使用的是<code>ScheduledExecutorService</code> 这个接口，这个接口也是继承<code>ExecutorService</code>，所以也有sumit，execute方法；</li><li><code>ScheduledExecutorService</code>接口中有定时，延迟执行任务的方法:<code>scheduleAtFixedRate</code>,<code>schedule</code>。</li></ol><h4 id="newSingleThreadScheduledExcutor"><a href="#newSingleThreadScheduledExcutor" class="headerlink" title="newSingleThreadScheduledExcutor"></a>newSingleThreadScheduledExcutor</h4><p>创建一个单例线程池，定期或延时执行任务，方法同同上面的<code>newScheduledThreadPool</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title">newSingleThreadScheduledExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DelegatedScheduledExecutorService</span><br><span class="line">            (<span class="keyword">new</span> ScheduledThreadPoolExecutor(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="newWorkStealingPool"><a href="#newWorkStealingPool" class="headerlink" title="newWorkStealingPool"></a>newWorkStealingPool</h4><p>创建一个拥有多个任务队列（以便减少连接数）的线程池：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newWorkStealingPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ForkJoinPool</span><br><span class="line">            (Runtime.getRuntime().availableProcessors(),</span><br><span class="line">             ForkJoinPool.defaultForkJoinWorkerThreadFactory,</span><br><span class="line">             <span class="keyword">null</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newWorkStealingPool</span><span class="params">(<span class="keyword">int</span> parallelism)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ForkJoinPool</span><br><span class="line">            (parallelism,</span><br><span class="line">             ForkJoinPool.defaultForkJoinWorkerThreadFactory,</span><br><span class="line">             <span class="keyword">null</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><p>默认不传入线程池大小，默认按机器CPU能力来设置。</p><p>它使用的是<code>ForkJoinPool</code>多线程中的任务分解机制，将大任务按照预先制定的规则将大任务分解成小任务，多线程并发。这个是java7新加入的线程池，可以使用相对少的线程来处理大量的任务。</p><h3 id="阿里代码规范补充"><a href="#阿里代码规范补充" class="headerlink" title="阿里代码规范补充"></a>阿里代码规范补充</h3><p>编码的时候发现了最新的阿里代码规范工具中，发现了这个提示了，记录，</p><p>线程池不允许使用Executors去创建，而是通过ThreadPoolExecutor的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。 说明：Executors各个方法的弊端：</p><ol><li>newFixedThreadPool和newSingleThreadExecutor:<br>主要问题是堆积的请求处理队列可能会耗费非常大的内存，甚至OOM。</li><li>newCachedThreadPool和newScheduledThreadPool:<br>主要问题是线程数最大数是Integer.MAX_VALUE，可能会创建数量非常多的线程，甚至OOM。</li><li>创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。创建线程池的时候请使用带ThreadFactory的构造函数，并且提供自定义ThreadFactory实现或者使用第三方实现。<br>Positive example 1：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//org.apache.commons.lang3.concurrent.BasicThreadFactory</span></span><br><span class="line">ScheduledExecutorService executorService = <span class="keyword">new</span> ScheduledThreadPoolExecutor(<span class="number">1</span>,</span><br><span class="line">    <span class="keyword">new</span> BasicThreadFactory.Builder().namingPattern(<span class="string">"example-schedule-pool-%d"</span>).daemon(<span class="keyword">true</span>).build());</span><br></pre></td></tr></table></figure></li></ol><p>Positive example 2：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ThreadFactory namedThreadFactory = <span class="keyword">new</span> ThreadFactoryBuilder()</span><br><span class="line">    .setNameFormat(<span class="string">"demo-pool-%d"</span>).build();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Common Thread Pool</span></span><br><span class="line">ExecutorService pool = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">5</span>, <span class="number">200</span>,</span><br><span class="line">     <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">     <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(<span class="number">1024</span>), namedThreadFactory, <span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy());</span><br><span class="line"></span><br><span class="line">pool.execute(()-&gt; System.out.println(Thread.currentThread().getName()));</span><br><span class="line">pool.shutdown();<span class="comment">//gracefully shutdown</span></span><br></pre></td></tr></table></figure><p></p><p>Positive example 3：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"userThreadPool"</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor"</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">"corePoolSize"</span> value=<span class="string">"10"</span> /&gt;</span><br><span class="line">    &lt;property name=<span class="string">"maxPoolSize"</span> value=<span class="string">"100"</span> /&gt;</span><br><span class="line">    &lt;property name=<span class="string">"queueCapacity"</span> value=<span class="string">"2000"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;property name=<span class="string">"threadFactory"</span> value= threadFactory /&gt;</span><br><span class="line">    &lt;property name=<span class="string">"rejectedExecutionHandler"</span>&gt;</span><br><span class="line">        &lt;ref local=<span class="string">"rejectedExecutionHandler"</span> /&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"><span class="comment">//in code</span></span><br><span class="line">userThreadPool.execute(thread);</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java中使用有返回值的线程]]></title>
      <url>/java-thread-return.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><p>在创建多线程程序的时候，我们常实现Runnable接口，Runnable没有返回值，要想获得返回值，Java5提供了一个新的接口Callable，可以获取线程中的返回值，但是获取线程的返回值的时候，需要注意，我们的方法是异步的，获取返回值的时候，线程任务不一定有返回值，所以，需要判断线程是否结束，才能够去取值。</p><a id="more"></a><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuwii.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/10/31 11:17&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer SLEEP_MILLS = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer RUN_SLEEP_MILLS = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> afterSeconds = SLEEP_MILLS / RUN_SLEEP_MILLS;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 线程池（根据机器的核心数）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ExecutorService fixedThreadPool = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">testCallable</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Future&lt;String&gt; future = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 在创建多线程程序的时候，我们常实现Runnable接口，Runnable没有返回值，要想获得返回值，Java5提供了一个新的接口Callable</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * Callable需要实现的是call()方法，而不是run()方法，返回值的类型有Callable的类型参数指定，</span></span><br><span class="line"><span class="comment">             * Callable只能由ExecutorService.submit() 执行，正常结束后将返回一个future对象。</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            future = fixedThreadPool.submit(() -&gt; &#123;</span><br><span class="line">                Thread.sleep(SLEEP_MILLS);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"The thread returns value."</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (future == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 获得future对象之前可以使用isDone()方法检测future是否完成，完成后可以调用get()方法获得future的值，</span></span><br><span class="line"><span class="comment">             * 如果直接调用get()方法，get()方法将阻塞到线程结束，很浪费。</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (future.isDone()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(future.get());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException | ExecutionException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"After "</span> + afterSeconds-- + <span class="string">" seconds,get the future returns value."</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Test().testCallable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">After 3 seconds,get the future returns value.</span><br><span class="line">After 2 seconds,get the future returns value.</span><br><span class="line">After 1 seconds,get the future returns value.</span><br><span class="line">The thread returns value.</span><br></pre></td></tr></table></figure><p></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h3><ol><li>需要返回值的线程使用Callable 接口，实现call 方法；</li><li>获得future对象之前可以使用isDone()方法检测future是否完成，完成后可以调用get()方法获得future的值，如果直接调用get()方法，get()方法将阻塞到线程结束。</li></ol><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java并发编程中线程池源码分析及使用]]></title>
      <url>/java-concurrent-thread-pool.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><p>当Java处理高并发的时候，线程数量特别的多的时候，而且每个线程都是执行很短的时间就结束了，频繁创建线程和销毁线程需要占用很多系统的资源和时间，会降低系统的工作效率。</p><p>参考<a rel="external nofollow noopener noreferrer" target="_blank" href="http://www.cnblogs.com/dolphin0520/p/3932921.html">http://www.cnblogs.com/dolphin0520/p/3932921.html</a></p><p>由于原文作者使用的API 是1.6 版本的，参考他的文章，做了一些修改成 jdk 1.8版本的方法，涉及到的内容比较多，可能有少许错误。</p><p><strong>API : jdk1.8.0_144</strong></p><a id="more"></a><h3 id="ThreadPoolExecutor类"><a href="#ThreadPoolExecutor类" class="headerlink" title="ThreadPoolExecutor类"></a>ThreadPoolExecutor类</h3><p>Java中线程池主要是并发包<code>java.util.concurrent</code> 中 <code>ThreadPoolExecutor</code>这个类实现的。</p><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>我们直接调用它的时候，使用的是它的构造函数，它有四个构造函数：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExecutor</span> <span class="keyword">extends</span> <span class="title">AbstractExecutorService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//省略前面的代码</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                              TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">             Executors.defaultThreadFactory(), defaultHandler);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                              TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                              ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">             threadFactory, defaultHandler);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                              TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                              RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">             Executors.defaultThreadFactory(), handler);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                              TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                              ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                              RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">            maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">            maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">            keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">this</span>.acc = System.getSecurityManager() == <span class="keyword">null</span> ?</span><br><span class="line">                <span class="keyword">null</span> :</span><br><span class="line">                AccessController.getContext();</span><br><span class="line">        <span class="keyword">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">        <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">        <span class="keyword">this</span>.workQueue = workQueue;</span><br><span class="line">        <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">        <span class="keyword">this</span>.threadFactory = threadFactory;</span><br><span class="line">        <span class="keyword">this</span>.handler = handler;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略后面的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>ThreadPoolExecutor</code>继承了<code>AbstractExecutorService</code>抽象类，并提供了四个构造器，事实上，前面三个构造器都是调用的第四个构造器进行的初始化工作。所以主要研究下第四个构造器的方法。</p><p>首先了解下构造器中参数的意思：</p><ul><li><code>corePoolSize</code>: 核心池的大小，这个参数跟后面讲述的线程池的实现原理有非常大的关系。在创建了线程池后，默认情况下，线程池中并没有任何线程，而是等待有任务到来才创建线程去执行任务，除非调用了prestartAllCoreThreads()或者prestartCoreThread()方法，从这2个方法的名字就可以看出，是预创建线程的意思，即在没有任务到来之前就创建corePoolSize个线程或者一个线程。默认情况下，在创建了线程池后，线程池中的线程数为0，当有任务来之后，就会创建一个线程去执行任务，当线程池中的线程数目达到corePoolSize后，就会把到达的任务放到缓存队列当中；</li><li><code>maximumPoolSize</code>: 线程池最大线程数，这个参数也是一个非常重要的参数，它表示在线程池中最多能创建多少个线程；</li><li><code>keepAliveTime</code>:字面意思就是心跳时间，就是这个线程池中的线程数量大于<code>corePoolSize</code>的时候开始计时，设置空闲线程最多能存活多长时间。默认情况下，只有当线程池中的线程数大于corePoolSize时，keepAliveTime才会起作用，直到线程池中的线程数不大于corePoolSize，即当线程池中的线程数大于corePoolSize时，如果一个线程空闲的时间达到keepAliveTime，则会终止，直到线程池中的线程数不超过corePoolSize。但是如果调用了allowCoreThreadTimeOut(boolean)方法，在线程池中的线程数不大于corePoolSize时，keepAliveTime参数也会起作用，直到线程池中的线程数为0，它的单位是参数<code>TimeUnit unit</code>；</li><li><p><code>unit</code>: 参数<code>keepAliveTime</code>的时间单位，有7种取值，在TimeUnit类中有7种静态属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TimeUnit.DAYS; <span class="comment">//天</span></span><br><span class="line">TimeUnit.HOURS; <span class="comment">//小时</span></span><br><span class="line">TimeUnit.MINUTES; <span class="comment">//分钟</span></span><br><span class="line">TimeUnit.SECONDS; <span class="comment">//秒</span></span><br><span class="line">TimeUnit.MILLISECONDS; <span class="comment">//毫秒</span></span><br><span class="line">TimeUnit.MICROSECONDS; <span class="comment">//微妙</span></span><br><span class="line">TimeUnit.NANOSECONDS; <span class="comment">//纳秒</span></span><br></pre></td></tr></table></figure></li><li><p><code>workQueue</code>：一个阻塞队列<code>BlockingQueue</code>，用来存储等待执行的任务，这个参数的选择也很重要，会对线程池的运行过程产生重大影响，一般来说，这里的阻塞队列有以下几种选择，以后再详细学习<code>BlockingQueue</code>阻塞队列使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ArrayBlockingQueue; <span class="comment">//　基于数组的阻塞队列实现</span></span><br><span class="line">LinkedBlockingQueue; <span class="comment">// 基于链表的阻塞队列</span></span><br><span class="line">SynchronousQueue; <span class="comment">//一种无缓冲的等待队列</span></span><br><span class="line">DelayQueue； <span class="comment">// 队列中插入数据的操作（生产者）永远不会被阻塞，而只有获取数据的操作（消费者）才会被阻塞。</span></span><br><span class="line">PriorityBlockingQueue <span class="comment">// 基于优先级的阻塞队列</span></span><br></pre></td></tr></table></figure></li><li><p><code>threadFactory</code>: 线程工厂，主要用来创建线程；</p></li><li><code>handler</code>: 表示当拒绝处理任务时的策略，有以下四种取值：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ThreadPoolExecutor.AbortPolicy <span class="comment">//丢弃任务并抛出RejectedExecutionException异常。 </span></span><br><span class="line">ThreadPoolExecutor.DiscardPolicy <span class="comment">//也是丢弃任务，但是不抛出异常。 </span></span><br><span class="line">ThreadPoolExecutor.DiscardOldestPolicy <span class="comment">//丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）</span></span><br><span class="line">ThreadPoolExecutor.CallerRunsPolicy <span class="comment">//由调用线程处理该任务</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="ThreadPoolExecutor方法"><a href="#ThreadPoolExecutor方法" class="headerlink" title="ThreadPoolExecutor方法"></a>ThreadPoolExecutor方法</h4><p>首先<code>ThreadPoolExecutor</code>类自己拥有很多方法，用来获取线程池的相关属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>ThreadPoolExecutor</code>继承了<code>AbstractExecutorService</code>这个抽象类，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractExecutorService</span> <span class="keyword">implements</span> <span class="title">ExecutorService</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">protected</span> &lt;T&gt; <span class="function">RunnableFuture&lt;T&gt; <span class="title">newTaskFor</span><span class="params">(Runnable runnable, T value)</span> </span>&#123; &#125;;</span><br><span class="line">    <span class="keyword">protected</span> &lt;T&gt; <span class="function">RunnableFuture&lt;T&gt; <span class="title">newTaskFor</span><span class="params">(Callable&lt;T&gt; callable)</span> </span>&#123; &#125;;</span><br><span class="line">    <span class="keyword">public</span> Future&lt;?&gt; submit(Runnable task) &#123;&#125;;</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Runnable task, T result)</span> </span>&#123; &#125;;</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Callable&lt;T&gt; task)</span> </span>&#123; &#125;;</span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function">T <span class="title">doInvokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">boolean</span> timed, <span class="keyword">long</span> nanos)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException </span>&#123;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">invokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">invokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException </span>&#123;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span><br><span class="line">        <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span><br><span class="line">                                         <span class="keyword">long</span> timeout, TimeUnit unit)</span><br><span class="line">        <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AbstractExecutorService</code>实现了接口 <code>ExecutorService</code>中所有的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ExecutorService</span> <span class="keyword">extends</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isShutdown</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isTerminated</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">awaitTermination</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line">    &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Callable&lt;T&gt; task)</span></span>;</span><br><span class="line">    &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Runnable task, T result)</span></span>;</span><br><span class="line">    Future&lt;?&gt; submit(Runnable task);</span><br><span class="line">    &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span><br><span class="line">        <span class="keyword">throws</span> InterruptedException;</span><br><span class="line">    &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span><br><span class="line">                                  <span class="keyword">long</span> timeout, TimeUnit unit)</span><br><span class="line">        <span class="keyword">throws</span> InterruptedException;</span><br><span class="line">  </span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">invokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException, ExecutionException</span>;</span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">invokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ExecutorService</code> 接口继承了 <code>Executor</code>接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出类<code>ThreadPoolExecutor</code>拥有了多少方法。</p><p>平时开发中主要使用方法：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">execute() // 线程池启动一个线程</span><br><span class="line">submit() // 线程池启动一个线程，有返回值</span><br><span class="line">shutdown()  //执行完毕所有等待中的线程，再关闭线程池</span><br><span class="line">shutdownNow() // 直接关闭，不等待</span><br></pre></td></tr></table></figure><p></p><ul><li><p>execute()方法实际上是Executor中声明的方法，在ThreadPoolExecutor进行了具体的实现，这个方法是ThreadPoolExecutor的核心方法，通过这个方法可以向线程池提交一个任务，交由线程池去执行。</p></li><li><p>submit()方法是在ExecutorService中声明的方法，在AbstractExecutorService就已经有了具体的实现，在ThreadPoolExecutor中并没有对其进行重写，这个方法也是用来向线程池提交任务的，但是它和execute()方法不同，它能够返回任务执行的结果，去看submit()方法的实现，会发现它实际上还是调用的execute()方法，只不过它利用了Future来获取任务执行结果。</p></li><li><p>shutdown()和shutdownNow()是用来关闭线程池的。</p></li></ul><h3 id="线程池的实现"><a href="#线程池的实现" class="headerlink" title="线程池的实现"></a>线程池的实现</h3><h4 id="线程池的状态"><a href="#线程池的状态" class="headerlink" title="线程池的状态"></a>线程池的状态</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">* The runState provides the main lifecycle control, taking on values:</span><br><span class="line">     *</span><br><span class="line">     *   RUNNING:  Accept <span class="keyword">new</span> tasks and process queued tasks</span><br><span class="line">     *   SHUTDOWN: Don<span class="string">'t accept new tasks, but process queued tasks</span></span><br><span class="line"><span class="string">     *   STOP:     Don'</span>t accept <span class="keyword">new</span> tasks, don<span class="string">'t process queued tasks,</span></span><br><span class="line"><span class="string">     *             and interrupt in-progress tasks</span></span><br><span class="line"><span class="string">     *   TIDYING:  All tasks have terminated, workerCount is zero,</span></span><br><span class="line"><span class="string">     *             the thread transitioning to state TIDYING</span></span><br><span class="line"><span class="string">     *             will run the terminated() hook method</span></span><br><span class="line"><span class="string">     *   TERMINATED: terminated() has completed</span></span><br><span class="line"><span class="string">     *</span></span><br><span class="line"><span class="string">     * The numerical order among these values matters, to allow</span></span><br><span class="line"><span class="string">     * ordered comparisons. The runState monotonically increases over</span></span><br><span class="line"><span class="string">     * time, but need not hit each state. The transitions are:</span></span><br><span class="line"><span class="string">     *</span></span><br><span class="line"><span class="string">     * RUNNING -&gt; SHUTDOWN</span></span><br><span class="line"><span class="string">     *    On invocation of shutdown(), perhaps implicitly in finalize()</span></span><br><span class="line"><span class="string">     * (RUNNING or SHUTDOWN) -&gt; STOP</span></span><br><span class="line"><span class="string">     *    On invocation of shutdownNow()</span></span><br><span class="line"><span class="string">     * SHUTDOWN -&gt; TIDYING</span></span><br><span class="line"><span class="string">     *    When both queue and pool are empty</span></span><br><span class="line"><span class="string">     * STOP -&gt; TIDYING</span></span><br><span class="line"><span class="string">     *    When pool is empty</span></span><br><span class="line"><span class="string">     * TIDYING -&gt; TERMINATED</span></span><br><span class="line"><span class="string">     *    When the terminated() hook method has completed</span></span><br><span class="line"><span class="string">     *</span></span><br><span class="line"><span class="string">     * Threads waiting in awaitTermination() will return when the</span></span><br><span class="line"><span class="string">     * state reaches TERMINATED.</span></span><br></pre></td></tr></table></figure><p>根据上面的代码文档，，可以清楚的了解到线程池的各种状态，以及在这种状态中能做的事情，状态之间的转变。</p><p>如果调用了shutdown()方法，则线程池处于SHUTDOWN状态，此时线程池不能够接受新的任务，它会等待所有任务执行完毕；</p><p>如果调用了shutdownNow()方法，则线程池处于STOP状态，此时线程池不能接受新的任务，并且会去尝试终止正在执行的任务；</p><p>当线程池处于SHUTDOWN或STOP状态，并且所有工作线程已经销毁，任务缓存队列已经清空或执行结束后，线程池被设置为TERMINATED状态。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger ctl = <span class="keyword">new</span> AtomicInteger(ctlOf(RUNNING, <span class="number">0</span>));</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COUNT_BITS = Integer.SIZE - <span class="number">3</span>; <span class="comment">//29</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CAPACITY   = (<span class="number">1</span> &lt;&lt; COUNT_BITS) - <span class="number">1</span>;   <span class="comment">//536870911 目前最大线程容量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// runState is stored in the high-order bits</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RUNNING    = -<span class="number">1</span> &lt;&lt; COUNT_BITS; <span class="comment">// 111 00000000000000000000000000000</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SHUTDOWN   =  <span class="number">0</span> &lt;&lt; COUNT_BITS; <span class="comment">// 000 00000000000000000000000000000</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STOP       =  <span class="number">1</span> &lt;&lt; COUNT_BITS; <span class="comment">// 001 00000000000000000000000000000</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TIDYING    =  <span class="number">2</span> &lt;&lt; COUNT_BITS; <span class="comment">// 010 00000000000000000000000000000 </span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TERMINATED =  <span class="number">3</span> &lt;&lt; COUNT_BITS; <span class="comment">// 100 00000000000000000000000000000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Packing and unpacking ctl</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">runStateOf</span><span class="params">(<span class="keyword">int</span> c)</span>     </span>&#123; <span class="keyword">return</span> c &amp; ~CAPACITY; &#125; <span class="comment">//最高3位， 状态</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">workerCountOf</span><span class="params">(<span class="keyword">int</span> c)</span>  </span>&#123; <span class="keyword">return</span> c &amp; CAPACITY; &#125; <span class="comment">//后29位 ，工作数量</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ctlOf</span><span class="params">(<span class="keyword">int</span> rs, <span class="keyword">int</span> wc)</span> </span>&#123; <span class="keyword">return</span> rs | wc; &#125;</span><br></pre></td></tr></table></figure><p>ctl作为ThreadPoolExecutor的核心状态控制字段，包含来两个信息：</p><ul><li>工作线程总数 <code>workerCount</code></li><li>线程池状态 <code>RUNNING</code>、 <code>SHUTDOWN</code>、 <code>STOP</code>、 <code>TIDYING</code>、 <code>TERMINATED</code>。</li></ul><p>COUNT_BITS 是32减去3 就是29，下面的线程池状态就是－1 到 3 分别向左移动29位。</p><p>如此，int的右侧29位，代表着线程数量，总数可以达到2的29次，29位后的3位代表线程池的状态<br>这样，线程池增加一个线程，只需吧ctl加1即可，而我们也发现实际这个线程池的最高线程数量是2的29次减1。并不是先前我们现象的2的32次减1。这个作者在注释中也提到了，说如果后续需要增大这个值， 可以吧ctl定义成AtomicLong。</p><h4 id="任务的执行excute"><a href="#任务的执行excute" class="headerlink" title="任务的执行excute"></a>任务的执行excute</h4><h5 id="属性变量"><a href="#属性变量" class="headerlink" title="属性变量"></a>属性变量</h5><p>了解<code>ThreadPoolExecutor</code>类中其他的一些比较重要成员变量：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; workQueue;              <span class="comment">//任务缓存队列，用来存放等待执行的任务</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">new</span> ReentrantLock();   <span class="comment">//线程池的主要状态锁，对线程池状态（比如线程池大小</span></span><br><span class="line">                                                              <span class="comment">//、runState等）的改变都要使用这个锁</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> HashSet&lt;Worker&gt; workers = <span class="keyword">new</span> HashSet&lt;Worker&gt;();  <span class="comment">//用来存放工作集</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">long</span>  keepAliveTime;    <span class="comment">//线程存货时间   </span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> allowCoreThreadTimeOut;   <span class="comment">//是否允许为核心线程设置存活时间</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span>   corePoolSize;     <span class="comment">//核心池的大小（即线程池中的线程数目大于这个参数时，提交的任务会被放进任务缓存队列）</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span>   maximumPoolSize;   <span class="comment">//线程池最大能容忍的线程数</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span>   poolSize;       <span class="comment">//线程池中当前的线程数</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> RejectedExecutionHandler handler; <span class="comment">//任务拒绝策略</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> ThreadFactory threadFactory;   <span class="comment">//线程工厂，用来创建线程</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> largestPoolSize;   <span class="comment">//用来记录线程池中曾经出现过的最大线程数</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">long</span> completedTaskCount;   <span class="comment">//用来记录已经执行完毕的任务个数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Wait condition to support awaitTermination</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Condition termination = mainLock.newCondition(); <span class="comment">//线程等待时的关闭的条件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* The context to be used when executing the finalizer, or null. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AccessControlContext acc; <span class="comment">// 执行任务完成后使用的内容，或者为null</span></span><br></pre></td></tr></table></figure><p></p><ul><li>largestPoolSize只是一个用来起记录作用的变量，用来记录线程池中曾经有过的最大线程数目，跟线程池的容量没有任何关系。</li><li>线程池线程一般正常工作的时候最大线程数为corePoolSize，当任务数量大于corePoolSize的时候，任务就进入等待的队列中，不继续增加线程；当等待队列也放满的时候，不能再往里面装任务的时候，这个时候就需要重新开辟新的线程，来工作了，并且数量要小于<code>maximumPoolSize</code>；如果大于maximumPoolSize，就调用handler方法。</li></ul><h5 id="执行任务-execute"><a href="#执行任务-execute" class="headerlink" title="执行任务 execute"></a>执行任务 execute</h5><p>使用<code>AbstractExecuorService</code>中的submit 方法，可以执行新的进程，当然submit，最终执行的是execute方法，在<code>ThreadPoolExecutor</code>类中实现了excute方法；</p><p>重点研究exexute 方法的实现，这个有点难，网上介绍1.6里面的源码中execute方法已经和我这个1.8版本有很大出入了，大致上应该没有偏离：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Executes the given task sometime in the future.  The task</span></span><br><span class="line"><span class="comment">     * may execute in a new thread or in an existing pooled thread.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * If the task cannot be submitted for execution, either because this</span></span><br><span class="line"><span class="comment">     * executor has been shutdown or because its capacity has been reached,</span></span><br><span class="line"><span class="comment">     * the task is handled by the current &#123;<span class="doctag">@code</span> RejectedExecutionHandler&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> command the task to execute</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> RejectedExecutionException at discretion of</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> RejectedExecutionHandler&#125;, if the task</span></span><br><span class="line"><span class="comment">     *         cannot be accepted for execution</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if &#123;<span class="doctag">@code</span> command&#125; is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (command == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Proceed in 3 steps:</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 1. If fewer than corePoolSize threads are running, try to</span></span><br><span class="line"><span class="comment">         * start a new thread with the given command as its first</span></span><br><span class="line"><span class="comment">         * task.  The call to addWorker atomically checks runState and</span></span><br><span class="line"><span class="comment">         * workerCount, and so prevents false alarms that would add</span></span><br><span class="line"><span class="comment">         * threads when it shouldn't, by returning false.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 2. If a task can be successfully queued, then we still need</span></span><br><span class="line"><span class="comment">         * to double-check whether we should have added a thread</span></span><br><span class="line"><span class="comment">         * (because existing ones died since last checking) or that</span></span><br><span class="line"><span class="comment">         * the pool shut down since entry into this method. So we</span></span><br><span class="line"><span class="comment">         * recheck state and if necessary roll back the enqueuing if</span></span><br><span class="line"><span class="comment">         * stopped, or start a new thread if there are none.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 3. If we cannot queue task, then we try to add a new</span></span><br><span class="line"><span class="comment">         * thread.  If it fails, we know we are shut down or saturated</span></span><br><span class="line"><span class="comment">         * and so reject the task.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">        <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class="line">            <span class="keyword">if</span> (addWorker(command, <span class="keyword">true</span>))</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            c = ctl.get();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class="line">            <span class="keyword">int</span> recheck = ctl.get();</span><br><span class="line">            <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class="line">                reject(command);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)</span><br><span class="line">                addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="keyword">false</span>))</span><br><span class="line">            reject(command);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><p>执行流程就是：</p><ol><li>判断提交的任务command是否为null，若是null，则抛出空指针异常；</li><li>第二步 ct1.get()；用这个<code>workerCountOf( ct1.get())</code> 计算线程池已经使用多少线程；</li><li>当使用的线程数小于核心线程数（corePoolSize），进入addWorker 方法中，这里就是开始进程的地方，进入到最重要的地方，为了这一步不要跳得太远，还是接着看execute方法，后面再看addWorker方法；</li><li>当使用的线程数不小于核心线程数（corePoolSize），新来得任务就要进入等待执行的状态；<br><code>if (isRunning(c) &amp;&amp; workQueue.offer(command))</code> 检查线程是否在running 状态和任务是否能够成功进入等待<code>排队</code> ；<br>4.1. 进入队列后，重新检查任务，如果线程池状态不是running状态， ，将回滚任务，拒绝执行任务，这样做主要是因为任务如果还在缓存队列等待的过程中，线程池中断了，就回滚任务，为了安全。<br>4.2. 如果线程中的线程数为0 了，创建一个空线程。</li><li>当使用的线程数不小于核心线程数（corePoolSize）的时候，并且添加进入到缓存队列失败后，就会执行<code>else if (!addWorker(command, false))reject(command);</code> 这段代码，意思就是直接开辟一个新的线程去行这个任务，如果执行失败，拒绝策略进行处理这个任务，当然，如果当前线程池中的线程数目达到<code>maximumPoolSize</code>，addWorker方法中也会采取任务拒绝策略进行处理。</li></ol><h5 id="addWorker-创建线程"><a href="#addWorker-创建线程" class="headerlink" title="addWorker 创建线程"></a>addWorker 创建线程</h5><p>下面将是阅读<code>addWorker</code>的源码，研究线程池怎么添加一个任务的。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Checks if a new worker can be added with respect to current</span></span><br><span class="line"><span class="comment"> * pool state and the given bound (either core or maximum). If so,</span></span><br><span class="line"><span class="comment"> * the worker count is adjusted accordingly, and, if possible, a</span></span><br><span class="line"><span class="comment"> * new worker is created and started, running firstTask as its</span></span><br><span class="line"><span class="comment"> * first task. This method returns false if the pool is stopped or</span></span><br><span class="line"><span class="comment"> * eligible to shut down. It also returns false if the thread</span></span><br><span class="line"><span class="comment"> * factory fails to create a thread when asked.  If the thread</span></span><br><span class="line"><span class="comment"> * creation fails, either due to the thread factory returning</span></span><br><span class="line"><span class="comment"> * null, or due to an exception (typically OutOfMemoryError in</span></span><br><span class="line"><span class="comment"> * Thread.start()), we roll back cleanly.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> firstTask the task the new thread should run first (or</span></span><br><span class="line"><span class="comment"> * null if none). Workers are created with an initial first task</span></span><br><span class="line"><span class="comment"> * (in method execute()) to bypass queuing when there are fewer</span></span><br><span class="line"><span class="comment"> * than corePoolSize threads (in which case we always start one),</span></span><br><span class="line"><span class="comment"> * or when the queue is full (in which case we must bypass queue).</span></span><br><span class="line"><span class="comment"> * Initially idle threads are usually created via</span></span><br><span class="line"><span class="comment"> * prestartCoreThread or to replace other dying workers.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> core if true use corePoolSize as bound, else</span></span><br><span class="line"><span class="comment"> * maximumPoolSize. (A boolean indicator is used here rather than a</span></span><br><span class="line"><span class="comment"> * value to ensure reads of fresh values after checking other pool</span></span><br><span class="line"><span class="comment"> * state).</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> true if successful</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">addWorker</span><span class="params">(Runnable firstTask, <span class="keyword">boolean</span> core)</span> </span>&#123;</span><br><span class="line">    retry:</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">        <span class="keyword">int</span> rs = runStateOf(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check if queue empty only if necessary.</span></span><br><span class="line">        <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp;</span><br><span class="line">            ! (rs == SHUTDOWN &amp;&amp;</span><br><span class="line">               firstTask == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">               ! workQueue.isEmpty()))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">int</span> wc = workerCountOf(c);</span><br><span class="line">            <span class="keyword">if</span> (wc &gt;= CAPACITY ||</span><br><span class="line">                wc &gt;= (core ? corePoolSize : maximumPoolSize))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (compareAndIncrementWorkerCount(c))</span><br><span class="line">                <span class="keyword">break</span> retry;</span><br><span class="line">            c = ctl.get();  <span class="comment">// Re-read ctl</span></span><br><span class="line">            <span class="keyword">if</span> (runStateOf(c) != rs)</span><br><span class="line">                <span class="keyword">continue</span> retry;</span><br><span class="line">            <span class="comment">// else CAS failed due to workerCount change; retry inner loop</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> workerStarted = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> workerAdded = <span class="keyword">false</span>;</span><br><span class="line">    Worker w = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        w = <span class="keyword">new</span> Worker(firstTask); </span><br><span class="line">        <span class="keyword">final</span> Thread t = w.thread; <span class="comment">//创建一个线程</span></span><br><span class="line">        <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">            mainLock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// Recheck while holding lock.</span></span><br><span class="line">                <span class="comment">// Back out on ThreadFactory failure or if</span></span><br><span class="line">                <span class="comment">// shut down before lock acquired.</span></span><br><span class="line">                <span class="keyword">int</span> rs = runStateOf(ctl.get());</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (rs &lt; SHUTDOWN ||</span><br><span class="line">                    (rs == SHUTDOWN &amp;&amp; firstTask == <span class="keyword">null</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (t.isAlive()) <span class="comment">// precheck that t is startable</span></span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</span><br><span class="line">                    workers.add(w);</span><br><span class="line">                    <span class="keyword">int</span> s = workers.size();</span><br><span class="line">                    <span class="keyword">if</span> (s &gt; largestPoolSize)</span><br><span class="line">                        largestPoolSize = s;</span><br><span class="line">                    workerAdded = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                mainLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (workerAdded) &#123; <span class="comment">//当任务成功添加到线程池，去执行它，改变标志符号。</span></span><br><span class="line">                t.start();</span><br><span class="line">                workerStarted = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (! workerStarted)</span><br><span class="line">            addWorkerFailed(w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> workerStarted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>看代码注释知道了第二个参数<code>core</code>的意义，当它为<code>true</code>的时候 使用的是线程核心数中的线程，当它为<code>false</code> 的时候，使用的是数量是maximumPoolSize，就是当缓存中的队列也排满的时候。</p><p>因此，调用这个 addWorker方法有4种传参的方式：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">addWorker(command, true);</span><br><span class="line">addWorker(command, false);</span><br><span class="line">addWorker(null, false);</span><br><span class="line">addWorker(null, true);</span><br></pre></td></tr></table></figure><p></p><ol><li>第一个：线程数小于corePoolSize时，放一个需要处理的task进worker set。如果worker set长度超过corePoolSize，就返回false。</li><li>第二个：当队列被放满时，就尝试将这个新来的task直接放入worker set，而此时worker set 的长度限制是maximumPoolSize。如果线程池也满了的话就返回false。</li><li>第三个：放入一个空的task进set，比较的的长度限制是maximumPoolSize。这样一个task为空的worker在线程执行的时候会判断出后去任务队列里拿任务，这样就相当于世创建了一个新的线程，只是没有马上分配任务。</li><li>第四个：这个方法就是放一个null的task进set，而且是在小于corePoolSize时。实际使用中是在 prestartCoreThread() 方法。这个方法用来为线程池先启动一个worker等待在那边，如果此时set中的数量已经达到corePoolSize那就返回false，什么也不干。还有是 <code>prestartAllCoreThreads()</code> 方法，准备corePoolSize个worker，初始化线程池中的线程。<br>默认情况下，创建线程池之后，线程池中是没有线程的，需要提交任务之后才会创建线程。在实际中如果需要线程池创建之后立即创建线程，可以通过以下两个方法办到：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">prestartCoreThread()：初始化一个核心线程；</span><br><span class="line">prestartAllCoreThreads()：初始化所有核心线程</span><br></pre></td></tr></table></figure></li></ol><p>前面代码的意思就是验证线程池的状态是不是在<code>RUNNING</code>状态，并且判断，线程数是不是超过了<code>maximumPoolSize</code>，如果超过了最大线程数量，直接返回false，就回到execute 方法最后个<code>if else()</code>代码块中，拒绝任务。</p><h5 id="Worker-中主要实现"><a href="#Worker-中主要实现" class="headerlink" title="Worker 中主要实现"></a>Worker 中主要实现</h5><p><code>Worker</code> 这个类很简单，只是继承了一个<code>Runnable</code>接口，然后在<code>run()</code>方法中去执行我们传入的<code>firstTask</code> 主要是其中的run 方法，它的run方法调用的是<code>runWorker</code>：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">runWorker</span><span class="params">(Worker w)</span> </span>&#123;</span><br><span class="line">    Thread wt = Thread.currentThread();</span><br><span class="line">    Runnable task = w.firstTask;</span><br><span class="line">    w.firstTask = <span class="keyword">null</span>;</span><br><span class="line">    w.unlock(); <span class="comment">// allow interrupts</span></span><br><span class="line">    <span class="keyword">boolean</span> completedAbruptly = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (task != <span class="keyword">null</span> || (task = getTask()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            w.lock();</span><br><span class="line">            <span class="comment">// If pool is stopping, ensure thread is interrupted;</span></span><br><span class="line">            <span class="comment">// if not, ensure thread is not interrupted.  This</span></span><br><span class="line">            <span class="comment">// requires a recheck in second case to deal with</span></span><br><span class="line">            <span class="comment">// shutdownNow race while clearing interrupt</span></span><br><span class="line">            <span class="keyword">if</span> ((runStateAtLeast(ctl.get(), STOP) ||</span><br><span class="line">                 (Thread.interrupted() &amp;&amp;</span><br><span class="line">                  runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</span><br><span class="line">                !wt.isInterrupted())</span><br><span class="line">                wt.interrupt();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                beforeExecute(wt, task);</span><br><span class="line">                Throwable thrown = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    task.run();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RuntimeException x) &#123;</span><br><span class="line">                    thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Error x) &#123;</span><br><span class="line">                    thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable x) &#123;</span><br><span class="line">                    thrown = x; <span class="keyword">throw</span> <span class="keyword">new</span> Error(x);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    afterExecute(task, thrown);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                task = <span class="keyword">null</span>;</span><br><span class="line">                w.completedTasks++;</span><br><span class="line">                w.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        completedAbruptly = <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        processWorkerExit(w, completedAbruptly);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>注意当没有可执行的任务的时候，执行<code>getTask()</code>方法：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Runnable <span class="title">getTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> timedOut = <span class="keyword">false</span>; <span class="comment">// Did the last poll() time out?</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">        <span class="keyword">int</span> rs = runStateOf(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check if queue empty only if necessary.</span></span><br><span class="line">        <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp; (rs &gt;= STOP || workQueue.isEmpty())) &#123; <span class="comment">//判断线程状态和缓存队列中的线程是否为空</span></span><br><span class="line">            decrementWorkerCount();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> wc = workerCountOf(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Are workers subject to culling?</span></span><br><span class="line">        <span class="keyword">boolean</span> timed = allowCoreThreadTimeOut || wc &gt; corePoolSize;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((wc &gt; maximumPoolSize || (timed &amp;&amp; timedOut))</span><br><span class="line">            &amp;&amp; (wc &gt; <span class="number">1</span> || workQueue.isEmpty())) &#123; </span><br><span class="line">            <span class="comment">//也就是说如果线程池处于STOP状态、或者任务队列已为空或者允许为核心池线程设置空闲存活时间并且线程数大于1时，允许worker退出。</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndDecrementWorkerCount(c))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runnable r = timed ?</span><br><span class="line">                workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :</span><br><span class="line">                workQueue.take();</span><br><span class="line">            <span class="keyword">if</span> (r != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> r;</span><br><span class="line">            timedOut = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException retry) &#123;</span><br><span class="line">            timedOut = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>这个时候看到了，它原来去缓存队列中去取任务，来执行。</p><p>并且下面代码块做的任务，作者已经给出注释了<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// Recheck while holding lock.</span><br><span class="line">// Back out on ThreadFactory failure or if</span><br><span class="line">// shut down before lock acquired.</span><br></pre></td></tr></table></figure><p></p><p>很容易理解了这段代码。</p><p>怎么样开启线程池，并且添加一个任务就到此结束了。</p><h4 id="任务拒绝策略"><a href="#任务拒绝策略" class="headerlink" title="任务拒绝策略"></a>任务拒绝策略</h4><p>当线程池的任务缓存队列已满并且线程池中的线程数目达到maximumPoolSize，如果还有任务到来就会采取任务拒绝策略，通常有以下四种策略：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常。</span><br><span class="line">ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。</span><br><span class="line">ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）</span><br><span class="line">ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务</span><br></pre></td></tr></table></figure><p></p><h4 id="任务缓存队列及排队策略"><a href="#任务缓存队列及排队策略" class="headerlink" title="任务缓存队列及排队策略"></a>任务缓存队列及排队策略</h4><p>workQueue，任务缓存队列，用来存放等待执行的任务；<br>一个阻塞队列<code>BlockingQueue</code>，用来存储等待执行的任务，这个参数的选择也很重要，会对线程池的运行过程产生重大影响，一般来说，这里的阻塞队列有以下几种选择：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ArrayBlockingQueue; <span class="comment">//　基于数组的阻塞队列实现，此队列创建时必须指定大小；</span></span><br><span class="line">LinkedBlockingQueue; <span class="comment">// 基于链表的阻塞队列，如果创建时没有指定此队列大小，则默认为Integer.MAX_VALUE；</span></span><br><span class="line">SynchronousQueue; <span class="comment">//一种无缓冲的等待队列，它不会保存提交的任务，而是将直接新建一个线程来执行新来的任务。</span></span><br><span class="line">DelayQueue； <span class="comment">// 队列中插入数据的操作（生产者）永远不会被阻塞，而只有获取数据的操作（消费者）才会被阻塞。</span></span><br><span class="line">PriorityBlockingQueue <span class="comment">// 基于优先级的阻塞队列</span></span><br></pre></td></tr></table></figure><p></p><h4 id="线程池关闭"><a href="#线程池关闭" class="headerlink" title="线程池关闭"></a>线程池关闭</h4><p>ThreadPoolExecutor提供了两个方法，用于线程池的关闭，分别是shutdown()和shutdownNow()，其中：</p><ul><li>shutdown()：不会立即终止线程池，而是要等所有任务缓存队列中的任务都执行完后才终止，但再也不会接受新的任务；</li><li>shutdownNow()：立即终止线程池，并尝试打断正在执行的任务，并且清空任务缓存队列，返回尚未执行的任务。</li></ul><h4 id="创建线程池并且使用"><a href="#创建线程池并且使用" class="headerlink" title="创建线程池并且使用"></a>创建线程池并且使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuwii.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/11/1 11:08&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPool</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> BlockingQueue queue = <span class="keyword">new</span> ArrayBlockingQueue(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadPoolExecutor executor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">5</span>, <span class="number">10</span>, <span class="number">200</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">            queue);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadPoolExecutor executor = TestPool.executor;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++) &#123;</span><br><span class="line">            MyTask myTask = <span class="keyword">new</span> MyTask(i);</span><br><span class="line">            executor.execute(myTask);</span><br><span class="line">            System.out.println(<span class="string">"线程池中线程数目："</span> + executor.getPoolSize() + <span class="string">"，缓存队列中等待执行的任务数目："</span> +</span><br><span class="line">                    executor.getQueue().size() + <span class="string">"，已执行完的任务数目："</span> + executor.getCompletedTaskCount());</span><br><span class="line">        &#125;</span><br><span class="line">        executor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> taskNum;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyTask</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.taskNum = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"正在执行task "</span> + taskNum);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.currentThread().sleep(<span class="number">4000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"task "</span> + taskNum + <span class="string">"执行完毕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">正在执行task 0</span><br><span class="line">线程池中线程数目：1，缓存队列中等待执行的任务数目：0，已执行完的任务数目：0</span><br><span class="line">线程池中线程数目：2，缓存队列中等待执行的任务数目：0，已执行完的任务数目：0</span><br><span class="line">线程池中线程数目：3，缓存队列中等待执行的任务数目：0，已执行完的任务数目：0</span><br><span class="line">正在执行task 1</span><br><span class="line">线程池中线程数目：4，缓存队列中等待执行的任务数目：0，已执行完的任务数目：0</span><br><span class="line">正在执行task 2</span><br><span class="line">正在执行task 3</span><br><span class="line">线程池中线程数目：5，缓存队列中等待执行的任务数目：0，已执行完的任务数目：0</span><br><span class="line">正在执行task 4</span><br><span class="line">线程池中线程数目：5，缓存队列中等待执行的任务数目：1，已执行完的任务数目：0</span><br><span class="line">线程池中线程数目：5，缓存队列中等待执行的任务数目：2，已执行完的任务数目：0</span><br><span class="line">线程池中线程数目：5，缓存队列中等待执行的任务数目：3，已执行完的任务数目：0</span><br><span class="line">线程池中线程数目：5，缓存队列中等待执行的任务数目：4，已执行完的任务数目：0</span><br><span class="line">线程池中线程数目：5，缓存队列中等待执行的任务数目：5，已执行完的任务数目：0</span><br><span class="line">线程池中线程数目：6，缓存队列中等待执行的任务数目：5，已执行完的任务数目：0</span><br><span class="line">线程池中线程数目：7，缓存队列中等待执行的任务数目：5，已执行完的任务数目：0</span><br><span class="line">正在执行task 10</span><br><span class="line">线程池中线程数目：8，缓存队列中等待执行的任务数目：5，已执行完的任务数目：0</span><br><span class="line">正在执行task 11</span><br><span class="line">正在执行task 12</span><br><span class="line">线程池中线程数目：9，缓存队列中等待执行的任务数目：5，已执行完的任务数目：0</span><br><span class="line">正在执行task 13</span><br><span class="line">线程池中线程数目：10，缓存队列中等待执行的任务数目：5，已执行完的任务数目：0</span><br><span class="line">正在执行task 14</span><br><span class="line">task 0执行完毕</span><br><span class="line">task 2执行完毕</span><br><span class="line">task 1执行完毕</span><br><span class="line">正在执行task 7</span><br><span class="line">task 3执行完毕</span><br><span class="line">正在执行task 8</span><br><span class="line">正在执行task 6</span><br><span class="line">正在执行task 5</span><br><span class="line">task 4执行完毕</span><br><span class="line">task 10执行完毕</span><br><span class="line">task 11执行完毕</span><br><span class="line">task 14执行完毕</span><br><span class="line">task 12执行完毕</span><br><span class="line">task 13执行完毕</span><br><span class="line">正在执行task 9</span><br><span class="line">task 7执行完毕</span><br><span class="line">task 6执行完毕</span><br><span class="line">task 5执行完毕</span><br><span class="line">task 8执行完毕</span><br><span class="line">task 9执行完毕</span><br></pre></td></tr></table></figure><p></p><p>从上面的结果可以看出来，当线程池中线程的数目大于5时，便将任务放入任务缓存队列里面，当任务缓存队列满了之后，便创建新的线程。如果上面程序中，将for循环中改成执行20个任务，就会抛出任务拒绝异常了。</p><p>例外创建线程的时候建议使用的时<code>Executors</code>类提供的方法来创建线程池：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Executors.newCachedThreadPool(); //创建一个缓冲池，缓冲池容量大小为Integer.MAX_VALUE</span><br><span class="line">Executors.newSingleThreadExecutor(); //创建容量为1的缓冲池</span><br><span class="line">Executors.newFixedThreadPool(int corePoolSize); //创建固定容量大小的缓冲池，缓存队列大小为Integer.MAX_VALUE</span><br><span class="line">Executors.newScheduledThreadPool(int corePoolSize) //创建一个最大容量为Integer.MAX_VALUE的缓冲池，支持定时及周期性任务执行</span><br></pre></td></tr></table></figure><p></p><h3 id="配置线程池的大小"><a href="#配置线程池的大小" class="headerlink" title="配置线程池的大小"></a>配置线程池的大小</h3><p>一般需要根据任务的类型来配置线程池大小：</p><ul><li><p>如果是CPU密集型任务，就需要尽量压榨CPU，参考值可以设为 NCPU+1；</p></li><li><p>如果是IO密集型任务，参考值可以设置为2*NCPU。</p></li></ul><p>当然，这只是一个参考值，具体的设置还需要根据实际情况进行调整，比如可以先将线程池大小设置为参考值，再观察任务运行情况和系统负载、资源利用率来进行适当调整。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>当一个task被安排进来的时候，再确定不是空值后，直接判断在池中已经有工作的线程是否小于corePoolSize，小于则增加一个线程来负责这个task。</li><li>如果池中已经工作的线程大于等于corePoolSize，就向队列里存task，而不是继续增加线程。</li><li>当workQueue.offer失败时，也就是说task不能再向队列里放的时候，而此时工作线程大于等于corePoolSize，那么新进的task，就要新开一个线程来接待了。</li><li>线程池工作机制是这样：<br>a.如果正在运行的线程数小于 <code>corePoolSize</code>，那就马上创建线程并运行这个任务，而不会进行排队。<br>b. 如果正在运行的线程数不小于 <code>corePoolSize</code>，那就把这个任务放入队列。<br>c. 如果队列满了，并且正在运行的线程数小于 <code>maximumPoolSize</code>，那么还是要创建线程并运行这个任务。<br>d.如果队列满了，并且正在运行的线程数不小于 <code>maximumPoolSize</code>，那么线程池就会调用handler里方法。(采用<code>LinkedBlockingDeque</code>就不会出现队列满情况)。</li><li>使用线程池的时候，需要注意先分配好线程池的大小，大约每个线程占用10M内存，就是空间换时间，如果控制的不好，会存在内存溢出的问题，导致机器宕机。</li></ol><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Windows下调试Hadoop集群报错Failed to find winutils.exe]]></title>
      <url>/hadoop-miss-winutils.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>在windows 环境使用<code>Java</code>下调试远程虚拟机中的Hadoop集群报错，问题很奇怪，说是少了 <code>winutils.exe</code> 文件，而且少了<code>HADOOP_HOME</code> 的环境变量；我是部署在虚拟机CentOS 7 上的集群，难道Windows 上使用 它的Hadoop还需要自己安装环境，事实上，是真的。。</p><a id="more"></a><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">10:17:34,377 DEBUG Shell:675 - Failed to find winutils.exe</span><br><span class="line">java.io.FileNotFoundException: java.io.FileNotFoundException: HADOOP_HOME and hadoop.home.dir are unset. -see https://wiki.apache.org/hadoop/WindowsProblems</span><br><span class="line">	at org.apache.hadoop.util.Shell.fileNotFoundException(Shell.java:528)</span><br><span class="line">	at org.apache.hadoop.util.Shell.getHadoopHomeDir(Shell.java:549)</span><br><span class="line">	at org.apache.hadoop.util.Shell.getQualifiedBin(Shell.java:572)</span><br><span class="line">	at org.apache.hadoop.util.Shell.&lt;clinit&gt;(Shell.java:669)</span><br><span class="line">	at org.apache.hadoop.util.StringUtils.&lt;clinit&gt;(StringUtils.java:79)</span><br><span class="line">	at org.apache.hadoop.fs.FileSystem$Cache$Key.&lt;init&gt;(FileSystem.java:2972)</span><br><span class="line">	at org.apache.hadoop.fs.FileSystem$Cache$Key.&lt;init&gt;(FileSystem.java:2967)</span><br><span class="line">	at org.apache.hadoop.fs.FileSystem$Cache.get(FileSystem.java:2829)</span><br><span class="line">	at org.apache.hadoop.fs.FileSystem.get(FileSystem.java:389)</span><br><span class="line">	at com.devframe.util.HdfsUtils.mkdir(HdfsUtils.java:43)</span><br><span class="line">	at com.devframe.util.HdfsUtilsTest.testMkdir(HdfsUtilsTest.java:32)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">	at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)</span><br><span class="line">	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)</span><br><span class="line">	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)</span><br><span class="line">	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)</span><br><span class="line">	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)</span><br><span class="line">	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)</span><br><span class="line">	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)</span><br><span class="line">	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)</span><br><span class="line">	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)</span><br><span class="line">	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)</span><br><span class="line">	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)</span><br><span class="line">	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)</span><br><span class="line">	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)</span><br><span class="line">	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)</span><br><span class="line">	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)</span><br><span class="line">	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)</span><br><span class="line">	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)</span><br><span class="line">	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)</span><br><span class="line">	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)</span><br><span class="line">	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)</span><br><span class="line">Caused by: java.io.FileNotFoundException: HADOOP_HOME and hadoop.home.dir are unset.</span><br><span class="line">	at org.apache.hadoop.util.Shell.checkHadoopHomeInner(Shell.java:448)</span><br><span class="line">	at org.apache.hadoop.util.Shell.checkHadoopHome(Shell.java:419)</span><br><span class="line">	at org.apache.hadoop.util.Shell.&lt;clinit&gt;(Shell.java:496)</span><br><span class="line">	... 31 more</span><br></pre></td></tr></table></figure><h3 id="寻找问题"><a href="#寻找问题" class="headerlink" title="寻找问题"></a>寻找问题</h3><p>百度了下，找到了问题：</p><blockquote><p><strong>Problems running Hadoop on Windows</strong></p><p>Hadoop requires native libraries on Windows to work properly -that includes to access the file:// filesystem, where Hadoop uses some Windows APIs to implement posix-like file access permissions.</p><p>This is implemented in HADOOP.DLL and WINUTILS.EXE.</p><p>In particular, %HADOOP_HOME%\BIN\WINUTILS.EXE must be locatable.</p><p>If it is not, Hadoop or an application built on top of Hadoop will fail.</p><p><strong>How to fix a missing WINUTILS.EXE</strong></p><p>You can fix this problem in two ways</p><ul><li>Install a full native windows Hadoop version. The ASF does not currently (September 2015) release such a version; releases are available externally.</li><li>Or: get the WINUTILS.EXE binary from a Hadoop redistribution. There is a repository of this for some Hadoop versions <a rel="external nofollow noopener noreferrer" target="_blank" href="https://github.com/steveloughran/winutils">on github</a>.</li></ul><p>Then</p><ul><li>Set the environment variable %HADOOP_HOME% to point to the directory above the BIN dir containing WINUTILS.EXE.</li><li>Or: run the Java process with the system property hadoop.home.dir set to the home directory.</li></ul><footer><strong>Hadoop Wiki ——</strong><cite><a href="https://wiki.apache.org/hadoop/WindowsProblems" rel="external nofollow noopener noreferrer" target="_blank">wiki.apache.org/hadoop/WindowsProblems</a></cite></footer></blockquote><p>上面的意思是说Hadoop使用一些Windows api来实现文件访问。</p><p>必要 hadoop.DLL和WINUTILS.EXE，这两个文件。</p><p>还需要配置 <code>% HADOOP_HOME %</code>的环境变量，来定位 <code>WINUTILS.EXE</code>;</p><p>解决办法就是去上面它给的GitHub上 下载对应版本的 文件，将 adoop.DLL和WINUTILS.EXE 文件拷到本地 （Windows）的<code>Hadoop</code> 文件夹下的<code>bin</code>文件夹中。</p><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><h4 id="在Windows-上配置本地Hadoop-环境"><a href="#在Windows-上配置本地Hadoop-环境" class="headerlink" title="在Windows 上配置本地Hadoop 环境"></a>在Windows 上配置本地Hadoop 环境</h4><h5 id="本地安装Hadoop"><a href="#本地安装Hadoop" class="headerlink" title="本地安装Hadoop"></a>本地安装Hadoop</h5><p>将对应版本的 Hadoop 压缩包，拷一份到Windows 电脑的D盘中解压，我的是Hadoop2.8.1 版本的，将<code>hadoop-2.8.1.tar.gz</code> 解压完就是这样的：</p><p><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fmwx6opyhnj20hx098jrv.jpg" alt="image"></p><p>然后将自己从上面引用地址 GitHub 中 下载对应版本的文件，将 hadoop.DLL和WINUTILS.EXE 拷贝到 bin 目录中。</p><p><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fmwx7fllvaj20hr09wdgl.jpg" alt="image"></p><p>修改 <code>/etc/hadoop/hadoop-env.cmd</code> 文件中<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set JAVA_HOME=%JAVA_HOME%</span><br></pre></td></tr></table></figure><p></p><p>为（修改成自己机器配置的JDK位置）<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set JAVA_HOME=C:\Program Files\Java\jdk1.8.0_144</span><br></pre></td></tr></table></figure><p></p><p><strong>需要注意的是我这个配置还有个小问题，并不能成功使用Hadoop 命令。这个将在文章最后面讲出原因。</strong></p><p>查看 /etc/hadoop/core-site.xml 中<code>fs.default.name</code>是不是的属性值是不是和服务器中一致。不一致需要改成一致。<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/root/hadoop/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>Abase for other temporary directories.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.default.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://server1:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h5 id="配置Hadoop环境变量"><a href="#配置Hadoop环境变量" class="headerlink" title="配置Hadoop环境变量"></a>配置Hadoop环境变量</h5><p>新增环境变量 <code>HADOOP_HOME</code> ，变量值为 <code>D:\hadoop-2.8.1</code></p><p>环境变量<code>Path</code> 中新增 <code>%HADOOP_HOME%\bin</code></p><h5 id="配置本地Hosts"><a href="#配置本地Hosts" class="headerlink" title="配置本地Hosts"></a>配置本地Hosts</h5><p>需要在C:\Windows\System32\drivers\etc\hosts 文件配置 ip，例如：使用 HDFS 的时候我们机器的配置文件中的地址是：<code>hdfs://server1:9000</code> ，但是本地电脑没配置Hosts 的话，找不到 server1 的机器。</p><p>新增我的三台机器的集群信息<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.19.185 server1</span><br><span class="line">192.168.19.184 server2</span><br><span class="line">192.168.19.199 server3</span><br></pre></td></tr></table></figure><p></p><p>这样下来，再次本地（Windows）调试虚拟机中Hadoop 集群就不会出现开头的问题了。</p><h3 id="最后说下中途说的那个问题"><a href="#最后说下中途说的那个问题" class="headerlink" title="最后说下中途说的那个问题"></a>最后说下中途说的那个问题</h3><p>我在 <code>/etc/hadoop/hadoop-env.cmd</code> 文件中 修改成这样的：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> JAVA_HOME=C:\Program Files\Java\jdk1.8.0_144</span><br></pre></td></tr></table></figure><p></p><p>但是Windows 下的 <code>CMD</code> 或者<code>PowerShell</code> 并不能成功使用Hadoop 命令，会报错：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\server&gt; hadoop version</span><br><span class="line">系统找不到指定的路径。</span><br><span class="line">Error: JAVA_HOME is incorrectly <span class="built_in">set</span>.</span><br><span class="line">       Please update D:\hadoop-2.8.1\etc\hadoop\hadoop-env.cmd</span><br><span class="line"><span class="string">'-Xmx512m'</span> 不是内部或外部命令，也不是可运行的程序</span><br><span class="line">或批处理文件。</span><br></pre></td></tr></table></figure><p></p><p>报错，我们设置的<code>JAVA_HOME</code> 位置并不正确。</p><p>这个问题很奇怪，因为我的这个JDK 位置用过很多次了，可以肯定没问题。</p><p>在网上找到了问题所在，不过还是需要自己改。。</p><blockquote><p>if your java environment path contains space, such as “C:\Program Files\java\xxxxx” , the word 《Program Files》 contains a space, so CMD can’t identificate<br>this is the right answer</p></blockquote><p><code>Program Files</code>，就是这个我们安装软件默认的路径，有空格，CMD 不能识别它，导致我的位置失效了。所以设置路径的时候不能有空格。</p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java8 新特性Stream 的学习和使用方法]]></title>
      <url>/java-stream.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="流（Stream）"><a href="#流（Stream）" class="headerlink" title="流（Stream）"></a>流（Stream）</h3><p>流是java 8 中新引入的特性，用来处理集合中的数据，Stream 是一个来自数据源的元素队列并支持聚合操作。</p><ul><li>Java 中 Stream 不会存储元素。</li><li>数据源 流的来源。 可以是集合，数组，I/O channel， 产生器generator 等。</li><li>聚合操作 类似SQL语句一样的操作， 比如filter, map, reduce, find, match, sorted等。</li></ul><a id="more"></a><p>Stream操作还有几个特征：</p><ul><li><strong>只遍历一次</strong>。我们可以把流想象成一条流水线，流水线的源头是我们的数据源(一个集合)，数据源中的元素依次被输送到流水线上，我们可以在流水线上对元素进行各种操作。一旦元素走到了流水线的另一头，那么这些元素就被“消费掉了”，我们无法再对这个流进行操作。当然，我们可以从数据源那里再获得一个新的流重新遍历一遍。</li><li><strong>Pipelining</strong>: 中间操作都会返回流对象本身。 这样多个操作可以串联成一个管道， 如同流式风格（fluent style）。 这样做可以对操作进行优化， 比如延迟执行(laziness)和短路( short-circuiting)。</li><li><strong>内部迭代</strong>： 以前对集合遍历都是通过Iterator或者For-Each的方式, 显式的在集合外部进行迭代， 这叫做外部迭代。 Stream提供了内部迭代的方式， 通过访问者模式(Visitor)实现。</li></ul><h3 id="为什么需要-Stream"><a href="#为什么需要-Stream" class="headerlink" title="为什么需要 Stream"></a>为什么需要 Stream</h3><blockquote><p>Stream 作为 Java 8 的一大亮点，它与 java.io 包里的 InputStream 和 OutputStream 是完全不同的概念。它也不同于 StAX 对 XML 解析的 Stream，也不是 Amazon Kinesis 对大数据实时处理的 Stream。Java 8 中的 Stream 是对集合（Collection）对象功能的增强，它专注于对集合对象进行各种非常便利、高效的聚合操作（aggregate operation），或者大批量数据操作 (bulk data operation)。Stream API 借助于同样新出现的 Lambda 表达式，极大的提高编程效率和程序可读性。同时它提供串行和并行两种模式进行汇聚操作，并发模式能够充分利用多核处理器的优势，使用 fork/join 并行方式来拆分任务和加速处理过程。通常编写并行代码很难而且容易出错, 但使用 Stream API 无需编写一行多线程的代码，就可以很方便地写出高性能的并发程序。所以说，Java 8 中首次出现的 java.util.stream 是一个函数式语言+多核时代综合影响的产物。</p><p><a href="https://www.ibm.com/developerworks/cn/java/j-lo-java8streamapi/index.html" rel="external nofollow noopener noreferrer" target="_blank">Java 8 中的 Streams API 详解</a></p></blockquote><h3 id="流的使用"><a href="#流的使用" class="headerlink" title="流的使用"></a>流的使用</h3><p>流的使用过程有三步：</p><ul><li>获取流；</li><li>中间操作，得到一个新的流；</li><li>最终操作，获取结果。</li></ul><h4 id="获取流"><a href="#获取流" class="headerlink" title="获取流"></a>获取流</h4><p>流有两种：</p><ul><li>stream() ： 创建串行流。</li><li>parallelStream() ： 创建并行流。</li></ul><p>并行流的特点就是将一个大任务切分成多个小任务，无序一起执行，当然如果我们需要顺序输出的话可以使用<code>forEachOrdered</code>，速度会比串行流快一些。它通过默认的ForkJoinPool,可能提高你的多线程任务的速度。</p><h5 id="从集合获取流"><a href="#从集合获取流" class="headerlink" title="从集合获取流"></a>从集合获取流</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;FarmEntity&gt; list = service.getBySql(sql1);</span><br><span class="line">Stream&lt;FarmEntity&gt; stream = list.stream();</span><br></pre></td></tr></table></figure><h5 id="从数组获取流"><a href="#从数组获取流" class="headerlink" title="从数组获取流"></a>从数组获取流</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String[] arrays = &#123;<span class="string">"你"</span>, <span class="string">"我"</span>, <span class="string">"她"</span>&#125;;</span><br><span class="line">Stream&lt;String&gt; stream = Arrays.stream(arrays);</span><br></pre></td></tr></table></figure><h5 id="从值获取流"><a href="#从值获取流" class="headerlink" title="从值获取流"></a>从值获取流</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Stream.of(<span class="string">"你"</span>, <span class="string">"我"</span>, <span class="string">"她"</span>);</span><br></pre></td></tr></table></figure><h5 id="从文件获取流"><a href="#从文件获取流" class="headerlink" title="从文件获取流"></a>从文件获取流</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Stream&lt;String&gt; file =Files.lines(Paths.get(<span class="string">"D:\\zhangkai\\WorkSpace\\Git\\hexo\\_config.yml"</span>));</span><br><span class="line">    file.forEach(System.out::println);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用NIO获取流，可以打印出文本文件的内容。</p><h4 id="流的操作"><a href="#流的操作" class="headerlink" title="流的操作"></a>流的操作</h4><h5 id="filter-过滤"><a href="#filter-过滤" class="headerlink" title="filter 过滤"></a>filter 过滤</h5><p>filter函数接收一个Lambda表达式作为参数，该表达式返回boolean，在执行过程中，流将元素逐一输送给filter，并筛选出执行结果为true的元素。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String[] strings = &#123;<span class="string">"珊瑚"</span>, <span class="string">"阳光"</span>, <span class="string">"细腻"</span>, <span class="string">"冷暖"</span>, <span class="string">"阳光"</span>&#125;;</span><br><span class="line">Arrays.stream(strings).filter(n -&gt; n.startsWith(<span class="string">"冷"</span>)).forEach(System.out::print);</span><br></pre></td></tr></table></figure><p></p><h5 id="distinct-去重"><a href="#distinct-去重" class="headerlink" title="distinct 去重"></a>distinct 去重</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Arrays.stream(strings).distinct().forEach(System.out::print);</span><br></pre></td></tr></table></figure><h5 id="limit-截取"><a href="#limit-截取" class="headerlink" title="limit 截取"></a>limit 截取</h5><p>截取前面两个单位：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Arrays.stream(strings).limit(<span class="number">2</span>).forEach(System.out::print);</span><br></pre></td></tr></table></figure><p></p><h5 id="skip-跳过"><a href="#skip-跳过" class="headerlink" title="skip 跳过"></a>skip 跳过</h5><p>和上面的limit 相反，跳过前面两个<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p></p><h5 id="map-映射"><a href="#map-映射" class="headerlink" title="map 映射"></a>map 映射</h5><p>map 方法用于映射每个元素到对应的结果。<br>给每个词语后面加个 “兮”<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Arrays.stream(strings).map(s -&gt; s + <span class="string">"兮"</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p></p><p>输出：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">珊瑚兮</span><br><span class="line">阳光兮</span><br><span class="line">细腻兮</span><br><span class="line">冷暖兮</span><br><span class="line">阳光兮</span><br></pre></td></tr></table></figure><p></p><h5 id="sorted-排序"><a href="#sorted-排序" class="headerlink" title="sorted 排序"></a>sorted 排序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Arrays.stream(strings).sorted((x, y) -&gt; x.compareTo(y)).forEach(System.out::println);</span></span><br><span class="line">Arrays.stream(strings).sorted(String::compareTo).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>输出：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">冷暖</span><br><span class="line">珊瑚</span><br><span class="line">细腻</span><br><span class="line">阳光</span><br><span class="line">阳光</span><br></pre></td></tr></table></figure><p></p><p>java8 以前排序：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Before Java 8 sorted</span></span><br><span class="line">       System.out.println(<span class="string">"java8以前排序："</span>);</span><br><span class="line">       List&lt;String&gt; list1 = Arrays.asList(strings);</span><br><span class="line">       list1.sort(<span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String o1, String o2)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">       System.out.printf(<span class="string">"java8 以前的排序：%s%n"</span>, list1);</span><br></pre></td></tr></table></figure><p></p><p>输出：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java8以前排序：</span><br><span class="line">java8 以前的排序：[冷暖, 珊瑚, 细腻, 阳光, 阳光]</span><br></pre></td></tr></table></figure><p></p><p>HashMap根据value值排序key：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"spring"</span>, <span class="number">1</span>);</span><br><span class="line">map.put(<span class="string">"summer"</span>, <span class="number">2</span>);</span><br><span class="line">map.put(<span class="string">"autumn"</span>, <span class="number">3</span>);</span><br><span class="line">map.put(<span class="string">"winter"</span>, <span class="number">4</span>);</span><br><span class="line">map.entrySet().stream()</span><br><span class="line">    .sorted((a, b) -&gt; b.getValue().compareTo(a.getValue()))</span><br><span class="line">    .forEach(a -&gt; System.out.println(a.getKey()));</span><br></pre></td></tr></table></figure><p></p><p>输出结果：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">winter</span><br><span class="line">autumn</span><br><span class="line">summer</span><br><span class="line">spring</span><br></pre></td></tr></table></figure><p></p><h5 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//统计</span></span><br><span class="line">        List&lt;Integer&gt; list4 = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>);</span><br><span class="line">        IntSummaryStatistics stats = list4.stream().mapToInt((x) -&gt; x).summaryStatistics();</span><br><span class="line">        System.out.println(<span class="string">"Highest number in List : "</span> + stats.getMax());</span><br><span class="line">        System.out.println(<span class="string">"Lowest  number in List : "</span> + stats.getMin());</span><br><span class="line">        System.out.println(<span class="string">"Sum of all numbers : "</span> + stats.getSum());</span><br><span class="line">        System.out.println(<span class="string">"Average of all numbers : "</span> + stats.getAverage());</span><br></pre></td></tr></table></figure><p>运行结果：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Highest number in List : 4</span><br><span class="line">Lowest  number in List : 1</span><br><span class="line">Sum of all numbers : 11</span><br><span class="line">Average of all numbers : 2.2</span><br></pre></td></tr></table></figure><p></p><h5 id="match-匹配"><a href="#match-匹配" class="headerlink" title="match 匹配"></a>match 匹配</h5><ul><li><code>anyMatch</code>用于判断流中是否存在至少一个元素满足指定的条件，这个判断条件通过Lambda表达式传递给anyMatch，执行结果为<code>boolean</code>类型。</li><li><code>noneMatch</code>与allMatch恰恰相反，它用于判断流中的所有元素是否都不满足指定条件</li><li><code>findAny</code>能够从流中随便选一个元素出来，它返回一个Optional类型的元素。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Boolean result1 = Arrays.stream(strings).allMatch(s -&gt; s.equals(<span class="string">"java"</span>));</span><br><span class="line">       System.out.println(result1);</span><br><span class="line"></span><br><span class="line">       Boolean reslut2 = Arrays.stream(strings).noneMatch(s -&gt; s.equals(<span class="string">"java"</span>));</span><br><span class="line">       System.out.println(reslut2);</span><br><span class="line">       <span class="comment">//随机读取一个</span></span><br><span class="line">       Optional&lt;String&gt; getResult = Arrays.stream(strings).findAny();</span><br><span class="line">       System.out.println(getResult);</span><br><span class="line">       System.out.printf(<span class="string">"获取Optional中的值：%s%n"</span>, getResult.get());</span><br></pre></td></tr></table></figure></li></ul><p>运行结果：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">false</span><br><span class="line">true</span><br><span class="line">Optional[冷暖]</span><br><span class="line">获取Optional中的值：冷暖</span><br></pre></td></tr></table></figure><p></p><blockquote><p>Optional是Java8新加入的一个容器，这个容器只存1个或0个元素，它用于防止出现NullpointException，它提供如下方法：</p><ul><li><code>isPresent()</code> 判断容器中是否有值。</li><li><code>ifPresent(Consume lambda)</code> 容器若不为空则执行括号中的Lambda表达式。</li><li><code>T get()</code> 获取容器中的元素，若容器为空则抛出NoSuchElement异常。</li><li><code>T orElse(T other)</code> 获取容器中的元素，若容器为空则返回括号中的默认值。</li></ul></blockquote><h5 id="reduce-归约"><a href="#reduce-归约" class="headerlink" title="reduce 归约"></a>reduce 归约</h5><p>求和：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//归约</span></span><br><span class="line">        <span class="comment">//第一种方法求和</span></span><br><span class="line">        String connectStrings = Arrays.stream(strings).reduce(<span class="string">""</span>, (x, y) -&gt; x + y);</span><br><span class="line">        System.out.println(connectStrings);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二种方法求和</span></span><br><span class="line">        String connectStrings1 = Arrays.stream(strings).reduce(<span class="string">""</span>, TestStream::getConnectStrings);</span><br><span class="line">        System.out.println(connectStrings1);</span><br></pre></td></tr></table></figure><p></p><p>getConnectStrings方法：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Connect Strings</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> s1 参数1</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> s2 参数2</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getConnectStrings</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s1 + s2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p><code>reduce</code>中第一个参数是初始值，第二个参数是方法引用。</p><h5 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h5><p>StreamAPI提供了三种数值流：IntStream、DoubleStream、LongStream，也提供了将普通流转换成数值流的三种方法：mapToInt、mapToDouble、mapToLong。</p><p>每种数值流都提供了数值计算函数，如max、min、sum等。</p><p>下面使用 mapToInt 为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String[] numberStrings = &#123;<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>&#125;;</span><br><span class="line"><span class="comment">// mapToInt参数： 需要转换成相应的类型方法</span></span><br><span class="line">IntStream intStream = Arrays.stream(numberStrings).mapToInt(Integer::valueOf);</span><br><span class="line"><span class="comment">//使用对应的 Optional 接收</span></span><br><span class="line">OptionalInt optionalNumber = intStream.max();</span><br><span class="line"><span class="comment">// 取值，给默认值 0，为空结果为0</span></span><br><span class="line">System.out.printf(<span class="string">"numberStrings's max number is: %s%n"</span>, optionalNumber.orElse(<span class="number">0</span>));</span><br></pre></td></tr></table></figure><p>打印结果：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numberStrings&apos;s max number is: 3</span><br></pre></td></tr></table></figure><p></p><p>由于数值流可能为空，并且给空的数值流计算最大值是没有意义的，因此max函数返回OptionalInt，它是Optional的一个子类，能够判断流是否为空，并对流为空的情况作相应的处理。 所以可以直接使用 <code>OptionalInt.getAsInt()</code>获取容器的值。<br>为空的话捕捉异常：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java.util.NoSuchElementException: No value present</span><br><span class="line">	at java.util.OptionalInt.getAsInt(OptionalInt.java:118)</span><br><span class="line">	at com.wuwii.test.TestStream.main(TestStream.java:105)</span><br></pre></td></tr></table></figure><p></p><p>此外，mapToInt、mapToDouble、mapToLong进行数值操作后的返回结果分别为：OptionalInt、OptionalDouble、OptionalLong。</p><h5 id="Collectors-集合归约"><a href="#Collectors-集合归约" class="headerlink" title="Collectors 集合归约"></a>Collectors 集合归约</h5><p>将流转换成集合和聚合元素。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Collectors 集合归约</span></span><br><span class="line">       <span class="comment">//  toList</span></span><br><span class="line">       List&lt;String&gt; list2 = Arrays.stream(strings).collect(Collectors.toList());</span><br><span class="line">       <span class="comment">// Get String by connected</span></span><br><span class="line">       String connectStrings2 = Arrays.stream(strings).collect(Collectors.joining(<span class="string">","</span>));</span><br><span class="line">       System.out.printf(<span class="string">"Collectors toList: %s , Conlletors Join Strings: %s%n"</span>, list2, connectStrings2);</span><br></pre></td></tr></table></figure><p></p><p>打印结果：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Collectors toList: [冷暖, 珊瑚, 细腻, 阳光, 阳光] , Conlletors Join Strings: 冷暖,珊瑚,细腻,阳光,阳光</span><br></pre></td></tr></table></figure><p></p><p>后面补充: Collectors中还有一个groupingBy() 方法，比较实用，例子来源网上<a rel="external nofollow noopener noreferrer" target="_blank" href="https://nkcoder.github.io/2016/01/24/java-8-stream-api/">使用Java 8中的Stream</a></p><ol><li><p><strong><code>groupingBy()</code>表示根据某一个字段或条件进行分组，返回一个<code>Map</code>，其中key为分组的字段或条件，value默认为list，<code>groupingByConcurrent()</code>是其并发版本</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, List&lt;Locale&gt;&gt; countryToLocaleList = Stream.of(Locale.getAvailableLocales())</span><br><span class="line">    .collect(Collectors.groupingBy(l -&gt; l.getDisplayCountry()));</span><br></pre></td></tr></table></figure></li><li><p><strong>如果<code>groupingBy()</code>分组的依据是一个bool条件，则key的值为true/false，此时与partitioningBy()等价，且<code>partitioningBy()</code>的效率更高</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// predicate</span></span><br><span class="line">Map&lt;Boolean, List&lt;Locale&gt;&gt; englishAndOtherLocales = Stream.of(Locale.getAvailableLocales())</span><br><span class="line">    .collect(Collectors.groupingBy(l -&gt; l.getDisplayLanguage().equalsIgnoreCase(<span class="string">"English"</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// partitioningBy</span></span><br><span class="line">Map&lt;Boolean, List&lt;Locale&gt;&gt; englishAndOtherLocales2 = Stream.of(Locale.getAvailableLocales())</span><br><span class="line">    .collect(Collectors.partitioningBy(l -&gt; l.getDisplayLanguage().equalsIgnoreCase(<span class="string">"English"</span>)));</span><br></pre></td></tr></table></figure></li><li><p><strong><code>groupingBy()</code>提供第二个参数，表示downstream，即对分组后的value作进一步的处理</strong>：</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回set，而不是list：</span></span><br><span class="line">Map&lt;String, Set&lt;Locale&gt;&gt; countryToLocaleSet = Stream.of(Locale.getAvailableLocales())</span><br><span class="line">          .collect(Collectors.groupingBy(l -&gt; l.getDisplayCountry(), Collectors.toSet()));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回value集合中元素的数量：</span></span><br><span class="line">Map&lt;String, Long&gt; countryToLocaleCounts = Stream.of(Locale.getAvailableLocales())</span><br><span class="line">          .collect(Collectors.groupingBy(l -&gt; l.getDisplayCountry(), Collectors.counting()));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对value集合中的元素求和：</span></span><br><span class="line">Map&lt;String, Integer&gt; cityToPopulationSum = Stream.of(cities)</span><br><span class="line">        .collect(Collectors.groupingBy(City::getName, Collectors.summingInt(City::getPopulation)));</span><br><span class="line">		</span><br><span class="line"><span class="comment">// 对value的某一个字段求最大值，注意value是Optional的：</span></span><br><span class="line">Map&lt;String, Optional&lt;City&gt;&gt; cityToPopulationMax = Stream.of(cities)</span><br><span class="line">        .collect(Collectors.groupingBy(City::getName,</span><br><span class="line">            Collectors.maxBy(Comparator.comparing(City::getPopulation))));</span><br><span class="line">			</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用mapping对value的字段进行map处理：</span></span><br><span class="line">Map&lt;String, Optional&lt;String&gt;&gt; stateToNameMax = Stream.of(cities)</span><br><span class="line">    .collect(Collectors.groupingBy(City::getState, Collectors.mapping(City::getName,</span><br><span class="line">        Collectors.maxBy(Comparator.comparing(String::length)))));</span><br><span class="line"></span><br><span class="line">Map&lt;String, Set&lt;String&gt;&gt; stateToNameSet = Stream.of(cities)</span><br><span class="line">.collect(Collectors.groupingBy(City::getState,</span><br><span class="line">    Collectors.mapping(City::getName, Collectors.toSet())));</span><br><span class="line">	</span><br><span class="line"><span class="comment">// 通过summarizingXXX获取统计结果：</span></span><br><span class="line">Map&lt;String, IntSummaryStatistics&gt; stateToPopulationSummary = Stream.of(cities)</span><br><span class="line">    .collect(Collectors.groupingBy(City::getState, Collectors.summarizingInt(City::getPopulation)));</span><br><span class="line">reducing()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以对结果作更复杂的处理，但是reducing()却并不常用：</span></span><br><span class="line">Map&lt;String, String&gt; stateToNameJoining = Stream.of(cities)</span><br><span class="line">    .collect(Collectors.groupingBy(City::getState, Collectors.reducing(<span class="string">""</span>, City::getName,</span><br><span class="line">        (s, t) -&gt; s.length() == <span class="number">0</span> ? t : s + <span class="string">", "</span> + t)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比如上例可以通过mapping达到同样的效果：</span></span><br><span class="line">Map&lt;String, String&gt; stateToNameJoining2 = Stream.of(cities)</span><br><span class="line">        .collect(Collectors.groupingBy(City::getState,</span><br><span class="line">            Collectors.mapping(City::getName, Collectors.joining(<span class="string">", "</span>)</span><br><span class="line">        )));</span><br></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuwii.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Learn Java 8 Stream</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Zhang Kai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> &lt;pre&gt;2017/10/25 22:16&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Get Stream from file</span></span><br><span class="line">        System.out.println(<span class="string">"读取文件："</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Stream&lt;String&gt; file = Files.lines(Paths.get(<span class="string">"D:\\zhangkai\\WorkSpace\\Git\\hexo\\_config.yml"</span>));</span><br><span class="line">            file.forEach(System.out::println);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get Stream by Filter</span></span><br><span class="line">        String[] strings = &#123;<span class="string">"珊瑚"</span>, <span class="string">"阳光"</span>, <span class="string">"细腻"</span>, <span class="string">"冷暖"</span>, <span class="string">"阳光"</span>&#125;;</span><br><span class="line">        Arrays.stream(strings).filter(n -&gt; n.startsWith(<span class="string">"冷"</span>)).forEach(System.out::print);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get Stream by Distinct</span></span><br><span class="line">        System.out.println(<span class="string">"去重:"</span>);</span><br><span class="line">        Arrays.stream(strings).distinct().forEach(System.out::print);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get Stream by Limit</span></span><br><span class="line">        System.out.println(<span class="string">"截取:"</span>);</span><br><span class="line">        Arrays.stream(strings).limit(<span class="number">2</span>).forEach(System.out::print);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get Stream by Skip</span></span><br><span class="line">        System.out.println(<span class="string">"跳过:"</span>);</span><br><span class="line">        Arrays.stream(strings).skip(<span class="number">2</span>).forEach(System.out::print);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Java 8 sorted</span></span><br><span class="line">        System.out.println(<span class="string">"排序："</span>);</span><br><span class="line">        <span class="comment">//Arrays.stream(strings).sorted((x, y) -&gt; x.compareTo(y)).forEach(System.out::println);</span></span><br><span class="line">		Arrays.stream(strings).sorted(String::compareTo).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Before Java 8 sorted</span></span><br><span class="line">        System.out.println(<span class="string">"java8以前排序："</span>);</span><br><span class="line">        List&lt;String&gt; list1 = Arrays.asList(strings);</span><br><span class="line">        list1.sort(<span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String o1, String o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.printf(<span class="string">"java8 以前的排序：%s%n"</span>, list1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Handle map</span></span><br><span class="line">        System.out.println(<span class="string">"map 映射："</span>);</span><br><span class="line">        Arrays.stream(strings).map(s -&gt; s + <span class="string">"兮"</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Match</span></span><br><span class="line">        Boolean result1 = Arrays.stream(strings).allMatch(s -&gt; s.equals(<span class="string">"java"</span>));</span><br><span class="line">        System.out.println(result1);</span><br><span class="line"></span><br><span class="line">        Boolean reslut2 = Arrays.stream(strings).noneMatch(s -&gt; s.equals(<span class="string">"java"</span>));</span><br><span class="line">        System.out.println(reslut2);</span><br><span class="line">        <span class="comment">//findAny to find anyone</span></span><br><span class="line">        Optional&lt;String&gt; getResult = Arrays.stream(strings).findAny();</span><br><span class="line">        System.out.println(getResult);</span><br><span class="line">        System.out.printf(<span class="string">"获取Optional中的值：%s%n"</span>, getResult.get());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//统计</span></span><br><span class="line">        List&lt;Integer&gt; list4 = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>);</span><br><span class="line">        IntSummaryStatistics stats = list4.stream().mapToInt((x) -&gt; x).summaryStatistics();</span><br><span class="line">        System.out.println(<span class="string">"Highest number in List : "</span> + stats.getMax());</span><br><span class="line">        System.out.println(<span class="string">"Lowest  number in List : "</span> + stats.getMin());</span><br><span class="line">        System.out.println(<span class="string">"Sum of all numbers : "</span> + stats.getSum());</span><br><span class="line">        System.out.println(<span class="string">"Average of all numbers : "</span> + stats.getAverage());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//归约</span></span><br><span class="line">        <span class="comment">//第一种方法求和</span></span><br><span class="line">        String connectStrings = Arrays.stream(strings).reduce(<span class="string">""</span>, (x, y) -&gt; x + y);</span><br><span class="line">        System.out.println(connectStrings);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二种方法求和</span></span><br><span class="line">        String connectStrings1 = Arrays.stream(strings).reduce(<span class="string">""</span>, TestStream::getConnectStrings);</span><br><span class="line">        System.out.println(connectStrings1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Collectors 集合归约</span></span><br><span class="line">        <span class="comment">//  toList</span></span><br><span class="line">        List&lt;String&gt; list2 = Arrays.stream(strings).collect(Collectors.toList());</span><br><span class="line">        <span class="comment">// Get String by connected</span></span><br><span class="line">        String connectStrings2 = Arrays.stream(strings).collect(Collectors.joining(<span class="string">","</span>));</span><br><span class="line">        System.out.printf(<span class="string">"Collectors toList: %s , Conlletors Join Strings: %s%n"</span>, list2, connectStrings2);</span><br><span class="line"></span><br><span class="line">        String[] numberStrings = &#123;<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>&#125;;</span><br><span class="line">        <span class="comment">// mapToInt参数： 需要转换成相应的类型方法</span></span><br><span class="line">        IntStream intStream = Arrays.stream(numberStrings).mapToInt(Integer::valueOf);</span><br><span class="line">        <span class="comment">//使用对应的 Optional 接收</span></span><br><span class="line">        OptionalInt optionalNumber = intStream.max();</span><br><span class="line">        <span class="comment">// 取值，给默认值 0，为空结果为0</span></span><br><span class="line">        System.out.printf(<span class="string">"numberStrings's max number is: %s%n"</span>, optionalNumber.orElse(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拼接字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s1 参数1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s2 参数2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java.lang.String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getConnectStrings</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s1 + s2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 8中 lambda 表达式和 function包的函数式接口]]></title>
      <url>/java-lambda.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="lambda-表达式"><a href="#lambda-表达式" class="headerlink" title="lambda 表达式"></a>lambda 表达式</h3><p>java 中<code>lambda</code>表达式 实在 java 8 版本后新加入的特性，Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。</p><p><strong>特征:</strong></p><ul><li><strong>可选类型声明</strong>：不需要声明参数类型，编译器可以统一识别参数值。</li><li><strong>可选的参数圆括号</strong>：一个参数无需定义圆括号，但多个参数需要定义圆括号。</li><li><strong>可选的大括号</strong>：如果主体包含了一个语句，就不需要使用大括号。</li><li><strong>可选的返回关键字</strong>：如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要指定明表达式返回了一个数值。<a id="more"></a> 总结语法就是：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(params) -&gt; expression</span><br><span class="line">(params) -&gt; statement</span><br><span class="line">(params) -&gt; &#123; statements &#125;</span><br></pre></td></tr></table></figure><h4 id="使用lambda表达式替换匿名类"><a href="#使用lambda表达式替换匿名类" class="headerlink" title="使用lambda表达式替换匿名类"></a>使用lambda表达式替换匿名类</h4><p>以 Runnable 为例<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//before java8</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * When an object implementing interface &lt;code&gt;Runnable&lt;/code&gt; is used</span></span><br><span class="line"><span class="comment">     * to create a thread, starting the thread causes the object's</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;run&lt;/code&gt; method to be called in that separately executing</span></span><br><span class="line"><span class="comment">     * thread.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * The general contract of the method &lt;code&gt;run&lt;/code&gt; is that it may</span></span><br><span class="line"><span class="comment">     * take any action whatsoever.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> Thread#run()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"before jdk 1.8;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// after jdk 1.8</span></span><br><span class="line"><span class="keyword">new</span> Thread(() -&gt; System.out.println(<span class="string">"after jdk 1.8;"</span>)).start();</span><br></pre></td></tr></table></figure><p></p><p>执行结果是：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">before jdk 1.8;</span><br><span class="line">after jdk 1.8;</span><br></pre></td></tr></table></figure><p></p><h4 id="使用lambda表达式-迭代"><a href="#使用lambda表达式-迭代" class="headerlink" title="使用lambda表达式 迭代"></a>使用lambda表达式 迭代</h4><p>以 forEach 为例，迭代所有对象<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list1 = Arrays.asList(<span class="string">"spring"</span>, <span class="string">"summer"</span>, <span class="string">"autumn"</span>, <span class="string">"winter"</span>);</span><br><span class="line">        <span class="comment">//before java8</span></span><br><span class="line">        <span class="keyword">for</span> (String s : list1) &#123;</span><br><span class="line">            System.out.println(<span class="string">"before: "</span> + s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//after</span></span><br><span class="line">        list1.forEach(n -&gt; System.out.println(<span class="string">"after: "</span> + n));</span><br><span class="line">        <span class="comment">//list1.forEach(System.out::println); //可以打印，方法引用由::双冒号操作符标示，</span></span><br></pre></td></tr></table></figure><p></p><p>打印结果：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">before: spring</span><br><span class="line">before: summer</span><br><span class="line">before: autumn</span><br><span class="line">before: winter</span><br><span class="line">after: spring</span><br><span class="line">after: summer</span><br><span class="line">after: autumn</span><br><span class="line">after: winter</span><br></pre></td></tr></table></figure><p></p><h4 id="使用lambda表达式和函数式接口Predicate"><a href="#使用lambda表达式和函数式接口Predicate" class="headerlink" title="使用lambda表达式和函数式接口Predicate"></a>使用lambda表达式和函数式接口Predicate</h4><p>除了在语言层面支持函数式编程风格，Java 8也添加了一个包，叫做 java.util.function。它包含了很多类，用来支持Java的函数式编程。其中一个便是Predicate，使用 java.util.function.Predicate 函数式接口以及lambda表达式，可以向API方法添加逻辑，用更少的代码支持更多的动态行为。下面是Java 8 Predicate 的例子，展示了过滤集合数据的多种常用方法。Predicate接口非常适用于做过滤。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list1 = Arrays.asList(<span class="string">"spring"</span>, <span class="string">"summer"</span>, <span class="string">"autumn"</span>, <span class="string">"winter"</span>);</span><br><span class="line">        System.out.println(<span class="string">"Print which end with n: "</span>);</span><br><span class="line">        filter(list1, str -&gt; (str + <span class="string">""</span>).endsWith(<span class="string">"n"</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Print which start with s: "</span>);</span><br><span class="line">        filter(list1, str -&gt; (str + <span class="string">""</span>).startsWith(<span class="string">"s"</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Print whose length greater than 6: "</span>);</span><br><span class="line">        filter(list1, str -&gt; (str + <span class="string">""</span>).length() &gt; <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Print all:"</span>);</span><br><span class="line">        filter(list1, str -&gt; <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Print none:"</span>);</span><br><span class="line">        filter(list1, str -&gt; <span class="keyword">false</span>);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">filter</span> <span class="params">(List list, Predicate condition)</span> </span>&#123;</span><br><span class="line">        list.stream().</span><br><span class="line">                filter(s -&gt; condition.test(s)).</span><br><span class="line">                forEach(s -&gt; System.out.println(s));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p><p>打印结果：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Print which end with n: </span><br><span class="line">autumn</span><br><span class="line">Print which start with s: </span><br><span class="line">spring</span><br><span class="line">summer</span><br><span class="line">Print whose length greater than 6: </span><br><span class="line">Print all:</span><br><span class="line">spring</span><br><span class="line">summer</span><br><span class="line">autumn</span><br><span class="line">winter</span><br><span class="line">Print none:</span><br></pre></td></tr></table></figure><p></p><p>例外 filter 还提供逻辑操作符AND和OR的方法，名字叫做and()、or()和xor()，用于将传入 filter() 方法的条件合并起来。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list1 = Arrays.asList(<span class="string">"spring"</span>, <span class="string">"summer"</span>, <span class="string">"autumn"</span>, <span class="string">"winter"</span>);</span><br><span class="line">Predicate&lt;String&gt; startWithS = s -&gt; s.startsWith(<span class="string">"s"</span>);</span><br><span class="line">        Predicate&lt;String&gt; endWithG = g -&gt; g.endsWith(<span class="string">"g"</span>);</span><br><span class="line">        list1.stream()</span><br><span class="line">                .filter(startWithS.and(endWithG))</span><br><span class="line">                .forEach(System.out::println);</span><br></pre></td></tr></table></figure><p></p><p>打印结果：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring</span><br></pre></td></tr></table></figure><p></p><h4 id="使用lambda表达式的Map和Reduce"><a href="#使用lambda表达式的Map和Reduce" class="headerlink" title="使用lambda表达式的Map和Reduce"></a>使用lambda表达式的Map和Reduce</h4><p>给list 中 每个数据 增加 50%<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list2 = Arrays.asList(<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>);</span><br><span class="line">       <span class="keyword">for</span> (Integer num : list2) &#123;</span><br><span class="line">           Double result = num + num * <span class="number">0.5</span>;</span><br><span class="line">           System.out.println(result);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       list2.stream()</span><br><span class="line">               .map(num -&gt; num + num * <span class="number">0.5</span>)</span><br><span class="line">               .forEach(System.out::println);</span><br></pre></td></tr></table></figure><p></p><p>打印结果：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">150.0</span><br><span class="line">300.0</span><br><span class="line">450.0</span><br><span class="line">600.0</span><br><span class="line">150.0</span><br><span class="line">300.0</span><br><span class="line">450.0</span><br><span class="line">600.0</span><br></pre></td></tr></table></figure><p></p><p>计算一个list 每个值加上 50%后的和<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> List&lt;Integer&gt; list2 = Arrays.asList(<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>);</span><br><span class="line"><span class="keyword">double</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Integer num : list2) &#123;</span><br><span class="line">            Double result = num + num * <span class="number">0.5</span>;</span><br><span class="line">            total += result;</span><br><span class="line">            System.out.println(total);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        total = list2.stream()</span><br><span class="line">                .map(num -&gt; num + num * <span class="number">0.5</span>)</span><br><span class="line">                .reduce((sum, result) -&gt; sum + result).get();</span><br><span class="line">        System.out.println(total);</span><br></pre></td></tr></table></figure><p></p><p>打印结果：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1500.0</span><br><span class="line">1500.0</span><br></pre></td></tr></table></figure><p></p><p>map将集合类（例如列表）元素进行转换的。还有一个 reduce() 函数可以将所有值合并成一个。Map和Reduce操作是函数式编程的核心操作，因为其功能，reduce 又被称为折叠操作。</p><h4 id="通过过滤创建一个String列表"><a href="#通过过滤创建一个String列表" class="headerlink" title="通过过滤创建一个String列表"></a>通过过滤创建一个String列表</h4><p>通过过滤创建一个新的字符串列表，每个字符串长度大于2<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list3 = Arrays.asList(<span class="string">"abc"</span>, <span class="string">"def"</span>, <span class="string">"hi"</span>, <span class="string">"hello"</span>);</span><br><span class="line">        <span class="comment">// 创建一个字符串列表，每个字符串长度大于2</span></span><br><span class="line">        List&lt;String&gt; filtered = list3.stream().filter(x -&gt; x.length()&gt; <span class="number">2</span>).collect(Collectors.toList());</span><br><span class="line">        System.out.printf(<span class="string">"Original List : %s, filtered list : %s %n"</span>, list3, filtered);</span><br></pre></td></tr></table></figure><p></p><h4 id="对列表的每个元素应用函数"><a href="#对列表的每个元素应用函数" class="headerlink" title="对列表的每个元素应用函数"></a>对列表的每个元素应用函数</h4><p>对list3 的每个元素转换成大写，并用逗号连接起来。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list3 = Arrays.asList(<span class="string">"abc"</span>, <span class="string">"def"</span>, <span class="string">"hi"</span>, <span class="string">"hello"</span>);</span><br><span class="line">String string = list3.stream().map(s -&gt; s.toUpperCase()).collect(Collectors.joining(<span class="string">","</span>));</span><br><span class="line">        System.out.printf(<span class="string">"Original List : %s, After String : %s %n"</span>, list3, string);</span><br></pre></td></tr></table></figure><p></p><p>运行结果：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Original List : [abc, def, hi, hello], After String : ABC,DEF,HI,HELLO</span><br></pre></td></tr></table></figure><p></p><h4 id="复制不同的值，创建一个子列表"><a href="#复制不同的值，创建一个子列表" class="headerlink" title="复制不同的值，创建一个子列表"></a>复制不同的值，创建一个子列表</h4><p>如何利用流的 distinct() 方法来对集合进行去重。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list4 = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>);</span><br><span class="line">        List&lt;Integer&gt; distinctList = list4.stream().map( i -&gt; i * i).distinct().collect(Collectors.toList());</span><br><span class="line">        System.out.printf(<span class="string">"Original List : %s,  Square Reslut : %s %n"</span>, list4, distinctList);</span><br></pre></td></tr></table></figure><p></p><p>运行结果：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Original List : [1, 2, 3, 4, 1],  Square Reslut : [1, 4, 9, 16]</span><br></pre></td></tr></table></figure><p></p><h4 id="计算集合元素的最大值、最小值、总和以及平均值"><a href="#计算集合元素的最大值、最小值、总和以及平均值" class="headerlink" title="计算集合元素的最大值、最小值、总和以及平均值"></a>计算集合元素的最大值、最小值、总和以及平均值</h4><p>IntStream、LongStream 和 DoubleStream 等流的类中，有个非常有用的方法叫做 summaryStatistics() 。可以返回 IntSummaryStatistics、LongSummaryStatistics 或者 DoubleSummaryStatistic s，描述流中元素的各种摘要数据。</p><p>我们用这个方法来计算列表的最大值和最小值。它也有 getSum() 和 getAverage() 方法来获得列表的所有元素的总和及平均值。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list4 = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>);</span><br><span class="line">        IntSummaryStatistics stats = list4.stream().mapToInt((x) -&gt; x).summaryStatistics();</span><br><span class="line">        System.out.println(<span class="string">"Highest number in List : "</span> + stats.getMax());</span><br><span class="line">        System.out.println(<span class="string">"Lowest  number in List : "</span> + stats.getMin());</span><br><span class="line">        System.out.println(<span class="string">"Sum of all numbers : "</span> + stats.getSum());</span><br><span class="line">        System.out.println(<span class="string">"Average of all numbers : "</span> + stats.getAverage());</span><br></pre></td></tr></table></figure><p></p><p>运行结果：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Highest number in List : 4</span><br><span class="line">Lowest  number in List : 1</span><br><span class="line">Sum of all numbers : 11</span><br><span class="line">Average of all numbers : 2.2</span><br></pre></td></tr></table></figure><p></p><h3 id="function-包下的函数式接口"><a href="#function-包下的函数式接口" class="headerlink" title="function 包下的函数式接口"></a>function 包下的函数式接口</h3><p>JDK 1.8 API包含了很多内建的函数式接口，在老 Java 中常用到的比如 <code>Comparator</code>或者 <code>Runnable</code>接口，这些接口都增加了 <code>@FunctionalInterface</code> 注解以便能用在lambda上。<br>Java 8 API同样还提供了很多全新的函数式接口来让工作更加方便。</p><p>学习例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String demoName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Demo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Demo</span><span class="params">(String demoName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.demoName = demoName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDemoName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> demoName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Demo&#123;"</span> +</span><br><span class="line">                <span class="string">"demoName='"</span> + demoName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Predicate 接口只有一个参数，返回boolean类型。</span></span><br><span class="line">        <span class="comment">// 该接口包含多种默认方法来将Predicate组合成其他复杂的逻辑（比如：与，或，非）：</span></span><br><span class="line">        Predicate&lt;String&gt; predicate = (s) -&gt; s.length() &gt; <span class="number">0</span>;</span><br><span class="line">        predicate.test(<span class="string">"foo"</span>);              <span class="comment">// true</span></span><br><span class="line">        predicate.negate().test(<span class="string">"foo"</span>);     <span class="comment">// false</span></span><br><span class="line">        Predicate&lt;String&gt; isEmpty = String::isEmpty;</span><br><span class="line">        Predicate&lt;String&gt; isNotEmpty = isEmpty.negate();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Function 接口</span></span><br><span class="line">        <span class="comment">//Function 接口有一个参数并且返回一个结果，并附带了一些可以和其他函数组合的默认方法（compose, andThen）</span></span><br><span class="line">        <span class="comment">// 类似的 有操作的函数式接口 UnaryOperator ，一元参数和返回类型规则相同</span></span><br><span class="line">        Function&lt;String, Integer&gt; toInteger = Integer::valueOf;</span><br><span class="line">        Function&lt;Integer, Demo&gt; int2Demo = integer -&gt; <span class="keyword">new</span> Demo(integer.toString());</span><br><span class="line">        Function&lt;String, Demo&gt; str2Demo = toInteger.andThen(int2Demo);</span><br><span class="line">        System.out.printf(<span class="string">"Function toInteger is %d%n"</span>, toInteger.apply(<span class="string">"123"</span>));</span><br><span class="line">        System.out.printf(<span class="string">"Function toString is %s%n"</span>, str2Demo.apply(<span class="string">"123"</span>));</span><br><span class="line">        <span class="comment">// Function backToString is Demo&#123;demoName='123'&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Supplier 接口</span></span><br><span class="line">        <span class="comment">//Supplier 接口返回一个任意范型的值，和Function接口不同的是该接口没有任何参数</span></span><br><span class="line">        Supplier&lt;Demo&gt; supplier = Demo::<span class="keyword">new</span>;</span><br><span class="line">        <span class="comment">// Get a result.</span></span><br><span class="line">        System.out.println(supplier.get()); <span class="comment">// Demo&#123;demoName='null'&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Consumer 接口</span></span><br><span class="line">        <span class="comment">// Consumer 接口只是实现操作没有任何返回值</span></span><br><span class="line">        Consumer&lt;Integer&gt; consumer = System.out::println;</span><br><span class="line">        consumer.accept(<span class="number">2</span>); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 基础多参数的 Bi 前缀的函数接口 BiConsumer，BiFunction，BiPredicate……</span></span><br><span class="line">        <span class="comment">// 举个栗子 BiFunction()</span></span><br><span class="line">        BiFunction&lt;Integer, String, Demo&gt; biFunction = (i, s) -&gt; &#123;</span><br><span class="line">            String demoName = s + i;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Demo(demoName);</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(biFunction.apply(<span class="number">1</span>, <span class="string">"KronChan"</span>)); <span class="comment">//  Demo&#123;demoName='KronChan1'&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// BinaryOperator 继承 BiFunction，表示二元参数 和 返回类型一样</span></span><br><span class="line">        BinaryOperator&lt;Integer&gt; integerBinaryOperator = (l, r) -&gt; l + r;</span><br><span class="line">        System.out.println(integerBinaryOperator.apply(<span class="number">4</span>, <span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//制作比较规则，输出大的 Demo</span></span><br><span class="line">        ToIntFunction&lt;Demo&gt; toIntFunction = d -&gt; &#123;</span><br><span class="line">            String value = d.getDemoName();</span><br><span class="line">            <span class="keyword">return</span> Integer.valueOf(value);</span><br><span class="line">        &#125;;</span><br><span class="line">        BinaryOperator&lt;Demo&gt; compareBinaryOperator = BinaryOperator.maxBy(Comparator.comparingInt(toIntFunction));</span><br><span class="line">        System.out.println(compareBinaryOperator.apply(<span class="keyword">new</span> Demo(<span class="string">"1"</span>), <span class="keyword">new</span> Demo(<span class="string">"2"</span>)));</span><br><span class="line">        <span class="comment">// Demo&#123;demoName='2'&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// LongBinaryOperator 继承自 BinaryOperator 实现 两个 long 参数方法，返回 long 类型，此外还有 double int……</span></span><br><span class="line">        LongBinaryOperator longBinaryOperator = (l, r) -&gt; l + r;</span><br><span class="line">        System.out.println(longBinaryOperator.applyAsLong(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>lambda 表达式只能引用 <code>final</code> 或 final 局部变量，这就是说不能在 lambda 内部<code>修改</code>定义在域外的变量，否则会编译错误。（补充）</li><li>Lambda表达式在Java中又称为闭包或匿名函数，</li><li>lambda内部可以使用静态、非静态和局部变量，这称为lambda内的变量捕获。</li><li>如果在 lambda 表达式 内部不能调用参数方法的引用，需要声明参数类型。</li><li>合理使用 Function 函数式接口可以方便的构建符合自己的需求的函数。</li></ol><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> lambda </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS 7 上安装Hadoop V 2.8.1集群及配置]]></title>
      <url>/linux-hadoop.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><blockquote><p>Hadoop是一个由Apache基金会所开发的分布式系统基础架构。<br>用户可以在不了解分布式底层细节的情况下，开发分布式程序。充分利用集群的威力进行高速运算和存储。<br>Hadoop实现了一个分布式文件系统（Hadoop Distributed File System），简称HDFS。HDFS有高容错性的特点，并且设计用来部署在低廉的（low-cost）硬件上；而且它提供高吞吐量（high throughput）来访问应用程序的数据，适合那些有着超大数据集（large data set）的应用程序。HDFS放宽了（relax）POSIX的要求，可以以流的形式访问（streaming access）文件系统中的数据。<br>Hadoop的框架最核心的设计就是：HDFS和MapReduce。HDFS为海量的数据提供了存储，则MapReduce为海量的数据提供了计算。(百科)</p></blockquote><p><img src="https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/w%3D268%3Bg%3D0/sign=98010877b33533faf5b6942890e89a22/3c6d55fbb2fb4316ecfbfb0322a4462308f7d3e7.jpg" alt="image"></p><a id="more"></a><h2 id="下载Hadoop"><a href="#下载Hadoop" class="headerlink" title="下载Hadoop"></a>下载Hadoop</h2><p>本次使用的是2.8.1版本的Hadoop，官网地址<br><a rel="external nofollow noopener noreferrer" target="_blank" href="http://www.apache.org/dyn/closer.cgi/hadoop/common/hadoop-2.8.1/hadoop-2.8.1.tar.gz">http://www.apache.org/dyn/closer.cgi/hadoop/common/hadoop-2.8.1/hadoop-2.8.1.tar.gz</a></p><p>点击（不用进官网直接点这个链接就能下载）</p><p><a rel="external nofollow noopener noreferrer" target="_blank" href="http://mirror.bit.edu.cn/apache/hadoop/common/hadoop-2.8.1/hadoop-2.8.1.tar.gz">http://mirror.bit.edu.cn/apache/hadoop/common/hadoop-2.8.1/hadoop-2.8.1.tar.gz</a></p><h2 id="安装3个虚拟机并实现ssh免密码登录"><a href="#安装3个虚拟机并实现ssh免密码登录" class="headerlink" title="安装3个虚拟机并实现ssh免密码登录"></a>安装3个虚拟机并实现ssh免密码登录</h2><h3 id="修改host"><a href="#修改host" class="headerlink" title="修改host"></a>修改host</h3><p>使用的Linux系统是CentOS 7 ，修改三台机器的Hosts，让它们能相互映射到，能ping t通<br>参考我的上一篇文章</p><p><a href="http://blog.wuwii.com/linux-hostname.html">http://blog.wuwii.com/linux-hostname.html</a></p><p>添加Hosts，这是我的三台机器<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.19.185  server1</span><br><span class="line">192.168.19.184  server2</span><br><span class="line">192.168.19.199  server3</span><br></pre></td></tr></table></figure><p></p><p>ping 结果都能ping 通<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@server2 ~]<span class="comment"># ping -c 4 server1</span></span><br><span class="line">PING server1 (192.168.19.185) 56(84) bytes of data.</span><br><span class="line">64 bytes from server1 (192.168.19.185): icmp_seq=1 ttl=64 time=0.536 ms</span><br><span class="line">64 bytes from server1 (192.168.19.185): icmp_seq=2 ttl=64 time=0.388 ms</span><br><span class="line">64 bytes from server1 (192.168.19.185): icmp_seq=3 ttl=64 time=0.309 ms</span><br><span class="line">64 bytes from server1 (192.168.19.185): icmp_seq=4 ttl=64 time=0.368 ms</span><br><span class="line"></span><br><span class="line">--- server1 ping statistics ---</span><br><span class="line">4 packets transmitted, 4 received, 0% packet loss, time 3001ms</span><br><span class="line">rtt min/avg/max/mdev = 0.309/0.400/0.536/0.084 ms</span><br></pre></td></tr></table></figure><p></p><h3 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h3><p>密钥三台机器都需要生成，就以一台 server1 机器为例</p><p>使用命令 <code>ssh-keygen -t rsa</code> 一路 enter<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@server1 ~]<span class="comment"># ssh-keygen -t rsa</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/root/.ssh/id_rsa): </span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">e0:ea:e3:5d:95:be:c5:9a:dc:90:99:22:d1:cf:99:49 root@server1</span><br><span class="line">The key<span class="string">'s randomart image is:</span></span><br><span class="line"><span class="string">+--[ RSA 2048]----+</span></span><br><span class="line"><span class="string">|                 |</span></span><br><span class="line"><span class="string">|                 |</span></span><br><span class="line"><span class="string">|      .          |</span></span><br><span class="line"><span class="string">|     . o   .     |</span></span><br><span class="line"><span class="string">|      o S E      |</span></span><br><span class="line"><span class="string">|     . . * O     |</span></span><br><span class="line"><span class="string">|    . . o % o    |</span></span><br><span class="line"><span class="string">|   ... o o B     |</span></span><br><span class="line"><span class="string">|   .o..   = .    |</span></span><br><span class="line"><span class="string">+-----------------+</span></span><br></pre></td></tr></table></figure><p></p><p>出现上面的 ，可以在本帐户的根目录看到一个 .ssh 文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@server1 ~]<span class="comment">#  ll -a</span></span><br><span class="line">总用量 68</span><br><span class="line">dr-xr-x---.  6 root root   256 10月 18 15:00 .</span><br><span class="line">dr-xr-xr-x. 20 root root  4096 10月 18 10:35 ..</span><br><span class="line">-rw-------.  1 root root  1456 8月  14 08:44 anaconda-ks.cfg</span><br><span class="line">-rw-------.  1 root root 24538 10月 18 10:35 .bash_history</span><br><span class="line">-rw-r--r--.  1 root root    18 12月 29 2013 .bash_logout</span><br><span class="line">-rw-r--r--.  1 root root   176 12月 29 2013 .bash_profile</span><br><span class="line">-rw-r--r--.  1 root root   176 12月 29 2013 .bashrc</span><br><span class="line">-rw-r--r--.  1 root root   100 12月 29 2013 .cshrc</span><br><span class="line">-rw-r--r--   1 root root   223 9月  27 10:47 dump.rdb</span><br><span class="line">drwxr-xr-x. 11 root root   270 8月  15 15:57 fastdfs</span><br><span class="line">drwxr-xr-x.  2 root root    40 8月  15 15:04 .oracle_jre_usage</span><br><span class="line">drwxr-----.  3 root root    19 8月  15 15:53 .pki</span><br><span class="line">-rw-------   1 root root   571 9月  27 16:58 .rediscli_history</span><br><span class="line">drwx------   2 root root    38 10月 18 14:56 .ssh</span><br><span class="line">-rw-r--r--.  1 root root   129 12月 29 2013 .tcshrc</span><br><span class="line">-rw-------   1 root root  7372 10月 18 11:35 .viminfo</span><br></pre></td></tr></table></figure><p>注意它是个隐藏的文件，我是用的是secureFx 显示隐藏文件，需要 视图 -&gt; 文件 勾选上就行<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@server1 .ssh]<span class="comment"># ll</span></span><br><span class="line">总用量 8</span><br><span class="line">-rw------- 1 root root 668 10月 18 15:12 id_rsa</span><br><span class="line">-rw-r--r-- 1 root root 602 10月 18 15:12 id_rsa.pub</span><br></pre></td></tr></table></figure><p></p><p>打开 <code>/root/.ssh/id_rsa.pub</code><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@server1 .ssh]# cat id_rsa.pub </span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCpRge0XRJya0rXjaMs7VQ5uHrmaVxzFekB/gNoFNUsJ7cjWfFUpUao8zZpioCUceUWdI4sL0doQGriTXBjwrhDtcaO0IZujG2oyD1OGfOVbn7Yuhc6EZz0fed5soj6AZrGIgTMrweRpD268bvcJCcWOPV7U2iAjOqYSmP2Z/1ckYwJ983qSLvHPhPVnFBENmo9Evgzfa/6QM+j2UbVIIjfiUPxo4BNWxcvVruxJV+pEFa1ycAT8ORvLxirgafctdfw+Md1Epuna0RIE59H3382COUjC/UonAya5ebl1z5JGY65dREIdRDcvYfwnMcpeF5mkEuowyX/1Ev3y+JFENBV root@server1</span><br></pre></td></tr></table></figure><p></p><p>查看到了我们生成的密钥成功了</p><p>然后我们把三个机器都生成密钥，然后把他们合并成一个文件创建一个<code>/root/.ssh/authorized_keys</code> 文件保存着。</p><p><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fmwwfjadmhj20o604674a.jpg" alt="image"></p><p>使用命令<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@server1 ~]<span class="comment"># cat /root/.ssh/id_rsa.pub &gt;&gt; /root/.ssh/authorized_keys</span></span><br></pre></td></tr></table></figure><p></p><p>其他机器的公共密钥也复制到到这个文件里来（补充，不要连着复制，上一行后面打个空格，再换行。）</p><p>所以最后是这样的<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[root@server1 .ssh]# vim authorized_keys</span><br><span class="line"></span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCpRge0XRJya0rXjaMs7VQ5uHrmaVxzFekB/gNoFNUsJ7cjWfFUpUao8zZpioCUceUWdI4sL0doQGriTXBjwrhDtcaO0IZujG2oyD1OGfOVbn7Yuhc6EZz0fed5soj6AZrGIgTMrweRpD268bvcJCcWOPV7U2iAjOqYSmP2Z/1ckYwJ983qSLvHPhPVnFBENmo9Evgzfa/6QM+j2UbVIIjfiUPxo4BNWxcvVruxJV+pEFa1ycAT8ORvLxirgafctdfw+Md1Epuna0RIE59H3382COUjC/UonAya5ebl1z5JGY65dREIdRDcvYfwnMcpeF5mkEuowyX/1Ev3y+JFENBV root@server1</span><br><span class="line"></span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDFwe2pGEMWt+X0FXFPotOQrUAJFDOLflMjtwBIJxTSFBPQuVhoEtJHkacnpsPAtT4zOJxjieLOrsC/G5fKZVpSgYRwmMw6iobe3IsL5uElVfRYoO+HIr/BDep1imVFkmj0DTMUj0q+UYz3wiEaFQk4zh7Gas2qIdgyOtfSQcYN3T7qNh4dPDfdOrBIqZq/fP33UFDBgbUqGZUZhL6mHc8LRHo9+eby3ZPtiEudfeczvi3pI0Dcp0zX+WSuqPK/z47hBN2XlGMIDO2Ta5sAu9WfECe0WcxsPLOPsKPCRsakyMrYlnGk3hEQ9Ci1YsNKUX8j1RhBi3YLKsl5rjhQR67r root@server2</span><br><span class="line"></span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDFPaRkR/0i51MORrPVnsEZR60t7FZDmJ3DlhVKdt4crCHO+QhsHr5ZwbcLT/9vTBAdRoveuwHJreEO5MLnlcG0dxFjVDduip5M84zGjmKI1k7/tyeNT1bHUhoMWRAaDEk9RUx/rrYzR/DzHvkdXPwPK+uENFCFBo0RTEGxAMkrXkex7SFNITh8t48sto23D20v7O4A+h4Fbe4oiEjlFBeK6H+dJxZVqYE5Xof1Y4Nc0Xh0YfEg9rUT4BS1AdYWZB9ptVyuSzsbmBd1mve8GcR8cf0M75uSIovc3ww/z/sVpx+hluldhVN9wXyUtFZdWcbklJcq6oTMfejY7ISv2lKh root@server3</span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">~                                                                               </span><br><span class="line">&quot;authorized_keys&quot; [新] 5L, 1183C 已写入</span><br></pre></td></tr></table></figure><p></p><p>每个电脑都需要这个<code>/root/.ssh/authorized_keys</code>文件，所以直接把它复制到对应位置就行了。</p><p><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fmwwgjfvy1j20o604674a.jpg" alt="image"></p><p><strong>注意</strong><br>我们需要给它们相应的权限，一般默认的就是这个权限，下面是root 用户的。<br><code>chmod 700 ~/.ssh</code> #注意：这两条权限设置特别重要，决定成败。<br><code>chmod 600 ~/.ssh/authorized_keys</code></p><p>测试使用ssh 密钥无密码登陆</p><p>首先测试下localhost ，看能否无密码登陆自己<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@server1 ~]# ssh localhost</span><br><span class="line">Last login: Thu Oct 19 09:01:34 2017 from 192.168.19.207</span><br><span class="line">[root@server1 ~]#</span><br></pre></td></tr></table></figure><p></p><p>演示下server2 电脑上进行登陆 server1 并进行操作，<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@server2 ~]<span class="comment"># ssh server1</span></span><br><span class="line">The authenticity of host <span class="string">'server1 (192.168.19.185)'</span> can<span class="string">'t be established.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is bd:50:b8:e7:b3:69:ad:6c:14:6b:a9:fb:18:43:b9:c9.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class="line"><span class="string">Warning: Permanently added '</span>server1,192.168.19.185<span class="string">' (ECDSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">Last login: Wed Oct 18 16:46:53 2017 from server1</span></span><br><span class="line"><span class="string">[root@server1 ~]# exit</span></span><br><span class="line"><span class="string">logout</span></span><br><span class="line"><span class="string">Connection to server1 closed.</span></span><br></pre></td></tr></table></figure><p></p><p>之前配置 <code>authorized_keys</code> 搞了半天，虽然用了三行，但是后面没空格，导致 密钥不能使用，每次登陆还需要密码。<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@server1 ~]<span class="comment"># ssh server2</span></span><br><span class="line">root@server2<span class="string">'s password:</span></span><br></pre></td></tr></table></figure><p></p><p>没百度出来，自己最后卡了一个小时 恍然大悟，每行后面空出空格就好了。</p><p>在其余的电脑相互登陆试试，都能无密登陆，说明，配置成功。</p><p><strong>但是一定要注意的是，每次ssh登陆完成后，都要执行 <code>exit</code>，否则你的后续命令是在另外一台机器上执行的。</strong></p><h2 id="安装JDK-和Hadoop"><a href="#安装JDK-和Hadoop" class="headerlink" title="安装JDK 和Hadoop"></a>安装JDK 和Hadoop</h2><h3 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h3><p>三台机器都需要安装jdk，CentOS7 安装JDK参考 <a href="http://blog.wuwii.com/linux-jdk.html">http://blog.wuwii.com/linux-jdk.html</a></p><h3 id="安装hadoop"><a href="#安装hadoop" class="headerlink" title="安装hadoop"></a>安装hadoop</h3><p>首先 三台机器都需要安装hadoop，都需要执行下面所有的操作。</p><h4 id="上载文件，并且解压"><a href="#上载文件，并且解压" class="headerlink" title="上载文件，并且解压"></a>上载文件，并且解压</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@server1 opt]<span class="comment"># tar -xvf hadoop-2.8.1.tar.gz</span></span><br></pre></td></tr></table></figure><p>解压缩后得到<code>hadoop-2.8.1</code> 文件夹。</p><h4 id="新建目录"><a href="#新建目录" class="headerlink" title="新建目录"></a>新建目录</h4><p>在/root 目录下新建<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir /root/hadoop</span><br><span class="line">mkdir /root/hadoop/tmp</span><br><span class="line">mkdir /root/hadoop/var</span><br><span class="line">mkdir /root/hadoop/dfs</span><br><span class="line">mkdir /root/hadoop/dfs/name</span><br><span class="line">mkdir /root/hadoop/dfs/data</span><br></pre></td></tr></table></figure><p></p><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>配置文件都在 解压后的文件夹 <code>hadoop-2.8.1/etc/hadoop</code> 下。</p><h5 id="修改core-site-xml"><a href="#修改core-site-xml" class="headerlink" title="修改core-site.xml"></a>修改core-site.xml</h5><p>在configuration&gt;节点内加入配置:<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/root/hadoop/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Abase for other temporary directories.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.default.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://server1:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h5 id="修改-hadoop-env-sh文件"><a href="#修改-hadoop-env-sh文件" class="headerlink" title="修改 hadoop-env.sh文件"></a>修改 hadoop-env.sh文件</h5><p>修改<code>./hadoop-2.8.1/etc/hadoop/hadoop-env.sh</code>文件<br>将<code>export JAVA_HOME=${JAVA_HOME}</code><br><strong>修改为：</strong><br><code>export JAVA_HOME=/usr/java/jdk1.8.0_144</code><br><strong>说明：修改为自己的JDK路径和版本号</strong></p><h5 id="修改hdfs-site-xml"><a href="#修改hdfs-site-xml" class="headerlink" title="修改hdfs-site.xml"></a>修改hdfs-site.xml</h5><p>修改<code>./hadoop-2.8.1/etc/hadoop/hdfs-site.xml</code>文件，<br>在<configuration>节点内加入配置:</configuration></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>/root/hadoop/dfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">description</span>&gt;</span>Path on the local filesystem where theNameNode stores the namespace and transactions logs persistently.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>/root/hadoop/dfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">description</span>&gt;</span>Comma separated list of paths on the localfilesystem of a DataNode where it should store its blocks.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.permissions<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">description</span>&gt;</span>need not permissions<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>说明：dfs.permissions配置为false后，可以允许不要检查权限就生成dfs上的文件，方便倒是方便了，但是你需要防止误删除，请将它设置为true，或者直接将该property节点删除，因为默认就是true。</strong></p><h5 id="新建并且修改mapred-site-xml"><a href="#新建并且修改mapred-site-xml" class="headerlink" title="新建并且修改mapred-site.xml"></a>新建并且修改mapred-site.xml</h5><p>在该版本中，有一个名为mapred-site.xml.template的文件，复制该文件，然后改名为mapred-site.xml，命令是：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@server1 hadoop]<span class="comment"># cp mapred-site.xml.template mapred-site.xml</span></span><br></pre></td></tr></table></figure><p></p><p>修改这个新建的mapred-site.xml文件，在<configuration>节点内加入配置:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapred.job.tracker<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>server1:49001<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapred.local.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>/root/hadoop/var<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></configuration></p><h5 id="修改slaves文件"><a href="#修改slaves文件" class="headerlink" title="修改slaves文件"></a>修改slaves文件</h5><p>修改<code>./hadoop-2.8.1/etc/hadoop/slaves</code>文件，将里面的localhost删除，添加如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server2</span><br><span class="line">server3</span><br></pre></td></tr></table></figure><h5 id="修改yarn-site-xml文件"><a href="#修改yarn-site-xml文件" class="headerlink" title="修改yarn-site.xml文件"></a>修改yarn-site.xml文件</h5><p>修改<code>./hadoop-2.8.1/etc/hadoop/yarn-site.xml</code> 文件，<br>在<configuration>节点内加入配置(注意了，内存根据机器配置越大越好):</configuration></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>server1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>The address of the applications manager interface in the RM.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;yarn.resourcemanager.hostname&#125;:8032<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>The address of the scheduler interface.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;yarn.resourcemanager.hostname&#125;:8030<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>The http address of the RM web application.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;yarn.resourcemanager.hostname&#125;:8088<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>The https adddress of the RM web application.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.webapp.https.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;yarn.resourcemanager.hostname&#125;:8090<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.resource-tracker.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;yarn.resourcemanager.hostname&#125;:8031<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>The address of the RM admin interface.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.admin.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;yarn.resourcemanager.hostname&#125;:8033<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.maximum-allocation-mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1024<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">discription</span>&gt;</span>每个节点可用内存,单位MB,默认8182MB<span class="tag">&lt;/<span class="name">discription</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.vmem-pmem-ratio<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.resource.memory-mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1024<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>说明：<code>yarn.nodemanager.vmem-check-enabled</code> 这个的意思是忽略虚拟内存的检查，如果你是安装在虚拟机上，这个配置很有用，配上去之后后续操作不容易出问题。如果是实体机上，并且内存够多，可以将这个配置去掉。</strong></p><h2 id="启动Hadoop"><a href="#启动Hadoop" class="headerlink" title="启动Hadoop"></a>启动Hadoop</h2><h3 id="在namenode上执行初始化"><a href="#在namenode上执行初始化" class="headerlink" title="在namenode上执行初始化"></a>在namenode上执行初始化</h3><p>因为server1是namenode，server2和server3都是datanode，所以只需要对server1进行初始化操作，也就是对hdfs进行格式化。<br>进入到server1这台机器的/opt/hadoop-2.8.1/bin目录，执行初始化命令：<code>./hadoop namenode -format</code> ，格式化一个新的分布式文件系统。<br>如下<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@server1 bin]<span class="comment"># cd /opt/hadoop-2.8.1/bin/                      </span></span><br><span class="line">[root@server1 bin]<span class="comment"># ./hadoop namenode -format                      </span></span><br><span class="line">DEPRECATED: Use of this script to execute hdfs <span class="built_in">command</span> is deprecated.</span><br><span class="line">Instead use the hdfs <span class="built_in">command</span> <span class="keyword">for</span> it.</span><br><span class="line"></span><br><span class="line">17/10/19 15:09:05 INFO namenode.NameNode: STARTUP_MSG: </span><br><span class="line">/************************************************************</span><br><span class="line">STARTUP_MSG: Starting NameNode</span><br><span class="line">STARTUP_MSG:   user = root</span><br><span class="line">STARTUP_MSG:   host = server1/192.168.19.185</span><br><span class="line">STARTUP_MSG:   args = [-format]</span><br><span class="line">STARTUP_MSG:   version = 2.8.1</span><br><span class="line">STARTUP_MSG:   classpath = /opt/hadoop-2.8.1/etc/hadoop:/opt/hadoop-2.8.1/share/</span><br></pre></td></tr></table></figure><p></p><p>执行完成，不报错，说明启动成功。<br><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fmwwgsmqnrj20io0oydj2.jpg" alt="image"></p><p>格式化成功后，可以在看到在<code>/root/hadoop/dfs/name/</code>目录多了一个current目录，而且该目录内有一系列文件。<br><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fmwwh9d2gqj20p907kjrk.jpg" alt="image"></p><h3 id="在namenode上执行启动命令"><a href="#在namenode上执行启动命令" class="headerlink" title="在namenode上执行启动命令"></a>在namenode上执行启动命令</h3><p>因为server1是namenode，server2和server3都是datanode，所以只需要再server1上执行启动命令即可。<br>进入到hserver1这台机器的<code>/opt/hadoop-2.8.1/sbin</code>目录，也就是执行命令：<br><code>cd /opt/hadoop/hadoop-2.8.0/sbin</code><br>执行初始化脚本，也就是执行命令：<br><code>./start-all.sh</code><br>第一次执行上面的启动命令，会需要我们进行交互操作，在问答界面上输入yes回车</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@server1 hadoop-2.8.1]<span class="comment"># sbin/start-all.sh </span></span><br><span class="line">This script is Deprecated. Instead use start-dfs.sh and start-yarn.sh</span><br><span class="line">Starting namenodes on [server1]</span><br><span class="line">server1: namenode running as process 3609. Stop it first.</span><br><span class="line">server3: starting datanode, logging to /opt/hadoop-2.8.1/logs/hadoop-root-datanode-server3.out</span><br><span class="line">server2: datanode running as process 17888. Stop it first.</span><br><span class="line">server3: [Fatal Error] yarn-site.xml:16:1: Content is not allowed <span class="keyword">in</span> prolog.</span><br><span class="line">Starting secondary namenodes [0.0.0.0]</span><br><span class="line">0.0.0.0: secondarynamenode running as process 3795. Stop it first.</span><br><span class="line">starting yarn daemons</span><br><span class="line">resourcemanager running as process 3942. Stop it first.</span><br><span class="line">server3: starting nodemanager, logging to /opt/hadoop-2.8.1/logs/yarn-root-nodemanager-server3.out</span><br><span class="line">server2: nodemanager running as process 18038. Stop it first.</span><br><span class="line">server3: [Fatal Error] yarn-site.xml:16:1: Content is not allowed <span class="keyword">in</span> prolog.</span><br><span class="line">[root@server1 hadoop-2.8.1]<span class="comment"># sbin/start-all.sh </span></span><br><span class="line">This script is Deprecated. Instead use start-dfs.sh and start-yarn.sh</span><br><span class="line">Starting namenodes on [server1]</span><br><span class="line">server1: namenode running as process 3609. Stop it first.</span><br><span class="line">server3: starting datanode, logging to /opt/hadoop-2.8.1/logs/hadoop-root-datanode-server3.out</span><br><span class="line">server2: datanode running as process 17888. Stop it first.</span><br><span class="line">Starting secondary namenodes [0.0.0.0]</span><br><span class="line">0.0.0.0: secondarynamenode running as process 3795. Stop it first.</span><br><span class="line">starting yarn daemons</span><br><span class="line">resourcemanager running as process 3942. Stop it first.</span><br><span class="line">server2: nodemanager running as process 18038. Stop it first.</span><br><span class="line">server3: starting no</span><br></pre></td></tr></table></figure><p>没报错，说明执行成功，之前我的server3 上的一个xml 配置错了，很明了的说出了错误的位置。</p><h2 id="测试hadoop"><a href="#测试hadoop" class="headerlink" title="测试hadoop"></a>测试hadoop</h2><p>启动后，需要测试能使用，才能说明配置正确</p><p>首先需要关闭防火墙。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@server1 ~]# systemctl stop firewalld.service</span><br></pre></td></tr></table></figure><p>我们的namanode机器是server1，IP是192.168.19.185，直接在谷歌浏览器上输入到端口 50070，自动跳转到了overview页面 （dfshealth.html）<br><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fmwwhjt03pj213h0g575d.jpg" alt="image"></p><p>继续；<br>测试 8088 端口 ：<br>自动跳转到了cluster页面<br><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fmwwhv1qa8j21go0fq0vk.jpg" alt="image"></p><p>在namenode机器上执行<code>jps</code><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@server1 hadoop-2.8.1]<span class="comment"># jps</span></span><br><span class="line">12469 ResourceManager</span><br><span class="line">12119 NameNode</span><br><span class="line">12313 SecondaryNameNode</span><br><span class="line">12730 Jps</span><br></pre></td></tr></table></figure><p></p><p>在datanode机器上执行<code>jps</code><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@server3 hadoop-2.8.1]<span class="comment"># jps</span></span><br><span class="line">10776 NodeManager</span><br><span class="line">11114 Jps</span><br><span class="line">10635 DataNode</span><br></pre></td></tr></table></figure><p></p><p>这只能证明它们启动成功，还要看它们之间互相通信。<br><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fmwwi35at0j21bn0g3q3z.jpg" alt="hadoop"><br>出现datanode 机器，通信成功。</p><p>配置完成。</p><p><strong>参考博客：</strong> <a rel="external nofollow noopener noreferrer" target="_blank" href="http://blog.csdn.net/pucao_cug/article/details/71698903">http://blog.csdn.net/pucao_cug/article/details/71698903</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java中Log4j的使用及配置详情]]></title>
      <url>/java-log4j.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><blockquote><p><code>Log4j</code>是Apache的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件，甚至是套接口服务器、NT的事件记录器、UNIX Syslog守护进程等；我们也可以控制每一条日志的输出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。最令人感兴趣的就是，这些可以通过一个配置文件来灵活地进行配置，而不需要修改应用的代码。</p></blockquote><p>项目中日志功能十分强大，可以实时监控你的代码的运行情况，并且就像书页一样清晰可见。<br><a id="more"></a></p><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>首先在pom.xml 配置好相关依赖，我这里只使用Log4j，当然还可以使用slf4j 可以管理，<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.16<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><p>在web.xml 监听 log4j.properties<br></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 启动Log4j --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>log4jConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:log4j.properties<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.util.Log4jConfigListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><p></p><h4 id="配置log4j-properties-配置文件"><a href="#配置log4j-properties-配置文件" class="headerlink" title="配置log4j.properties 配置文件"></a>配置log4j.properties 配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=DEBUG, stdout , R  </span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender  </span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout  </span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=[QC] %p [%t] %C.%M(%L) | %m%n  </span><br><span class="line">log4j.appender.R=org.apache.log4j.DailyRollingFileAppender  </span><br><span class="line">log4j.appender.R.File=d://log//FTASWorkFlow.log  </span><br><span class="line">log4j.appender.R.layout=org.apache.log4j.PatternLayout  </span><br><span class="line">log4j.appender.R.layout.ConversionPattern=%d-[TS] %p %t %c - %m%n&lt;/span&gt;</span><br></pre></td></tr></table></figure><h5 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h5><p><code>rootLogger</code>也可以写作<code>rootCategory</code>,<br>rootLogger value的含义<br>第一个逗号前表示log的级别：<code>FATAL</code>,<code>ERROR</code>,<code>WARN</code>,<code>INFO</code>,<code>DEBUG</code>,级别依次降低，开发的时候一般选作DEBUG，上线前期可以INFO或者DEBUG，版本稳定了可以WARN或者ERROR。稳定以后可以每天将日志发送到你的邮箱（至于怎么发，看最下面的Appender），这样就不需要每天去看检查上线的项目有没有异常。</p><p>第一个逗号后面的表示你定义的<code>appender</code>，比如我们这里定义了stdout和R，这个名字可以随便定，和下面的对应就好了。这里的stdout代表控制台输出，上线的时候别忘记关掉，直接在rootLogger里去掉stdout就好了。</p><h5 id="Log4j提供的appender有以下几种："><a href="#Log4j提供的appender有以下几种：" class="headerlink" title="Log4j提供的appender有以下几种："></a>Log4j提供的appender有以下几种：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">org.apache.log4j.ConsoleAppender（控制台）</span><br><span class="line">org.apache.log4j.FileAppender（文件）</span><br><span class="line">org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）</span><br><span class="line">org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生新文件）</span><br><span class="line">org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）</span><br><span class="line">ConsoleAppender和DailyRollingFileAppender以及RollingFileAppender用的比较多，后面两个用哪个看需求。</span><br></pre></td></tr></table></figure><h5 id="log4j提供以下4种布局样式："><a href="#log4j提供以下4种布局样式：" class="headerlink" title="log4j提供以下4种布局样式："></a>log4j提供以下4种布局样式：</h5><p>不同的Appender有不同的属性，但是Appender都会有一个属性layout，layout又有一个属性PatternLayout<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">org.apache.log4j.HTMLLayout（以HTML表格形式布局）</span><br><span class="line">org.apache.log4j.PatternLayout（可以灵活地指定布局模式，就是可以自定义输出样式），</span><br><span class="line">org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），</span><br><span class="line">org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）</span><br></pre></td></tr></table></figure><p></p><h5 id="再看一下PatternLayout的值代表的什么意思"><a href="#再看一下PatternLayout的值代表的什么意思" class="headerlink" title="再看一下PatternLayout的值代表的什么意思"></a>再看一下PatternLayout的值代表的什么意思</h5><p><code>%d</code> 输出日志时间点的日期或时间，紧跟一对花括号进行自定义格式<br><code>%t</code> 输出产生该日志事件的线程名<br><code>%c</code> 输出所属的类目，通常就是所在类的全名<br><code>%l</code> 输出行号<br><code>%m</code> 输出代码中指定的消息<br><code>%n</code> 输出一个回车换行符，Windows平台为 <code>\r\n</code>，Unix平台为 <code>\n</code>，也就是一跳消息占用一行，所以<code>%m%n</code>基本都是一起用<br><code>%p</code> 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL<br>我们经常会看到[%-5p]这样的用法，就是对%p进行格式化，占用几个字符空间，因为INFO，DEBUG他们有的占用4个有的占用5个，日志看起来不对其，进行一个格式化而已。<br><code>%r</code> 输出自应用启动到输出该log信息耗费的毫秒数<br><code>%c</code> 输出所属的类目，通常就是所在类的全名<br><code>%x</code> 输出对齐</p><h5 id="再看看appender的其他属性"><a href="#再看看appender的其他属性" class="headerlink" title="再看看appender的其他属性"></a>再看看appender的其他属性</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">log4j.appender.FILE.File=D:/logs/log4j.log      --------定义输出文件的位置及文件名</span><br><span class="line">log4j.appender.FILE.MaxFileSize=1MB             --------定义每个文件的大小，超过这个大小，则新建一个文件，注意单位 MB 或 KB</span><br><span class="line">log4j.appender.D.Threshold = DEBUG              --------输出DEBUG级别以上的日志</span><br></pre></td></tr></table></figure><h5 id="输出到邮件"><a href="#输出到邮件" class="headerlink" title="输出到邮件"></a>输出到邮件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">log4j.appender.MAIL=org.apache.log4j.net.SMTPAppender（指定输出到邮件）</span><br><span class="line">log4j.appender.MAIL.Threshold=FATAL</span><br><span class="line">log4j.appender.MAIL.BufferSize=10</span><br><span class="line">log4j.appender.MAIL.From=chenyl@hollycrm.com（发件人）</span><br><span class="line">log4j.appender.MAIL.SMTPHost=mail.hollycrm.com（SMTP服务器）</span><br><span class="line">log4j.appender.MAIL.Subject=Log4J Message</span><br><span class="line">log4j.appender.MAIL.To=chenyl@hollycrm.com（收件人）</span><br><span class="line">log4j.appender.MAIL.layout=org.apache.log4j.PatternLayout（布局）</span><br><span class="line">log4j.appender.MAIL.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n（格式）</span><br><span class="line"> </span><br><span class="line">输出到数据库</span><br><span class="line">log4j.appender.DATABASE=org.apache.log4j.jdbc.JDBCAppender（指定输出到数据库）</span><br><span class="line">log4j.appender.DATABASE.URL=jdbc:mysql://localhost:3306/test（指定数据库URL）</span><br><span class="line">log4j.appender.DATABASE.driver=com.mysql.jdbc.Driver（指定数据库driver）</span><br><span class="line">log4j.appender.DATABASE.user=root（指定数据库用户）</span><br><span class="line">log4j.appender.DATABASE.password=root（指定数据库用户密码）</span><br><span class="line">log4j.appender.DATABASE.sql=INSERT INTO LOG4J (Message) VALUES (&apos;[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n&apos;)（组织SQL语句）</span><br><span class="line">log4j.appender.DATABASE.layout=org.apache.log4j.PatternLayout（布局）</span><br><span class="line">log4j.appender.DATABASE.layout.ConversionPattern=[framework] %d - %c -%-4r [%t] %-5p %c %x - %m%n（格式）</span><br></pre></td></tr></table></figure><h5 id="我的项目最终配置"><a href="#我的项目最终配置" class="headerlink" title="我的项目最终配置"></a>我的项目最终配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"># Rules reminder:</span><br><span class="line"># DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL</span><br><span class="line"></span><br><span class="line">### 设置级别和目的地(这里多个目的地) ###</span><br><span class="line">#级别为DEBUG</span><br><span class="line">#目的地为CONSOLE，zhangLog；zhangLog为自定义输出端，可随意命名</span><br><span class="line">log4j.rootLogger = DEBUG,CONSOLE,zhangLog</span><br><span class="line"></span><br><span class="line">### 这里的com.wuwii是我项目的包名，也就是在这个包记录日志时，开发阶段是只记录DEBUG及以上级别的日志，正式上线的时候可以改成INFO、ERROR</span><br><span class="line">#### 当然就可以设定特定包打印的级别</span><br><span class="line">log4j.logger.com.wuwii=DEBUG</span><br><span class="line"></span><br><span class="line">#Log4j提供的appender有以下几种：</span><br><span class="line">#org.apache.log4j.ConsoleAppender（控制台），</span><br><span class="line">#org.apache.log4j.FileAppender（文件），</span><br><span class="line">#org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），</span><br><span class="line">#org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），</span><br><span class="line">#org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）</span><br><span class="line"></span><br><span class="line">### 输出到控制台 ###</span><br><span class="line">log4j.appender.CONSOLE = org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.CONSOLE.Target = System.out</span><br><span class="line">log4j.appender.CONSOLE.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.CONSOLE.layout.ConversionPattern =  %d&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n</span><br><span class="line"></span><br><span class="line"># My logging configuration...</span><br><span class="line">## 可以设置特定工具的打印日志级别</span><br><span class="line">log4j.logger.org.mybatis.jpetstore=INFO</span><br><span class="line">log4j.logger.com.ibatis=INFO</span><br><span class="line">log4j.logger.com.ibatis.common.jdbc.SimpleDataSource=INFO</span><br><span class="line">log4j.logger.com.ibatis.common.jdbc.ScriptRunner=INFO</span><br><span class="line">log4j.logger.com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate=INFO</span><br><span class="line">log4j.logger.java.sql.Connection = INFO</span><br><span class="line">log4j.logger.java.sql.Statement = INFO</span><br><span class="line">log4j.logger.java.sql.PreparedStatement = INFO</span><br><span class="line">log4j.logger.java.sql.ResultSet = INFO</span><br><span class="line"></span><br><span class="line">### 输出到日志文件 ###</span><br><span class="line">#写到文件中，并且追加</span><br><span class="line">log4j.appender.zhangLog = org.apache.log4j.DailyRollingFileAppender</span><br><span class="line"># 设置文件输出位置</span><br><span class="line">#log4j.appender.zhangLog.File =D\:\\debug.log</span><br><span class="line">log4j.appender.zhangLog.File=$&#123;catalina.home&#125;/logs/wuwii/debug.log</span><br><span class="line">#log4j.appender.zhangLog.File =/var/debug/debug.log</span><br><span class="line">log4j.appender.zhangLog.Append = true</span><br><span class="line">## 只输出DEBUG级别以上的日志</span><br><span class="line">log4j.appender.zhangLog.Threshold = DEBUG</span><br><span class="line">#&apos;.&apos;yyyy-MM-dd: 设置为每天产生一个新的文件</span><br><span class="line">#1)’.’yyyy-MM: 每月</span><br><span class="line">#2)’.’yyyy-ww: 每周</span><br><span class="line">#3)’.’yyyy-MM-dd: 每天</span><br><span class="line">#4)’.’yyyy-MM-dd-a: 每天两次</span><br><span class="line">#5)’.’yyyy-MM-dd-HH: 每小时</span><br><span class="line">#6)’.’yyyy-MM-dd-HH-mm: 每分钟</span><br><span class="line">log4j.appender.zhangLog.DatePattern = &apos;.&apos;yyyy-MM-dd</span><br><span class="line">#当文件达到2kb时，文件会被备份成&quot;debug.txt.1&quot;，新的&quot;log.txt&quot;继续记录log信息</span><br><span class="line">## 在DailyRollingFileAppender 没这个属性</span><br><span class="line">#log4j.appender.zhangLog.MaxFileSize = 2KB </span><br><span class="line">#最多建5个文件，当文件个数较多时，后面不再新建文件</span><br><span class="line">## 在DailyRollingFileAppender 没这个属性</span><br><span class="line">#log4j.appender.zhangLog.MaxBackupIndex = 5</span><br><span class="line">log4j.appender.zhangLog.layout = org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.zhangLog.layout.ConversionPattern = %-d&#123;yyyy-MM-dd HH:mm:ss&#125; [%t:%r] - [%p] [%c&#123;1&#125;:%L] [%M] %m%n</span><br><span class="line">#设置子Logger是否继承父Logger的输出源</span><br><span class="line">#默认情况下子Logger会继承父Logger的appender，也就是说子Logger会在父Logger的appender里输出</span><br><span class="line">log4j.additivity.zhangLog = false</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>测试的类没有启动 web ，默认的是查找 resources 根目录下的 <code>log4j.properties</code> ，没有则找不到。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.wuwii.test;</span><br><span class="line">import org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line">public class Log4jTest &#123;</span><br><span class="line">    public static Logger logger1 = Logger.getLogger(Log4jTest.class);</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //logger1</span><br><span class="line">        logger1.trace(&quot;他真的很喜欢你 像春雨下得淅淅沥沥，trace&quot;);</span><br><span class="line">        logger1.debug(&quot;他真的很喜欢你 像夏日聒噪的蝉鸣，debug&quot;);</span><br><span class="line">        logger1.info(&quot;他真的很想念你 像秋叶落得悄无声息，info&quot;);</span><br><span class="line">        logger1.warn(&quot;他真的很喜欢你 想冬天的雪沁在心里，warn&quot;);</span><br><span class="line">        logger1.error(&quot;他真的很喜欢你 像狗本性难移，error&quot;);</span><br><span class="line">        logger1.fatal(&quot;他真的很喜欢你 所以他可以一直没脸没皮，fatal&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>运行代码后，我们可以看到控制台打印了：</p><p><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fmwwarhai6j210t07otak.jpg" alt="image"></p><p>因为我们设置了输入到控制台了，再去查看我们的打印日志文件的位置，也可以看到报错信息，使用的 是<code>org.apache.log4j.DailyRollingFileAppender</code>，并没有 <code>maxBackupIndex</code> 和 <code>maxFileSize</code> 属性，所以上面的配置文件也不正确，需要删掉这两行，</p><p><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fmwwber01uj20mh01swee.jpg" alt="image"></p><p>使用的是每天生成一个文件，前一天的备份成<code>yyyy-MM-dd</code> 符合。</p><p>打开文件看到</p><p><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fmwwbpurptj20xg04e3zc.jpg" alt="image"></p><p>正确写入，</p><p>Log4j的使用及配置就是这样的了。</p><p><strong>参考博客</strong> <a rel="external nofollow noopener noreferrer" target="_blank" href="http://blog.csdn.net/zhengliusu/article/details/44619023">http://blog.csdn.net/zhengliusu/article/details/44619023</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Maven Scope定义值说明]]></title>
      <url>/maven-scope.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h4 id="maven依赖关系中Scope的作用"><a href="#maven依赖关系中Scope的作用" class="headerlink" title="maven依赖关系中Scope的作用"></a>maven依赖关系中Scope的作用</h4><p><code>Dependency Scope</code></p><p>在POM 4中，<dependency>中还引入了<scope>，它主要管理依赖的部署。目前<scope>可以使用5个值：</scope></scope></dependency></p><ul><li>compile，缺省值，适用于所有阶段，会随着项目一起发布。</li><li>provided，类似compile，期望JDK、容器或使用者会提供这个依赖。如servlet.jar。</li><li>runtime，只在运行时使用，如JDBC驱动，适用运行和测试阶段。</li><li>test，只在测试时使用，用于编译和运行测试代码。不会随项目发布。</li><li>system，类似provided，需要显式提供包含依赖的jar，Maven不会在Repository中查找它。<a id="more"></a></li></ul><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>依赖范围控制哪些依赖在哪些classpath 中可用，哪些依赖包含在一个应用中。让我们详细看一下每一种范围：</p><h5 id="compile-（编译范围）"><a href="#compile-（编译范围）" class="headerlink" title="compile （编译范围）"></a>compile （编译范围）</h5><p>compile是默认的范围；如果没有提供一个范围，那该依赖的范围就是编译范围。编译范围依赖在所有的classpath 中可用，同时它们也会被打包。</p><h5 id="provided-（已提供范围）"><a href="#provided-（已提供范围）" class="headerlink" title="provided （已提供范围）"></a>provided （已提供范围）</h5><p>provided 依赖只有在当JDK 或者一个容器已提供该依赖之后才使用。例如，<br>如果你开发了一个web 应用，你可能在编译 classpath 中需要可用的Servlet API 来编译一个servlet，但是你不会想要在打包好的WAR 中包含这个Servlet API；这个Servlet API JAR 由你的应用服务器或者servlet 容器提供。已提供范围的依赖在编译classpath （不是运行时）可用。它们不是传递性的，也不会被打包。</p><h5 id="runtime-（运行时范围）"><a href="#runtime-（运行时范围）" class="headerlink" title="runtime （运行时范围）"></a>runtime （运行时范围）</h5><p>runtime 依赖在运行和测试系统的时候需要，但在编译的时候不需要。比如，你可能在编译的时候只需要JDBC API JAR，<br>而只有在运行的时候才需要JDBC<br>驱动实现。</p><h5 id="test-（测试范围）"><a href="#test-（测试范围）" class="headerlink" title="test （测试范围）"></a>test （测试范围）</h5><p>test范围依赖 在一般的编译和运行时都不需要，它们只有在测试编译和测试运行阶段可用。</p><h5 id="system-（系统范围）"><a href="#system-（系统范围）" class="headerlink" title="system （系统范围）"></a>system （系统范围）</h5><p>system范围依赖与provided 类似，但是你必须显式的提供一个对于本地系统中JAR 文件的路径。<br>这么做是为了允许基于本地对象编译，而这些对象是系统类库的一部分。这样的构件应该是一直可用的，Maven 也不会在仓库中去寻找它。<br>如果你将一个依赖范围设置成系统范围，你必须同时提供一个 systemPath 元素。注意该范围是不推荐使用的（你应该一直尽量去从公共或定制的 Maven 仓库中引用依赖）。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>默认的依赖范围是complie</li><li>test范围指的是测试范围有效，在编译和打包时都不会使用这个依赖，<scope>为test的jar不会传递依赖项目；</scope></li><li>compile范围指的是编译范围有效，在编译和打包时都会讲依赖存储进去；</li><li>provided依赖，在编译和测试的过程有效，最后生成var包时不会加入，诸如：servlet——api，因为servlet-api，tomcat等web服务器已经存在了，如果再打包会冲突；</li><li>runtime在运行的时候依赖，在编译的时候不依赖；</li></ul><p><strong>参考博客</strong> <a rel="external nofollow noopener noreferrer" target="_blank" href="http://blog.csdn.net/ld513508088/article/details/23827945">http://blog.csdn.net/ld513508088/article/details/23827945</a></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> maven </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[redies安装]]></title>
      <url>/redis.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="使用文件安装"><a href="#使用文件安装" class="headerlink" title="使用文件安装"></a>使用文件安装</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>直接去官网下载最新版的，前面使用<code>wget</code>下载半天下载下来的全是错误文件，浪费了大把时间，最重要的是浪费心情。<a id="more"></a></p><p>Redis官网(redis.io)</p><h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]<span class="comment"># tar xzf redis-4.0.2.tar.gz</span></span><br></pre></td></tr></table></figure><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><p>进入解压的文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> redis-4.0.2</span><br></pre></td></tr></table></figure><p>编译<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line"><span class="built_in">cd</span> src</span><br><span class="line">make install PREFIX=/usr/<span class="built_in">local</span>/redis</span><br></pre></td></tr></table></figure><p></p><h4 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h4><p>新建文件夹<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/<span class="built_in">local</span>/redis/etc</span><br></pre></td></tr></table></figure><p></p><p>移动config文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv ./redis.conf /usr/<span class="built_in">local</span>/redis/etc/</span><br></pre></td></tr></table></figure><h3 id="启动Redis服务"><a href="#启动Redis服务" class="headerlink" title="启动Redis服务"></a>启动Redis服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/redis/bin/redis-server</span><br></pre></td></tr></table></figure><p>前台运行中</p><p>想要后台运行修改配置文件<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/<span class="built_in">local</span>/redis/etc/redis.conf</span><br></pre></td></tr></table></figure><p></p><p>将<code>daemonize</code>的值改为<code>yes</code></p><p>后台运行命令<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　/usr/<span class="built_in">local</span>/redis/bin/redis-server /usr/<span class="built_in">local</span>/redis/etc/redis.conf</span><br></pre></td></tr></table></figure><p></p><p>查看端口<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]<span class="comment"># netstat -tunpl | grep 6379                    </span></span><br><span class="line">tcp        0      0 127.0.0.1:6379          0.0.0.0:*               LISTEN      5769/./redis-server</span><br></pre></td></tr></table></figure><p></p><p>启动成功。</p><p>客户端登陆<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]<span class="comment"># /usr/local/redis/bin/redis-cli </span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> foo bar</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get foo</span><br><span class="line"><span class="string">"bar"</span></span><br></pre></td></tr></table></figure><p></p><p>关闭服务<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/redis/bin/redis-cli shutdown</span><br></pre></td></tr></table></figure><p></p><p>redis开机自启</p><p><code>vim /etc/rc.local</code><br>底部添加<br><code>/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf</code></p><h3 id="了解"><a href="#了解" class="headerlink" title="了解"></a>了解</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">redis-benchmark：redis性能测试工具</span><br><span class="line"></span><br><span class="line">　　redis-check-aof：检查aof日志的工具</span><br><span class="line"></span><br><span class="line">　　redis-check-dump：检查rdb日志的工具</span><br><span class="line"></span><br><span class="line">　　redis-cli：连接用的客户端</span><br><span class="line"></span><br><span class="line">　　redis-server：redis服务进程</span><br></pre></td></tr></table></figure><h3 id="剩下就是配置"><a href="#剩下就是配置" class="headerlink" title="剩下就是配置"></a>剩下就是配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">daemonize：如需要在后台运行，把该项的值改为yes</span><br><span class="line"></span><br><span class="line">　　pdifile：把pid文件放在/var/run/redis.pid，可以配置到其他地址</span><br><span class="line"></span><br><span class="line">　　<span class="built_in">bind</span>：指定redis只接收来自该IP的请求，如果不设置，那么将处理所有请求，在生产环节中最好设置该项</span><br><span class="line"></span><br><span class="line">　　port：监听端口，默认为6379</span><br><span class="line"></span><br><span class="line">　　timeout：设置客户端连接时的超时时间，单位为秒</span><br><span class="line"></span><br><span class="line">　　loglevel：等级分为4级，debug，revbose，notice和warning。生产环境下一般开启notice</span><br><span class="line"></span><br><span class="line">　　logfile：配置<span class="built_in">log</span>文件地址，默认使用标准输出，即打印在命令行终端的端口上</span><br><span class="line"></span><br><span class="line">　　database：设置数据库的个数，默认使用的数据库是0</span><br><span class="line"></span><br><span class="line">　　save：设置redis进行数据库镜像的频率</span><br><span class="line"></span><br><span class="line">　　rdbcompression：在进行镜像备份时，是否进行压缩</span><br><span class="line"></span><br><span class="line">　　dbfilename：镜像备份文件的文件名</span><br><span class="line"></span><br><span class="line">　　dir：数据库镜像备份的文件放置的路径</span><br><span class="line"></span><br><span class="line">　　slaveof：设置该数据库为其他数据库的从数据库</span><br><span class="line"></span><br><span class="line">　　masterauth：当主数据库连接需要密码验证时，在这里设定</span><br><span class="line"></span><br><span class="line">　　requirepass：设置客户端连接后进行任何其他指定前需要使用的密码</span><br><span class="line"></span><br><span class="line">　　maxclients：限制同时连接的客户端数量</span><br><span class="line"></span><br><span class="line">　　maxmemory：设置redis能够使用的最大内存</span><br><span class="line"></span><br><span class="line">　　appendonly：开启appendonly模式后，redis会把每一次所接收到的写操作都追加到appendonly.aof文件中，当redis重新启动时，会从该文件恢复出之前的状态</span><br><span class="line"></span><br><span class="line">　　appendfsync：设置appendonly.aof文件进行同步的频率</span><br><span class="line"></span><br><span class="line">　　vm_enabled：是否开启虚拟内存支持</span><br><span class="line"></span><br><span class="line">　　vm_swap_file：设置虚拟内存的交换文件的路径</span><br><span class="line"></span><br><span class="line">　　vm_max_momery：设置开启虚拟内存后，redis将使用的最大物理内存的大小，默认为0</span><br><span class="line"></span><br><span class="line">　　vm_page_size：设置虚拟内存页的大小</span><br><span class="line"></span><br><span class="line">　　vm_pages：设置交换文件的总的page数量</span><br><span class="line"></span><br><span class="line">　　vm_max_thrrads：设置vm IO同时使用的线程数量</span><br></pre></td></tr></table></figure><h3 id="（推荐）使用-yum-安装"><a href="#（推荐）使用-yum-安装" class="headerlink" title="（推荐）使用 yum 安装"></a>（推荐）使用 yum 安装</h3><ol><li>redis在第三方的源里，首先添加源，添加 epel 源</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release -y</span><br></pre></td></tr></table></figure><ol start="2"><li>安装 redis</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install redis -y</span><br></pre></td></tr></table></figure><ol start="3"><li>配置文件在 <code>/etc/redis.conf</code>，配置文件和上面一样的。</li><li>启动命令 <code>systemctl start redis</code>，或者使用指定配置文件的方式 <code>redis-server /etc/redis.conf</code>。</li><li>开机自启 <code>systemctl enable redis</code>。</li><li>使用 redis 客户端 <code>redis-cli</code></li><li>将 6379 端口打开 <code></code>firewall-cmd –add-port=6379/tcp<code></code></li></ol><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> redis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MQTT在JAVA中使用]]></title>
      <url>/java-mqtt.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>由于项目中需求，多个客户机终端不断发送位置给服务机，服务机根据消息，准确判断信息，并返回响应，回复该客户机。</p></blockquote><p>在这里我们的服务机，不但要订阅所有客户机的主题，还要根据客户机消息做出相应的响应，服务机同时充当客户机使用，客户机也推送主题消息，充当服务器。<br><a id="more"></a></p><blockquote><p>关键问题：</p><ol><li>服务器怎么区分各个客户机</li><li>主题配置方面的问题，不可能每个机器配个主题</li><li>通信方面，选择哪种消息级别</li></ol></blockquote><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><h4 id="使用maven项目，刚好在仓库导包了，可以使用（推荐）"><a href="#使用maven项目，刚好在仓库导包了，可以使用（推荐）" class="headerlink" title="使用maven项目，刚好在仓库导包了，可以使用（推荐）"></a>使用maven项目，刚好在仓库导包了，可以使用（推荐）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.paho<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>org.eclipse.paho.client.mqttv3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="仓库没有包，直接去网上下，可以直接导包到Lib中"><a href="#仓库没有包，直接去网上下，可以直接导包到Lib中" class="headerlink" title="仓库没有包，直接去网上下，可以直接导包到Lib中"></a>仓库没有包，直接去网上下，可以直接导包到Lib中</h4><h3 id="编写"><a href="#编写" class="headerlink" title="编写"></a>编写</h3><h4 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.devframe.mqtt.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.MqttClient;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.MqttConnectOptions;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.MqttException;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">* <span class="doctag">@ClassName</span>: ServerMQTT </span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span>:  服务器接收多个客户端的主题，同时要像客户端反馈</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> zhangkai </span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2017年9月12日 下午12:52:01 </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerMQTT</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 连接参数</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String CONNECTION_STRING = <span class="string">"tcp://192.168.19.200:8001"</span>; <span class="comment">//host</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">boolean</span> CLEAN_START = <span class="keyword">true</span>;  <span class="comment">//是否清空session，false保留</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">short</span> KEEP_ALIVE = <span class="number">30</span>;<span class="comment">// 低耗网络，但是又需要及时获取数据，心跳30*1.5s</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">short</span> KEEP_TIME_OUT = <span class="number">10</span>; <span class="comment">//连接超时</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String CLIENT_ID = <span class="string">"master"</span>;<span class="comment">// 客户端标识</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span>[] QOS_VALUES = &#123; <span class="number">0</span> &#125;;<span class="comment">// 对应主题的消息级别</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String[] TOPICS = &#123; <span class="string">"agri/#"</span>&#125;; <span class="comment">//匹配agri/下所有的主题</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> String userName = <span class="string">"agri"</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> String passWord = <span class="string">"admin@123"</span>;</span><br><span class="line">	<span class="keyword">private</span> MqttConnectOptions options;</span><br><span class="line">	<span class="keyword">private</span> MqttClient mqttClient;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 构造函数</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> MqttException</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ServerMQTT</span><span class="params">()</span> <span class="keyword">throws</span> MqttException </span>&#123;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 发送消息</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> topic 主题</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> message 消息</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> qos 消息级别&#123;0,1,2&#125;</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> retained 是否是实时发送的消息(false=实时，true=服务器上保留的消息)</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String topic, String message, <span class="keyword">int</span> qos, <span class="keyword">boolean</span> retained)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//断开重连</span></span><br><span class="line">			<span class="keyword">if</span> (mqttClient == <span class="keyword">null</span> || !mqttClient.isConnected()) &#123;</span><br><span class="line">				connect();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 发布消息</span></span><br><span class="line">			mqttClient.publish(topic, message.getBytes(), qos, retained);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (MqttException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 重新连接服务</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			mqttClient = <span class="keyword">new</span> MqttClient(CONNECTION_STRING, CLIENT_ID, <span class="keyword">new</span> MemoryPersistence());</span><br><span class="line">			<span class="comment">// MQTT的连接设置</span></span><br><span class="line">			options = <span class="keyword">new</span> MqttConnectOptions();</span><br><span class="line">			<span class="comment">// 设置是否清空session,这里如果设置为false表示服务器会保留客户端的连接记录，这里设置为true表示每次连接到服务器都以新的身份连接</span></span><br><span class="line">			options.setCleanSession(CLEAN_START);</span><br><span class="line">			<span class="comment">// 设置连接的用户名</span></span><br><span class="line">			options.setUserName(userName);</span><br><span class="line">			<span class="comment">// 设置连接的密码</span></span><br><span class="line">			options.setPassword(passWord.toCharArray());</span><br><span class="line">			<span class="comment">// 设置超时时间 单位为秒</span></span><br><span class="line">			options.setConnectionTimeout(KEEP_TIME_OUT);</span><br><span class="line">			<span class="comment">// 设置会话心跳时间 单位为秒 服务器会每隔1.5*30秒的时间向客户端发送个消息判断客户端是否在线，但这个方法并没有重连的机制</span></span><br><span class="line">			options.setKeepAliveInterval(KEEP_ALIVE); </span><br><span class="line">			<span class="comment">// 设置回调</span></span><br><span class="line">			mqttClient.setCallback(<span class="keyword">new</span> PushCallback());</span><br><span class="line"></span><br><span class="line">			mqttClient.connect(options);</span><br><span class="line">			mqttClient.subscribe( TOPICS , QOS_VALUES);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 启动入口</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> MqttException</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MqttException </span>&#123;</span><br><span class="line">		ServerMQTT server = <span class="keyword">new</span> ServerMQTT();</span><br><span class="line">		server.connect();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="客户机"><a href="#客户机" class="headerlink" title="客户机"></a>客户机</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.devframe.mqtt.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.MqttClient;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.MqttConnectOptions;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.MqttException;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.MqttSecurityException;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientMQTT</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 连接参数</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String CONNECTION_STRING = <span class="string">"tcp://192.168.19.200:8001"</span>; <span class="comment">// host</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">boolean</span> CLEAN_START = <span class="keyword">true</span>; <span class="comment">// 是否清空session，false保留</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">short</span> KEEP_ALIVE = <span class="number">30</span>;<span class="comment">// 低耗网络，但是又需要及时获取数据，心跳30*1.5s</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">short</span> KEEP_TIME_OUT = <span class="number">10</span>; <span class="comment">// 连接超时</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String CLIENT_ID = <span class="string">"client1"</span>;<span class="comment">// 客户端标识</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span>[] QOS_VALUES = &#123; <span class="number">0</span> &#125;;<span class="comment">// 对应主题的消息级别</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String PUBLISH_TOPIC = <span class="string">"agri/index1"</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String[] RECEIVE_TOPIC = &#123;<span class="string">"agri/index1/back"</span>&#125;;</span><br><span class="line">	<span class="keyword">private</span> MqttClient client;</span><br><span class="line">	<span class="keyword">private</span> MqttConnectOptions options;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> String userName = <span class="string">"agri"</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> String passWord = <span class="string">"admin@123"</span>;</span><br><span class="line">	<span class="keyword">private</span> ScheduledExecutorService scheduler;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 重新连接</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startReconnect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		scheduler = Executors.newSingleThreadScheduledExecutor();</span><br><span class="line">		scheduler.scheduleAtFixedRate(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">				<span class="keyword">if</span> (!client.isConnected()) &#123;</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						client.connect(options);</span><br><span class="line">					&#125; <span class="keyword">catch</span> (MqttSecurityException e) &#123;</span><br><span class="line">						e.printStackTrace();</span><br><span class="line">					&#125; <span class="keyword">catch</span> (MqttException e) &#123;</span><br><span class="line">						e.printStackTrace();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;, <span class="number">0</span> * <span class="number">1000</span>, <span class="number">10</span> * <span class="number">1000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 发送消息</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> topic</span></span><br><span class="line"><span class="comment">	 *            主题</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">	 *            消息</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> qos</span></span><br><span class="line"><span class="comment">	 *            消息级别&#123;0,1,2&#125;</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> retained</span></span><br><span class="line"><span class="comment">	 *            是否是实时发送的消息(false=实时，true=服务器上保留的最后消息)</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String topic, String message, <span class="keyword">int</span> qos, <span class="keyword">boolean</span> retained)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (client == <span class="keyword">null</span> || !client.isConnected()) &#123;</span><br><span class="line">				connect();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 发布消息</span></span><br><span class="line">			client.publish(topic, message.getBytes(), qos, retained);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (MqttException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 重新连接服务</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			client = <span class="keyword">new</span> MqttClient(CONNECTION_STRING, CLIENT_ID, <span class="keyword">new</span> MemoryPersistence());</span><br><span class="line">			<span class="comment">// MQTT的连接设置</span></span><br><span class="line">			options = <span class="keyword">new</span> MqttConnectOptions();</span><br><span class="line">			<span class="comment">// 设置是否清空session,这里如果设置为false表示服务器会保留客户端的连接记录，这里设置为true表示每次连接到服务器都以新的身份连接</span></span><br><span class="line">			options.setCleanSession(CLEAN_START);</span><br><span class="line">			<span class="comment">// 设置连接的用户名</span></span><br><span class="line">			options.setUserName(userName);</span><br><span class="line">			<span class="comment">// 设置连接的密码</span></span><br><span class="line">			options.setPassword(passWord.toCharArray());</span><br><span class="line">			<span class="comment">// 设置超时时间 单位为秒</span></span><br><span class="line">			options.setConnectionTimeout(KEEP_TIME_OUT);</span><br><span class="line">			<span class="comment">// 设置会话心跳时间 单位为秒 服务器会每隔1.5*30秒的时间向客户端发送个消息判断客户端是否在线，但这个方法并没有重连的机制</span></span><br><span class="line">			options.setKeepAliveInterval(KEEP_ALIVE);</span><br><span class="line">			<span class="comment">// 设置回调</span></span><br><span class="line">			client.setCallback(<span class="keyword">new</span> PushCallback());</span><br><span class="line"></span><br><span class="line">			client.connect(options);</span><br><span class="line">			client.subscribe(RECEIVE_TOPIC, QOS_VALUES);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO 每秒一次向服务端发送消息</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">				sendMessage(PUBLISH_TOPIC, <span class="string">"hello,topic"</span> + i, <span class="number">0</span>, <span class="keyword">false</span>);</span><br><span class="line">				i++;</span><br><span class="line">				Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MqttException </span>&#123;</span><br><span class="line">		ClientMQTT client = <span class="keyword">new</span> ClientMQTT();</span><br><span class="line">		Thread thread = <span class="keyword">new</span> Thread(client, <span class="string">"th1"</span>);</span><br><span class="line">		thread.start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试的时候就是把客户机复制了几个，主题和clientid改下，clientid不能一样，不然不能登陆。</p><h3 id="回调类"><a href="#回调类" class="headerlink" title="回调类"></a>回调类</h3><p>发送完消息，Service需要在这里处理，着我们先做的事情啦。<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.devframe.mqtt.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;  </span><br><span class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.MqttCallback;  </span><br><span class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.MqttMessage;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: PushCallback</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 发布消息的回调类</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *               必须实现MqttCallback的接口并实现对应的相关接口方法CallBack 类将实现 MqttCallBack。</span></span><br><span class="line"><span class="comment"> *               每个客户机标识都需要一个回调实例。在此示例中，构造函数传递客户机标识以另存为实例数据。</span></span><br><span class="line"><span class="comment"> *               在回调中，将它用来标识已经启动了该回调的哪个实例。 必须在回调类中实现三个方法：</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *               public void messageArrived(MqttTopic topic, MqttMessage</span></span><br><span class="line"><span class="comment"> *               message)接收已经预订的发布。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *               public void connectionLost(Throwable cause)在断开连接时调用。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *               public void deliveryComplete(MqttDeliveryToken token))</span></span><br><span class="line"><span class="comment"> *               接收到已经发布的QoS 0、 QoS 1 或 QoS 2 消息的传递令牌时调用。 由 MqttClient.connect</span></span><br><span class="line"><span class="comment"> *               激活此回调。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangkai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017年9月12日 上午11:30:44</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PushCallback</span> <span class="keyword">implements</span> <span class="title">MqttCallback</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connectionLost</span><span class="params">(Throwable cause)</span> </span>&#123;  </span><br><span class="line">        <span class="comment">// TODO 连接丢失后，一般在这里面进行重连  </span></span><br><span class="line">        System.out.println(<span class="string">"连接断开，可以做重连"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deliveryComplete</span><span class="params">(IMqttDeliveryToken token)</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"deliveryComplete---------"</span> + token.isComplete());  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">messageArrived</span><span class="params">(String topic, MqttMessage message)</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        <span class="comment">// TODO subscribe后得到的消息会执行到这里面，后续工作将在这里进行  </span></span><br><span class="line">        System.out.println(<span class="string">"接收消息主题 : "</span> + topic);  </span><br><span class="line">        System.out.println(<span class="string">"接收消息Qos : "</span> + message.getQos());  </span><br><span class="line">        System.out.println(<span class="string">"接收消息内容 : "</span> + <span class="keyword">new</span> String(message.getPayload()));  </span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>使用前缀通配符的方式加上特殊码区分各个机器的主题。</li><li>根据不同业务的需求，需要合理的选择不同级别的消息。</li><li><p>实际使用中一般把发消息的参数 <code>retained</code> 设为 <code>false</code> ，这个参数的说明是:<br>设为true之后把消息保存到本地，每一次去订阅该主题的subscriber都会收到，每次订阅的时候都会收到，导致很多重复多余的消息。</p><p>如果在使用的过程中不小心将它设置成true，怎么去清除这个存着的消息了，mqtt本身没这个功能；<br><strong>解决办法：向该topic重新publish数据，RETAIN=TRUE，<code>Payload为空</code>。</strong></p></li></ol><p>所以，刚开始做这个都得时候就是设置成true，包括上面的测试代码，还没改过来，业务代码已经全部改好了。不然没次去连接mqtt的时候，都会订阅到一大片消息，电脑跑到卡得不行，哈哈。</p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> mq </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mosquitto用户名密码配置]]></title>
      <url>/mqtt-user.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>由于需要把<code>mqtt</code>部署到外网上面去，所以需要关闭<code>匿名登陆</code>，采取用户<code>认证模式</code>，而且还可能需要把主题加密。</p><a id="more"></a><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><p>配置参数在<code>/etc/mosquitto/mosquitto.conf</code>中，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">allow_anonymous 允许匿名登陆</span><br><span class="line">password_file 账号密码文件</span><br><span class="line">acl_file 访问控制列表</span><br></pre></td></tr></table></figure><p>配置<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost mosquitto]<span class="comment"># vim mosquitto.conf           </span></span><br><span class="line"><span class="comment"># Place your local configuration in /etc/mosquitto/conf.d/</span></span><br><span class="line"></span><br><span class="line">pid_file /var/run/mosquitto.pid</span><br><span class="line"></span><br><span class="line">persistence <span class="literal">true</span></span><br><span class="line">persistence_location /var/lib/mosquitto/</span><br><span class="line"></span><br><span class="line"><span class="comment">#log_dest file /var/log/mosquitto/mosquitto.log</span></span><br><span class="line"></span><br><span class="line">include_dir /etc/mosquitto/conf.d</span><br><span class="line">allow_anonymous <span class="literal">false</span></span><br><span class="line">password_file /etc/mosquitto/pwfile</span><br><span class="line">acl_file /etc/mosquitto/aclfile</span><br><span class="line">port 8001</span><br></pre></td></tr></table></figure><p></p><h4 id="查看用户"><a href="#查看用户" class="headerlink" title="查看用户"></a>查看用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost mosquitto]<span class="comment"># cat pwfile                   </span></span><br><span class="line">agri:<span class="variable">$6</span><span class="variable">$NprvJLB</span>/CkEomWGy<span class="variable">$gNj5Mr6Wf</span>+2Xz16P6dIZYD/ladZZtyKQMJ/tdpy7WLepj5akpPB+hF8zolrNd5IacbsAxXDWX1vS5I9Pj4fnCA==</span><br></pre></td></tr></table></figure><p>添加用户<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mosquitto_passwd --help 了解到使用 -c 会覆盖密码文件中的内容，也就是添加一个用户后会覆盖以前的账户信息</span></span><br><span class="line">mosquitto_passwd -c /etc/mosquitto/pwfile username</span><br><span class="line"><span class="comment"># mosquitto_passwd -d 新增一个用户密码</span></span><br><span class="line">mosquitto_passwd -d /etc/mosquitto/pwfile username password</span><br></pre></td></tr></table></figure><p></p><p>设置好密码</p><h4 id="添加Topic和用户的关系"><a href="#添加Topic和用户的关系" class="headerlink" title="添加Topic和用户的关系"></a>添加Topic和用户的关系</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># vim /etc/mosquitto/aclfile</span></span><br><span class="line"><span class="comment"># This affects access control for clients with no username.</span></span><br><span class="line"><span class="comment">#topic read $SYS/#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This only affects clients with username "roger".</span></span><br><span class="line"><span class="comment">#user roger</span></span><br><span class="line"><span class="comment">#topic foo/bar</span></span><br><span class="line"><span class="comment">#user zhang</span></span><br><span class="line">user zhang</span><br><span class="line">topic <span class="built_in">read</span> mtopic/<span class="comment">#</span></span><br><span class="line"></span><br><span class="line">user zhang</span><br><span class="line">topic write mtopic/<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This affects all clients.</span></span><br><span class="line"><span class="comment"># pattern write $SYS/broker/connection/%c/state</span></span><br></pre></td></tr></table></figure><h4 id="重启测试"><a href="#重启测试" class="headerlink" title="重启测试"></a>重启测试</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost mosquitto]<span class="comment"># /etc/init.d/mosquitto restart</span></span><br><span class="line">Restarting mosquitto (via systemctl):                      [  确定  ]</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mq </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS 7 下安装mosquitto]]></title>
      <url>/install-mosquitto.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote><p><code>MQTT</code>（Message Queuing Telemetry Transport，消息队列遥测传输）是IBM开发的一个<code>即时通讯协议</code>，有可能成为物联网的重要组成部分。该协议支持所有平台，几乎可以把所有联网物品和外部连接起来，被用来当做传感器和制动器（比如通过Twitter让房屋联网）的通信协议。</p></blockquote><a id="more"></a><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><blockquote><p><code>MQTT协议</code>是为大量计算能力有限，且工作在低带宽、不可靠的网络的远程传感器和控制设备通讯而设计的协议，它具有以下主要的几项特性：<br>1、使用发布/订阅消息模式，提供一对多的消息发布，解除应用程序耦合；<br>2、对负载内容屏蔽的消息传输；<br>3、使用 TCP/IP 提供网络连接；<br>4、有三种消息发布服务质量：<br>“至多一次”，消息发布完全依赖底层 TCP/IP 网络。会发生消息丢失或重复。这一级别可用于如下情况，环境传感器数据，丢失一次读记录无所谓，因为不久后还会有第二次发送。<br>“至少一次”，确保消息到达，但消息重复可能会发生。<br>“只有一次”，确保消息到达一次。这一级别可用于如下情况，在计费系统中，消息重复或丢失会导致不正确的结果。<br>5、小型传输，开销很小（固定长度的头部是 2 字节），协议交换最小化，以降低网络流量；<br>6、使用 Last Will 和 Testament 特性通知有关各方客户端异常中断的机制；</p></blockquote><h3 id="CentOS-安装"><a href="#CentOS-安装" class="headerlink" title="CentOS 安装"></a>CentOS 安装</h3><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>在<code>/etc/yum.repos.d/</code>目录中新建一个<code>mosquitto.repo</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[home_oojah_mqtt]</span><br><span class="line"></span><br><span class="line">name=mqtt (CentOS_CentOS-7)</span><br><span class="line"></span><br><span class="line"><span class="built_in">type</span>=rpm-md</span><br><span class="line"></span><br><span class="line">baseurl=http://download.opensuse.org/repositories/home:/oojah:/mqtt/CentOS_CentOS-7/</span><br><span class="line"></span><br><span class="line">gpgcheck=1</span><br><span class="line"></span><br><span class="line">gpgkey=http://download.opensuse.org/repositories/home:/oojah:/mqtt/CentOS_CentOS-7//repodata/repomd.xml.key</span><br><span class="line"></span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure><p>执行 <code>yum search all mosquitto</code><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># yum search all mosquitto</span></span><br><span class="line">已加载插件：fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * epel: mirrors.ustc.edu.cn</span><br><span class="line">============================================================================================================= 匹配：mosquitto ==============================================================================================================</span><br><span class="line">mosquitto-clients.x86_64 : Mosquitto <span class="built_in">command</span> line publish/subscribe clients</span><br><span class="line">mosquitto-debuginfo.x86_64 : Debug information <span class="keyword">for</span> package mosquitto</span><br><span class="line">mosquitto-devel.x86_64 : Development files <span class="keyword">for</span> mosquitto</span><br><span class="line">mosquitto.x86_64 : An Open Source MQTT v3.1/v3.1.1 Broker</span><br><span class="line">libmosquitto-devel.x86_64 : MQTT C client library development files</span><br><span class="line">libmosquitto1.x86_64 : MQTT C client library</span><br><span class="line">libmosquittopp-devel.x86_64 : MQTT C++ client library development files</span><br><span class="line">libmosquittopp1.x86_64 : MQTT C++ client library</span><br></pre></td></tr></table></figure><p></p><h4 id="安装mosquitto客户端"><a href="#安装mosquitto客户端" class="headerlink" title="安装mosquitto客户端"></a>安装mosquitto客户端</h4><p>执行 <code>yum install -y mosquitto-clients.x86_64</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># yum install -y mosquitto-clients.x86_64</span></span><br></pre></td></tr></table></figure><h4 id="安装mosquitto服务"><a href="#安装mosquitto服务" class="headerlink" title="安装mosquitto服务"></a>安装mosquitto服务</h4><p>执行命令 <code>yum install mosquitto.x86_64</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># yum -y install mosquitto.x86_64</span></span><br></pre></td></tr></table></figure><h4 id="修改mosquitto-conf文件"><a href="#修改mosquitto-conf文件" class="headerlink" title="修改mosquitto.conf文件"></a>修改mosquitto.conf文件</h4><p>文件在<code>/etc/mosquitto/mosquitto.conf</code><br>下面是可以选择的参数 在 <code>/etc/mosquitto/mosquitto.conf.example</code> 中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># =================================================================</span></span><br><span class="line">  <span class="comment"># General configuration</span></span><br><span class="line">  <span class="comment"># =================================================================</span></span><br><span class="line">  <span class="comment"># 客户端心跳的间隔时间</span></span><br><span class="line">  <span class="comment">#retry_interval 20</span></span><br><span class="line">  <span class="comment"># 系统状态的刷新时间</span></span><br><span class="line">  <span class="comment">#sys_interval 10</span></span><br><span class="line">  <span class="comment"># 系统资源的回收时间，0表示尽快处理</span></span><br><span class="line">  <span class="comment">#store_clean_interval 10</span></span><br><span class="line">  <span class="comment"># 服务进程的PID</span></span><br><span class="line"> <span class="comment">#pid_file /var/run/mosquitto.pid</span></span><br><span class="line"> <span class="comment"># 服务进程的系统用户</span></span><br><span class="line"> <span class="comment">#user mosquitto</span></span><br><span class="line"> <span class="comment"># 客户端心跳消息的最大并发数</span></span><br><span class="line"> <span class="comment">#max_inflight_messages 10</span></span><br><span class="line"> <span class="comment"># 客户端心跳消息缓存队列</span></span><br><span class="line"> <span class="comment">#max_queued_messages 100</span></span><br><span class="line"> <span class="comment"># 用于设置客户端长连接的过期时间，默认永不过期</span></span><br><span class="line"> <span class="comment">#persistent_client_expiration</span></span><br><span class="line"><span class="comment"># =================================================================</span></span><br><span class="line"><span class="comment"># Default listener</span></span><br><span class="line"><span class="comment"># =================================================================</span></span><br><span class="line"><span class="comment"># 服务绑定的IP地址</span></span><br><span class="line"><span class="comment">#bind_address</span></span><br><span class="line"><span class="comment"># 服务绑定的端口号</span></span><br><span class="line"><span class="comment">#port 1883</span></span><br><span class="line"><span class="comment"># 允许的最大连接数，-1表示没有限制</span></span><br><span class="line"><span class="comment">#max_connections -1</span></span><br><span class="line"><span class="comment"># cafile：CA证书文件</span></span><br><span class="line"><span class="comment"># capath：CA证书目录</span></span><br><span class="line"><span class="comment"># certfile：PEM证书文件</span></span><br><span class="line"><span class="comment"># keyfile：PEM密钥文件</span></span><br><span class="line"><span class="comment">#cafile</span></span><br><span class="line"><span class="comment">#capath</span></span><br><span class="line"><span class="comment">#certfile</span></span><br><span class="line"><span class="comment">#keyfile</span></span><br><span class="line"><span class="comment"># 必须提供证书以保证数据安全性</span></span><br><span class="line"><span class="comment">#require_certificate false</span></span><br><span class="line"><span class="comment"># 若require_certificate值为true，use_identity_as_username也必须为true</span></span><br><span class="line"><span class="comment">#use_identity_as_username false</span></span><br><span class="line"><span class="comment"># 启用PSK（Pre-shared-key）支持</span></span><br><span class="line"><span class="comment">#psk_hint</span></span><br><span class="line"><span class="comment"># SSL/TSL加密算法，可以使用“openssl ciphers”命令获取</span></span><br><span class="line"><span class="comment"># as the output of that command.</span></span><br><span class="line"><span class="comment">#ciphers</span></span><br><span class="line"><span class="comment"># =================================================================</span></span><br><span class="line"><span class="comment"># Persistence</span></span><br><span class="line"><span class="comment"># =================================================================</span></span><br><span class="line"><span class="comment"># 消息自动保存的间隔时间</span></span><br><span class="line"><span class="comment">#autosave_interval 1800</span></span><br><span class="line"><span class="comment"># 消息自动保存功能的开关</span></span><br><span class="line"><span class="comment">#autosave_on_changes false</span></span><br><span class="line"><span class="comment"># 持久化功能的开关</span></span><br><span class="line">persistence <span class="literal">true</span></span><br><span class="line"><span class="comment"># 持久化DB文件</span></span><br><span class="line"><span class="comment">#persistence_file mosquitto.db</span></span><br><span class="line"><span class="comment"># 持久化DB文件目录</span></span><br><span class="line"><span class="comment">#persistence_location /var/lib/mosquitto/</span></span><br><span class="line"><span class="comment"># =================================================================</span></span><br><span class="line"><span class="comment"># Logging</span></span><br><span class="line"><span class="comment"># =================================================================</span></span><br><span class="line"><span class="comment"># 4种日志模式：stdout、stderr、syslog、topic</span></span><br><span class="line"><span class="comment"># none 则表示不记日志，此配置可以提升些许性能</span></span><br><span class="line">log_dest none</span><br><span class="line"><span class="comment"># 选择日志的级别（可设置多项）</span></span><br><span class="line"><span class="comment">#log_type error</span></span><br><span class="line"><span class="comment">#log_type warning</span></span><br><span class="line"><span class="comment">#log_type notice</span></span><br><span class="line"><span class="comment">#log_type information</span></span><br><span class="line"><span class="comment"># 是否记录客户端连接信息</span></span><br><span class="line"><span class="comment">#connection_messages true</span></span><br><span class="line"><span class="comment"># 是否记录日志时间</span></span><br><span class="line"><span class="comment">#log_timestamp true</span></span><br><span class="line"><span class="comment"># =================================================================</span></span><br><span class="line"><span class="comment"># Security</span></span><br><span class="line"><span class="comment"># =================================================================</span></span><br><span class="line"><span class="comment"># 客户端ID的前缀限制，可用于保证安全性</span></span><br><span class="line"><span class="comment">#clientid_prefixes</span></span><br><span class="line"><span class="comment"># 允许匿名用户</span></span><br><span class="line"><span class="comment">#allow_anonymous true</span></span><br><span class="line"><span class="comment"># 用户/密码文件，默认格式：username:password</span></span><br><span class="line"><span class="comment">#password_file</span></span><br><span class="line"><span class="comment"># PSK格式密码文件，默认格式：identity:key</span></span><br><span class="line"><span class="comment">#psk_file</span></span><br><span class="line"><span class="comment"># pattern write sensor/%u/data</span></span><br><span class="line"><span class="comment"># ACL权限配置，常用语法如下：</span></span><br><span class="line"><span class="comment"># 用户限制：user &lt;username&gt;</span></span><br><span class="line"><span class="comment"># 话题限制：topic [read|write] &lt;topic&gt;</span></span><br><span class="line"><span class="comment"># 正则限制：pattern write sensor/%u/data</span></span><br><span class="line"><span class="comment">#acl_file</span></span><br><span class="line"><span class="comment"># =================================================================</span></span><br><span class="line"><span class="comment"># Bridges</span></span><br><span class="line"><span class="comment"># =================================================================</span></span><br><span class="line"><span class="comment"># 允许服务之间使用“桥接”模式（可用于分布式部署）</span></span><br><span class="line"><span class="comment">#connection &lt;name&gt;</span></span><br><span class="line"><span class="comment">#address &lt;host&gt;[:&lt;port&gt;]</span></span><br><span class="line"><span class="comment">#topic &lt;topic&gt; [[[out | in | both] qos-level] local-prefix remote-prefix]</span></span><br><span class="line"><span class="comment"># 设置桥接的客户端ID</span></span><br><span class="line"><span class="comment">#clientid</span></span><br><span class="line">  <span class="comment"># 桥接断开时，是否清除远程服务器中的消息</span></span><br><span class="line">  <span class="comment">#cleansession false</span></span><br><span class="line">  <span class="comment"># 是否发布桥接的状态信息</span></span><br><span class="line">  <span class="comment">#notifications true</span></span><br><span class="line">  <span class="comment"># 设置桥接模式下，消息将会发布到的话题地址</span></span><br><span class="line">  <span class="comment"># $SYS/broker/connection/&lt;clientid&gt;/state</span></span><br><span class="line">  <span class="comment">#notification_topic</span></span><br><span class="line">  <span class="comment"># 设置桥接的keepalive数值</span></span><br><span class="line">  <span class="comment">#keepalive_interval 60</span></span><br><span class="line">  <span class="comment"># 桥接模式，目前有三种：automatic、lazy、once</span></span><br><span class="line">  <span class="comment">#start_type automatic</span></span><br><span class="line">  <span class="comment"># 桥接模式automatic的超时时间</span></span><br><span class="line">  <span class="comment">#restart_timeout 30</span></span><br><span class="line">  <span class="comment"># 桥接模式lazy的超时时间</span></span><br><span class="line">  <span class="comment">#idle_timeout 60</span></span><br><span class="line">  <span class="comment"># 桥接客户端的用户名</span></span><br><span class="line">  <span class="comment">#username</span></span><br><span class="line">  <span class="comment"># 桥接客户端的密码</span></span><br><span class="line">  <span class="comment">#password</span></span><br><span class="line">  <span class="comment"># bridge_cafile：桥接客户端的CA证书文件</span></span><br><span class="line">  <span class="comment"># bridge_capath：桥接客户端的CA证书目录</span></span><br><span class="line">  <span class="comment"># bridge_certfile：桥接客户端的PEM证书文件</span></span><br><span class="line">  <span class="comment"># bridge_keyfile：桥接客户端的PEM密钥文件</span></span><br><span class="line">  <span class="comment">#bridge_cafile</span></span><br><span class="line">  <span class="comment">#bridge_capath</span></span><br><span class="line">  <span class="comment">#bridge_certfile</span></span><br><span class="line">  <span class="comment">#bridge_keyfile</span></span><br><span class="line">  <span class="comment"># 自己的配置可以放到以下目录中</span></span><br><span class="line">  include_dir /etc/mosquitto/conf.d</span><br></pre></td></tr></table></figure><h4 id="CentOS-中第二种方式安装"><a href="#CentOS-中第二种方式安装" class="headerlink" title="CentOS 中第二种方式安装"></a>CentOS 中第二种方式安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ yum install epel-release</span><br><span class="line">$ yum install mosquitto</span><br><span class="line">$ service mosquitto start</span><br></pre></td></tr></table></figure><h3 id="Ubuntu-安装"><a href="#Ubuntu-安装" class="headerlink" title="Ubuntu 安装"></a>Ubuntu 安装</h3><h4 id="安装-mqtt"><a href="#安装-mqtt" class="headerlink" title="安装 mqtt"></a>安装 mqtt</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-add-repository ppa:mosquitto-dev/mosquitto-ppa</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install mosquitto</span><br><span class="line">$ sudo apt-get install mosquitto-clients</span><br></pre></td></tr></table></figure><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>在 <code>/etc/mosquitto/</code> 下，跟 上面 CentOS 中一样配置就行，它没生成 <code>pwfile</code>和 <code>aclfile</code>，需要自己配置。</p><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mosquitto -c /etc/mosquitto/mosquitto.conf -d</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost mosquitto]<span class="comment"># service mosquitto start</span></span><br><span class="line">Restarting mosquitto (via systemctl):                      [  确定  ]</span><br></pre></td></tr></table></figure><p>重启</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>一个完整的MQTT示例包括一个代理服务器器，一个发布者和一个订阅者。<br>我使用的是一台服务机，只是开了三个控制台窗口。</p><ul><li>订阅者通过mosquitto_sub订阅指定主题的消息。</li><li>发布者通过mosquitto_pub发布指定主题的消息。</li><li>代理服务器把该主题的消息推送到订阅者。</li></ul><ol><li><p>第一个控制台启动代码服务器；mosquitto -v</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost yum.repos.d]<span class="comment"># mosquitto -v</span></span><br><span class="line">1516350767: mosquitto version 1.4.14 (build date 2017-09-14 18:40:30+0000) starting</span><br><span class="line">1516350767: Using default config.</span><br><span class="line">1516350767: Opening ipv4 listen socket on port 1883.</span><br><span class="line">1516350767: Opening ipv6 listen socket on port 1883.</span><br></pre></td></tr></table></figure></li><li><p>第二个窗口订阅主题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mosquitto_sub  -v -t wuwii</span></span><br></pre></td></tr></table></figure></li></ol><p>并且可以在第一个窗口发现订阅连接上，并且发送心跳消息：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1516351070: New connection from ::1 on port 1883.</span><br><span class="line">1516351070: New client connected from ::1 as mosqsub|1964-localhost (c1, k60).</span><br><span class="line">1516351070: Sending CONNACK to mosqsub|1964-localhost (0, 0)</span><br><span class="line">1516351070: Received SUBSCRIBE from mosqsub|1964-localhost</span><br><span class="line">1516351070:     wuwii (QoS 0)</span><br><span class="line">1516351070: mosqsub|1964-localhost 0 wuwii</span><br><span class="line">1516351070: Sending SUBACK to mosqsub|1964-localhost</span><br><span class="line">1516351130: Received PINGREQ from mosqsub|1964-localhost</span><br><span class="line">1516351130: Sending PINGRESP to mosqsub|1964-localhost</span><br></pre></td></tr></table></figure><p></p><ol start="3"><li>第三个窗口发布主题：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mosquitto_pub -t wuwii -m 我发送消息了</span></span><br></pre></td></tr></table></figure></li></ol><p>在第二个窗口（订阅者）查看到：<br><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fnm0ed7suuj20bd01at8i.jpg" alt=""></p><p>在第一个窗口（服务器）查看到：<br><img src="https://ws1.sinaimg.cn/large/ece1c17dgy1fnm0j558vjj20mg09owfm.jpg" alt=""></p><p>可以看到连接、消息发布和心跳等调试信息，好了测试完成。</p><p>主要还是根据需求来配置好用户和加密，用的时候需要了解mqtt协议。</p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
            <tag> MQTT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[fastDFS与java整合文件上传下载]]></title>
      <url>/fsds-java.html</url>
      <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><!-- build time:Tue Oct 12 2021 16:35:42 GMT+0800 (GMT+08:00) --><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ol><li>下载<code>fastdfs-client-java</code>源码</li></ol><p><a rel="external nofollow noopener noreferrer" target="_blank" href="http://pan.baidu.com/s/1i5QQXcL">源码地址</a> 密码：<code>s3sw</code></p><a id="more"></a><ol start="2"><li><p>修改<code>pom.xml</code><br><strong>第一个plugins是必需要的，是maven用来编译的插件，第二个是maven打源码包的，可以不要。</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;jdk.version&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;jdk.version&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-sources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>将 <code>fastdfs-client-java</code> 打包<br>直接项目右键，run as maven install<br>install成功后，fastdfs-client-java就成功的被安装到本地仓库了。</p></li></ol><hr><h3 id="编写工具类："><a href="#编写工具类：" class="headerlink" title="编写工具类："></a>编写工具类：</h3><ul><li>把<code>fdfs_client.conf</code>文件复制一份放到自己项目的resource下面;修改里面的<code>tracker.server</code>,其它的都不用动：</li><li>在项目的<code>pom.xml</code>中添加依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.csource<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastdfs-client-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.27-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>首先来实现文件上传，<code>fastdfs-client-java</code>的上传是通过传入一个byte[ ]来完成的，简单看一下源码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] upload_file(<span class="keyword">byte</span>[] file_buff, String file_ext_name, </span><br><span class="line">           NameValuePair[] meta_list) <span class="keyword">throws</span> IOException, MyException&#123;</span><br><span class="line">    <span class="keyword">final</span> String group_name = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.upload_file(group_name, file_buff, <span class="number">0</span>, file_buff.length, file_ext_name, meta_list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a>文件属性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuwii.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> FastDFSFile</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> FastDFS上传文件业务对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangkai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017年7月18日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastDFSFile</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2637755431406080379L</span>;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 文件二进制</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">byte</span>[] content;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 文件名称</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 文件长度</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> Long size;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">FastDFSFile</span><span class="params">()</span></span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">FastDFSFile</span><span class="params">(<span class="keyword">byte</span>[] content, String name, Long size)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.content = content;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">		<span class="keyword">this</span>.size = size;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">byte</span>[] getContent() &#123;</span><br><span class="line">		<span class="keyword">return</span> content;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(<span class="keyword">byte</span>[] content)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.content = content;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Long <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> size;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSize</span><span class="params">(Long size)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.size = size;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getSerialversionuid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> serialVersionUID;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编写FastDFS工具类"><a href="#编写FastDFS工具类" class="headerlink" title="编写FastDFS工具类"></a>编写FastDFS工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuwii.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FilenameUtils;</span><br><span class="line"><span class="keyword">import</span> org.csource.common.NameValuePair;</span><br><span class="line"><span class="keyword">import</span> org.csource.fastdfs.ClientGlobal;</span><br><span class="line"><span class="keyword">import</span> org.csource.fastdfs.StorageClient1;</span><br><span class="line"><span class="keyword">import</span> org.csource.fastdfs.TrackerClient;</span><br><span class="line"><span class="keyword">import</span> org.csource.fastdfs.TrackerServer;</span><br><span class="line"><span class="keyword">import</span> org.jetbrains.annotations.NotNull;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ClassPathResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> FastDFSUtils</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> FastDFS工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangkai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017年7月18日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastDFSUtils</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">4462272673174266738L</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> TrackerClient trackerClient;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> TrackerServer trackerServer;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> StorageClient1 storageClient1;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        	<span class="comment">//clientGloble读配置文件</span></span><br><span class="line">        	ClassPathResource resource = <span class="keyword">new</span> ClassPathResource(<span class="string">"fdfs_client.conf"</span>);</span><br><span class="line">        	ClientGlobal.init(resource.getClassLoader().getResource(<span class="string">"fdfs_client.conf"</span>).getPath());</span><br><span class="line">			<span class="comment">//trackerclient</span></span><br><span class="line">        	trackerClient = <span class="keyword">new</span> TrackerClient();</span><br><span class="line">			trackerServer = trackerClient.getConnection();</span><br><span class="line">			<span class="comment">//storageclient</span></span><br><span class="line">			storageClient1 = <span class="keyword">new</span> StorageClient1(trackerServer,<span class="keyword">null</span>); </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * fastDFS文件上传</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> file 上传的文件 FastDFSFile</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> String 返回文件的绝对路径</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">uploadFile</span><span class="params">(FastDFSFile file)</span></span>&#123;</span><br><span class="line">		String path = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//文件扩展名</span></span><br><span class="line">			String ext = FilenameUtils.getExtension(file.getName());</span><br><span class="line">			<span class="comment">//mata list是表文件的描述</span></span><br><span class="line">			NameValuePair[] mata_list = <span class="keyword">new</span> NameValuePair[<span class="number">3</span>];</span><br><span class="line">			mata_list[<span class="number">0</span>] = <span class="keyword">new</span> NameValuePair(<span class="string">"fileName"</span>,file.getName());</span><br><span class="line">			mata_list[<span class="number">1</span>] = <span class="keyword">new</span> NameValuePair(<span class="string">"fileExt"</span>,ext);</span><br><span class="line">			mata_list[<span class="number">2</span>] = <span class="keyword">new</span> NameValuePair(<span class="string">"fileSize"</span>,String.valueOf(file.getSize()));</span><br><span class="line">			path = storageClient1.upload_file1(file.getContent(), ext, mata_list);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; </span><br><span class="line">		<span class="keyword">return</span> path;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * fastDFS文件下载</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> groupName 组名</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> remoteFileName 文件名</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> specFileName 真实文件名</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> ResponseEntity&lt;byte[]&gt;</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@org</span>.jetbrains.annotations.NotNull</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; downloadFile(String groupName, String remoteFileName, String specFileName)&#123;</span><br><span class="line">		<span class="keyword">byte</span>[] content = <span class="keyword">null</span>;</span><br><span class="line">	    HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">	    <span class="keyword">try</span> &#123;</span><br><span class="line">	        content = storageClient1.download_file(groupName, remoteFileName);</span><br><span class="line">	        headers.setContentDispositionFormData(<span class="string">"attachment"</span>,  <span class="keyword">new</span> String(specFileName.getBytes(<span class="string">"UTF-8"</span>),<span class="string">"iso-8859-1"</span>));</span><br><span class="line">	        headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);</span><br><span class="line">	    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">	        e.printStackTrace();</span><br><span class="line">	    &#125;</span><br><span class="line">	    <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt;(content, headers, HttpStatus.CREATED);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 根据fastDFS返回的path得到文件的组名</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> path fastDFS返回的path</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getGroupFormFilePath</span><span class="params">(String path)</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> path.split(<span class="string">"/"</span>)[<span class="number">0</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 根据fastDFS返回的path得到文件名</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> path fastDFS返回的path</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@NotNull</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFileNameFormFilePath</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> path.substring(path.indexOf(<span class="string">"/"</span>)+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试Controller"><a href="#测试Controller" class="headerlink" title="测试Controller"></a>测试Controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuwii.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wuwii.utils.FastDFSFile;</span><br><span class="line"><span class="keyword">import</span> com.wuwii.utils.FastDFSUtils;</span><br><span class="line"><span class="keyword">import</span> com.wuwii.utils.PropertyUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * FastFDS控制器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangkai</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/fastdfs"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastFDSController</span> </span>&#123;</span><br><span class="line">	 <span class="meta">@RequestMapping</span>(value = <span class="string">"/upload"</span>, method = RequestMethod.POST)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">upload</span> <span class="params">(MultipartFile file)</span></span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			FastDFSFile fastDFSFile = <span class="keyword">new</span> FastDFSFile(file.getBytes(), file.getOriginalFilename(), file.getSize());</span><br><span class="line">			String path = FastDFSUtils.uploadFile(fastDFSFile);</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"redirect:"</span>+ PropertyUtil.get(<span class="string">"fastFDS_server"</span>) + path;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	 </span><br><span class="line">	 <span class="meta">@RequestMapping</span>(value = <span class="string">"/download"</span>)</span><br><span class="line">	 <span class="keyword">public</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; download (String path, String specFileName)&#123;</span><br><span class="line">		 String filename = FastDFSUtils.getFileNameFormFilePath(path);</span><br><span class="line">		 String group = FastDFSUtils.getGroupFormFilePath(path);</span><br><span class="line">		 <span class="keyword">return</span> FastDFSUtils.downloadFile(group, filename, specFileName);</span><br><span class="line">	 &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="最后附上读取配置文件的工具类PropertyUtil"><a href="#最后附上读取配置文件的工具类PropertyUtil" class="headerlink" title="最后附上读取配置文件的工具类PropertyUtil"></a>最后附上读取配置文件的工具类PropertyUtil</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wuwii.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span> PropertyUtil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 读取配置文件的内容（key，value）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhangkai</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2017年7月18日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertyUtil</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Properties PROP = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@Method</span>: get </span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@Description</span>: 读取配置文件的内容（key，value）</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (PROP.isEmpty()) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				InputStream in = PropertyUtil.class.getResourceAsStream(<span class="string">"/config.properties"</span>);</span><br><span class="line">				PROP.load(in);</span><br><span class="line">				in.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> PROP.getProperty(key);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="上传"><a href="#上传" class="headerlink" title="上传!"></a>上传!</h4><p><img src="http://img.blog.csdn.net/20170917111957613?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzU5MTUzODQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="猫咪"></p><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>下载就很简单了，因为直接获得到二进制流了，返回给客户端即可。<br>下载需要主要的是，要注意从FastDFS返回的文件名是这种随机码，因此我们需要在上传的时候将文件本身的名字存到数据库，再到下载的时候对文件头重新设置名字即可。</p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> fastDFS </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
